/***

    Copyright (C) 2012 Ubiquiti Networks, Inc.
    All Rights Reserved.

    This file includes source code derived from different libraries that
    are originally available under various licenses. The copyrights and
    licenses for these libraries are included below.

***/

/*** datatables.js

Copyright (c) 2008-2010, Allan Jardine
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of Allan Jardine nor SpryMedia UK may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

***/

/*** jquery.ui.selectmenu.js

jQuery UI selectmenu dev version

Copyright (c) 2009 AUTHORS.txt (http://jqueryui.com/about)

Copyright (c) 2012 Paul Bakaus, http://jqueryui.com/

This software consists of voluntary contributions made by many
individuals (AUTHORS.txt, http://jqueryui.com/about) For exact
contribution history, see the revision history and logs, available
at http://jquery-ui.googlecode.com/svn/

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

***/

/*** jquery.validate.min.js

jQuery Validation Plugin 1.9.0
http://bassistance.de/jquery-plugins/jquery-plugin-validation/
Copyright (c) 2006 - 2011 Jï¿½rn Zaefferer
Licensed under the MIT license.
http://www.opensource.org/licenses/mit-license.php

***/

/*** underscore.js

//     Underscore.js 1.3.3
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore is freely distributable under the MIT license.
//     Portions of Underscore are inspired or borrowed from Prototype,
//     Oliver Steele's Functional, and John Resig's Micro-Templating.
//     For all details and documentation:
//     http://documentcloud.github.com/underscore

***/

/*** backbone.js

//     Backbone.js 0.9.2
//     (c) 2010-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

***/

/*** swfobject.js

SWFObject v2.2 <http://code.google.com/p/swfobject/>
is released under the MIT License
<http://www.opensource.org/licenses/mit-license.php>

***/

/*** jquery.layout.js

 * Copyright (c) 2008
 *   Fabrizio Balliano (http://www.fabrizioballiano.net)
 *   Kevin Dalman (http://allpro.net)

 Licensed under the MIT license
 (http://www.opensource.org/licenses/mit-license.php)

***/

 (function($window$$, $document$$, $undefined$$) {
	var $factory$$ = function $$factory$$$($$$$) {
		var $DataTable$$ = function $$DataTable$$$($oInit$$) {
			function $_fnAddColumn$$($oSettings$$, $nTh$$) {
				var $oCol_oDefaults_oPre$$ = $DataTable$$.defaults.columns,
				$iCol$$ = $oSettings$$.aoColumns.length,
				$oCol_oDefaults_oPre$$ = $$$$.extend({},
				$DataTable$$.models.oColumn, $oCol_oDefaults_oPre$$, {
					sSortingClass: $oSettings$$.oClasses.sSortable,
					sSortingClassJUI: $oSettings$$.oClasses.sSortJUI,
					nTh: $nTh$$ ? $nTh$$: $document$$.createElement("th"),
					sTitle: $oCol_oDefaults_oPre$$.sTitle ? $oCol_oDefaults_oPre$$.sTitle: $nTh$$ ? $nTh$$.innerHTML: "",
					aDataSort: $oCol_oDefaults_oPre$$.aDataSort ? $oCol_oDefaults_oPre$$.aDataSort: [$iCol$$],
					mData: $oCol_oDefaults_oPre$$.mData ? $oCol_oDefaults_oPre$$.oDefaults: $iCol$$
				});
				$oSettings$$.aoColumns.push($oCol_oDefaults_oPre$$);
				if ($oSettings$$.aoPreSearchCols[$iCol$$] === $undefined$$ || null === $oSettings$$.aoPreSearchCols[$iCol$$]) $oSettings$$.aoPreSearchCols[$iCol$$] = $$$$.extend({},
				$DataTable$$.models.oSearch);
				else if ($oCol_oDefaults_oPre$$ =
				$oSettings$$.aoPreSearchCols[$iCol$$], $oCol_oDefaults_oPre$$.bRegex === $undefined$$ && ($oCol_oDefaults_oPre$$.bRegex = !0), $oCol_oDefaults_oPre$$.bSmart === $undefined$$ && ($oCol_oDefaults_oPre$$.bSmart = !0), $oCol_oDefaults_oPre$$.bCaseInsensitive === $undefined$$) $oCol_oDefaults_oPre$$.bCaseInsensitive = !0;
				$_fnColumnOptions$$($oSettings$$, $iCol$$, null)
			}
			function $_fnColumnOptions$$($oSettings$$, $iCol$$, $oOptions$$) {
				var $oCol$$ = $oSettings$$.aoColumns[$iCol$$];
				$oOptions$$ !== $undefined$$ && null !== $oOptions$$ && ($oOptions$$.mDataProp &&
				!$oOptions$$.mData && ($oOptions$$.mData = $oOptions$$.mDataProp), $oOptions$$.sType !== $undefined$$ && ($oCol$$.sType = $oOptions$$.sType, $oCol$$._bAutoType = !1), $$$$.extend($oCol$$, $oOptions$$), $_fnMap$$($oCol$$, $oOptions$$, "sWidth", "sWidthOrig"), $oOptions$$.iDataSort !== $undefined$$ && ($oCol$$.aDataSort = [$oOptions$$.iDataSort]), $_fnMap$$($oCol$$, $oOptions$$, "aDataSort"));
				var $mRender$$ = $oCol$$.mRender ? $_fnGetObjectDataFn$$($oCol$$.mRender) : null,
				$mData$$ = $_fnGetObjectDataFn$$($oCol$$.mData);
				$oCol$$.fnGetData =
				function $$oCol$$$fnGetData$($oData$$, $sSpecific$$) {
					var $innerData$$ = $mData$$($oData$$, $sSpecific$$);
					return $oCol$$.mRender && $sSpecific$$ && "" !== $sSpecific$$ ? $mRender$$($innerData$$, $sSpecific$$, $oData$$) : $innerData$$
				};
				$oCol$$.fnSetData = $_fnSetObjectDataFn$$($oCol$$.mData);
				$oSettings$$.oFeatures.bSort || ($oCol$$.bSortable = !1); ! $oCol$$.bSortable || -1 == $$$$.inArray("asc", $oCol$$.asSorting) && -1 == $$$$.inArray("desc", $oCol$$.asSorting) ? ($oCol$$.sSortingClass = $oSettings$$.oClasses.sSortableNone, $oCol$$.sSortingClassJUI =
				"") : -1 == $$$$.inArray("asc", $oCol$$.asSorting) && -1 == $$$$.inArray("desc", $oCol$$.asSorting) ? ($oCol$$.sSortingClass = $oSettings$$.oClasses.sSortable, $oCol$$.sSortingClassJUI = $oSettings$$.oClasses.sSortJUI) : -1 != $$$$.inArray("asc", $oCol$$.asSorting) && -1 == $$$$.inArray("desc", $oCol$$.asSorting) ? ($oCol$$.sSortingClass = $oSettings$$.oClasses.sSortableAsc, $oCol$$.sSortingClassJUI = $oSettings$$.oClasses.sSortJUIAscAllowed) : -1 == $$$$.inArray("asc", $oCol$$.asSorting) && -1 != $$$$.inArray("desc", $oCol$$.asSorting) && ($oCol$$.sSortingClass =
				$oSettings$$.oClasses.sSortableDesc, $oCol$$.sSortingClassJUI = $oSettings$$.oClasses.sSortJUIDescAllowed)
			}
			function $_fnAdjustColumnSizing$$($oSettings$$) {
				if (!1 === $oSettings$$.oFeatures.bAutoWidth) return ! 1;
				$_fnCalculateColumnWidths$$($oSettings$$);
				for (var $i$$ = 0, $iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $iLen$$; $i$$++) $oSettings$$.aoColumns[$i$$].nTh.style.width = $oSettings$$.aoColumns[$i$$].sWidth
			}
			function $_fnVisibleToColumnIndex$$($oSettings$$, $iMatch$$) {
				var $aiVis$$ = $_fnGetColumns$$($oSettings$$,
				"bVisible");
				return "number" === typeof $aiVis$$[$iMatch$$] ? $aiVis$$[$iMatch$$] : null
			}
			function $_fnColumnIndexToVisible$$($oSettings$$, $iMatch$$) {
				var $aiVis$$ = $_fnGetColumns$$($oSettings$$, "bVisible"),
				$aiVis$$ = $$$$.inArray($iMatch$$, $aiVis$$);
				return - 1 !== $aiVis$$ ? $aiVis$$: null
			}
			function $_fnVisbleColumns$$($oSettings$$) {
				return $_fnGetColumns$$($oSettings$$, "bVisible").length
			}
			function $_fnGetColumns$$($oSettings$$, $sParam$$) {
				var $a$$ = [];
				$$$$.map($oSettings$$.aoColumns,
				function($val$$, $i$$) {
					$val$$[$sParam$$] &&
					$a$$.push($i$$)
				});
				return $a$$
			}
			function $_fnDetectType$$($sData$$) {
				for (var $aTypes$$ = $DataTable$$.ext.aTypes, $iLen$$ = $aTypes$$.length, $i$$ = 0; $i$$ < $iLen$$; $i$$++) {
					var $sType$$ = $aTypes$$[$i$$]($sData$$);
					if (null !== $sType$$) return $sType$$
				}
				return "string"
			}
			function $_fnReOrderIndex$$($oSettings$$, $sColumns$$) {
				for (var $aColumns$$ = $sColumns$$.split(","), $aiReturn$$ = [], $i$$ = 0, $iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $iLen$$; $i$$++) for (var $j$$ = 0; $j$$ < $iLen$$; $j$$++) if ($oSettings$$.aoColumns[$i$$].sName ==
				$aColumns$$[$j$$]) {
					$aiReturn$$.push($j$$);
					break
				}
				return $aiReturn$$
			}
			function $_fnColumnOrdering$$($oSettings$$) {
				for (var $sNames$$ = "", $i$$ = 0, $iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $iLen$$; $i$$++) $sNames$$ += $oSettings$$.aoColumns[$i$$].sName + ",";
				return $sNames$$.length == $iLen$$ ? "": $sNames$$.slice(0, -1)
			}
			function $_fnApplyColumnDefs$$($iLen$$4_oSettings$$, $aoColDefs$$, $aoCols$$, $fn$$) {
				var $i$$,
				$j$$,
				$jLen$$,
				$k$$,
				$kLen$$;
				if ($aoColDefs$$) for ($i$$ = $aoColDefs$$.length - 1; 0 <= $i$$; $i$$--) {
					var $aTargets$$ =
					$aoColDefs$$[$i$$].aTargets;
					$$$$.isArray($aTargets$$) || $_fnLog$$($iLen$$4_oSettings$$, 1, "aTargets must be an array of targets, not a " + typeof $aTargets$$);
					$j$$ = 0;
					for ($jLen$$ = $aTargets$$.length; $j$$ < $jLen$$; $j$$++) if ("number" === typeof $aTargets$$[$j$$] && 0 <= $aTargets$$[$j$$]) {
						for (; $iLen$$4_oSettings$$.aoColumns.length <= $aTargets$$[$j$$];) $_fnAddColumn$$($iLen$$4_oSettings$$);
						$fn$$($aTargets$$[$j$$], $aoColDefs$$[$i$$])
					} else if ("number" === typeof $aTargets$$[$j$$] && 0 > $aTargets$$[$j$$]) $fn$$($iLen$$4_oSettings$$.aoColumns.length +
					$aTargets$$[$j$$], $aoColDefs$$[$i$$]);
					else if ("string" === typeof $aTargets$$[$j$$]) {
						$k$$ = 0;
						for ($kLen$$ = $iLen$$4_oSettings$$.aoColumns.length; $k$$ < $kLen$$; $k$$++)("_all" == $aTargets$$[$j$$] || $$$$($iLen$$4_oSettings$$.aoColumns[$k$$].nTh).hasClass($aTargets$$[$j$$])) && $fn$$($k$$, $aoColDefs$$[$i$$])
					}
				}
				if ($aoCols$$) {
					$i$$ = 0;
					for ($iLen$$4_oSettings$$ = $aoCols$$.length; $i$$ < $iLen$$4_oSettings$$; $i$$++) $fn$$($i$$, $aoCols$$[$i$$])
				}
			}
			function $_fnAddData$$($oSettings$$, $aDataSupplied$$) {
				var $aDataIn_oCol$$;
				$aDataIn_oCol$$ =
				$$$$.isArray($aDataSupplied$$) ? $aDataSupplied$$.slice() : $$$$.extend(!0, {},
				$aDataSupplied$$);
				var $iRow$$ = $oSettings$$.aoData.length,
				$i$$8_oData$$ = $$$$.extend(!0, {},
				$DataTable$$.models.oRow);
				$i$$8_oData$$._aData = $aDataIn_oCol$$;
				$oSettings$$.aoData.push($i$$8_oData$$);
				for (var $sThisType_sVarType$$, $i$$8_oData$$ = 0, $iLen$$ = $oSettings$$.aoColumns.length; $i$$8_oData$$ < $iLen$$; $i$$8_oData$$++) $aDataIn_oCol$$ = $oSettings$$.aoColumns[$i$$8_oData$$],
				"function" === typeof $aDataIn_oCol$$.fnRender && $aDataIn_oCol$$.bUseRendered &&
				null !== $aDataIn_oCol$$.mData ? $_fnSetCellData$$($oSettings$$, $iRow$$, $i$$8_oData$$, $_fnRender$$($oSettings$$, $iRow$$, $i$$8_oData$$)) : $_fnSetCellData$$($oSettings$$, $iRow$$, $i$$8_oData$$, $_fnGetCellData$$($oSettings$$, $iRow$$, $i$$8_oData$$)),
				$aDataIn_oCol$$._bAutoType && "string" != $aDataIn_oCol$$.sType && ($sThisType_sVarType$$ = $_fnGetCellData$$($oSettings$$, $iRow$$, $i$$8_oData$$, "type"), null !== $sThisType_sVarType$$ && "" !== $sThisType_sVarType$$ && ($sThisType_sVarType$$ = $_fnDetectType$$($sThisType_sVarType$$),
				null === $aDataIn_oCol$$.sType ? $aDataIn_oCol$$.sType = $sThisType_sVarType$$: $aDataIn_oCol$$.sType != $sThisType_sVarType$$ && "html" != $aDataIn_oCol$$.sType && ($aDataIn_oCol$$.sType = "string")));
				$oSettings$$.aiDisplayMaster.push($iRow$$);
				$oSettings$$.oFeatures.bDeferRender || $_fnCreateTr$$($oSettings$$, $iRow$$);
				return $iRow$$
			}
			function $_fnGatherData$$($oSettings$$) {
				var $i$$,
				$iColumn_iLen$$,
				$jInner_nTds$$,
				$iColumns_nTrs$$,
				$nTd$$1_oData$$,
				$iRow$$,
				$oCol$$;
				if ($oSettings$$.bDeferLoading || null === $oSettings$$.sAjaxSource) for ($i$$ =
				$oSettings$$.nTBody.firstChild; $i$$;) {
					if ("TR" == $i$$.nodeName.toUpperCase()) {
						$iColumn_iLen$$ = $oSettings$$.aoData.length;
						$i$$._DT_RowIndex = $iColumn_iLen$$;
						$oSettings$$.aoData.push($$$$.extend(!0, {},
						$DataTable$$.models.oRow, {
							nTr: $i$$
						}));
						$oSettings$$.aiDisplayMaster.push($iColumn_iLen$$);
						$nTd$$1_oData$$ = $i$$.firstChild;
						for ($jInner_nTds$$ = 0; $nTd$$1_oData$$;) {
							$iRow$$ = $nTd$$1_oData$$.nodeName.toUpperCase();
							if ("TD" == $iRow$$ || "TH" == $iRow$$) $_fnSetCellData$$($oSettings$$, $iColumn_iLen$$, $jInner_nTds$$, $$$$.trim($nTd$$1_oData$$.innerHTML)),
							$jInner_nTds$$++;
							$nTd$$1_oData$$ = $nTd$$1_oData$$.nextSibling
						}
					}
					$i$$ = $i$$.nextSibling
				}
				$iColumns_nTrs$$ = $_fnGetTrNodes$$($oSettings$$);
				$jInner_nTds$$ = [];
				$i$$ = 0;
				for ($iColumn_iLen$$ = $iColumns_nTrs$$.length; $i$$ < $iColumn_iLen$$; $i$$++) for ($nTd$$1_oData$$ = $iColumns_nTrs$$[$i$$].firstChild; $nTd$$1_oData$$;) $iRow$$ = $nTd$$1_oData$$.nodeName.toUpperCase(),
				("TD" == $iRow$$ || "TH" == $iRow$$) && $jInner_nTds$$.push($nTd$$1_oData$$),
				$nTd$$1_oData$$ = $nTd$$1_oData$$.nextSibling;
				$iColumn_iLen$$ = 0;
				for ($iColumns_nTrs$$ = $oSettings$$.aoColumns.length; $iColumn_iLen$$ <
				$iColumns_nTrs$$; $iColumn_iLen$$++) {
					$oCol$$ = $oSettings$$.aoColumns[$iColumn_iLen$$];
					null === $oCol$$.sTitle && ($oCol$$.sTitle = $oCol$$.nTh.innerHTML);
					var $bAutoType$$ = $oCol$$._bAutoType,
					$bRender$$ = "function" === typeof $oCol$$.fnRender,
					$bClass$$ = null !== $oCol$$.sClass,
					$bVisible$$ = $oCol$$.bVisible,
					$nCell$$,
					$sRendered_sThisType$$;
					if ($bAutoType$$ || $bRender$$ || $bClass$$ || !$bVisible$$) {
						$iRow$$ = 0;
						for ($i$$ = $oSettings$$.aoData.length; $iRow$$ < $i$$; $iRow$$++) $nTd$$1_oData$$ = $oSettings$$.aoData[$iRow$$],
						$nCell$$ = $jInner_nTds$$[$iRow$$ *
						$iColumns_nTrs$$ + $iColumn_iLen$$],
						$bAutoType$$ && "string" != $oCol$$.sType && ($sRendered_sThisType$$ = $_fnGetCellData$$($oSettings$$, $iRow$$, $iColumn_iLen$$, "type"), "" !== $sRendered_sThisType$$ && ($sRendered_sThisType$$ = $_fnDetectType$$($sRendered_sThisType$$), null === $oCol$$.sType ? $oCol$$.sType = $sRendered_sThisType$$: $oCol$$.sType != $sRendered_sThisType$$ && "html" != $oCol$$.sType && ($oCol$$.sType = "string"))),
						$oCol$$.mRender ? $nCell$$.innerHTML = $_fnGetCellData$$($oSettings$$, $iRow$$, $iColumn_iLen$$, "display") :
						$oCol$$.mData !== $iColumn_iLen$$ && ($nCell$$.innerHTML = $_fnGetCellData$$($oSettings$$, $iRow$$, $iColumn_iLen$$, "display")),
						$bRender$$ && ($sRendered_sThisType$$ = $_fnRender$$($oSettings$$, $iRow$$, $iColumn_iLen$$), $nCell$$.innerHTML = $sRendered_sThisType$$, $oCol$$.bUseRendered && $_fnSetCellData$$($oSettings$$, $iRow$$, $iColumn_iLen$$, $sRendered_sThisType$$)),
						$bClass$$ && ($nCell$$.className += " " + $oCol$$.sClass),
						$bVisible$$ ? $nTd$$1_oData$$._anHidden[$iColumn_iLen$$] = null: ($nTd$$1_oData$$._anHidden[$iColumn_iLen$$] =
						$nCell$$, $nCell$$.parentNode.removeChild($nCell$$)),
						$oCol$$.fnCreatedCell && $oCol$$.fnCreatedCell.call($oSettings$$.oInstance, $nCell$$, $_fnGetCellData$$($oSettings$$, $iRow$$, $iColumn_iLen$$, "display"), $nTd$$1_oData$$._aData, $iRow$$, $iColumn_iLen$$)
					}
				}
				if (0 !== $oSettings$$.aoRowCreatedCallback.length) {
					$i$$ = 0;
					for ($iColumn_iLen$$ = $oSettings$$.aoData.length; $i$$ < $iColumn_iLen$$; $i$$++) $nTd$$1_oData$$ = $oSettings$$.aoData[$i$$],
					$_fnCallbackFire$$($oSettings$$, "aoRowCreatedCallback", null, [$nTd$$1_oData$$.nTr,
					$nTd$$1_oData$$._aData, $i$$])
				}
			}
			function $_fnNodeToDataIndex$$($oSettings$$, $n$$) {
				return $n$$._DT_RowIndex !== $undefined$$ ? $n$$._DT_RowIndex: null
			}
			function $_fnNodeToColumnIndex$$($iLen$$7_oSettings$$, $anCells_iRow$$, $n$$) {
				for (var $anCells_iRow$$ = $_fnGetTdNodes$$($iLen$$7_oSettings$$, $anCells_iRow$$), $i$$ = 0, $iLen$$7_oSettings$$ = $iLen$$7_oSettings$$.aoColumns.length; $i$$ < $iLen$$7_oSettings$$; $i$$++) if ($anCells_iRow$$[$i$$] === $n$$) return $i$$;
				return - 1
			}
			function $_fnGetRowData$$($oSettings$$, $iRow$$, $sSpecific$$,
			$aiColumns$$) {
				for (var $out$$ = [], $i$$ = 0, $iLen$$ = $aiColumns$$.length; $i$$ < $iLen$$; $i$$++) $out$$.push($_fnGetCellData$$($oSettings$$, $iRow$$, $aiColumns$$[$i$$], $sSpecific$$));
				return $out$$
			}
			function $_fnGetCellData$$($oSettings$$, $iRow$$, $iCol$$2_sData$$, $sSpecific$$) {
				var $oCol$$ = $oSettings$$.aoColumns[$iCol$$2_sData$$];
				if (($iCol$$2_sData$$ = $oCol$$.fnGetData($oSettings$$.aoData[$iRow$$]._aData, $sSpecific$$)) === $undefined$$) return $oSettings$$.iDrawError != $oSettings$$.iDraw && null === $oCol$$.sDefaultContent &&
				($_fnLog$$($oSettings$$, 0, "Requested unknown parameter " + ("function" == typeof $oCol$$.mData ? "{mData function}": "'" + $oCol$$.mData + "'") + " from the data source for row " + $iRow$$), $oSettings$$.iDrawError = $oSettings$$.iDraw),
				$oCol$$.sDefaultContent;
				if (null === $iCol$$2_sData$$ && null !== $oCol$$.sDefaultContent) $iCol$$2_sData$$ = $oCol$$.sDefaultContent;
				else if ("function" === typeof $iCol$$2_sData$$) return $iCol$$2_sData$$();
				return "display" == $sSpecific$$ && null === $iCol$$2_sData$$ ? "": $iCol$$2_sData$$
			}
			function $_fnSetCellData$$($oSettings$$,
			$iRow$$, $iCol$$, $val$$) {
				$oSettings$$.aoColumns[$iCol$$].fnSetData($oSettings$$.aoData[$iRow$$]._aData, $val$$)
			}
			function $_fnGetObjectDataFn$$($mSource$$) {
				if (null === $mSource$$) return function() {
					return null
				};
				if ("function" === typeof $mSource$$) return function($data$$, $type$$, $extra$$) {
					return $mSource$$($data$$, $type$$, $extra$$)
				};
				if ("string" === typeof $mSource$$ && ( - 1 !== $mSource$$.indexOf(".") || -1 !== $mSource$$.indexOf("["))) {
					var $fetchData$$ = function $$fetchData$$$($data$$, $type$$, $arrayNotation_src$$) {
						var $a$$ =
						$arrayNotation_src$$.split("."),
						$iLen$$9_out$$;
						if ("" !== $arrayNotation_src$$) {
							var $i$$12_j$$ = 0;
							for ($iLen$$9_out$$ = $a$$.length; $i$$12_j$$ < $iLen$$9_out$$; $i$$12_j$$++) {
								if ($arrayNotation_src$$ = $a$$[$i$$12_j$$].match($__reArray$$)) {
									$a$$[$i$$12_j$$] = $a$$[$i$$12_j$$].replace($__reArray$$, "");
									"" !== $a$$[$i$$12_j$$] && ($data$$ = $data$$[$a$$[$i$$12_j$$]]);
									$iLen$$9_out$$ = [];
									$a$$.splice(0, $i$$12_j$$ + 1);
									for (var $a$$ = $a$$.join("."), $i$$12_j$$ = 0, $jLen$$ = $data$$.length; $i$$12_j$$ < $jLen$$; $i$$12_j$$++) $iLen$$9_out$$.push($fetchData$$($data$$[$i$$12_j$$],
									$type$$, $a$$));
									$data$$ = $arrayNotation_src$$[0].substring(1, $arrayNotation_src$$[0].length - 1);
									$data$$ = "" === $data$$ ? $iLen$$9_out$$: $iLen$$9_out$$.join($data$$);
									break
								}
								if (null === $data$$ || $data$$[$a$$[$i$$12_j$$]] === $undefined$$) return $undefined$$;
								$data$$ = $data$$[$a$$[$i$$12_j$$]]
							}
						}
						return $data$$
					};
					return function($data$$, $type$$) {
						return $fetchData$$($data$$, $type$$, $mSource$$)
					}
				}
				return function($data$$) {
					return $data$$[$mSource$$]
				}
			}
			function $_fnSetObjectDataFn$$($mSource$$) {
				if (null === $mSource$$) return function() {};
				if ("function" === typeof $mSource$$) return function($data$$, $val$$) {
					$mSource$$($data$$, "set", $val$$)
				};
				if ("string" === typeof $mSource$$ && ( - 1 !== $mSource$$.indexOf(".") || -1 !== $mSource$$.indexOf("["))) {
					var $setData$$ = function $$setData$$$($data$$, $val$$, $a$$2_src$$) {
						var $a$$2_src$$ = $a$$2_src$$.split("."),
						$arrayNotation$$,
						$iLen$$10_innerSrc$$,
						$i$$ = 0;
						for ($iLen$$10_innerSrc$$ = $a$$2_src$$.length - 1; $i$$ < $iLen$$10_innerSrc$$; $i$$++) {
							if ($arrayNotation$$ = $a$$2_src$$[$i$$].match($__reArray$$)) {
								$a$$2_src$$[$i$$] =
								$a$$2_src$$[$i$$].replace($__reArray$$, "");
								$data$$[$a$$2_src$$[$i$$]] = [];
								$arrayNotation$$ = $a$$2_src$$.slice();
								$arrayNotation$$.splice(0, $i$$ + 1);
								$iLen$$10_innerSrc$$ = $arrayNotation$$.join(".");
								for (var $j$$ = 0, $jLen$$ = $val$$.length; $j$$ < $jLen$$; $j$$++) $arrayNotation$$ = {},
								$setData$$($arrayNotation$$, $val$$[$j$$], $iLen$$10_innerSrc$$),
								$data$$[$a$$2_src$$[$i$$]].push($arrayNotation$$);
								return
							}
							if (null === $data$$[$a$$2_src$$[$i$$]] || $data$$[$a$$2_src$$[$i$$]] === $undefined$$) $data$$[$a$$2_src$$[$i$$]] = {};
							$data$$ =
							$data$$[$a$$2_src$$[$i$$]]
						}
						$data$$[$a$$2_src$$[$a$$2_src$$.length - 1].replace($__reArray$$, "")] = $val$$
					};
					return function($data$$, $val$$) {
						return $setData$$($data$$, $val$$, $mSource$$)
					}
				}
				return function($data$$, $val$$) {
					$data$$[$mSource$$] = $val$$
				}
			}
			function $_fnGetDataMaster$$($oSettings$$) {
				for (var $aData$$ = [], $iLen$$ = $oSettings$$.aoData.length, $i$$ = 0; $i$$ < $iLen$$; $i$$++) $aData$$.push($oSettings$$.aoData[$i$$]._aData);
				return $aData$$
			}
			function $_fnClearTable$$($oSettings$$) {
				$oSettings$$.aoData.splice(0, $oSettings$$.aoData.length);
				$oSettings$$.aiDisplayMaster.splice(0, $oSettings$$.aiDisplayMaster.length);
				$oSettings$$.aiDisplay.splice(0, $oSettings$$.aiDisplay.length);
				$_fnCalculateEnd$$($oSettings$$)
			}
			function $_fnDeleteIndex$$($a$$, $iTarget$$) {
				for (var $iTargetIndex$$ = -1, $i$$ = 0, $iLen$$ = $a$$.length; $i$$ < $iLen$$; $i$$++) $a$$[$i$$] == $iTarget$$ ? $iTargetIndex$$ = $i$$: $a$$[$i$$] > $iTarget$$ && $a$$[$i$$]--; - 1 != $iTargetIndex$$ && $a$$.splice($iTargetIndex$$, 1)
			}
			function $_fnRender$$($oSettings$$, $iRow$$, $iCol$$) {
				var $oCol$$ = $oSettings$$.aoColumns[$iCol$$];
				return $oCol$$.fnRender({
					iDataRow: $iRow$$,
					iDataColumn: $iCol$$,
					oSettings: $oSettings$$,
					aData: $oSettings$$.aoData[$iRow$$]._aData,
					mDataProp: $oCol$$.mData
				},
				$_fnGetCellData$$($oSettings$$, $iRow$$, $iCol$$, "display"))
			}
			function $_fnCreateTr$$($oSettings$$, $iRow$$) {
				var $oData$$ = $oSettings$$.aoData[$iRow$$],
				$nTd$$;
				if (null === $oData$$.nTr) {
					$oData$$.nTr = $document$$.createElement("tr");
					$oData$$.nTr._DT_RowIndex = $iRow$$;
					$oData$$._aData.DT_RowId && ($oData$$.nTr.id = $oData$$._aData.DT_RowId);
					$oData$$._aData.DT_RowClass &&
					($oData$$.nTr.className = $oData$$._aData.DT_RowClass);
					for (var $i$$ = 0, $iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $iLen$$; $i$$++) {
						var $oCol$$ = $oSettings$$.aoColumns[$i$$];
						$nTd$$ = $document$$.createElement($oCol$$.sCellType);
						$nTd$$.innerHTML = "function" === typeof $oCol$$.fnRender && (!$oCol$$.bUseRendered || null === $oCol$$.mData) ? $_fnRender$$($oSettings$$, $iRow$$, $i$$) : $_fnGetCellData$$($oSettings$$, $iRow$$, $i$$, "display");
						null !== $oCol$$.sClass && ($nTd$$.className = $oCol$$.sClass);
						$oCol$$.bVisible ? ($oData$$.nTr.appendChild($nTd$$),
						$oData$$._anHidden[$i$$] = null) : $oData$$._anHidden[$i$$] = $nTd$$;
						$oCol$$.fnCreatedCell && $oCol$$.fnCreatedCell.call($oSettings$$.oInstance, $nTd$$, $_fnGetCellData$$($oSettings$$, $iRow$$, $i$$, "display"), $oData$$._aData, $iRow$$, $i$$)
					}
					$_fnCallbackFire$$($oSettings$$, "aoRowCreatedCallback", null, [$oData$$.nTr, $oData$$._aData, $iRow$$])
				}
			}
			function $_fnBuildHead$$($oSettings$$) {
				var $i$$,
				$anCells$$1_nTh$$,
				$iLen$$;
				if (0 !== $$$$("th, td", $oSettings$$.nTHead).length) {
					$i$$ = 0;
					for ($iLen$$ = $oSettings$$.aoColumns.length; $i$$ <
					$iLen$$; $i$$++) if ($anCells$$1_nTh$$ = $oSettings$$.aoColumns[$i$$].nTh, $anCells$$1_nTh$$.setAttribute("role", "columnheader"), $oSettings$$.aoColumns[$i$$].bSortable && ($anCells$$1_nTh$$.setAttribute("tabindex", $oSettings$$.iTabIndex), $anCells$$1_nTh$$.setAttribute("aria-controls", $oSettings$$.sTableId)), null !== $oSettings$$.aoColumns[$i$$].sClass && $$$$($anCells$$1_nTh$$).addClass($oSettings$$.aoColumns[$i$$].sClass), $oSettings$$.aoColumns[$i$$].sTitle != $anCells$$1_nTh$$.innerHTML) $anCells$$1_nTh$$.innerHTML =
					$oSettings$$.aoColumns[$i$$].sTitle
				} else {
					var $nDiv_nTr$$ = $document$$.createElement("tr");
					$i$$ = 0;
					for ($iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $iLen$$; $i$$++) $anCells$$1_nTh$$ = $oSettings$$.aoColumns[$i$$].nTh,
					$anCells$$1_nTh$$.innerHTML = $oSettings$$.aoColumns[$i$$].sTitle,
					$anCells$$1_nTh$$.setAttribute("tabindex", "0"),
					null !== $oSettings$$.aoColumns[$i$$].sClass && $$$$($anCells$$1_nTh$$).addClass($oSettings$$.aoColumns[$i$$].sClass),
					$nDiv_nTr$$.appendChild($anCells$$1_nTh$$);
					$$$$($oSettings$$.nTHead).html("")[0].appendChild($nDiv_nTr$$);
					$_fnDetectHeader$$($oSettings$$.aoHeader, $oSettings$$.nTHead)
				}
				$$$$($oSettings$$.nTHead).children("tr").attr("role", "row");
				if ($oSettings$$.bJUI) {
					$i$$ = 0;
					for ($iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $iLen$$; $i$$++) {
						$anCells$$1_nTh$$ = $oSettings$$.aoColumns[$i$$].nTh;
						$nDiv_nTr$$ = $document$$.createElement("div");
						$nDiv_nTr$$.className = $oSettings$$.oClasses.sSortJUIWrapper;
						$$$$($anCells$$1_nTh$$).contents().appendTo($nDiv_nTr$$);
						var $nSpan$$ = $document$$.createElement("span");
						$nSpan$$.className = $oSettings$$.oClasses.sSortIcon;
						$nDiv_nTr$$.appendChild($nSpan$$);
						$anCells$$1_nTh$$.appendChild($nDiv_nTr$$)
					}
				}
				if ($oSettings$$.oFeatures.bSort) for ($i$$ = 0; $i$$ < $oSettings$$.aoColumns.length; $i$$++) ! 1 !== $oSettings$$.aoColumns[$i$$].bSortable ? $_fnSortAttachListener$$($oSettings$$, $oSettings$$.aoColumns[$i$$].nTh, $i$$) : $$$$($oSettings$$.aoColumns[$i$$].nTh).addClass($oSettings$$.oClasses.sSortableNone);
				"" !== $oSettings$$.oClasses.sFooterTH && $$$$($oSettings$$.nTFoot).children("tr").children("th").addClass($oSettings$$.oClasses.sFooterTH);
				if (null !== $oSettings$$.nTFoot) {
					$anCells$$1_nTh$$ = $_fnGetUniqueThs$$($oSettings$$, null, $oSettings$$.aoFooter);
					$i$$ = 0;
					for ($iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $iLen$$; $i$$++) $anCells$$1_nTh$$[$i$$] && ($oSettings$$.aoColumns[$i$$].nTf = $anCells$$1_nTh$$[$i$$], $oSettings$$.aoColumns[$i$$].sClass && $$$$($anCells$$1_nTh$$[$i$$]).addClass($oSettings$$.aoColumns[$i$$].sClass))
				}
			}
			function $_fnDrawHead$$($nLocalTr_oSettings$$, $aoSource_jLen$$, $bIncludeHidden_k$$) {
				var $i$$,
				$iLen$$,
				$j$$6_n$$,
				$aoLocal$$ = [],
				$aApplied$$ = [],
				$iColumns$$ = $nLocalTr_oSettings$$.aoColumns.length,
				$iColspan$$;
				$bIncludeHidden_k$$ === $undefined$$ && ($bIncludeHidden_k$$ = !1);
				$i$$ = 0;
				for ($iLen$$ = $aoSource_jLen$$.length; $i$$ < $iLen$$; $i$$++) {
					$aoLocal$$[$i$$] = $aoSource_jLen$$[$i$$].slice();
					$aoLocal$$[$i$$].nTr = $aoSource_jLen$$[$i$$].nTr;
					for ($j$$6_n$$ = $iColumns$$ - 1; 0 <= $j$$6_n$$; $j$$6_n$$--) ! $nLocalTr_oSettings$$.aoColumns[$j$$6_n$$].bVisible && !$bIncludeHidden_k$$ && $aoLocal$$[$i$$].splice($j$$6_n$$, 1);
					$aApplied$$.push([])
				}
				$i$$ = 0;
				for ($iLen$$ =
				$aoLocal$$.length; $i$$ < $iLen$$; $i$$++) {
					if ($nLocalTr_oSettings$$ = $aoLocal$$[$i$$].nTr) for (; $j$$6_n$$ = $nLocalTr_oSettings$$.firstChild;) $nLocalTr_oSettings$$.removeChild($j$$6_n$$);
					$j$$6_n$$ = 0;
					for ($aoSource_jLen$$ = $aoLocal$$[$i$$].length; $j$$6_n$$ < $aoSource_jLen$$; $j$$6_n$$++) if ($iColspan$$ = $iColumns$$ = 1, $aApplied$$[$i$$][$j$$6_n$$] === $undefined$$) {
						$nLocalTr_oSettings$$.appendChild($aoLocal$$[$i$$][$j$$6_n$$].cell);
						for ($aApplied$$[$i$$][$j$$6_n$$] = 1; $aoLocal$$[$i$$ + $iColumns$$] !== $undefined$$ && $aoLocal$$[$i$$][$j$$6_n$$].cell ==
						$aoLocal$$[$i$$ + $iColumns$$][$j$$6_n$$].cell;) $aApplied$$[$i$$ + $iColumns$$][$j$$6_n$$] = 1,
						$iColumns$$++;
						for (; $aoLocal$$[$i$$][$j$$6_n$$ + $iColspan$$] !== $undefined$$ && $aoLocal$$[$i$$][$j$$6_n$$].cell == $aoLocal$$[$i$$][$j$$6_n$$ + $iColspan$$].cell;) {
							for ($bIncludeHidden_k$$ = 0; $bIncludeHidden_k$$ < $iColumns$$; $bIncludeHidden_k$$++) $aApplied$$[$i$$ + $bIncludeHidden_k$$][$j$$6_n$$ + $iColspan$$] = 1;
							$iColspan$$++
						}
						$aoLocal$$[$i$$][$j$$6_n$$].cell.rowSpan = $iColumns$$;
						$aoLocal$$[$i$$][$j$$6_n$$].cell.colSpan = $iColspan$$
					}
				}
			}
			function $_fnDraw$$($oSettings$$) {
				var $aPreDraw_anRows$$ = $_fnCallbackFire$$($oSettings$$, "aoPreDrawCallback", "preDraw", [$oSettings$$]);
				if ( - 1 !== $$$$.inArray(!1, $aPreDraw_anRows$$)) $_fnProcessingDisplay$$($oSettings$$, !1);
				else {
					var $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$,
					$iEnd_iLen$$,
					$aPreDraw_anRows$$ = [],
					$iRowCount_nAddFrag$$ = 0,
					$iStripes_nBodyPar_sZero$$ = $oSettings$$.asStripeClasses.length;
					$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$ = $oSettings$$.aoOpenRows.length;
					$oSettings$$.bDrawing = !0;
					$oSettings$$.iInitDisplayStart !==
					$undefined$$ && -1 != $oSettings$$.iInitDisplayStart && ($oSettings$$._iDisplayStart = $oSettings$$.oFeatures.bServerSide ? $oSettings$$.iInitDisplayStart: $oSettings$$.iInitDisplayStart >= $oSettings$$.fnRecordsDisplay() ? 0: $oSettings$$.iInitDisplayStart, $oSettings$$.iInitDisplayStart = -1, $_fnCalculateEnd$$($oSettings$$));
					if ($oSettings$$.bDeferLoading) $oSettings$$.bDeferLoading = !1,
					$oSettings$$.iDraw++;
					else if ($oSettings$$.oFeatures.bServerSide) {
						if (!$oSettings$$.bDestroying && !$_fnAjaxUpdate$$($oSettings$$)) return
					} else $oSettings$$.iDraw++;
					if (0 !== $oSettings$$.aiDisplay.length) {
						var $iStart_j$$ = $oSettings$$._iDisplayStart;
						$iEnd_iLen$$ = $oSettings$$._iDisplayEnd;
						$oSettings$$.oFeatures.bServerSide && ($iStart_j$$ = 0, $iEnd_iLen$$ = $oSettings$$.aoData.length);
						for (; $iStart_j$$ < $iEnd_iLen$$; $iStart_j$$++) {
							var $aoData_k$$ = $oSettings$$.aoData[$oSettings$$.aiDisplay[$iStart_j$$]];
							null === $aoData_k$$.nTr && $_fnCreateTr$$($oSettings$$, $oSettings$$.aiDisplay[$iStart_j$$]);
							var $nRow$$ = $aoData_k$$.nTr;
							if (0 !== $iStripes_nBodyPar_sZero$$) {
								var $sStripe$$ = $oSettings$$.asStripeClasses[$iRowCount_nAddFrag$$ %
								$iStripes_nBodyPar_sZero$$];
								$aoData_k$$._sRowStripe != $sStripe$$ && ($$$$($nRow$$).removeClass($aoData_k$$._sRowStripe).addClass($sStripe$$), $aoData_k$$._sRowStripe = $sStripe$$)
							}
							$_fnCallbackFire$$($oSettings$$, "aoRowCallback", null, [$nRow$$, $oSettings$$.aoData[$oSettings$$.aiDisplay[$iStart_j$$]]._aData, $iRowCount_nAddFrag$$, $iStart_j$$]);
							$aPreDraw_anRows$$.push($nRow$$);
							$iRowCount_nAddFrag$$++;
							if (0 !== $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$) for ($aoData_k$$ = 0; $aoData_k$$ < $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$; $aoData_k$$++) if ($nRow$$ ==
							$oSettings$$.aoOpenRows[$aoData_k$$].nParent) {
								$aPreDraw_anRows$$.push($oSettings$$.aoOpenRows[$aoData_k$$].nTr);
								break
							}
						}
					} else $aPreDraw_anRows$$[0] = $document$$.createElement("tr"),
					$oSettings$$.asStripeClasses[0] && ($aPreDraw_anRows$$[0].className = $oSettings$$.asStripeClasses[0]),
					$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$ = $oSettings$$.oLanguage,
					$iStripes_nBodyPar_sZero$$ = $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.sZeroRecords,
					1 == $oSettings$$.iDraw && null !== $oSettings$$.sAjaxSource && !$oSettings$$.oFeatures.bServerSide ?
					$iStripes_nBodyPar_sZero$$ = $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.sLoadingRecords: $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.sEmptyTable && 0 === $oSettings$$.fnRecordsTotal() && ($iStripes_nBodyPar_sZero$$ = $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.sEmptyTable),
					$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$ = $document$$.createElement("td"),
					$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.setAttribute("valign", "top"),
					$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.colSpan = $_fnVisbleColumns$$($oSettings$$),
					$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.className =
					$oSettings$$.oClasses.sRowEmpty,
					$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.innerHTML = $_fnInfoMacros$$($oSettings$$, $iStripes_nBodyPar_sZero$$),
					$aPreDraw_anRows$$[$iRowCount_nAddFrag$$].appendChild($i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$);
					$_fnCallbackFire$$($oSettings$$, "aoHeaderCallback", "header", [$$$$($oSettings$$.nTHead).children("tr")[0], $_fnGetDataMaster$$($oSettings$$), $oSettings$$._iDisplayStart, $oSettings$$.fnDisplayEnd(), $oSettings$$.aiDisplay]);
					$_fnCallbackFire$$($oSettings$$, "aoFooterCallback",
					"footer", [$$$$($oSettings$$.nTFoot).children("tr")[0], $_fnGetDataMaster$$($oSettings$$), $oSettings$$._iDisplayStart, $oSettings$$.fnDisplayEnd(), $oSettings$$.aiDisplay]);
					$iRowCount_nAddFrag$$ = $document$$.createDocumentFragment();
					$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$ = $document$$.createDocumentFragment();
					if ($oSettings$$.nTBody) {
						$iStripes_nBodyPar_sZero$$ = $oSettings$$.nTBody.parentNode;
						$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$.appendChild($oSettings$$.nTBody);
						if (!$oSettings$$.oScroll.bInfinite || !$oSettings$$._bInitComplete ||
						$oSettings$$.bSorted || $oSettings$$.bFiltered) for (; $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$ = $oSettings$$.nTBody.firstChild;) $oSettings$$.nTBody.removeChild($i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$);
						$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$ = 0;
						for ($iEnd_iLen$$ = $aPreDraw_anRows$$.length; $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$ < $iEnd_iLen$$; $i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$++) $iRowCount_nAddFrag$$.appendChild($aPreDraw_anRows$$[$i$$19_iOpenRows_n$$4_nRemoveFrag_nTd$$]);
						$oSettings$$.nTBody.appendChild($iRowCount_nAddFrag$$);
						null !== $iStripes_nBodyPar_sZero$$ && $iStripes_nBodyPar_sZero$$.appendChild($oSettings$$.nTBody)
					}
					$_fnCallbackFire$$($oSettings$$, "aoDrawCallback", "draw", [$oSettings$$]);
					$oSettings$$.bSorted = !1;
					$oSettings$$.bFiltered = !1;
					$oSettings$$.bDrawing = !1;
					$oSettings$$.oFeatures.bServerSide && ($_fnProcessingDisplay$$($oSettings$$, !1), $oSettings$$._bInitComplete || $_fnInitComplete$$($oSettings$$))
				}
			}
			function $_fnReDraw$$($oSettings$$) {
				$oSettings$$.oFeatures.bSort ? $_fnSort$$($oSettings$$, $oSettings$$.oPreviousSearch) :
				$oSettings$$.oFeatures.bFilter ? $_fnFilterComplete$$($oSettings$$, $oSettings$$.oPreviousSearch) : ($_fnCalculateEnd$$($oSettings$$), $_fnDraw$$($oSettings$$))
			}
			function $_fnAddOptionsHtml$$($oSettings$$) {
				var $nHolding$$ = $$$$("<div></div>")[0];
				$oSettings$$.nTable.parentNode.insertBefore($nHolding$$, $oSettings$$.nTable);
				$oSettings$$.nTableWrapper = $$$$('<div id="' + $oSettings$$.sTableId + '_wrapper" class="' + $oSettings$$.oClasses.sWrapper + '" role="grid"></div>')[0];
				$oSettings$$.nTableReinsertBefore = $oSettings$$.nTable.nextSibling;
				for (var $nInsertNode$$ = $oSettings$$.nTableWrapper, $aDom$$ = $oSettings$$.sDom.split(""), $nTmp$$, $iPushFeature$$, $cOption$$, $aoFeatures_nNewNode$$, $aSplit_cNext_kLen$$, $sAttr$$, $j$$8_k$$, $i$$ = 0; $i$$ < $aDom$$.length; $i$$++) {
					$iPushFeature$$ = 0;
					$cOption$$ = $aDom$$[$i$$];
					if ("<" == $cOption$$) {
						$aoFeatures_nNewNode$$ = $$$$("<div></div>")[0];
						$aSplit_cNext_kLen$$ = $aDom$$[$i$$ + 1];
						if ("'" == $aSplit_cNext_kLen$$ || '"' == $aSplit_cNext_kLen$$) {
							$sAttr$$ = "";
							for ($j$$8_k$$ = 2; $aDom$$[$i$$ + $j$$8_k$$] != $aSplit_cNext_kLen$$;) $sAttr$$ +=
							$aDom$$[$i$$ + $j$$8_k$$],
							$j$$8_k$$++;
							"H" == $sAttr$$ ? $sAttr$$ = $oSettings$$.oClasses.sJUIHeader: "F" == $sAttr$$ && ($sAttr$$ = $oSettings$$.oClasses.sJUIFooter); - 1 != $sAttr$$.indexOf(".") ? ($aSplit_cNext_kLen$$ = $sAttr$$.split("."), $aoFeatures_nNewNode$$.id = $aSplit_cNext_kLen$$[0].substr(1, $aSplit_cNext_kLen$$[0].length - 1), $aoFeatures_nNewNode$$.className = $aSplit_cNext_kLen$$[1]) : "#" == $sAttr$$.charAt(0) ? $aoFeatures_nNewNode$$.id = $sAttr$$.substr(1, $sAttr$$.length - 1) : $aoFeatures_nNewNode$$.className = $sAttr$$;
							$i$$ +=
							$j$$8_k$$
						}
						$nInsertNode$$.appendChild($aoFeatures_nNewNode$$);
						$nInsertNode$$ = $aoFeatures_nNewNode$$
					} else if (">" == $cOption$$) $nInsertNode$$ = $nInsertNode$$.parentNode;
					else if ("l" == $cOption$$ && $oSettings$$.oFeatures.bPaginate && $oSettings$$.oFeatures.bLengthChange) $nTmp$$ = $_fnFeatureHtmlLength$$($oSettings$$),
					$iPushFeature$$ = 1;
					else if ("f" == $cOption$$ && $oSettings$$.oFeatures.bFilter) $nTmp$$ = $_fnFeatureHtmlFilter$$($oSettings$$),
					$iPushFeature$$ = 1;
					else if ("r" == $cOption$$ && $oSettings$$.oFeatures.bProcessing) $nTmp$$ =
					$_fnFeatureHtmlProcessing$$($oSettings$$),
					$iPushFeature$$ = 1;
					else if ("t" == $cOption$$) $nTmp$$ = $_fnFeatureHtmlTable$$($oSettings$$),
					$iPushFeature$$ = 1;
					else if ("i" == $cOption$$ && $oSettings$$.oFeatures.bInfo) $nTmp$$ = $_fnFeatureHtmlInfo$$($oSettings$$),
					$iPushFeature$$ = 1;
					else if ("p" == $cOption$$ && $oSettings$$.oFeatures.bPaginate) $nTmp$$ = $_fnFeatureHtmlPaginate$$($oSettings$$),
					$iPushFeature$$ = 1;
					else if (0 !== $DataTable$$.ext.aoFeatures.length) {
						$aoFeatures_nNewNode$$ = $DataTable$$.ext.aoFeatures;
						$j$$8_k$$ = 0;
						for ($aSplit_cNext_kLen$$ =
						$aoFeatures_nNewNode$$.length; $j$$8_k$$ < $aSplit_cNext_kLen$$; $j$$8_k$$++) if ($cOption$$ == $aoFeatures_nNewNode$$[$j$$8_k$$].cFeature) { ($nTmp$$ = $aoFeatures_nNewNode$$[$j$$8_k$$].fnInit($oSettings$$)) && ($iPushFeature$$ = 1);
							break
						}
					}
					1 == $iPushFeature$$ && null !== $nTmp$$ && ("object" !== typeof $oSettings$$.aanFeatures[$cOption$$] && ($oSettings$$.aanFeatures[$cOption$$] = []), $oSettings$$.aanFeatures[$cOption$$].push($nTmp$$), $nInsertNode$$.appendChild($nTmp$$))
				}
				$nHolding$$.parentNode.replaceChild($oSettings$$.nTableWrapper,
				$nHolding$$)
			}
			function $_fnDetectHeader$$($aLayout$$, $nThead$$) {
				var $nTrs$$ = $$$$($nThead$$).children("tr"),
				$nTr$$,
				$nCell$$,
				$i$$,
				$j$$inline_5_k$$,
				$k$$,
				$iLen$$,
				$iColShifted$$,
				$iColspan$$,
				$iRowspan$$,
				$bUnique$$;
				$aLayout$$.splice(0, $aLayout$$.length);
				$i$$ = 0;
				for ($iLen$$ = $nTrs$$.length; $i$$ < $iLen$$; $i$$++) $aLayout$$.push([]);
				$i$$ = 0;
				for ($iLen$$ = $nTrs$$.length; $i$$ < $iLen$$; $i$$++) {
					$nTr$$ = $nTrs$$[$i$$];
					for ($nCell$$ = $nTr$$.firstChild; $nCell$$;) {
						if ("TD" == $nCell$$.nodeName.toUpperCase() || "TH" == $nCell$$.nodeName.toUpperCase()) {
							$iColspan$$ =
							1 * $nCell$$.getAttribute("colspan");
							$iRowspan$$ = 1 * $nCell$$.getAttribute("rowspan");
							$iColspan$$ = !$iColspan$$ || 0 === $iColspan$$ || 1 === $iColspan$$ ? 1: $iColspan$$;
							$iRowspan$$ = !$iRowspan$$ || 0 === $iRowspan$$ || 1 === $iRowspan$$ ? 1: $iRowspan$$;
							$j$$inline_5_k$$ = 0;
							for ($k$$ = $aLayout$$[$i$$]; $k$$[$j$$inline_5_k$$];) $j$$inline_5_k$$++;
							$iColShifted$$ = $j$$inline_5_k$$;
							$bUnique$$ = 1 === $iColspan$$ ? !0: !1;
							for ($k$$ = 0; $k$$ < $iColspan$$; $k$$++) for ($j$$inline_5_k$$ = 0; $j$$inline_5_k$$ < $iRowspan$$; $j$$inline_5_k$$++) $aLayout$$[$i$$ +
							$j$$inline_5_k$$][$iColShifted$$ + $k$$] = {
								cell: $nCell$$,
								unique: $bUnique$$
							},
							$aLayout$$[$i$$ + $j$$inline_5_k$$].nTr = $nTr$$
						}
						$nCell$$ = $nCell$$.nextSibling
					}
				}
			}
			function $_fnGetUniqueThs$$($oSettings$$, $i$$, $aLayout$$) {
				var $aReturn$$ = [];
				$aLayout$$ || ($aLayout$$ = $oSettings$$.aoHeader, $i$$ && ($aLayout$$ = [], $_fnDetectHeader$$($aLayout$$, $i$$)));
				for (var $i$$ = 0, $iLen$$ = $aLayout$$.length; $i$$ < $iLen$$; $i$$++) for (var $j$$ = 0, $jLen$$ = $aLayout$$[$i$$].length; $j$$ < $jLen$$; $j$$++) if ($aLayout$$[$i$$][$j$$].unique && (!$aReturn$$[$j$$] ||
				!$oSettings$$.bSortCellsTop)) $aReturn$$[$j$$] = $aLayout$$[$i$$][$j$$].cell;
				return $aReturn$$
			}
			function $_fnAjaxUpdate$$($oSettings$$) {
				if ($oSettings$$.bAjaxDataGet) {
					$oSettings$$.iDraw++;
					$_fnProcessingDisplay$$($oSettings$$, !0);
					var $aoData$$ = $_fnAjaxParameters$$($oSettings$$);
					$_fnServerParams$$($oSettings$$, $aoData$$);
					$oSettings$$.fnServerData.call($oSettings$$.oInstance, $oSettings$$.sAjaxSource, $aoData$$,
					function($json$$) {
						$_fnAjaxUpdateDraw$$($oSettings$$, $json$$)
					},
					$oSettings$$);
					return ! 1
				}
				return ! 0
			}
			function $_fnAjaxParameters$$($oSettings$$) {
				var $iColumns$$ =
				$oSettings$$.aoColumns.length,
				$aoData$$ = [],
				$aaSort_mDataProp$$,
				$aDataSort$$,
				$i$$,
				$j$$;
				$aoData$$.push({
					name: "sEcho",
					value: $oSettings$$.iDraw
				});
				$aoData$$.push({
					name: "iColumns",
					value: $iColumns$$
				});
				$aoData$$.push({
					name: "sColumns",
					value: $_fnColumnOrdering$$($oSettings$$)
				});
				$aoData$$.push({
					name: "iDisplayStart",
					value: $oSettings$$._iDisplayStart
				});
				$aoData$$.push({
					name: "iDisplayLength",
					value: !1 !== $oSettings$$.oFeatures.bPaginate ? $oSettings$$._iDisplayLength: -1
				});
				for ($i$$ = 0; $i$$ < $iColumns$$; $i$$++) $aaSort_mDataProp$$ =
				$oSettings$$.aoColumns[$i$$].mData,
				$aoData$$.push({
					name: "mDataProp_" + $i$$,
					value: "function" === typeof $aaSort_mDataProp$$ ? "function": $aaSort_mDataProp$$
				});
				if (!1 !== $oSettings$$.oFeatures.bFilter) {
					$aoData$$.push({
						name: "sSearch",
						value: $oSettings$$.oPreviousSearch.sSearch
					});
					$aoData$$.push({
						name: "bRegex",
						value: $oSettings$$.oPreviousSearch.bRegex
					});
					for ($i$$ = 0; $i$$ < $iColumns$$; $i$$++) $aoData$$.push({
						name: "sSearch_" + $i$$,
						value: $oSettings$$.aoPreSearchCols[$i$$].sSearch
					}),
					$aoData$$.push({
						name: "bRegex_" + $i$$,
						value: $oSettings$$.aoPreSearchCols[$i$$].bRegex
					}),
					$aoData$$.push({
						name: "bSearchable_" + $i$$,
						value: $oSettings$$.aoColumns[$i$$].bSearchable
					})
				}
				if (!1 !== $oSettings$$.oFeatures.bSort) {
					var $iCounter$$ = 0;
					$aaSort_mDataProp$$ = null !== $oSettings$$.aaSortingFixed ? $oSettings$$.aaSortingFixed.concat($oSettings$$.aaSorting) : $oSettings$$.aaSorting.slice();
					for ($i$$ = 0; $i$$ < $aaSort_mDataProp$$.length; $i$$++) {
						$aDataSort$$ = $oSettings$$.aoColumns[$aaSort_mDataProp$$[$i$$][0]].aDataSort;
						for ($j$$ = 0; $j$$ < $aDataSort$$.length; $j$$++) $aoData$$.push({
							name: "iSortCol_" +
							$iCounter$$,
							value: $aDataSort$$[$j$$]
						}),
						$aoData$$.push({
							name: "sSortDir_" + $iCounter$$,
							value: $aaSort_mDataProp$$[$i$$][1]
						}),
						$iCounter$$++
					}
					$aoData$$.push({
						name: "iSortingCols",
						value: $iCounter$$
					});
					for ($i$$ = 0; $i$$ < $iColumns$$; $i$$++) $aoData$$.push({
						name: "bSortable_" + $i$$,
						value: $oSettings$$.aoColumns[$i$$].bSortable
					})
				}
				return $aoData$$
			}
			function $_fnServerParams$$($oSettings$$, $aoData$$) {
				$_fnCallbackFire$$($oSettings$$, "aoServerParams", "serverParams", [$aoData$$])
			}
			function $_fnAjaxUpdateDraw$$($oSettings$$,
			$json$$) {
				if ($json$$.sEcho !== $undefined$$) {
					if (1 * $json$$.sEcho < $oSettings$$.iDraw) return;
					$oSettings$$.iDraw = 1 * $json$$.sEcho
				} (!$oSettings$$.oScroll.bInfinite || $oSettings$$.oScroll.bInfinite && ($oSettings$$.bSorted || $oSettings$$.bFiltered)) && $_fnClearTable$$($oSettings$$);
				$oSettings$$._iRecordsTotal = parseInt($json$$.iTotalRecords, 10);
				$oSettings$$._iRecordsDisplay = parseInt($json$$.iTotalDisplayRecords, 10);
				var $bReOrder_sOrdering$$ = $_fnColumnOrdering$$($oSettings$$),
				$bReOrder_sOrdering$$ = $json$$.sColumns !==
				$undefined$$ && "" !== $bReOrder_sOrdering$$ && $json$$.sColumns != $bReOrder_sOrdering$$,
				$aiIndex$$;
				$bReOrder_sOrdering$$ && ($aiIndex$$ = $_fnReOrderIndex$$($oSettings$$, $json$$.sColumns));
				for (var $aData$$ = $_fnGetObjectDataFn$$($oSettings$$.sAjaxDataProp)($json$$), $i$$ = 0, $iLen$$ = $aData$$.length; $i$$ < $iLen$$; $i$$++) if ($bReOrder_sOrdering$$) {
					for (var $aDataSorted$$ = [], $j$$ = 0, $jLen$$ = $oSettings$$.aoColumns.length; $j$$ < $jLen$$; $j$$++) $aDataSorted$$.push($aData$$[$i$$][$aiIndex$$[$j$$]]);
					$_fnAddData$$($oSettings$$,
					$aDataSorted$$)
				} else $_fnAddData$$($oSettings$$, $aData$$[$i$$]);
				$oSettings$$.aiDisplay = $oSettings$$.aiDisplayMaster.slice();
				$oSettings$$.bAjaxDataGet = !1;
				$_fnDraw$$($oSettings$$);
				$oSettings$$.bAjaxDataGet = !0;
				$_fnProcessingDisplay$$($oSettings$$, !1)
			}
			function $_fnFeatureHtmlFilter$$($oSettings$$) {
				var $oPreviousSearch$$ = $oSettings$$.oPreviousSearch,
				$jqFilter_sSearchStr$$ = $oSettings$$.oLanguage.sSearch,
				$jqFilter_sSearchStr$$ = -1 !== $jqFilter_sSearchStr$$.indexOf("_INPUT_") ? $jqFilter_sSearchStr$$.replace("_INPUT_",
				'<input type="text" />') : "" === $jqFilter_sSearchStr$$ ? '<input type="text" />': $jqFilter_sSearchStr$$ + ' <input type="text" />',
				$nFilter$$ = $document$$.createElement("div");
				$nFilter$$.className = $oSettings$$.oClasses.sFilter;
				$nFilter$$.innerHTML = "<label>" + $jqFilter_sSearchStr$$ + "</label>";
				$oSettings$$.aanFeatures.f || ($nFilter$$.id = $oSettings$$.sTableId + "_filter");
				$jqFilter_sSearchStr$$ = $$$$('input[type="text"]', $nFilter$$);
				$nFilter$$._DT_Input = $jqFilter_sSearchStr$$[0];
				$jqFilter_sSearchStr$$.val($oPreviousSearch$$.sSearch.replace('"',
				"&quot;"));
				$jqFilter_sSearchStr$$.bind("keyup.DT",
				function() {
					for (var $n$$ = $oSettings$$.aanFeatures.f, $val$$ = this.value === "" ? "": this.value, $i$$ = 0, $iLen$$ = $n$$.length; $i$$ < $iLen$$; $i$$++) $n$$[$i$$] != $$$$(this).parents("div.dataTables_filter")[0] && $$$$($n$$[$i$$]._DT_Input).val($val$$);
					$val$$ != $oPreviousSearch$$.sSearch && $_fnFilterComplete$$($oSettings$$, {
						sSearch: $val$$,
						bRegex: $oPreviousSearch$$.bRegex,
						bSmart: $oPreviousSearch$$.bSmart,
						bCaseInsensitive: $oPreviousSearch$$.bCaseInsensitive
					})
				});
				$jqFilter_sSearchStr$$.attr("aria-controls",
				$oSettings$$.sTableId).bind("keypress.DT",
				function($e$$) {
					if ($e$$.keyCode == 13) return false
				});
				return $nFilter$$
			}
			function $_fnFilterComplete$$($oSettings$$, $i$$, $iForce$$) {
				var $oPrevSearch$$ = $oSettings$$.oPreviousSearch,
				$aoPrevSearch$$ = $oSettings$$.aoPreSearchCols,
				$fnSaveFilter$$ = function $$fnSaveFilter$$$($oFilter$$) {
					$oPrevSearch$$.sSearch = $oFilter$$.sSearch;
					$oPrevSearch$$.bRegex = $oFilter$$.bRegex;
					$oPrevSearch$$.bSmart = $oFilter$$.bSmart;
					$oPrevSearch$$.bCaseInsensitive = $oFilter$$.bCaseInsensitive
				};
				if ($oSettings$$.oFeatures.bServerSide) $fnSaveFilter$$($i$$);
				else {
					$_fnFilter$$($oSettings$$, $i$$.sSearch, $iForce$$, $i$$.bRegex, $i$$.bSmart, $i$$.bCaseInsensitive);
					$fnSaveFilter$$($i$$);
					for ($i$$ = 0; $i$$ < $oSettings$$.aoPreSearchCols.length; $i$$++) $_fnFilterColumn$$($oSettings$$, $aoPrevSearch$$[$i$$].sSearch, $i$$, $aoPrevSearch$$[$i$$].bRegex, $aoPrevSearch$$[$i$$].bSmart, $aoPrevSearch$$[$i$$].bCaseInsensitive);
					$_fnFilterCustom$$($oSettings$$)
				}
				$oSettings$$.bFiltered = !0;
				$$$$($oSettings$$.oInstance).trigger("filter", $oSettings$$);
				$oSettings$$._iDisplayStart = 0;
				$_fnCalculateEnd$$($oSettings$$);
				$_fnDraw$$($oSettings$$);
				$_fnBuildSearchArray$$($oSettings$$, 0)
			}
			function $_fnFilterCustom$$($oSettings$$) {
				for (var $afnFilters$$ = $DataTable$$.ext.afnFiltering, $aiFilterColumns$$ = $_fnGetColumns$$($oSettings$$, "bSearchable"), $i$$ = 0, $iLen$$ = $afnFilters$$.length; $i$$ < $iLen$$; $i$$++) for (var $iCorrector$$ = 0, $j$$ = 0, $jLen$$ = $oSettings$$.aiDisplay.length; $j$$ < $jLen$$; $j$$++) {
					var $iDisIndex$$ = $oSettings$$.aiDisplay[$j$$ - $iCorrector$$];
					$afnFilters$$[$i$$]($oSettings$$, $_fnGetRowData$$($oSettings$$, $iDisIndex$$,
					"filter", $aiFilterColumns$$), $iDisIndex$$) || ($oSettings$$.aiDisplay.splice($j$$ - $iCorrector$$, 1), $iCorrector$$++)
				}
			}
			function $_fnFilterColumn$$($oSettings$$, $rpSearch_sInput$$, $iColumn$$, $bRegex_i$$, $bSmart_sData$$, $bCaseInsensitive$$) {
				if ("" !== $rpSearch_sInput$$) for (var $iIndexCorrector$$ = 0, $rpSearch_sInput$$ = $_fnFilterCreateSearch$$($rpSearch_sInput$$, $bRegex_i$$, $bSmart_sData$$, $bCaseInsensitive$$), $bRegex_i$$ = $oSettings$$.aiDisplay.length - 1; 0 <= $bRegex_i$$; $bRegex_i$$--) $bSmart_sData$$ = $_fnDataToSearch$$($_fnGetCellData$$($oSettings$$,
				$oSettings$$.aiDisplay[$bRegex_i$$], $iColumn$$, "filter"), $oSettings$$.aoColumns[$iColumn$$].sType),
				$rpSearch_sInput$$.test($bSmart_sData$$) || ($oSettings$$.aiDisplay.splice($bRegex_i$$, 1), $iIndexCorrector$$++)
			}
			function $_fnFilter$$($oSettings$$, $i$$30_sInput$$, $iForce$$1_iIndexCorrector$$, $bRegex$$1_rpSearch$$, $bSmart$$1_oPrevSearch$$, $bCaseInsensitive$$) {
				$bRegex$$1_rpSearch$$ = $_fnFilterCreateSearch$$($i$$30_sInput$$, $bRegex$$1_rpSearch$$, $bSmart$$1_oPrevSearch$$, $bCaseInsensitive$$);
				$bSmart$$1_oPrevSearch$$ =
				$oSettings$$.oPreviousSearch;
				$iForce$$1_iIndexCorrector$$ || ($iForce$$1_iIndexCorrector$$ = 0);
				0 !== $DataTable$$.ext.afnFiltering.length && ($iForce$$1_iIndexCorrector$$ = 1);
				if (0 >= $i$$30_sInput$$.length) $oSettings$$.aiDisplay.splice(0, $oSettings$$.aiDisplay.length),
				$oSettings$$.aiDisplay = $oSettings$$.aiDisplayMaster.slice();
				else if ($oSettings$$.aiDisplay.length == $oSettings$$.aiDisplayMaster.length || $bSmart$$1_oPrevSearch$$.sSearch.length > $i$$30_sInput$$.length || 1 == $iForce$$1_iIndexCorrector$$ || 0 !== $i$$30_sInput$$.indexOf($bSmart$$1_oPrevSearch$$.sSearch)) {
					$oSettings$$.aiDisplay.splice(0,
					$oSettings$$.aiDisplay.length);
					$_fnBuildSearchArray$$($oSettings$$, 1);
					for ($i$$30_sInput$$ = 0; $i$$30_sInput$$ < $oSettings$$.aiDisplayMaster.length; $i$$30_sInput$$++) $bRegex$$1_rpSearch$$.test($oSettings$$.asDataSearch[$i$$30_sInput$$]) && $oSettings$$.aiDisplay.push($oSettings$$.aiDisplayMaster[$i$$30_sInput$$])
				} else for ($i$$30_sInput$$ = $iForce$$1_iIndexCorrector$$ = 0; $i$$30_sInput$$ < $oSettings$$.asDataSearch.length; $i$$30_sInput$$++) $bRegex$$1_rpSearch$$.test($oSettings$$.asDataSearch[$i$$30_sInput$$]) ||
				($oSettings$$.aiDisplay.splice($i$$30_sInput$$ - $iForce$$1_iIndexCorrector$$, 1), $iForce$$1_iIndexCorrector$$++)
			}
			function $_fnBuildSearchArray$$($oSettings$$, $iMaster$$) {
				if (!$oSettings$$.oFeatures.bServerSide) {
					$oSettings$$.asDataSearch = [];
					for (var $aiFilterColumns$$ = $_fnGetColumns$$($oSettings$$, "bSearchable"), $aiIndex$$ = 1 === $iMaster$$ ? $oSettings$$.aiDisplayMaster: $oSettings$$.aiDisplay, $i$$ = 0, $iLen$$ = $aiIndex$$.length; $i$$ < $iLen$$; $i$$++) $oSettings$$.asDataSearch[$i$$] = $_fnBuildSearchRow$$($oSettings$$,
					$_fnGetRowData$$($oSettings$$, $aiIndex$$[$i$$], "filter", $aiFilterColumns$$))
				}
			}
			function $_fnBuildSearchRow$$($oSettings$$, $aData$$) {
				var $sSearch$$ = $aData$$.join("  "); - 1 !== $sSearch$$.indexOf("&") && ($sSearch$$ = $$$$("<div>").html($sSearch$$).text());
				return $sSearch$$.replace(/[\n\r]/g, " ")
			}
			function $_fnFilterCreateSearch$$($asSearch_sRegExpString_sSearch$$, $bRegex$$, $bSmart$$, $bCaseInsensitive$$) {
				if ($bSmart$$) return $asSearch_sRegExpString_sSearch$$ = $bRegex$$ ? $asSearch_sRegExpString_sSearch$$.split(" ") :
				$_fnEscapeRegex$$($asSearch_sRegExpString_sSearch$$).split(" "),
				$asSearch_sRegExpString_sSearch$$ = "^(?=.*?" + $asSearch_sRegExpString_sSearch$$.join(")(?=.*?") + ").*$",
				RegExp($asSearch_sRegExpString_sSearch$$, $bCaseInsensitive$$ ? "i": "");
				$asSearch_sRegExpString_sSearch$$ = $bRegex$$ ? $asSearch_sRegExpString_sSearch$$: $_fnEscapeRegex$$($asSearch_sRegExpString_sSearch$$);
				return RegExp($asSearch_sRegExpString_sSearch$$, $bCaseInsensitive$$ ? "i": "")
			}
			function $_fnDataToSearch$$($sData$$, $sType$$) {
				return "function" ===
				typeof $DataTable$$.ext.ofnSearch[$sType$$] ? $DataTable$$.ext.ofnSearch[$sType$$]($sData$$) : null === $sData$$ ? "": "html" == $sType$$ ? $sData$$.replace(/[\r\n]/g, " ").replace(/<.*?>/g, "") : "string" === typeof $sData$$ ? $sData$$.replace(/[\r\n]/g, " ") : $sData$$
			}
			function $_fnEscapeRegex$$($sVal$$) {
				return $sVal$$.replace(RegExp("(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\|\\$|\\^|\\-)", "g"), "\\$1")
			}
			function $_fnFeatureHtmlInfo$$($oSettings$$) {
				var $nInfo$$ = $document$$.createElement("div");
				$nInfo$$.className =
				$oSettings$$.oClasses.sInfo;
				$oSettings$$.aanFeatures.i || ($oSettings$$.aoDrawCallback.push({
					fn: $_fnUpdateInfo$$,
					sName: "information"
				}), $nInfo$$.id = $oSettings$$.sTableId + "_info");
				$oSettings$$.nTable.setAttribute("aria-describedby", $oSettings$$.sTableId + "_info");
				return $nInfo$$
			}
			function $_fnUpdateInfo$$($n$$6_oSettings$$) {
				if ($n$$6_oSettings$$.oFeatures.bInfo && 0 !== $n$$6_oSettings$$.aanFeatures.i.length) {
					var $i$$32_oLang$$ = $n$$6_oSettings$$.oLanguage,
					$iLen$$23_iStart$$ = $n$$6_oSettings$$._iDisplayStart +
					1,
					$iEnd$$ = $n$$6_oSettings$$.fnDisplayEnd(),
					$iMax$$ = $n$$6_oSettings$$.fnRecordsTotal(),
					$iTotal$$ = $n$$6_oSettings$$.fnRecordsDisplay(),
					$sOut$$;
					$sOut$$ = 0 === $iTotal$$ ? $i$$32_oLang$$.sInfoEmpty: $i$$32_oLang$$.sInfo;
					$iTotal$$ != $iMax$$ && ($sOut$$ += " " + $i$$32_oLang$$.sInfoFiltered);
					$sOut$$ += $i$$32_oLang$$.sInfoPostFix;
					$sOut$$ = $_fnInfoMacros$$($n$$6_oSettings$$, $sOut$$);
					null !== $i$$32_oLang$$.fnInfoCallback && ($sOut$$ = $i$$32_oLang$$.fnInfoCallback.call($n$$6_oSettings$$.oInstance, $n$$6_oSettings$$, $iLen$$23_iStart$$,
					$iEnd$$, $iMax$$, $iTotal$$, $sOut$$));
					$n$$6_oSettings$$ = $n$$6_oSettings$$.aanFeatures.i;
					$i$$32_oLang$$ = 0;
					for ($iLen$$23_iStart$$ = $n$$6_oSettings$$.length; $i$$32_oLang$$ < $iLen$$23_iStart$$; $i$$32_oLang$$++) $$$$($n$$6_oSettings$$[$i$$32_oLang$$]).html($sOut$$)
				}
			}
			function $_fnInfoMacros$$($oSettings$$, $str$$) {
				var $sStart$$ = $oSettings$$.fnFormatNumber($oSettings$$._iDisplayStart + 1),
				$iEnd$$ = $oSettings$$.fnDisplayEnd(),
				$iEnd$$ = $oSettings$$.fnFormatNumber($iEnd$$),
				$iTotal$$ = $oSettings$$.fnRecordsDisplay(),
				$iTotal$$ =
				$oSettings$$.fnFormatNumber($iTotal$$),
				$iMax$$ = $oSettings$$.fnRecordsTotal(),
				$iMax$$ = $oSettings$$.fnFormatNumber($iMax$$);
				$oSettings$$.oScroll.bInfinite && ($sStart$$ = $oSettings$$.fnFormatNumber(1));
				return $str$$.replace(/_START_/g, $sStart$$).replace(/_END_/g, $iEnd$$).replace(/_TOTAL_/g, $iTotal$$).replace(/_MAX_/g, $iMax$$)
			}
			function $_fnInitialise$$($oSettings$$) {
				var $i$$,
				$aoData$$4_iLen$$,
				$iAjaxStart$$ = $oSettings$$.iInitDisplayStart;
				if (!1 === $oSettings$$.bInitialised) setTimeout(function() {
					$_fnInitialise$$($oSettings$$)
				},
				200);
				else {
					$_fnAddOptionsHtml$$($oSettings$$);
					$_fnBuildHead$$($oSettings$$);
					$_fnDrawHead$$($oSettings$$, $oSettings$$.aoHeader);
					$oSettings$$.nTFoot && $_fnDrawHead$$($oSettings$$, $oSettings$$.aoFooter);
					$_fnProcessingDisplay$$($oSettings$$, !0);
					$oSettings$$.oFeatures.bAutoWidth && $_fnCalculateColumnWidths$$($oSettings$$);
					$i$$ = 0;
					for ($aoData$$4_iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $aoData$$4_iLen$$; $i$$++) null !== $oSettings$$.aoColumns[$i$$].sWidth && ($oSettings$$.aoColumns[$i$$].nTh.style.width = $_fnStringToCss$$($oSettings$$.aoColumns[$i$$].sWidth));
					$oSettings$$.oFeatures.bSort ? $_fnSort$$($oSettings$$) : $oSettings$$.oFeatures.bFilter ? $_fnFilterComplete$$($oSettings$$, $oSettings$$.oPreviousSearch) : ($oSettings$$.aiDisplay = $oSettings$$.aiDisplayMaster.slice(), $_fnCalculateEnd$$($oSettings$$), $_fnDraw$$($oSettings$$));
					null !== $oSettings$$.sAjaxSource && !$oSettings$$.oFeatures.bServerSide ? ($aoData$$4_iLen$$ = [], $_fnServerParams$$($oSettings$$, $aoData$$4_iLen$$), $oSettings$$.fnServerData.call($oSettings$$.oInstance, $oSettings$$.sAjaxSource, $aoData$$4_iLen$$,
					function($json$$) {
						var $aData$$ = $oSettings$$.sAjaxDataProp !== "" ? $_fnGetObjectDataFn$$($oSettings$$.sAjaxDataProp)($json$$) : $json$$;
						for ($i$$ = 0; $i$$ < $aData$$.length; $i$$++) $_fnAddData$$($oSettings$$, $aData$$[$i$$]);
						$oSettings$$.iInitDisplayStart = $iAjaxStart$$;
						if ($oSettings$$.oFeatures.bSort) $_fnSort$$($oSettings$$);
						else {
							$oSettings$$.aiDisplay = $oSettings$$.aiDisplayMaster.slice();
							$_fnCalculateEnd$$($oSettings$$);
							$_fnDraw$$($oSettings$$)
						}
						$_fnProcessingDisplay$$($oSettings$$, false);
						$_fnInitComplete$$($oSettings$$,
						$json$$)
					},
					$oSettings$$)) : $oSettings$$.oFeatures.bServerSide || ($_fnProcessingDisplay$$($oSettings$$, !1), $_fnInitComplete$$($oSettings$$))
				}
			}
			function $_fnInitComplete$$($oSettings$$, $json$$) {
				$oSettings$$._bInitComplete = !0;
				$_fnCallbackFire$$($oSettings$$, "aoInitComplete", "init", [$oSettings$$, $json$$])
			}
			function $_fnLanguageCompat$$($oLanguage$$) {
				var $oDefaults$$ = $DataTable$$.defaults.oLanguage; ! $oLanguage$$.sEmptyTable && ($oLanguage$$.sZeroRecords && "No data available in table" === $oDefaults$$.sEmptyTable) &&
				$_fnMap$$($oLanguage$$, $oLanguage$$, "sZeroRecords", "sEmptyTable"); ! $oLanguage$$.sLoadingRecords && ($oLanguage$$.sZeroRecords && "Loading..." === $oDefaults$$.sLoadingRecords) && $_fnMap$$($oLanguage$$, $oLanguage$$, "sZeroRecords", "sLoadingRecords")
			}
			function $_fnFeatureHtmlLength$$($oSettings$$) {
				if ($oSettings$$.oScroll.bInfinite) return null;
				var $sStdMenu$$ = '<select size="1" ' + ('name="' + $oSettings$$.sTableId + '_length"') + ">",
				$i$$,
				$iLen$$,
				$aLengthMenu_nLength$$ = $oSettings$$.aLengthMenu;
				if (2 == $aLengthMenu_nLength$$.length &&
				"object" === typeof $aLengthMenu_nLength$$[0] && "object" === typeof $aLengthMenu_nLength$$[1]) {
					$i$$ = 0;
					for ($iLen$$ = $aLengthMenu_nLength$$[0].length; $i$$ < $iLen$$; $i$$++) $sStdMenu$$ += '<option value="' + $aLengthMenu_nLength$$[0][$i$$] + '">' + $aLengthMenu_nLength$$[1][$i$$] + "</option>"
				} else {
					$i$$ = 0;
					for ($iLen$$ = $aLengthMenu_nLength$$.length; $i$$ < $iLen$$; $i$$++) $sStdMenu$$ += '<option value="' + $aLengthMenu_nLength$$[$i$$] + '">' + $aLengthMenu_nLength$$[$i$$] + "</option>"
				}
				$sStdMenu$$ += "</select>";
				$aLengthMenu_nLength$$ =
				$document$$.createElement("div");
				$oSettings$$.aanFeatures.l || ($aLengthMenu_nLength$$.id = $oSettings$$.sTableId + "_length");
				$aLengthMenu_nLength$$.className = $oSettings$$.oClasses.sLength;
				$aLengthMenu_nLength$$.innerHTML = "<label>" + $oSettings$$.oLanguage.sLengthMenu.replace("_MENU_", $sStdMenu$$) + "</label>";
				$$$$('select option[value="' + $oSettings$$._iDisplayLength + '"]', $aLengthMenu_nLength$$).attr("selected", !0);
				$$$$("select", $aLengthMenu_nLength$$).bind("change.DT",
				function() {
					var $iVal$$ = $$$$(this).val(),
					$n$$ = $oSettings$$.aanFeatures.l;
					$i$$ = 0;
					for ($iLen$$ = $n$$.length; $i$$ < $iLen$$; $i$$++) $n$$[$i$$] != this.parentNode && $$$$("select", $n$$[$i$$]).val($iVal$$);
					$oSettings$$._iDisplayLength = parseInt($iVal$$, 10);
					$_fnCalculateEnd$$($oSettings$$);
					if ($oSettings$$.fnDisplayEnd() == $oSettings$$.fnRecordsDisplay()) {
						$oSettings$$._iDisplayStart = $oSettings$$.fnDisplayEnd() - $oSettings$$._iDisplayLength;
						if ($oSettings$$._iDisplayStart < 0) $oSettings$$._iDisplayStart = 0
					}
					if ($oSettings$$._iDisplayLength == -1) $oSettings$$._iDisplayStart =
					0;
					$_fnDraw$$($oSettings$$)
				});
				$$$$("select", $aLengthMenu_nLength$$).attr("aria-controls", $oSettings$$.sTableId);
				return $aLengthMenu_nLength$$
			}
			function $_fnCalculateEnd$$($oSettings$$) {
				$oSettings$$._iDisplayEnd = !1 === $oSettings$$.oFeatures.bPaginate ? $oSettings$$.aiDisplay.length: $oSettings$$._iDisplayStart + $oSettings$$._iDisplayLength > $oSettings$$.aiDisplay.length || -1 == $oSettings$$._iDisplayLength ? $oSettings$$.aiDisplay.length: $oSettings$$._iDisplayStart + $oSettings$$._iDisplayLength
			}
			function $_fnFeatureHtmlPaginate$$($oSettings$$1$$) {
				if ($oSettings$$1$$.oScroll.bInfinite) return null;
				var $nPaginate$$ = $document$$.createElement("div");
				$nPaginate$$.className = $oSettings$$1$$.oClasses.sPaging + $oSettings$$1$$.sPaginationType;
				$DataTable$$.ext.oPagination[$oSettings$$1$$.sPaginationType].fnInit($oSettings$$1$$, $nPaginate$$,
				function($oSettings$$) {
					$_fnCalculateEnd$$($oSettings$$);
					$_fnDraw$$($oSettings$$)
				});
				$oSettings$$1$$.aanFeatures.p || $oSettings$$1$$.aoDrawCallback.push({
					fn: function($oSettings$$0$$) {
						$DataTable$$.ext.oPagination[$oSettings$$0$$.sPaginationType].fnUpdate($oSettings$$0$$,
						function($oSettings$$) {
							$_fnCalculateEnd$$($oSettings$$);
							$_fnDraw$$($oSettings$$)
						})
					},
					sName: "pagination"
				});
				return $nPaginate$$
			}
			function $_fnPageChange$$($oSettings$$, $mAction$$) {
				var $iOldStart$$ = $oSettings$$._iDisplayStart;
				if ("number" === typeof $mAction$$) $oSettings$$._iDisplayStart = $mAction$$ * $oSettings$$._iDisplayLength,
				$oSettings$$._iDisplayStart > $oSettings$$.fnRecordsDisplay() && ($oSettings$$._iDisplayStart = 0);
				else if ("first" == $mAction$$) $oSettings$$._iDisplayStart = 0;
				else if ("previous" == $mAction$$) $oSettings$$._iDisplayStart =
				0 <= $oSettings$$._iDisplayLength ? $oSettings$$._iDisplayStart - $oSettings$$._iDisplayLength: 0,
				0 > $oSettings$$._iDisplayStart && ($oSettings$$._iDisplayStart = 0);
				else if ("next" == $mAction$$) 0 <= $oSettings$$._iDisplayLength ? $oSettings$$._iDisplayStart + $oSettings$$._iDisplayLength < $oSettings$$.fnRecordsDisplay() && ($oSettings$$._iDisplayStart += $oSettings$$._iDisplayLength) : $oSettings$$._iDisplayStart = 0;
				else if ("last" == $mAction$$) if (0 <= $oSettings$$._iDisplayLength) {
					var $iPages$$ = parseInt(($oSettings$$.fnRecordsDisplay() -
					1) / $oSettings$$._iDisplayLength, 10) + 1;
					$oSettings$$._iDisplayStart = ($iPages$$ - 1) * $oSettings$$._iDisplayLength
				} else $oSettings$$._iDisplayStart = 0;
				else $_fnLog$$($oSettings$$, 0, "Unknown paging action: " + $mAction$$);
				$$$$($oSettings$$.oInstance).trigger("page", $oSettings$$);
				return $iOldStart$$ != $oSettings$$._iDisplayStart
			}
			function $_fnFeatureHtmlProcessing$$($oSettings$$) {
				var $nProcessing$$ = $document$$.createElement("div");
				$oSettings$$.aanFeatures.r || ($nProcessing$$.id = $oSettings$$.sTableId + "_processing");
				$nProcessing$$.innerHTML = $oSettings$$.oLanguage.sProcessing;
				$nProcessing$$.className = $oSettings$$.oClasses.sProcessing;
				$oSettings$$.nTable.parentNode.insertBefore($nProcessing$$, $oSettings$$.nTable);
				return $nProcessing$$
			}
			function $_fnProcessingDisplay$$($oSettings$$, $bShow$$) {
				if ($oSettings$$.oFeatures.bProcessing) for (var $an$$ = $oSettings$$.aanFeatures.r, $i$$ = 0, $iLen$$ = $an$$.length; $i$$ < $iLen$$; $i$$++) $an$$[$i$$].style.visibility = $bShow$$ ? "visible": "hidden";
				$$$$($oSettings$$.oInstance).trigger("processing",
				[$oSettings$$, $bShow$$])
			}
			function $_fnFeatureHtmlTable$$($oSettings$$) {
				if ("" === $oSettings$$.oScroll.sX && "" === $oSettings$$.oScroll.sY) return $oSettings$$.nTable;
				var $nScroller$$ = $document$$.createElement("div"),
				$nScrollHead$$ = $document$$.createElement("div"),
				$nCaption_nScrollHeadInner$$ = $document$$.createElement("div"),
				$nScrollBody$$ = $document$$.createElement("div"),
				$nScrollFoot$$ = $document$$.createElement("div"),
				$nScrollFootInner$$ = $document$$.createElement("div"),
				$nScrollHeadTable$$ = $oSettings$$.nTable.cloneNode(!1),
				$nScrollFootTable$$ = $oSettings$$.nTable.cloneNode(!1),
				$nThead$$ = $oSettings$$.nTable.getElementsByTagName("thead")[0],
				$nTfoot$$ = 0 === $oSettings$$.nTable.getElementsByTagName("tfoot").length ? null: $oSettings$$.nTable.getElementsByTagName("tfoot")[0],
				$oClasses$$ = $oSettings$$.oClasses;
				$nScrollHead$$.appendChild($nCaption_nScrollHeadInner$$);
				$nScrollFoot$$.appendChild($nScrollFootInner$$);
				$nScrollBody$$.appendChild($oSettings$$.nTable);
				$nScroller$$.appendChild($nScrollHead$$);
				$nScroller$$.appendChild($nScrollBody$$);
				$nCaption_nScrollHeadInner$$.appendChild($nScrollHeadTable$$);
				$nScrollHeadTable$$.appendChild($nThead$$);
				null !== $nTfoot$$ && ($nScroller$$.appendChild($nScrollFoot$$), $nScrollFootInner$$.appendChild($nScrollFootTable$$), $nScrollFootTable$$.appendChild($nTfoot$$));
				$nScroller$$.className = $oClasses$$.sScrollWrapper;
				$nScrollHead$$.className = $oClasses$$.sScrollHead;
				$nCaption_nScrollHeadInner$$.className = $oClasses$$.sScrollHeadInner;
				$nScrollBody$$.className = $oClasses$$.sScrollBody;
				$nScrollFoot$$.className =
				$oClasses$$.sScrollFoot;
				$nScrollFootInner$$.className = $oClasses$$.sScrollFootInner;
				$oSettings$$.oScroll.bAutoCss && ($nScrollHead$$.style.overflow = "hidden", $nScrollHead$$.style.position = "relative", $nScrollFoot$$.style.overflow = "hidden", $nScrollBody$$.style.overflow = "auto");
				$nScrollHead$$.style.border = "0";
				$nScrollHead$$.style.width = "100%";
				$nScrollFoot$$.style.border = "0";
				$nCaption_nScrollHeadInner$$.style.width = "" !== $oSettings$$.oScroll.sXInner ? $oSettings$$.oScroll.sXInner: "100%";
				$nScrollHeadTable$$.removeAttribute("id");
				$nScrollHeadTable$$.style.marginLeft = "0";
				$oSettings$$.nTable.style.marginLeft = "0";
				null !== $nTfoot$$ && ($nScrollFootTable$$.removeAttribute("id"), $nScrollFootTable$$.style.marginLeft = "0");
				$nCaption_nScrollHeadInner$$ = $$$$($oSettings$$.nTable).children("caption");
				0 < $nCaption_nScrollHeadInner$$.length && ($nCaption_nScrollHeadInner$$ = $nCaption_nScrollHeadInner$$[0], "top" === $nCaption_nScrollHeadInner$$._captionSide ? $nScrollHeadTable$$.appendChild($nCaption_nScrollHeadInner$$) : "bottom" === $nCaption_nScrollHeadInner$$._captionSide &&
				$nTfoot$$ && $nScrollFootTable$$.appendChild($nCaption_nScrollHeadInner$$));
				"" !== $oSettings$$.oScroll.sX && ($nScrollHead$$.style.width = $_fnStringToCss$$($oSettings$$.oScroll.sX), $nScrollBody$$.style.width = $_fnStringToCss$$($oSettings$$.oScroll.sX), null !== $nTfoot$$ && ($nScrollFoot$$.style.width = $_fnStringToCss$$($oSettings$$.oScroll.sX)), $$$$($nScrollBody$$).scroll(function() {
					$nScrollHead$$.scrollLeft = this.scrollLeft;
					if ($nTfoot$$ !== null) $nScrollFoot$$.scrollLeft = this.scrollLeft
				}));
				"" !== $oSettings$$.oScroll.sY &&
				($nScrollBody$$.style.height = $_fnStringToCss$$($oSettings$$.oScroll.sY));
				$oSettings$$.aoDrawCallback.push({
					fn: $_fnScrollDraw$$,
					sName: "scrolling"
				});
				$oSettings$$.oScroll.bInfinite && $$$$($nScrollBody$$).scroll(function() {
					if (!$oSettings$$.bDrawing && $$$$(this).scrollTop() !== 0 && $$$$(this).scrollTop() + $$$$(this).height() > $$$$($oSettings$$.nTable).height() - $oSettings$$.oScroll.iLoadGap && $oSettings$$.fnDisplayEnd() < $oSettings$$.fnRecordsDisplay()) {
						$_fnPageChange$$($oSettings$$, "next");
						$_fnCalculateEnd$$($oSettings$$);
						$_fnDraw$$($oSettings$$)
					}
				});
				$oSettings$$.nScrollHead = $nScrollHead$$;
				$oSettings$$.nScrollFoot = $nScrollFoot$$;
				return $nScroller$$
			}
			function $_fnScrollDraw$$($o$$) {
				var $nScrollHeadInner$$ = $o$$.nScrollHead.getElementsByTagName("div")[0],
				$bScrolling_nScrollHeadTable$$ = $nScrollHeadInner$$.getElementsByTagName("table")[0],
				$nScrollBody$$ = $o$$.nTable.parentNode,
				$i$$0$$,
				$iLen$$,
				$anHeadToSize_iCorrection$$,
				$anHeadSizers$$,
				$anFootSizers_nTfootSize$$,
				$anFootToSize$$,
				$oStyle$$,
				$iVis$$,
				$aApplied$$ = [],
				$aAppliedFooter$$ =
				[],
				$nScrollFootInner$$ = null !== $o$$.nTFoot ? $o$$.nScrollFoot.getElementsByTagName("div")[0] : null,
				$nScrollFootTable$$ = null !== $o$$.nTFoot ? $nScrollFootInner$$.getElementsByTagName("table")[0] : null,
				$iExtra_iOuterWidth_ie67$$ = $o$$.oBrowser.bScrollOversize,
				$zeroOut$$ = function $$zeroOut$$$($nSizer$$) {
					$oStyle$$ = $nSizer$$.style;
					$oStyle$$.paddingTop = "0";
					$oStyle$$.paddingBottom = "0";
					$oStyle$$.borderTopWidth = "0";
					$oStyle$$.borderBottomWidth = "0";
					$oStyle$$.height = 0
				};
				$$$$($o$$.nTable).children("thead, tfoot").remove();
				$i$$0$$ = $$$$($o$$.nTHead).clone()[0];
				$o$$.nTable.insertBefore($i$$0$$, $o$$.nTable.childNodes[0]);
				$anHeadToSize_iCorrection$$ = $o$$.nTHead.getElementsByTagName("tr");
				$anHeadSizers$$ = $i$$0$$.getElementsByTagName("tr");
				null !== $o$$.nTFoot && ($anFootSizers_nTfootSize$$ = $$$$($o$$.nTFoot).clone()[0], $o$$.nTable.insertBefore($anFootSizers_nTfootSize$$, $o$$.nTable.childNodes[1]), $anFootToSize$$ = $o$$.nTFoot.getElementsByTagName("tr"), $anFootSizers_nTfootSize$$ = $anFootSizers_nTfootSize$$.getElementsByTagName("tr"));
				"" === $o$$.oScroll.sX && ($nScrollBody$$.style.width = "100%", $nScrollHeadInner$$.parentNode.style.width = "100%");
				var $nThs$$ = $_fnGetUniqueThs$$($o$$, $i$$0$$);
				$i$$0$$ = 0;
				for ($iLen$$ = $nThs$$.length; $i$$0$$ < $iLen$$; $i$$0$$++) $iVis$$ = $_fnVisibleToColumnIndex$$($o$$, $i$$0$$),
				$nThs$$[$i$$0$$].style.width = $o$$.aoColumns[$iVis$$].sWidth;
				null !== $o$$.nTFoot && $_fnApplyToChildren$$(function($n$$) {
					$n$$.style.width = ""
				},
				$anFootSizers_nTfootSize$$);
				$o$$.oScroll.bCollapse && "" !== $o$$.oScroll.sY && ($nScrollBody$$.style.height =
				$nScrollBody$$.offsetHeight + $o$$.nTHead.offsetHeight + "px");
				$i$$0$$ = $$$$($o$$.nTable).outerWidth();
				if ("" === $o$$.oScroll.sX) {
					if ($o$$.nTable.style.width = "100%", $iExtra_iOuterWidth_ie67$$ && ($$$$("tbody", $nScrollBody$$).height() > $nScrollBody$$.offsetHeight || "scroll" == $$$$($nScrollBody$$).css("overflow-y"))) $o$$.nTable.style.width = $_fnStringToCss$$($$$$($o$$.nTable).outerWidth() - $o$$.oScroll.iBarWidth)
				} else "" !== $o$$.oScroll.sXInner ? $o$$.nTable.style.width = $_fnStringToCss$$($o$$.oScroll.sXInner) : $i$$0$$ ==
				$$$$($nScrollBody$$).width() && $$$$($nScrollBody$$).height() < $$$$($o$$.nTable).height() ? ($o$$.nTable.style.width = $_fnStringToCss$$($i$$0$$ - $o$$.oScroll.iBarWidth), $$$$($o$$.nTable).outerWidth() > $i$$0$$ - $o$$.oScroll.iBarWidth && ($o$$.nTable.style.width = $_fnStringToCss$$($i$$0$$))) : $o$$.nTable.style.width = $_fnStringToCss$$($i$$0$$);
				$i$$0$$ = $$$$($o$$.nTable).outerWidth();
				$_fnApplyToChildren$$($zeroOut$$, $anHeadSizers$$);
				$_fnApplyToChildren$$(function($nSizer$$) {
					$aApplied$$.push($_fnStringToCss$$($$$$($nSizer$$).width()))
				},
				$anHeadSizers$$);
				$_fnApplyToChildren$$(function($nToSize$$, $i$$) {
					$nToSize$$.style.width = $aApplied$$[$i$$]
				},
				$anHeadToSize_iCorrection$$);
				$$$$($anHeadSizers$$).height(0);
				null !== $o$$.nTFoot && ($_fnApplyToChildren$$($zeroOut$$, $anFootSizers_nTfootSize$$), $_fnApplyToChildren$$(function($nSizer$$) {
					$aAppliedFooter$$.push($_fnStringToCss$$($$$$($nSizer$$).width()))
				},
				$anFootSizers_nTfootSize$$), $_fnApplyToChildren$$(function($nToSize$$, $i$$) {
					$nToSize$$.style.width = $aAppliedFooter$$[$i$$]
				},
				$anFootToSize$$),
				$$$$($anFootSizers_nTfootSize$$).height(0));
				$_fnApplyToChildren$$(function($nSizer$$, $i$$) {
					$nSizer$$.innerHTML = "";
					$nSizer$$.style.width = $aApplied$$[$i$$]
				},
				$anHeadSizers$$);
				null !== $o$$.nTFoot && $_fnApplyToChildren$$(function($nSizer$$, $i$$) {
					$nSizer$$.innerHTML = "";
					$nSizer$$.style.width = $aAppliedFooter$$[$i$$]
				},
				$anFootSizers_nTfootSize$$);
				if ($$$$($o$$.nTable).outerWidth() < $i$$0$$) {
					$anHeadToSize_iCorrection$$ = $nScrollBody$$.scrollHeight > $nScrollBody$$.offsetHeight || "scroll" == $$$$($nScrollBody$$).css("overflow-y") ?
					$i$$0$$ + $o$$.oScroll.iBarWidth: $i$$0$$;
					if ($iExtra_iOuterWidth_ie67$$ && ($nScrollBody$$.scrollHeight > $nScrollBody$$.offsetHeight || "scroll" == $$$$($nScrollBody$$).css("overflow-y"))) $o$$.nTable.style.width = $_fnStringToCss$$($anHeadToSize_iCorrection$$ - $o$$.oScroll.iBarWidth);
					$nScrollBody$$.style.width = $_fnStringToCss$$($anHeadToSize_iCorrection$$);
					$o$$.nScrollHead.style.width = $_fnStringToCss$$($anHeadToSize_iCorrection$$);
					null !== $o$$.nTFoot && ($o$$.nScrollFoot.style.width = $_fnStringToCss$$($anHeadToSize_iCorrection$$));
					"" === $o$$.oScroll.sX ? $_fnLog$$($o$$, 1, "The table cannot fit into the current element which will cause column misalignment. The table has been drawn at its minimum possible width.") : "" !== $o$$.oScroll.sXInner && $_fnLog$$($o$$, 1, "The table cannot fit into the current element which will cause column misalignment. Increase the sScrollXInner value or remove it to allow automatic calculation")
				} else $nScrollBody$$.style.width = $_fnStringToCss$$("100%"),
				$o$$.nScrollHead.style.width = $_fnStringToCss$$("100%"),
				null !== $o$$.nTFoot && ($o$$.nScrollFoot.style.width = $_fnStringToCss$$("100%"));
				"" === $o$$.oScroll.sY && $iExtra_iOuterWidth_ie67$$ && ($nScrollBody$$.style.height = $_fnStringToCss$$($o$$.nTable.offsetHeight + $o$$.oScroll.iBarWidth));
				"" !== $o$$.oScroll.sY && $o$$.oScroll.bCollapse && ($nScrollBody$$.style.height = $_fnStringToCss$$($o$$.oScroll.sY), $iExtra_iOuterWidth_ie67$$ = "" !== $o$$.oScroll.sX && $o$$.nTable.offsetWidth > $nScrollBody$$.offsetWidth ? $o$$.oScroll.iBarWidth: 0, $o$$.nTable.offsetHeight < $nScrollBody$$.offsetHeight &&
				($nScrollBody$$.style.height = $_fnStringToCss$$($o$$.nTable.offsetHeight + $iExtra_iOuterWidth_ie67$$)));
				$iExtra_iOuterWidth_ie67$$ = $$$$($o$$.nTable).outerWidth();
				$bScrolling_nScrollHeadTable$$.style.width = $_fnStringToCss$$($iExtra_iOuterWidth_ie67$$);
				$nScrollHeadInner$$.style.width = $_fnStringToCss$$($iExtra_iOuterWidth_ie67$$);
				$bScrolling_nScrollHeadTable$$ = $$$$($o$$.nTable).height() > $nScrollBody$$.clientHeight || "scroll" == $$$$($nScrollBody$$).css("overflow-y");
				$nScrollHeadInner$$.style.paddingRight =
				$bScrolling_nScrollHeadTable$$ ? $o$$.oScroll.iBarWidth + "px": "0px";
				null !== $o$$.nTFoot && ($nScrollFootTable$$.style.width = $_fnStringToCss$$($iExtra_iOuterWidth_ie67$$), $nScrollFootInner$$.style.width = $_fnStringToCss$$($iExtra_iOuterWidth_ie67$$), $nScrollFootInner$$.style.paddingRight = $bScrolling_nScrollHeadTable$$ ? $o$$.oScroll.iBarWidth + "px": "0px");
				$$$$($nScrollBody$$).scroll();
				if ($o$$.bSorted || $o$$.bFiltered) $nScrollBody$$.scrollTop = 0
			}
			function $_fnApplyToChildren$$($fn$$, $an1$$, $an2$$) {
				for (var $index$$ =
				0, $i$$ = 0, $iLen$$ = $an1$$.length, $nNode1$$, $nNode2$$; $i$$ < $iLen$$;) {
					$nNode1$$ = $an1$$[$i$$].firstChild;
					for ($nNode2$$ = $an2$$ ? $an2$$[$i$$].firstChild: null; $nNode1$$;) 1 === $nNode1$$.nodeType && ($an2$$ ? $fn$$($nNode1$$, $nNode2$$, $index$$) : $fn$$($nNode1$$, $index$$), $index$$++),
					$nNode1$$ = $nNode1$$.nextSibling,
					$nNode2$$ = $an2$$ ? $nNode2$$.nextSibling: null;
					$i$$++
				}
			}
			function $_fnConvertToWidth$$($sWidth$$, $nParent$$) {
				if (!$sWidth$$ || null === $sWidth$$ || "" === $sWidth$$) return 0;
				$nParent$$ || ($nParent$$ = $document$$.body);
				var $iWidth$$,
				$nTmp$$ = $document$$.createElement("div");
				$nTmp$$.style.width = $_fnStringToCss$$($sWidth$$);
				$nParent$$.appendChild($nTmp$$);
				$iWidth$$ = $nTmp$$.offsetWidth;
				$nParent$$.removeChild($nTmp$$);
				return $iWidth$$
			}
			function $_fnCalculateColumnWidths$$($oSettings$$) {
				var $iUserInputs_nCalcTmp$$ = 0,
				$iTmpWidth_nTr$$,
				$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ = 0,
				$cssWidth_iColums_oNodes$$ = $oSettings$$.aoColumns.length,
				$i$$,
				$iTotal$$2_iWidth$$,
				$nThs$$ = $$$$("th", $oSettings$$.nTHead),
				$widthAttr$$ =
				$oSettings$$.nTable.getAttribute("width");
				$iTotal$$2_iWidth$$ = $oSettings$$.nTable.parentNode;
				for ($i$$ = 0; $i$$ < $cssWidth_iColums_oNodes$$; $i$$++) $oSettings$$.aoColumns[$i$$].bVisible && ($iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$++, null !== $oSettings$$.aoColumns[$i$$].sWidth && ($iTmpWidth_nTr$$ = $_fnConvertToWidth$$($oSettings$$.aoColumns[$i$$].sWidthOrig, $iTotal$$2_iWidth$$), null !== $iTmpWidth_nTr$$ && ($oSettings$$.aoColumns[$i$$].sWidth = $_fnStringToCss$$($iTmpWidth_nTr$$)), $iUserInputs_nCalcTmp$$++));
				if ($cssWidth_iColums_oNodes$$ == $nThs$$.length && 0 === $iUserInputs_nCalcTmp$$ && $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ == $cssWidth_iColums_oNodes$$ && "" === $oSettings$$.oScroll.sX && "" === $oSettings$$.oScroll.sY) for ($i$$ = 0; $i$$ < $oSettings$$.aoColumns.length; $i$$++) $iTmpWidth_nTr$$ = $$$$($nThs$$[$i$$]).width(),
				null !== $iTmpWidth_nTr$$ && ($oSettings$$.aoColumns[$i$$].sWidth = $_fnStringToCss$$($iTmpWidth_nTr$$));
				else {
					$iUserInputs_nCalcTmp$$ = $oSettings$$.nTable.cloneNode(!1);
					$i$$ = $oSettings$$.nTHead.cloneNode(!0);
					$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ = $document$$.createElement("tbody");
					$iTmpWidth_nTr$$ = $document$$.createElement("tr");
					$iUserInputs_nCalcTmp$$.removeAttribute("id");
					$iUserInputs_nCalcTmp$$.appendChild($i$$);
					null !== $oSettings$$.nTFoot && ($iUserInputs_nCalcTmp$$.appendChild($oSettings$$.nTFoot.cloneNode(!0)), $_fnApplyToChildren$$(function($n$$) {
						$n$$.style.width = ""
					},
					$iUserInputs_nCalcTmp$$.getElementsByTagName("tr")));
					$iUserInputs_nCalcTmp$$.appendChild($iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$);
					$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$.appendChild($iTmpWidth_nTr$$);
					$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ = $$$$("thead th", $iUserInputs_nCalcTmp$$);
					0 === $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$.length && ($iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ = $$$$("tbody tr:eq(0)>td", $iUserInputs_nCalcTmp$$));
					$nThs$$ = $_fnGetUniqueThs$$($oSettings$$, $i$$);
					for ($i$$ = $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ = 0; $i$$ < $cssWidth_iColums_oNodes$$; $i$$++) {
						var $oColumn$$ =
						$oSettings$$.aoColumns[$i$$];
						$oColumn$$.bVisible && null !== $oColumn$$.sWidthOrig && "" !== $oColumn$$.sWidthOrig ? $nThs$$[$i$$ - $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$].style.width = $_fnStringToCss$$($oColumn$$.sWidthOrig) : $oColumn$$.bVisible ? $nThs$$[$i$$ - $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$].style.width = "": $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$++
					}
					for ($i$$ = 0; $i$$ < $cssWidth_iColums_oNodes$$; $i$$++) $oSettings$$.aoColumns[$i$$].bVisible && ($iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ =
					$_fnGetWidestNode$$($oSettings$$, $i$$), null !== $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ && ($iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ = $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$.cloneNode(!0), "" !== $oSettings$$.aoColumns[$i$$].sContentPadding && ($iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$.innerHTML += $oSettings$$.aoColumns[$i$$].sContentPadding), $iTmpWidth_nTr$$.appendChild($iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$)));
					$iTotal$$2_iWidth$$.appendChild($iUserInputs_nCalcTmp$$);
					"" !== $oSettings$$.oScroll.sX && "" !== $oSettings$$.oScroll.sXInner ? $iUserInputs_nCalcTmp$$.style.width = $_fnStringToCss$$($oSettings$$.oScroll.sXInner) : "" !== $oSettings$$.oScroll.sX ? ($iUserInputs_nCalcTmp$$.style.width = "", $$$$($iUserInputs_nCalcTmp$$).width() < $iTotal$$2_iWidth$$.offsetWidth && ($iUserInputs_nCalcTmp$$.style.width = $_fnStringToCss$$($iTotal$$2_iWidth$$.offsetWidth))) : "" !== $oSettings$$.oScroll.sY ? $iUserInputs_nCalcTmp$$.style.width = $_fnStringToCss$$($iTotal$$2_iWidth$$.offsetWidth) : $widthAttr$$ &&
					($iUserInputs_nCalcTmp$$.style.width = $_fnStringToCss$$($widthAttr$$));
					$iUserInputs_nCalcTmp$$.style.visibility = "hidden";
					$_fnScrollingWidthAdjust$$($oSettings$$, $iUserInputs_nCalcTmp$$);
					$cssWidth_iColums_oNodes$$ = $$$$("tbody tr:eq(0)", $iUserInputs_nCalcTmp$$).children();
					0 === $cssWidth_iColums_oNodes$$.length && ($cssWidth_iColums_oNodes$$ = $_fnGetUniqueThs$$($oSettings$$, $$$$("thead", $iUserInputs_nCalcTmp$$)[0]));
					if ("" !== $oSettings$$.oScroll.sX) {
						for ($i$$ = $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ =
						$iTotal$$2_iWidth$$ = 0; $i$$ < $oSettings$$.aoColumns.length; $i$$++) $oSettings$$.aoColumns[$i$$].bVisible && ($iTotal$$2_iWidth$$ = null === $oSettings$$.aoColumns[$i$$].sWidthOrig ? $iTotal$$2_iWidth$$ + $$$$($cssWidth_iColums_oNodes$$[$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$]).outerWidth() : $iTotal$$2_iWidth$$ + (parseInt($oSettings$$.aoColumns[$i$$].sWidth.replace("px", ""), 10) + ($$$$($cssWidth_iColums_oNodes$$[$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$]).outerWidth() - $$$$($cssWidth_iColums_oNodes$$[$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$]).width())),
						$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$++);
						$iUserInputs_nCalcTmp$$.style.width = $_fnStringToCss$$($iTotal$$2_iWidth$$);
						$oSettings$$.nTable.style.width = $_fnStringToCss$$($iTotal$$2_iWidth$$)
					}
					for ($i$$ = $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$ = 0; $i$$ < $oSettings$$.aoColumns.length; $i$$++) $oSettings$$.aoColumns[$i$$].bVisible && ($iTotal$$2_iWidth$$ = $$$$($cssWidth_iColums_oNodes$$[$iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$]).width(), null !== $iTotal$$2_iWidth$$ && 0 < $iTotal$$2_iWidth$$ &&
					($oSettings$$.aoColumns[$i$$].sWidth = $_fnStringToCss$$($iTotal$$2_iWidth$$)), $iCorrector$$2_iVisibleColumns_jqColSizing_nBody_nTd$$++);
					$cssWidth_iColums_oNodes$$ = $$$$($iUserInputs_nCalcTmp$$).css("width");
					$oSettings$$.nTable.style.width = -1 !== $cssWidth_iColums_oNodes$$.indexOf("%") ? $cssWidth_iColums_oNodes$$: $_fnStringToCss$$($$$$($iUserInputs_nCalcTmp$$).outerWidth());
					$iUserInputs_nCalcTmp$$.parentNode.removeChild($iUserInputs_nCalcTmp$$)
				}
				$widthAttr$$ && ($oSettings$$.nTable.style.width = $_fnStringToCss$$($widthAttr$$))
			}
			function $_fnScrollingWidthAdjust$$($oSettings$$, $n$$) {
				"" === $oSettings$$.oScroll.sX && "" !== $oSettings$$.oScroll.sY ? ($$$$($n$$).width(), $n$$.style.width = $_fnStringToCss$$($$$$($n$$).outerWidth() - $oSettings$$.oScroll.iBarWidth)) : "" !== $oSettings$$.oScroll.sX && ($n$$.style.width = $_fnStringToCss$$($$$$($n$$).outerWidth()))
			}
			function $_fnGetWidestNode$$($oSettings$$, $iCol$$) {
				var $iMaxIndex$$ = $_fnGetMaxLenString$$($oSettings$$, $iCol$$);
				if (0 > $iMaxIndex$$) return null;
				if (null === $oSettings$$.aoData[$iMaxIndex$$].nTr) {
					var $n$$ =
					$document$$.createElement("td");
					$n$$.innerHTML = $_fnGetCellData$$($oSettings$$, $iMaxIndex$$, $iCol$$, "");
					return $n$$
				}
				return $_fnGetTdNodes$$($oSettings$$, $iMaxIndex$$)[$iCol$$]
			}
			function $_fnGetMaxLenString$$($oSettings$$, $iCol$$) {
				for (var $iMax$$ = -1, $iMaxIndex$$ = -1, $i$$ = 0; $i$$ < $oSettings$$.aoData.length; $i$$++) {
					var $s$$ = $_fnGetCellData$$($oSettings$$, $i$$, $iCol$$, "display") + "",
					$s$$ = $s$$.replace(/<.*?>/g, "");
					$s$$.length > $iMax$$ && ($iMax$$ = $s$$.length, $iMaxIndex$$ = $i$$)
				}
				return $iMaxIndex$$
			}
			function $_fnStringToCss$$($s$$) {
				if (null ===
				$s$$) return "0px";
				if ("number" == typeof $s$$) return 0 > $s$$ ? "0px": $s$$ + "px";
				var $c$$ = $s$$.charCodeAt($s$$.length - 1);
				return 48 > $c$$ || 57 < $c$$ ? $s$$: $s$$ + "px"
			}
			function $_fnScrollBarWidth$$() {
				var $inner_w2$$ = $document$$.createElement("p"),
				$style_w1$$ = $inner_w2$$.style;
				$style_w1$$.width = "100%";
				$style_w1$$.height = "200px";
				$style_w1$$.padding = "0px";
				var $outer$$ = $document$$.createElement("div"),
				$style_w1$$ = $outer$$.style;
				$style_w1$$.position = "absolute";
				$style_w1$$.top = "0px";
				$style_w1$$.left = "0px";
				$style_w1$$.visibility =
				"hidden";
				$style_w1$$.width = "200px";
				$style_w1$$.height = "150px";
				$style_w1$$.padding = "0px";
				$style_w1$$.overflow = "hidden";
				$outer$$.appendChild($inner_w2$$);
				$document$$.body.appendChild($outer$$);
				$style_w1$$ = $inner_w2$$.offsetWidth;
				$outer$$.style.overflow = "scroll";
				$inner_w2$$ = $inner_w2$$.offsetWidth;
				$style_w1$$ == $inner_w2$$ && ($inner_w2$$ = $outer$$.clientWidth);
				$document$$.body.removeChild($outer$$);
				return $style_w1$$ - $inner_w2$$
			}
			function $_fnSort$$($oSettings$$, $bApplyClasses$$) {
				var $i$$,
				$iColumn$$3_iLen$$,
				$iVisColumn_j$$15_nTh$$,
				$fnSortFormat_jLen$$,
				$aData$$4_k$$,
				$kLen$$,
				$aaSort$$ = [],
				$aiOrig$$ = [],
				$oSort$$ = $DataTable$$.ext.oSort,
				$aoData$$ = $oSettings$$.aoData,
				$aoColumns$$ = $oSettings$$.aoColumns,
				$oAria$$ = $oSettings$$.oLanguage.oAria;
				if (!$oSettings$$.oFeatures.bServerSide && (0 !== $oSettings$$.aaSorting.length || null !== $oSettings$$.aaSortingFixed)) {
					$aaSort$$ = null !== $oSettings$$.aaSortingFixed ? $oSettings$$.aaSortingFixed.concat($oSettings$$.aaSorting) : $oSettings$$.aaSorting.slice();
					for ($i$$ = 0; $i$$ < $aaSort$$.length; $i$$++) if ($iColumn$$3_iLen$$ =
					$aaSort$$[$i$$][0], $iVisColumn_j$$15_nTh$$ = $_fnColumnIndexToVisible$$($oSettings$$, $iColumn$$3_iLen$$), $fnSortFormat_jLen$$ = $oSettings$$.aoColumns[$iColumn$$3_iLen$$].sSortDataType, $DataTable$$.ext.afnSortData[$fnSortFormat_jLen$$]) if ($aData$$4_k$$ = $DataTable$$.ext.afnSortData[$fnSortFormat_jLen$$].call($oSettings$$.oInstance, $oSettings$$, $iColumn$$3_iLen$$, $iVisColumn_j$$15_nTh$$), $aData$$4_k$$.length === $aoData$$.length) {
						$iVisColumn_j$$15_nTh$$ = 0;
						for ($fnSortFormat_jLen$$ = $aoData$$.length; $iVisColumn_j$$15_nTh$$ <
						$fnSortFormat_jLen$$; $iVisColumn_j$$15_nTh$$++) $_fnSetCellData$$($oSettings$$, $iVisColumn_j$$15_nTh$$, $iColumn$$3_iLen$$, $aData$$4_k$$[$iVisColumn_j$$15_nTh$$])
					} else $_fnLog$$($oSettings$$, 0, "Returned data sort array (col " + $iColumn$$3_iLen$$ + ") is the wrong length");
					$i$$ = 0;
					for ($iColumn$$3_iLen$$ = $oSettings$$.aiDisplayMaster.length; $i$$ < $iColumn$$3_iLen$$; $i$$++) $aiOrig$$[$oSettings$$.aiDisplayMaster[$i$$]] = $i$$;
					var $iSortLen$$ = $aaSort$$.length,
					$aDataSort$$0$$;
					$i$$ = 0;
					for ($iColumn$$3_iLen$$ = $aoData$$.length; $i$$ <
					$iColumn$$3_iLen$$; $i$$++) for ($iVisColumn_j$$15_nTh$$ = 0; $iVisColumn_j$$15_nTh$$ < $iSortLen$$; $iVisColumn_j$$15_nTh$$++) {
						$aDataSort$$0$$ = $aoColumns$$[$aaSort$$[$iVisColumn_j$$15_nTh$$][0]].aDataSort;
						$aData$$4_k$$ = 0;
						for ($kLen$$ = $aDataSort$$0$$.length; $aData$$4_k$$ < $kLen$$; $aData$$4_k$$++) $fnSortFormat_jLen$$ = $aoColumns$$[$aDataSort$$0$$[$aData$$4_k$$]].sType,
						$fnSortFormat_jLen$$ = $oSort$$[($fnSortFormat_jLen$$ ? $fnSortFormat_jLen$$: "string") + "-pre"],
						$aoData$$[$i$$]._aSortData[$aDataSort$$0$$[$aData$$4_k$$]] =
						$fnSortFormat_jLen$$ ? $fnSortFormat_jLen$$($_fnGetCellData$$($oSettings$$, $i$$, $aDataSort$$0$$[$aData$$4_k$$], "sort")) : $_fnGetCellData$$($oSettings$$, $i$$, $aDataSort$$0$$[$aData$$4_k$$], "sort")
					}
					$oSettings$$.aiDisplayMaster.sort(function($a$$, $b$$) {
						var $k$$,
						$l$$,
						$lLen$$,
						$iTest_sDataType$$,
						$aDataSort$$;
						for ($k$$ = 0; $k$$ < $iSortLen$$; $k$$++) {
							$aDataSort$$ = $aoColumns$$[$aaSort$$[$k$$][0]].aDataSort;
							$l$$ = 0;
							for ($lLen$$ = $aDataSort$$.length; $l$$ < $lLen$$; $l$$++) if ($iTest_sDataType$$ = $aoColumns$$[$aDataSort$$[$l$$]].sType,
							$iTest_sDataType$$ = $oSort$$[($iTest_sDataType$$ ? $iTest_sDataType$$: "string") + "-" + $aaSort$$[$k$$][1]]($aoData$$[$a$$]._aSortData[$aDataSort$$[$l$$]], $aoData$$[$b$$]._aSortData[$aDataSort$$[$l$$]]), 0 !== $iTest_sDataType$$) return $iTest_sDataType$$
						}
						return $oSort$$["numeric-asc"]($aiOrig$$[$a$$], $aiOrig$$[$b$$])
					})
				} ($bApplyClasses$$ === $undefined$$ || $bApplyClasses$$) && !$oSettings$$.oFeatures.bDeferRender && $_fnSortingClasses$$($oSettings$$);
				$i$$ = 0;
				for ($iColumn$$3_iLen$$ = $oSettings$$.aoColumns.length; $i$$ <
				$iColumn$$3_iLen$$; $i$$++) $fnSortFormat_jLen$$ = $aoColumns$$[$i$$].sTitle.replace(/<.*?>/g, ""),
				$iVisColumn_j$$15_nTh$$ = $aoColumns$$[$i$$].nTh,
				$iVisColumn_j$$15_nTh$$.removeAttribute("aria-sort"),
				$iVisColumn_j$$15_nTh$$.removeAttribute("aria-label"),
				$aoColumns$$[$i$$].bSortable ? 0 < $aaSort$$.length && $aaSort$$[0][0] == $i$$ ? ($iVisColumn_j$$15_nTh$$.setAttribute("aria-sort", "asc" == $aaSort$$[0][1] ? "ascending": "descending"), $iVisColumn_j$$15_nTh$$.setAttribute("aria-label", $fnSortFormat_jLen$$ + ("asc" == ($aoColumns$$[$i$$].asSorting[$aaSort$$[0][2] +
				1] ? $aoColumns$$[$i$$].asSorting[$aaSort$$[0][2] + 1] : $aoColumns$$[$i$$].asSorting[0]) ? $oAria$$.sSortAscending: $oAria$$.sSortDescending))) : $iVisColumn_j$$15_nTh$$.setAttribute("aria-label", $fnSortFormat_jLen$$ + ("asc" == $aoColumns$$[$i$$].asSorting[0] ? $oAria$$.sSortAscending: $oAria$$.sSortDescending)) : $iVisColumn_j$$15_nTh$$.setAttribute("aria-label", $fnSortFormat_jLen$$);
				$oSettings$$.bSorted = !0;
				$$$$($oSettings$$.oInstance).trigger("sort", $oSettings$$);
				$oSettings$$.oFeatures.bFilter ? $_fnFilterComplete$$($oSettings$$,
				$oSettings$$.oPreviousSearch, 1) : ($oSettings$$.aiDisplay = $oSettings$$.aiDisplayMaster.slice(), $oSettings$$._iDisplayStart = 0, $_fnCalculateEnd$$($oSettings$$), $_fnDraw$$($oSettings$$))
			}
			function $_fnSortAttachListener$$($oSettings$$, $nNode$$, $iDataIndex$$, $fnCallback$$) {
				$_fnBindAction$$($nNode$$, {},
				function($e$$) {
					if (!1 !== $oSettings$$.aoColumns[$iDataIndex$$].bSortable) {
						var $fnInnerSorting$$ = function $$fnInnerSorting$$$() {
							var $iColumn$$,
							$iNextSort$$;
							if ($e$$.shiftKey) {
								for (var $bFound$$ = !1, $i$$ = 0; $i$$ < $oSettings$$.aaSorting.length; $i$$++) if ($oSettings$$.aaSorting[$i$$][0] ==
								$iDataIndex$$) {
									$bFound$$ = !0;
									$iColumn$$ = $oSettings$$.aaSorting[$i$$][0];
									$iNextSort$$ = $oSettings$$.aaSorting[$i$$][2] + 1;
									$oSettings$$.aoColumns[$iColumn$$].asSorting[$iNextSort$$] ? ($oSettings$$.aaSorting[$i$$][1] = $oSettings$$.aoColumns[$iColumn$$].asSorting[$iNextSort$$], $oSettings$$.aaSorting[$i$$][2] = $iNextSort$$) : $oSettings$$.aaSorting.splice($i$$, 1);
									break
								} ! 1 === $bFound$$ && $oSettings$$.aaSorting.push([$iDataIndex$$, $oSettings$$.aoColumns[$iDataIndex$$].asSorting[0], 0])
							} else 1 == $oSettings$$.aaSorting.length &&
							$oSettings$$.aaSorting[0][0] == $iDataIndex$$ ? ($iColumn$$ = $oSettings$$.aaSorting[0][0], $iNextSort$$ = $oSettings$$.aaSorting[0][2] + 1, $oSettings$$.aoColumns[$iColumn$$].asSorting[$iNextSort$$] || ($iNextSort$$ = 0), $oSettings$$.aaSorting[0][1] = $oSettings$$.aoColumns[$iColumn$$].asSorting[$iNextSort$$], $oSettings$$.aaSorting[0][2] = $iNextSort$$) : ($oSettings$$.aaSorting.splice(0, $oSettings$$.aaSorting.length), $oSettings$$.aaSorting.push([$iDataIndex$$, $oSettings$$.aoColumns[$iDataIndex$$].asSorting[0], 0]));
							$_fnSort$$($oSettings$$)
						};
						$oSettings$$.oFeatures.bProcessing ? ($_fnProcessingDisplay$$($oSettings$$, !0), setTimeout(function() {
							$fnInnerSorting$$();
							$oSettings$$.oFeatures.bServerSide || $_fnProcessingDisplay$$($oSettings$$, !1)
						},
						0)) : $fnInnerSorting$$();
						"function" == typeof $fnCallback$$ && $fnCallback$$($oSettings$$)
					}
				})
			}
			function $_fnSortingClasses$$($nTds$$1_oSettings$$) {
				var $i$$,
				$aaSort$$2_iLen$$,
				$iClass_j$$,
				$asClasses_iFound$$,
				$jqSpan_reClass_sClass$$,
				$iColumns$$ = $nTds$$1_oSettings$$.aoColumns.length,
				$iTargetCol_oClasses$$ = $nTds$$1_oSettings$$.oClasses;
				for ($i$$ = 0; $i$$ < $iColumns$$; $i$$++) $nTds$$1_oSettings$$.aoColumns[$i$$].bSortable && $$$$($nTds$$1_oSettings$$.aoColumns[$i$$].nTh).removeClass($iTargetCol_oClasses$$.sSortAsc + " " + $iTargetCol_oClasses$$.sSortDesc + " " + $nTds$$1_oSettings$$.aoColumns[$i$$].sSortingClass);
				$aaSort$$2_iLen$$ = null !== $nTds$$1_oSettings$$.aaSortingFixed ? $nTds$$1_oSettings$$.aaSortingFixed.concat($nTds$$1_oSettings$$.aaSorting) : $nTds$$1_oSettings$$.aaSorting.slice();
				for ($i$$ = 0; $i$$ < $nTds$$1_oSettings$$.aoColumns.length; $i$$++) if ($nTds$$1_oSettings$$.aoColumns[$i$$].bSortable) {
					$jqSpan_reClass_sClass$$ =
					$nTds$$1_oSettings$$.aoColumns[$i$$].sSortingClass;
					$asClasses_iFound$$ = -1;
					for ($iClass_j$$ = 0; $iClass_j$$ < $aaSort$$2_iLen$$.length; $iClass_j$$++) if ($aaSort$$2_iLen$$[$iClass_j$$][0] == $i$$) {
						$jqSpan_reClass_sClass$$ = "asc" == $aaSort$$2_iLen$$[$iClass_j$$][1] ? $iTargetCol_oClasses$$.sSortAsc: $iTargetCol_oClasses$$.sSortDesc;
						$asClasses_iFound$$ = $iClass_j$$;
						break
					}
					$$$$($nTds$$1_oSettings$$.aoColumns[$i$$].nTh).addClass($jqSpan_reClass_sClass$$);
					$nTds$$1_oSettings$$.bJUI && ($jqSpan_reClass_sClass$$ = $$$$("span." +
					$iTargetCol_oClasses$$.sSortIcon, $nTds$$1_oSettings$$.aoColumns[$i$$].nTh), $jqSpan_reClass_sClass$$.removeClass($iTargetCol_oClasses$$.sSortJUIAsc + " " + $iTargetCol_oClasses$$.sSortJUIDesc + " " + $iTargetCol_oClasses$$.sSortJUI + " " + $iTargetCol_oClasses$$.sSortJUIAscAllowed + " " + $iTargetCol_oClasses$$.sSortJUIDescAllowed), $jqSpan_reClass_sClass$$.addClass( - 1 == $asClasses_iFound$$ ? $nTds$$1_oSettings$$.aoColumns[$i$$].sSortingClassJUI: "asc" == $aaSort$$2_iLen$$[$asClasses_iFound$$][1] ? $iTargetCol_oClasses$$.sSortJUIAsc:
					$iTargetCol_oClasses$$.sSortJUIDesc))
				} else $$$$($nTds$$1_oSettings$$.aoColumns[$i$$].nTh).addClass($nTds$$1_oSettings$$.aoColumns[$i$$].sSortingClass);
				$jqSpan_reClass_sClass$$ = $iTargetCol_oClasses$$.sSortColumn;
				if ($nTds$$1_oSettings$$.oFeatures.bSort && $nTds$$1_oSettings$$.oFeatures.bSortClasses) {
					$nTds$$1_oSettings$$ = $_fnGetTdNodes$$($nTds$$1_oSettings$$);
					$asClasses_iFound$$ = [];
					for ($i$$ = 0; $i$$ < $iColumns$$; $i$$++) $asClasses_iFound$$.push("");
					$i$$ = 0;
					for ($iClass_j$$ = 1; $i$$ < $aaSort$$2_iLen$$.length; $i$$++) $iTargetCol_oClasses$$ =
					parseInt($aaSort$$2_iLen$$[$i$$][0], 10),
					$asClasses_iFound$$[$iTargetCol_oClasses$$] = $jqSpan_reClass_sClass$$ + $iClass_j$$,
					3 > $iClass_j$$ && $iClass_j$$++;
					$jqSpan_reClass_sClass$$ = RegExp($jqSpan_reClass_sClass$$ + "[123]");
					var $sNewClass$$;
					$i$$ = 0;
					for ($aaSort$$2_iLen$$ = $nTds$$1_oSettings$$.length; $i$$ < $aaSort$$2_iLen$$; $i$$++) $iTargetCol_oClasses$$ = $i$$ % $iColumns$$,
					$iClass_j$$ = $nTds$$1_oSettings$$[$i$$].className,
					$sNewClass$$ = $asClasses_iFound$$[$iTargetCol_oClasses$$],
					$iTargetCol_oClasses$$ = $iClass_j$$.replace($jqSpan_reClass_sClass$$,
					$sNewClass$$),
					$iTargetCol_oClasses$$ != $iClass_j$$ ? $nTds$$1_oSettings$$[$i$$].className = $$$$.trim($iTargetCol_oClasses$$) : 0 < $sNewClass$$.length && -1 == $iClass_j$$.indexOf($sNewClass$$) && ($nTds$$1_oSettings$$[$i$$].className = $iClass_j$$ + " " + $sNewClass$$)
				}
			}
			function $_fnSaveState$$($oSettings$$) {
				if ($oSettings$$.oFeatures.bStateSave && !$oSettings$$.bDestroying) {
					var $bInfinite_i$$,
					$iLen$$;
					$bInfinite_i$$ = $oSettings$$.oScroll.bInfinite;
					var $oState$$ = {
						iCreate: (new Date).getTime(),
						iStart: $bInfinite_i$$ ? 0: $oSettings$$._iDisplayStart,
						iEnd: $bInfinite_i$$ ? $oSettings$$._iDisplayLength: $oSettings$$._iDisplayEnd,
						iLength: $oSettings$$._iDisplayLength,
						aaSorting: $$$$.extend(!0, [], $oSettings$$.aaSorting),
						oSearch: $$$$.extend(!0, {},
						$oSettings$$.oPreviousSearch),
						aoSearchCols: $$$$.extend(!0, [], $oSettings$$.aoPreSearchCols),
						abVisCols: []
					};
					$bInfinite_i$$ = 0;
					for ($iLen$$ = $oSettings$$.aoColumns.length; $bInfinite_i$$ < $iLen$$; $bInfinite_i$$++) $oState$$.abVisCols.push($oSettings$$.aoColumns[$bInfinite_i$$].bVisible);
					$_fnCallbackFire$$($oSettings$$, "aoStateSaveParams",
					"stateSaveParams", [$oSettings$$, $oState$$]);
					$oSettings$$.fnStateSave.call($oSettings$$.oInstance, $oSettings$$, $oState$$)
				}
			}
			function $_fnLoadState$$($oSettings$$, $oInit$$) {
				if ($oSettings$$.oFeatures.bStateSave) {
					var $oData$$ = $oSettings$$.fnStateLoad.call($oSettings$$.oInstance, $oSettings$$);
					if ($oData$$) {
						var $abStateLoad_i$$ = $_fnCallbackFire$$($oSettings$$, "aoStateLoadParams", "stateLoadParams", [$oSettings$$, $oData$$]);
						if ( - 1 === $$$$.inArray(!1, $abStateLoad_i$$)) {
							$oSettings$$.oLoadedState = $$$$.extend(!0,
							{},
							$oData$$);
							$oSettings$$._iDisplayStart = $oData$$.iStart;
							$oSettings$$.iInitDisplayStart = $oData$$.iStart;
							$oSettings$$._iDisplayEnd = $oData$$.iEnd;
							$oSettings$$._iDisplayLength = $oData$$.iLength;
							$oSettings$$.aaSorting = $oData$$.aaSorting.slice();
							$oSettings$$.saved_aaSorting = $oData$$.aaSorting.slice();
							$$$$.extend($oSettings$$.oPreviousSearch, $oData$$.oSearch);
							$$$$.extend(!0, $oSettings$$.aoPreSearchCols, $oData$$.aoSearchCols);
							$oInit$$.saved_aoColumns = [];
							for ($abStateLoad_i$$ = 0; $abStateLoad_i$$ < $oData$$.abVisCols.length; $abStateLoad_i$$++) $oInit$$.saved_aoColumns[$abStateLoad_i$$] =
							{},
							$oInit$$.saved_aoColumns[$abStateLoad_i$$].bVisible = $oData$$.abVisCols[$abStateLoad_i$$];
							$_fnCallbackFire$$($oSettings$$, "aoStateLoaded", "stateLoaded", [$oSettings$$, $oData$$])
						}
					}
				}
			}
			function $_fnSettingsFromNode$$($nTable$$) {
				for (var $i$$ = 0; $i$$ < $DataTable$$.settings.length; $i$$++) if ($DataTable$$.settings[$i$$].nTable === $nTable$$) return $DataTable$$.settings[$i$$];
				return null
			}
			function $_fnGetTrNodes$$($aoData$$6_oSettings$$) {
				for (var $aNodes$$ = [], $aoData$$6_oSettings$$ = $aoData$$6_oSettings$$.aoData,
				$i$$ = 0, $iLen$$ = $aoData$$6_oSettings$$.length; $i$$ < $iLen$$; $i$$++) null !== $aoData$$6_oSettings$$[$i$$].nTr && $aNodes$$.push($aoData$$6_oSettings$$[$i$$].nTr);
				return $aNodes$$
			}
			function $_fnGetTdNodes$$($oSettings$$, $iIndividualRow$$) {
				var $anReturn$$ = [],
				$iCorrector$$3_nTd$$,
				$anTds_iStart$$,
				$iRow$$,
				$iColumn$$5_sNodeName$$,
				$iColumns$$,
				$oData$$;
				$anTds_iStart$$ = 0;
				var $iEnd$$ = $oSettings$$.aoData.length;
				$iIndividualRow$$ !== $undefined$$ && ($anTds_iStart$$ = $iIndividualRow$$, $iEnd$$ = $iIndividualRow$$ + 1);
				for ($iRow$$ =
				$anTds_iStart$$; $iRow$$ < $iEnd$$; $iRow$$++) if ($oData$$ = $oSettings$$.aoData[$iRow$$], null !== $oData$$.nTr) {
					$anTds_iStart$$ = [];
					for ($iCorrector$$3_nTd$$ = $oData$$.nTr.firstChild; $iCorrector$$3_nTd$$;) $iColumn$$5_sNodeName$$ = $iCorrector$$3_nTd$$.nodeName.toLowerCase(),
					("td" == $iColumn$$5_sNodeName$$ || "th" == $iColumn$$5_sNodeName$$) && $anTds_iStart$$.push($iCorrector$$3_nTd$$),
					$iCorrector$$3_nTd$$ = $iCorrector$$3_nTd$$.nextSibling;
					$iColumn$$5_sNodeName$$ = $iCorrector$$3_nTd$$ = 0;
					for ($iColumns$$ = $oSettings$$.aoColumns.length; $iColumn$$5_sNodeName$$ <
					$iColumns$$; $iColumn$$5_sNodeName$$++) $oSettings$$.aoColumns[$iColumn$$5_sNodeName$$].bVisible ? $anReturn$$.push($anTds_iStart$$[$iColumn$$5_sNodeName$$ - $iCorrector$$3_nTd$$]) : ($anReturn$$.push($oData$$._anHidden[$iColumn$$5_sNodeName$$]), $iCorrector$$3_nTd$$++)
				}
				return $anReturn$$
			}
			function $_fnLog$$($oSettings$$, $iLevel$$, $sMesg$$) {
				$oSettings$$ = null === $oSettings$$ ? "DataTables warning: " + $sMesg$$: "DataTables warning (table id = '" + $oSettings$$.sTableId + "'): " + $sMesg$$;
				if (0 === $iLevel$$) if ("alert" == $DataTable$$.ext.sErrMode) alert($oSettings$$);
				else throw Error($oSettings$$);
				else $window$$.console && console.log && console.log($oSettings$$)
			}
			function $_fnMap$$($oRet$$, $oSrc$$, $sName$$, $sMappedName$$) {
				$sMappedName$$ === $undefined$$ && ($sMappedName$$ = $sName$$);
				$oSrc$$[$sName$$] !== $undefined$$ && ($oRet$$[$sMappedName$$] = $oSrc$$[$sName$$])
			}
			function $_fnExtend$$($oOut$$, $oExtender$$) {
				var $val$$,
				$prop$$;
				for ($prop$$ in $oExtender$$) $oExtender$$.hasOwnProperty($prop$$) && ($val$$ = $oExtender$$[$prop$$], "object" === typeof $oInit$$[$prop$$] && null !== $val$$ && !1 ===
				$$$$.isArray($val$$) ? $$$$.extend(!0, $oOut$$[$prop$$], $val$$) : $oOut$$[$prop$$] = $val$$);
				return $oOut$$
			}
			function $_fnBindAction$$($n$$, $oData$$, $fn$$) {
				$$$$($n$$).bind("click.DT", $oData$$,
				function($e$$) {
					$n$$.blur();
					$fn$$($e$$)
				}).bind("keypress.DT", $oData$$,
				function($e$$) {
					13 === $e$$.which && $fn$$($e$$)
				}).bind("selectstart.DT",
				function() {
					return ! 1
				})
			}
			function $_fnCallbackReg$$($oSettings$$, $sStore$$, $fn$$, $sName$$) {
				$fn$$ && $oSettings$$[$sStore$$].push({
					fn: $fn$$,
					sName: $sName$$
				})
			}
			function $_fnCallbackFire$$($oSettings$$,
			$aoStore_sStore$$, $sTrigger$$, $aArgs$$) {
				for (var $aoStore_sStore$$ = $oSettings$$[$aoStore_sStore$$], $aRet$$ = [], $i$$ = $aoStore_sStore$$.length - 1; 0 <= $i$$; $i$$--) $aRet$$.push($aoStore_sStore$$[$i$$].fn.apply($oSettings$$.oInstance, $aArgs$$));
				null !== $sTrigger$$ && $$$$($oSettings$$.oInstance).trigger($sTrigger$$, $aArgs$$);
				return $aRet$$
			}
			function $_fnBrowserDetect$$($oSettings$$) {
				var $n$$ = $$$$('<div style="position:absolute; top:0; left:0; height:1px; width:1px; overflow:hidden"><div style="position:absolute; top:1px; left:1px; width:100px; overflow:scroll;"><div id="DT_BrowserTest" style="width:100%; height:10px;"></div></div></div>')[0];
				$document$$.body.appendChild($n$$);
				$oSettings$$.oBrowser.bScrollOversize = 100 === $$$$("#DT_BrowserTest", $n$$)[0].offsetWidth ? !0: !1;
				$document$$.body.removeChild($n$$)
			}
			function $_fnExternApiFunc$$($sFunc$$) {
				return function() {
					var $aArgs$$ = [$_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
					return $DataTable$$.ext.oApi[$sFunc$$].apply(this, $aArgs$$)
				}
			}
			var $__reArray$$ = /\[.*?\]$/,
			$_fnJsonString$$ = $window$$.JSON ? JSON.stringify: function($o$$) {
				var $sType$$ =
				typeof $o$$;
				if ("object" !== $sType$$ || null === $o$$) return "string" === $sType$$ && ($o$$ = '"' + $o$$ + '"'),
				$o$$ + "";
				var $sProp$$,
				$mValue$$,
				$json$$ = [],
				$bArr$$ = $$$$.isArray($o$$);
				for ($sProp$$ in $o$$) $mValue$$ = $o$$[$sProp$$],
				$sType$$ = typeof $mValue$$,
				"string" === $sType$$ ? $mValue$$ = '"' + $mValue$$ + '"': "object" === $sType$$ && null !== $mValue$$ && ($mValue$$ = $_fnJsonString$$($mValue$$)),
				$json$$.push(($bArr$$ ? "": '"' + $sProp$$ + '":') + $mValue$$);
				return ($bArr$$ ? "[": "{") + $json$$ + ($bArr$$ ? "]": "}")
			};
			this.$ = function $this$$$($sSelector$$,
			$oOpts$$) {
				var $i$$,
				$iLen$$34_oSettings$$,
				$a$$ = [],
				$tr$$;
				$iLen$$34_oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				var $aoData$$ = $iLen$$34_oSettings$$.aoData,
				$aiDisplay$$ = $iLen$$34_oSettings$$.aiDisplay,
				$aiDisplayMaster$$ = $iLen$$34_oSettings$$.aiDisplayMaster;
				$oOpts$$ || ($oOpts$$ = {});
				$oOpts$$ = $$$$.extend({},
				{
					filter: "none",
					order: "current",
					page: "all"
				},
				$oOpts$$);
				if ("current" == $oOpts$$.page) {
					$i$$ = $iLen$$34_oSettings$$._iDisplayStart;
					for ($iLen$$34_oSettings$$ = $iLen$$34_oSettings$$.fnDisplayEnd(); $i$$ <
					$iLen$$34_oSettings$$; $i$$++)($tr$$ = $aoData$$[$aiDisplay$$[$i$$]].nTr) && $a$$.push($tr$$)
				} else if ("current" == $oOpts$$.order && "none" == $oOpts$$.filter) {
					$i$$ = 0;
					for ($iLen$$34_oSettings$$ = $aiDisplayMaster$$.length; $i$$ < $iLen$$34_oSettings$$; $i$$++)($tr$$ = $aoData$$[$aiDisplayMaster$$[$i$$]].nTr) && $a$$.push($tr$$)
				} else if ("current" == $oOpts$$.order && "applied" == $oOpts$$.filter) {
					$i$$ = 0;
					for ($iLen$$34_oSettings$$ = $aiDisplay$$.length; $i$$ < $iLen$$34_oSettings$$; $i$$++)($tr$$ = $aoData$$[$aiDisplay$$[$i$$]].nTr) &&
					$a$$.push($tr$$)
				} else if ("original" == $oOpts$$.order && "none" == $oOpts$$.filter) {
					$i$$ = 0;
					for ($iLen$$34_oSettings$$ = $aoData$$.length; $i$$ < $iLen$$34_oSettings$$; $i$$++)($tr$$ = $aoData$$[$i$$].nTr) && $a$$.push($tr$$)
				} else if ("original" == $oOpts$$.order && "applied" == $oOpts$$.filter) {
					$i$$ = 0;
					for ($iLen$$34_oSettings$$ = $aoData$$.length; $i$$ < $iLen$$34_oSettings$$; $i$$++) $tr$$ = $aoData$$[$i$$].nTr,
					-1 !== $$$$.inArray($i$$, $aiDisplay$$) && $tr$$ && $a$$.push($tr$$)
				} else $_fnLog$$($iLen$$34_oSettings$$, 1, "Unknown selection options");
				$a$$ = $$$$($a$$);
				$i$$ = $a$$.filter($sSelector$$);
				$a$$ = $a$$.find($sSelector$$);
				return $$$$([].concat($$$$.makeArray($i$$), $$$$.makeArray($a$$)))
			};
			this._ = function $this$_$($sSelector$$, $oOpts$$) {
				var $aOut$$ = [],
				$i$$,
				$iLen$$,
				$aTrs$$ = this.$($sSelector$$, $oOpts$$);
				$i$$ = 0;
				for ($iLen$$ = $aTrs$$.length; $i$$ < $iLen$$; $i$$++) $aOut$$.push(this.fnGetData($aTrs$$[$i$$]));
				return $aOut$$
			};
			this.fnAddData = function $this$fnAddData$($mData$$, $bRedraw$$) {
				if (0 === $mData$$.length) return [];
				var $aiReturn$$ = [],
				$iTest$$,
				$oSettings$$ =
				$_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				if ("object" === typeof $mData$$[0] && null !== $mData$$[0]) for (var $i$$ = 0; $i$$ < $mData$$.length; $i$$++) {
					$iTest$$ = $_fnAddData$$($oSettings$$, $mData$$[$i$$]);
					if ( - 1 == $iTest$$) return $aiReturn$$;
					$aiReturn$$.push($iTest$$)
				} else {
					$iTest$$ = $_fnAddData$$($oSettings$$, $mData$$);
					if ( - 1 == $iTest$$) return $aiReturn$$;
					$aiReturn$$.push($iTest$$)
				}
				$oSettings$$.aiDisplay = $oSettings$$.aiDisplayMaster.slice(); ($bRedraw$$ === $undefined$$ || $bRedraw$$) && $_fnReDraw$$($oSettings$$);
				return $aiReturn$$
			};
			this.fnAdjustColumnSizing = function $this$fnAdjustColumnSizing$($bRedraw$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				$_fnAdjustColumnSizing$$($oSettings$$);
				$bRedraw$$ === $undefined$$ || $bRedraw$$ ? this.fnDraw(!1) : ("" !== $oSettings$$.oScroll.sX || "" !== $oSettings$$.oScroll.sY) && this.oApi._fnScrollDraw($oSettings$$)
			};
			this.fnClearTable = function $this$fnClearTable$($bRedraw$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				$_fnClearTable$$($oSettings$$);
				 ($bRedraw$$ === $undefined$$ || $bRedraw$$) && $_fnDraw$$($oSettings$$)
			};
			this.fnClose = function $this$fnClose$($nTr$$) {
				for (var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]), $i$$ = 0; $i$$ < $oSettings$$.aoOpenRows.length; $i$$++) if ($oSettings$$.aoOpenRows[$i$$].nParent == $nTr$$) return ($nTr$$ = $oSettings$$.aoOpenRows[$i$$].nTr.parentNode) && $nTr$$.removeChild($oSettings$$.aoOpenRows[$i$$].nTr),
				$oSettings$$.aoOpenRows.splice($i$$, 1),
				0;
				return 1
			};
			this.fnDeleteRow = function $this$fnDeleteRow$($iAODataIndex_mTarget$$,
			$fnCallBack$$, $bRedraw$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]),
				$i$$,
				$iLen$$,
				$iAODataIndex_mTarget$$ = "object" === typeof $iAODataIndex_mTarget$$ ? $_fnNodeToDataIndex$$($oSettings$$, $iAODataIndex_mTarget$$) : $iAODataIndex_mTarget$$,
				$oData$$ = $oSettings$$.aoData.splice($iAODataIndex_mTarget$$, 1);
				$i$$ = 0;
				for ($iLen$$ = $oSettings$$.aoData.length; $i$$ < $iLen$$; $i$$++) null !== $oSettings$$.aoData[$i$$].nTr && ($oSettings$$.aoData[$i$$].nTr._DT_RowIndex = $i$$);
				$i$$ = $$$$.inArray($iAODataIndex_mTarget$$,
				$oSettings$$.aiDisplay);
				$oSettings$$.asDataSearch.splice($i$$, 1);
				$_fnDeleteIndex$$($oSettings$$.aiDisplayMaster, $iAODataIndex_mTarget$$);
				$_fnDeleteIndex$$($oSettings$$.aiDisplay, $iAODataIndex_mTarget$$);
				"function" === typeof $fnCallBack$$ && $fnCallBack$$.call(this, $oSettings$$, $oData$$);
				$oSettings$$._iDisplayStart >= $oSettings$$.fnRecordsDisplay() && ($oSettings$$._iDisplayStart -= $oSettings$$._iDisplayLength, 0 > $oSettings$$._iDisplayStart && ($oSettings$$._iDisplayStart = 0));
				if ($bRedraw$$ === $undefined$$ || $bRedraw$$) $_fnCalculateEnd$$($oSettings$$),
				$_fnDraw$$($oSettings$$);
				return $oData$$
			};
			this.fnDestroy = function $this$fnDestroy$($anRows$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]),
				$nOrig$$ = $oSettings$$.nTableWrapper.parentNode,
				$nBody$$ = $oSettings$$.nTBody,
				$i$$,
				$iLen$$,
				$anRows$$ = $anRows$$ === $undefined$$ ? !1: $anRows$$;
				$oSettings$$.bDestroying = !0;
				$_fnCallbackFire$$($oSettings$$, "aoDestroyCallback", "destroy", [$oSettings$$]);
				if (!$anRows$$) {
					$i$$ = 0;
					for ($iLen$$ = $oSettings$$.aoColumns.length; $i$$ < $iLen$$; $i$$++) ! 1 === $oSettings$$.aoColumns[$i$$].bVisible &&
					this.fnSetColumnVis($i$$, !0)
				}
				$$$$($oSettings$$.nTableWrapper).find("*").andSelf().unbind(".DT");
				$$$$("tbody>tr>td." + $oSettings$$.oClasses.sRowEmpty, $oSettings$$.nTable).parent().remove();
				$oSettings$$.nTable != $oSettings$$.nTHead.parentNode && ($$$$($oSettings$$.nTable).children("thead").remove(), $oSettings$$.nTable.appendChild($oSettings$$.nTHead));
				$oSettings$$.nTFoot && $oSettings$$.nTable != $oSettings$$.nTFoot.parentNode && ($$$$($oSettings$$.nTable).children("tfoot").remove(), $oSettings$$.nTable.appendChild($oSettings$$.nTFoot));
				$oSettings$$.nTable.parentNode.removeChild($oSettings$$.nTable);
				$$$$($oSettings$$.nTableWrapper).remove();
				$oSettings$$.aaSorting = [];
				$oSettings$$.aaSortingFixed = [];
				$_fnSortingClasses$$($oSettings$$);
				$$$$($_fnGetTrNodes$$($oSettings$$)).removeClass($oSettings$$.asStripeClasses.join(" "));
				$$$$("th, td", $oSettings$$.nTHead).removeClass([$oSettings$$.oClasses.sSortable, $oSettings$$.oClasses.sSortableAsc, $oSettings$$.oClasses.sSortableDesc, $oSettings$$.oClasses.sSortableNone].join(" "));
				$oSettings$$.bJUI &&
				($$$$("th span." + $oSettings$$.oClasses.sSortIcon + ", td span." + $oSettings$$.oClasses.sSortIcon, $oSettings$$.nTHead).remove(), $$$$("th, td", $oSettings$$.nTHead).each(function() {
					var $jqWrapper$$ = $$$$("div." + $oSettings$$.oClasses.sSortJUIWrapper, this),
					$kids$$ = $jqWrapper$$.contents();
					$$$$(this).append($kids$$);
					$jqWrapper$$.remove()
				})); ! $anRows$$ && $oSettings$$.nTableReinsertBefore ? $nOrig$$.insertBefore($oSettings$$.nTable, $oSettings$$.nTableReinsertBefore) : $anRows$$ || $nOrig$$.appendChild($oSettings$$.nTable);
				$i$$ = 0;
				for ($iLen$$ = $oSettings$$.aoData.length; $i$$ < $iLen$$; $i$$++) null !== $oSettings$$.aoData[$i$$].nTr && $nBody$$.appendChild($oSettings$$.aoData[$i$$].nTr); ! 0 === $oSettings$$.oFeatures.bAutoWidth && ($oSettings$$.nTable.style.width = $_fnStringToCss$$($oSettings$$.sDestroyWidth));
				if ($iLen$$ = $oSettings$$.asDestroyStripes.length) {
					$anRows$$ = $$$$($nBody$$).children("tr");
					for ($i$$ = 0; $i$$ < $iLen$$; $i$$++) $anRows$$.filter(":nth-child(" + $iLen$$ + "n + " + $i$$ + ")").addClass($oSettings$$.asDestroyStripes[$i$$])
				}
				$i$$ =
				0;
				for ($iLen$$ = $DataTable$$.settings.length; $i$$ < $iLen$$; $i$$++) $DataTable$$.settings[$i$$] == $oSettings$$ && $DataTable$$.settings.splice($i$$, 1);
				$oInit$$ = $oSettings$$ = null
			};
			this.fnDraw = function $this$fnDraw$($bComplete$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]); ! 1 === $bComplete$$ ? ($_fnCalculateEnd$$($oSettings$$), $_fnDraw$$($oSettings$$)) : $_fnReDraw$$($oSettings$$)
			};
			this.fnFilter = function $this$fnFilter$($sInput$$, $iColumn$$6_n$$, $bRegex$$3_i$$, $bSmart$$3_iLen$$, $bShowGlobal$$,
			$bCaseInsensitive$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				if ($oSettings$$.oFeatures.bFilter) {
					if ($bRegex$$3_i$$ === $undefined$$ || null === $bRegex$$3_i$$) $bRegex$$3_i$$ = !1;
					if ($bSmart$$3_iLen$$ === $undefined$$ || null === $bSmart$$3_iLen$$) $bSmart$$3_iLen$$ = !0;
					if ($bShowGlobal$$ === $undefined$$ || null === $bShowGlobal$$) $bShowGlobal$$ = !0;
					if ($bCaseInsensitive$$ === $undefined$$ || null === $bCaseInsensitive$$) $bCaseInsensitive$$ = !0;
					if ($iColumn$$6_n$$ === $undefined$$ || null === $iColumn$$6_n$$) {
						if ($_fnFilterComplete$$($oSettings$$,
						{
							sSearch: $sInput$$ + "",
							bRegex: $bRegex$$3_i$$,
							bSmart: $bSmart$$3_iLen$$,
							bCaseInsensitive: $bCaseInsensitive$$
						},
						1), $bShowGlobal$$ && $oSettings$$.aanFeatures.f) {
							$iColumn$$6_n$$ = $oSettings$$.aanFeatures.f;
							$bRegex$$3_i$$ = 0;
							for ($bSmart$$3_iLen$$ = $iColumn$$6_n$$.length; $bRegex$$3_i$$ < $bSmart$$3_iLen$$; $bRegex$$3_i$$++) try {
								$iColumn$$6_n$$[$bRegex$$3_i$$]._DT_Input != $document$$.activeElement && $$$$($iColumn$$6_n$$[$bRegex$$3_i$$]._DT_Input).val($sInput$$)
							} catch($e$$) {
								$$$$($iColumn$$6_n$$[$bRegex$$3_i$$]._DT_Input).val($sInput$$)
							}
						}
					} else $$$$.extend($oSettings$$.aoPreSearchCols[$iColumn$$6_n$$],
					{
						sSearch: $sInput$$ + "",
						bRegex: $bRegex$$3_i$$,
						bSmart: $bSmart$$3_iLen$$,
						bCaseInsensitive: $bCaseInsensitive$$
					}),
					$_fnFilterComplete$$($oSettings$$, $oSettings$$.oPreviousSearch, 1)
				}
			};
			this.fnGetData = function $this$fnGetData$($mRow$$, $iCol$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				if ($mRow$$ !== $undefined$$) {
					var $iRow$$ = $mRow$$;
					if ("object" === typeof $mRow$$) {
						var $sNode$$ = $mRow$$.nodeName.toLowerCase();
						"tr" === $sNode$$ ? $iRow$$ = $_fnNodeToDataIndex$$($oSettings$$, $mRow$$) : "td" ===
						$sNode$$ && ($iRow$$ = $_fnNodeToDataIndex$$($oSettings$$, $mRow$$.parentNode), $iCol$$ = $_fnNodeToColumnIndex$$($oSettings$$, $iRow$$, $mRow$$))
					}
					return $iCol$$ !== $undefined$$ ? $_fnGetCellData$$($oSettings$$, $iRow$$, $iCol$$, "") : $oSettings$$.aoData[$iRow$$] !== $undefined$$ ? $oSettings$$.aoData[$iRow$$]._aData: null
				}
				return $_fnGetDataMaster$$($oSettings$$)
			};
			this.fnGetNodes = function $this$fnGetNodes$($iRow$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				return $iRow$$ !== $undefined$$ ?
				$oSettings$$.aoData[$iRow$$] !== $undefined$$ ? $oSettings$$.aoData[$iRow$$].nTr: null: $_fnGetTrNodes$$($oSettings$$)
			};
			this.fnGetPosition = function $this$fnGetPosition$($iColumnIndex_nNode$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]),
				$iDataIndex$$1_sNodeName$$ = $iColumnIndex_nNode$$.nodeName.toUpperCase();
				return "TR" == $iDataIndex$$1_sNodeName$$ ? $_fnNodeToDataIndex$$($oSettings$$, $iColumnIndex_nNode$$) : "TD" == $iDataIndex$$1_sNodeName$$ || "TH" == $iDataIndex$$1_sNodeName$$ ? ($iDataIndex$$1_sNodeName$$ =
				$_fnNodeToDataIndex$$($oSettings$$, $iColumnIndex_nNode$$.parentNode), $iColumnIndex_nNode$$ = $_fnNodeToColumnIndex$$($oSettings$$, $iDataIndex$$1_sNodeName$$, $iColumnIndex_nNode$$), [$iDataIndex$$1_sNodeName$$, $_fnColumnIndexToVisible$$($oSettings$$, $iColumnIndex_nNode$$), $iColumnIndex_nNode$$]) : null
			};
			this.fnIsOpen = function $this$fnIsOpen$($nTr$$) {
				for (var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]), $i$$ = 0; $i$$ < $oSettings$$.aoOpenRows.length; $i$$++) if ($oSettings$$.aoOpenRows[$i$$].nParent ==
				$nTr$$) return ! 0;
				return ! 1
			};
			this.fnOpen = function $this$fnOpen$($nTr$$, $mHtml_nTrs$$, $sClass$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]),
				$nNewRow_nTableRows$$ = $_fnGetTrNodes$$($oSettings$$);
				if ( - 1 !== $$$$.inArray($nTr$$, $nNewRow_nTableRows$$)) {
					this.fnClose($nTr$$);
					var $nNewRow_nTableRows$$ = $document$$.createElement("tr"),
					$nNewCell$$ = $document$$.createElement("td");
					$nNewRow_nTableRows$$.appendChild($nNewCell$$);
					$nNewCell$$.className = $sClass$$;
					$nNewCell$$.colSpan = $_fnVisbleColumns$$($oSettings$$);
					"string" === typeof $mHtml_nTrs$$ ? $nNewCell$$.innerHTML = $mHtml_nTrs$$: $$$$($nNewCell$$).html($mHtml_nTrs$$);
					$mHtml_nTrs$$ = $$$$("tr", $oSettings$$.nTBody); - 1 != $$$$.inArray($nTr$$, $mHtml_nTrs$$) && $$$$($nNewRow_nTableRows$$).insertAfter($nTr$$);
					$oSettings$$.aoOpenRows.push({
						nTr: $nNewRow_nTableRows$$,
						nParent: $nTr$$
					});
					return $nNewRow_nTableRows$$
				}
			};
			this.fnPageChange = function $this$fnPageChange$($mAction$$, $bRedraw$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				$_fnPageChange$$($oSettings$$,
				$mAction$$);
				$_fnCalculateEnd$$($oSettings$$); ($bRedraw$$ === $undefined$$ || $bRedraw$$) && $_fnDraw$$($oSettings$$)
			};
			this.fnSetColumnVis = function $this$fnSetColumnVis$($iCol$$, $bShow$$, $bRedraw$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]),
				$i$$,
				$iInsert_iLen$$,
				$aoColumns$$ = $oSettings$$.aoColumns,
				$aoData$$ = $oSettings$$.aoData,
				$iBefore_nTd$$,
				$bAppend$$;
				if ($aoColumns$$[$iCol$$].bVisible != $bShow$$) {
					if ($bShow$$) {
						for ($i$$ = $iInsert_iLen$$ = 0; $i$$ < $iCol$$; $i$$++) $aoColumns$$[$i$$].bVisible &&
						$iInsert_iLen$$++;
						$bAppend$$ = $iInsert_iLen$$ >= $_fnVisbleColumns$$($oSettings$$);
						if (!$bAppend$$) for ($i$$ = $iCol$$; $i$$ < $aoColumns$$.length; $i$$++) if ($aoColumns$$[$i$$].bVisible) {
							$iBefore_nTd$$ = $i$$;
							break
						}
						$i$$ = 0;
						for ($iInsert_iLen$$ = $aoData$$.length; $i$$ < $iInsert_iLen$$; $i$$++) null !== $aoData$$[$i$$].nTr && ($bAppend$$ ? $aoData$$[$i$$].nTr.appendChild($aoData$$[$i$$]._anHidden[$iCol$$]) : $aoData$$[$i$$].nTr.insertBefore($aoData$$[$i$$]._anHidden[$iCol$$], $_fnGetTdNodes$$($oSettings$$, $i$$)[$iBefore_nTd$$]))
					} else {
						$i$$ =
						0;
						for ($iInsert_iLen$$ = $aoData$$.length; $i$$ < $iInsert_iLen$$; $i$$++) null !== $aoData$$[$i$$].nTr && ($iBefore_nTd$$ = $_fnGetTdNodes$$($oSettings$$, $i$$)[$iCol$$], $aoData$$[$i$$]._anHidden[$iCol$$] = $iBefore_nTd$$, $iBefore_nTd$$.parentNode.removeChild($iBefore_nTd$$))
					}
					$aoColumns$$[$iCol$$].bVisible = $bShow$$;
					$_fnDrawHead$$($oSettings$$, $oSettings$$.aoHeader);
					$oSettings$$.nTFoot && $_fnDrawHead$$($oSettings$$, $oSettings$$.aoFooter);
					$i$$ = 0;
					for ($iInsert_iLen$$ = $oSettings$$.aoOpenRows.length; $i$$ < $iInsert_iLen$$; $i$$++) $oSettings$$.aoOpenRows[$i$$].nTr.colSpan =
					$_fnVisbleColumns$$($oSettings$$);
					if ($bRedraw$$ === $undefined$$ || $bRedraw$$) $_fnAdjustColumnSizing$$($oSettings$$),
					$_fnDraw$$($oSettings$$);
					$_fnSaveState$$($oSettings$$)
				}
			};
			this.fnSettings = function $this$fnSettings$() {
				return $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex])
			};
			this.fnSort = function $this$fnSort$($aaSort$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]);
				$oSettings$$.aaSorting = $aaSort$$;
				$_fnSort$$($oSettings$$)
			};
			this.fnSortListener = function $this$fnSortListener$($nNode$$,
			$iColumn$$, $fnCallback$$) {
				$_fnSortAttachListener$$($_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]), $nNode$$, $iColumn$$, $fnCallback$$)
			};
			this.fnUpdate = function $this$fnUpdate$($mData$$, $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$, $bRedraw$$, $bAction$$) {
				var $oSettings$$ = $_fnSettingsFromNode$$(this[$DataTable$$.ext.iApiIndex]),
				$iRow$$11_mRow$$ = "object" === typeof $iRow$$11_mRow$$ ? $_fnNodeToDataIndex$$($oSettings$$, $iRow$$11_mRow$$) : $iRow$$11_mRow$$;
				if ($$$$.isArray($mData$$) && $i$$63_iColumn$$8_iDisplayIndex$$ ===
				$undefined$$) {
					$oSettings$$.aoData[$iRow$$11_mRow$$]._aData = $mData$$.slice();
					for ($i$$63_iColumn$$8_iDisplayIndex$$ = 0; $i$$63_iColumn$$8_iDisplayIndex$$ < $oSettings$$.aoColumns.length; $i$$63_iColumn$$8_iDisplayIndex$$++) this.fnUpdate($_fnGetCellData$$($oSettings$$, $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$), $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$, !1, !1)
				} else if ($$$$.isPlainObject($mData$$) && $i$$63_iColumn$$8_iDisplayIndex$$ === $undefined$$) {
					$oSettings$$.aoData[$iRow$$11_mRow$$]._aData =
					$$$$.extend(!0, {},
					$mData$$);
					for ($i$$63_iColumn$$8_iDisplayIndex$$ = 0; $i$$63_iColumn$$8_iDisplayIndex$$ < $oSettings$$.aoColumns.length; $i$$63_iColumn$$8_iDisplayIndex$$++) this.fnUpdate($_fnGetCellData$$($oSettings$$, $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$), $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$, !1, !1)
				} else {
					$_fnSetCellData$$($oSettings$$, $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$, $mData$$);
					var $mData$$ = $_fnGetCellData$$($oSettings$$, $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$,
					"display"),
					$oCol$$ = $oSettings$$.aoColumns[$i$$63_iColumn$$8_iDisplayIndex$$];
					null !== $oCol$$.fnRender && ($mData$$ = $_fnRender$$($oSettings$$, $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$), $oCol$$.bUseRendered && $_fnSetCellData$$($oSettings$$, $iRow$$11_mRow$$, $i$$63_iColumn$$8_iDisplayIndex$$, $mData$$));
					null !== $oSettings$$.aoData[$iRow$$11_mRow$$].nTr && ($_fnGetTdNodes$$($oSettings$$, $iRow$$11_mRow$$)[$i$$63_iColumn$$8_iDisplayIndex$$].innerHTML = $mData$$)
				}
				$i$$63_iColumn$$8_iDisplayIndex$$ = $$$$.inArray($iRow$$11_mRow$$,
				$oSettings$$.aiDisplay);
				$oSettings$$.asDataSearch[$i$$63_iColumn$$8_iDisplayIndex$$] = $_fnBuildSearchRow$$($oSettings$$, $_fnGetRowData$$($oSettings$$, $iRow$$11_mRow$$, "filter", $_fnGetColumns$$($oSettings$$, "bSearchable"))); ($bAction$$ === $undefined$$ || $bAction$$) && $_fnAdjustColumnSizing$$($oSettings$$); ($bRedraw$$ === $undefined$$ || $bRedraw$$) && $_fnReDraw$$($oSettings$$);
				return 0
			};
			this.fnVersionCheck = $DataTable$$.ext.fnVersionCheck;
			this.oApi = {
				_fnExternApiFunc: $_fnExternApiFunc$$,
				_fnInitialise: $_fnInitialise$$,
				_fnInitComplete: $_fnInitComplete$$,
				_fnLanguageCompat: $_fnLanguageCompat$$,
				_fnAddColumn: $_fnAddColumn$$,
				_fnColumnOptions: $_fnColumnOptions$$,
				_fnAddData: $_fnAddData$$,
				_fnCreateTr: $_fnCreateTr$$,
				_fnGatherData: $_fnGatherData$$,
				_fnBuildHead: $_fnBuildHead$$,
				_fnDrawHead: $_fnDrawHead$$,
				_fnDraw: $_fnDraw$$,
				_fnReDraw: $_fnReDraw$$,
				_fnAjaxUpdate: $_fnAjaxUpdate$$,
				_fnAjaxParameters: $_fnAjaxParameters$$,
				_fnAjaxUpdateDraw: $_fnAjaxUpdateDraw$$,
				_fnServerParams: $_fnServerParams$$,
				_fnAddOptionsHtml: $_fnAddOptionsHtml$$,
				_fnFeatureHtmlTable: $_fnFeatureHtmlTable$$,
				_fnScrollDraw: $_fnScrollDraw$$,
				_fnAdjustColumnSizing: $_fnAdjustColumnSizing$$,
				_fnFeatureHtmlFilter: $_fnFeatureHtmlFilter$$,
				_fnFilterComplete: $_fnFilterComplete$$,
				_fnFilterCustom: $_fnFilterCustom$$,
				_fnFilterColumn: $_fnFilterColumn$$,
				_fnFilter: $_fnFilter$$,
				_fnBuildSearchArray: $_fnBuildSearchArray$$,
				_fnBuildSearchRow: $_fnBuildSearchRow$$,
				_fnFilterCreateSearch: $_fnFilterCreateSearch$$,
				_fnDataToSearch: $_fnDataToSearch$$,
				_fnSort: $_fnSort$$,
				_fnSortAttachListener: $_fnSortAttachListener$$,
				_fnSortingClasses: $_fnSortingClasses$$,
				_fnFeatureHtmlPaginate: $_fnFeatureHtmlPaginate$$,
				_fnPageChange: $_fnPageChange$$,
				_fnFeatureHtmlInfo: $_fnFeatureHtmlInfo$$,
				_fnUpdateInfo: $_fnUpdateInfo$$,
				_fnFeatureHtmlLength: $_fnFeatureHtmlLength$$,
				_fnFeatureHtmlProcessing: $_fnFeatureHtmlProcessing$$,
				_fnProcessingDisplay: $_fnProcessingDisplay$$,
				_fnVisibleToColumnIndex: $_fnVisibleToColumnIndex$$,
				_fnColumnIndexToVisible: $_fnColumnIndexToVisible$$,
				_fnNodeToDataIndex: $_fnNodeToDataIndex$$,
				_fnVisbleColumns: $_fnVisbleColumns$$,
				_fnCalculateEnd: $_fnCalculateEnd$$,
				_fnConvertToWidth: $_fnConvertToWidth$$,
				_fnCalculateColumnWidths: $_fnCalculateColumnWidths$$,
				_fnScrollingWidthAdjust: $_fnScrollingWidthAdjust$$,
				_fnGetWidestNode: $_fnGetWidestNode$$,
				_fnGetMaxLenString: $_fnGetMaxLenString$$,
				_fnStringToCss: $_fnStringToCss$$,
				_fnDetectType: $_fnDetectType$$,
				_fnSettingsFromNode: $_fnSettingsFromNode$$,
				_fnGetDataMaster: $_fnGetDataMaster$$,
				_fnGetTrNodes: $_fnGetTrNodes$$,
				_fnGetTdNodes: $_fnGetTdNodes$$,
				_fnEscapeRegex: $_fnEscapeRegex$$,
				_fnDeleteIndex: $_fnDeleteIndex$$,
				_fnReOrderIndex: $_fnReOrderIndex$$,
				_fnColumnOrdering: $_fnColumnOrdering$$,
				_fnLog: $_fnLog$$,
				_fnClearTable: $_fnClearTable$$,
				_fnSaveState: $_fnSaveState$$,
				_fnLoadState: $_fnLoadState$$,
				_fnCreateCookie: function _fnCreateCookie($aCookies_sName$$, $sFullCookie_sValue$$, $aParts_iSecs$$, $old_sBaseName$$, $fnCallback$$) {
					var $aOldCookies_date$$ = new Date;
					$aOldCookies_date$$.setTime($aOldCookies_date$$.getTime() + 1E3 * $aParts_iSecs$$);
					var $aParts_iSecs$$ = $window$$.location.pathname.split("/"),
					$aCookies_sName$$ = $aCookies_sName$$ +
					"_" + $aParts_iSecs$$.pop().replace(/[\/:]/g, "").toLowerCase(),
					$oData$$;
					null !== $fnCallback$$ ? ($oData$$ = "function" === typeof $$$$.parseJSON ? $$$$.parseJSON($sFullCookie_sValue$$) : eval("(" + $sFullCookie_sValue$$ + ")"), $sFullCookie_sValue$$ = $fnCallback$$($aCookies_sName$$, $oData$$, $aOldCookies_date$$.toGMTString(), $aParts_iSecs$$.join("/") + "/")) : $sFullCookie_sValue$$ = $aCookies_sName$$ + "=" + encodeURIComponent($sFullCookie_sValue$$) + "; expires=" + $aOldCookies_date$$.toGMTString() + "; path=" + $aParts_iSecs$$.join("/") +
					"/";
					$aCookies_sName$$ = $document$$.cookie.split(";");
					$fnCallback$$ = $sFullCookie_sValue$$.split(";")[0].length;
					$aOldCookies_date$$ = [];
					if (4096 < $fnCallback$$ + $document$$.cookie.length + 10) {
						for (var $i$$ = 0, $iLen$$ = $aCookies_sName$$.length; $i$$ < $iLen$$; $i$$++) if ( - 1 != $aCookies_sName$$[$i$$].indexOf($old_sBaseName$$)) {
							var $aSplitCookie$$ = $aCookies_sName$$[$i$$].split("=");
							try { ($oData$$ = eval("(" + decodeURIComponent($aSplitCookie$$[1]) + ")")) && $oData$$.iCreate && $aOldCookies_date$$.push({
									name: $aSplitCookie$$[0],
									time: $oData$$.iCreate
								})
							} catch($e$$) {}
						}
						for ($aOldCookies_date$$.sort(function($a$$, $b$$) {
							return $b$$.time - $a$$.time
						}); 4096 < $fnCallback$$ + $document$$.cookie.length + 10;) {
							if (0 === $aOldCookies_date$$.length) return;
							$old_sBaseName$$ = $aOldCookies_date$$.pop();
							$document$$.cookie = $old_sBaseName$$.name + "=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=" + $aParts_iSecs$$.join("/") + "/"
						}
					}
					$document$$.cookie = $sFullCookie_sValue$$
				},
				_fnReadCookie: function _fnReadCookie($sName$$) {
					for (var $aParts$$ = $window$$.location.pathname.split("/"),
					$sName$$ = $sName$$ + "_" + $aParts$$[$aParts$$.length - 1].replace(/[\/:]/g, "").toLowerCase() + "=", $aParts$$ = $document$$.cookie.split(";"), $i$$ = 0; $i$$ < $aParts$$.length; $i$$++) {
						for (var $c$$ = $aParts$$[$i$$];
						" " == $c$$.charAt(0);) $c$$ = $c$$.substring(1, $c$$.length);
						if (0 === $c$$.indexOf($sName$$)) return decodeURIComponent($c$$.substring($sName$$.length, $c$$.length))
					}
					return null
				},
				_fnDetectHeader: $_fnDetectHeader$$,
				_fnGetUniqueThs: $_fnGetUniqueThs$$,
				_fnScrollBarWidth: $_fnScrollBarWidth$$,
				_fnApplyToChildren: $_fnApplyToChildren$$,
				_fnMap: $_fnMap$$,
				_fnGetRowData: $_fnGetRowData$$,
				_fnGetCellData: $_fnGetCellData$$,
				_fnSetCellData: $_fnSetCellData$$,
				_fnGetObjectDataFn: $_fnGetObjectDataFn$$,
				_fnSetObjectDataFn: $_fnSetObjectDataFn$$,
				_fnApplyColumnDefs: $_fnApplyColumnDefs$$,
				_fnBindAction: $_fnBindAction$$,
				_fnExtend: $_fnExtend$$,
				_fnCallbackReg: $_fnCallbackReg$$,
				_fnCallbackFire: $_fnCallbackFire$$,
				_fnJsonString: $_fnJsonString$$,
				_fnRender: $_fnRender$$,
				_fnNodeToColumnIndex: $_fnNodeToColumnIndex$$,
				_fnInfoMacros: $_fnInfoMacros$$,
				_fnBrowserDetect: $_fnBrowserDetect$$,
				_fnGetColumns: $_fnGetColumns$$
			};
			$$$$.extend($DataTable$$.ext.oApi, this.oApi);
			for (var $sFunc$$ in $DataTable$$.ext.oApi) $sFunc$$ && (this[$sFunc$$] = $_fnExternApiFunc$$($sFunc$$));
			var $_that$$ = this;
			this.each(function() {
				var $captions_i$$64_nThead$$ = 0,
				$iLen$$,
				$anThs_bStripeRemove_j$$,
				$anRows$$2_aoColumnsInit_jLen$$;
				$anThs_bStripeRemove_j$$ = this.getAttribute("id");
				var $bInitHandedOff$$ = !1,
				$bUsePassedData$$ = !1;
				if ("table" != this.nodeName.toLowerCase()) $_fnLog$$(null, 0, "Attempted to initialise DataTables on a node which is not a table: " +
				this.nodeName);
				else {
					$captions_i$$64_nThead$$ = 0;
					for ($iLen$$ = $DataTable$$.settings.length; $captions_i$$64_nThead$$ < $iLen$$; $captions_i$$64_nThead$$++) {
						if ($DataTable$$.settings[$captions_i$$64_nThead$$].nTable == this) {
							if ($oInit$$ === $undefined$$ || $oInit$$.bRetrieve) return $DataTable$$.settings[$captions_i$$64_nThead$$].oInstance;
							if ($oInit$$.bDestroy) {
								$DataTable$$.settings[$captions_i$$64_nThead$$].oInstance.fnDestroy();
								break
							} else {
								$_fnLog$$($DataTable$$.settings[$captions_i$$64_nThead$$], 0, "Cannot reinitialise DataTable.\n\nTo retrieve the DataTables object for this table, pass no arguments or see the docs for bRetrieve and bDestroy");
								return
							}
						}
						if ($DataTable$$.settings[$captions_i$$64_nThead$$].sTableId == this.id) {
							$DataTable$$.settings.splice($captions_i$$64_nThead$$, 1);
							break
						}
					}
					if (null === $anThs_bStripeRemove_j$$ || "" === $anThs_bStripeRemove_j$$) this.id = $anThs_bStripeRemove_j$$ = "DataTables_Table_" + $DataTable$$.ext._oExternConfig.iNextUnique++;
					var $oSettings$$ = $$$$.extend(!0, {},
					$DataTable$$.models.oSettings, {
						nTable: this,
						oApi: $_that$$.oApi,
						oInit: $oInit$$,
						sDestroyWidth: $$$$(this).width(),
						sInstance: $anThs_bStripeRemove_j$$,
						sTableId: $anThs_bStripeRemove_j$$
					});
					$DataTable$$.settings.push($oSettings$$);
					$oSettings$$.oInstance = 1 === $_that$$.length ? $_that$$: $$$$(this).dataTable();
					$oInit$$ || ($oInit$$ = {});
					$oInit$$.oLanguage && $_fnLanguageCompat$$($oInit$$.oLanguage);
					$oInit$$ = $_fnExtend$$($$$$.extend(!0, {},
					$DataTable$$.defaults), $oInit$$);
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bPaginate");
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bLengthChange");
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bFilter");
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bSort");
					$_fnMap$$($oSettings$$.oFeatures,
					$oInit$$, "bInfo");
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bProcessing");
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bAutoWidth");
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bSortClasses");
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bServerSide");
					$_fnMap$$($oSettings$$.oFeatures, $oInit$$, "bDeferRender");
					$_fnMap$$($oSettings$$.oScroll, $oInit$$, "sScrollX", "sX");
					$_fnMap$$($oSettings$$.oScroll, $oInit$$, "sScrollXInner", "sXInner");
					$_fnMap$$($oSettings$$.oScroll, $oInit$$, "sScrollY", "sY");
					$_fnMap$$($oSettings$$.oScroll,
					$oInit$$, "bScrollCollapse", "bCollapse");
					$_fnMap$$($oSettings$$.oScroll, $oInit$$, "bScrollInfinite", "bInfinite");
					$_fnMap$$($oSettings$$.oScroll, $oInit$$, "iScrollLoadGap", "iLoadGap");
					$_fnMap$$($oSettings$$.oScroll, $oInit$$, "bScrollAutoCss", "bAutoCss");
					$_fnMap$$($oSettings$$, $oInit$$, "asStripeClasses");
					$_fnMap$$($oSettings$$, $oInit$$, "asStripClasses", "asStripeClasses");
					$_fnMap$$($oSettings$$, $oInit$$, "fnServerData");
					$_fnMap$$($oSettings$$, $oInit$$, "fnFormatNumber");
					$_fnMap$$($oSettings$$, $oInit$$, "sServerMethod");
					$_fnMap$$($oSettings$$, $oInit$$, "aaSorting");
					$_fnMap$$($oSettings$$, $oInit$$, "aaSortingFixed");
					$_fnMap$$($oSettings$$, $oInit$$, "aLengthMenu");
					$_fnMap$$($oSettings$$, $oInit$$, "sPaginationType");
					$_fnMap$$($oSettings$$, $oInit$$, "sAjaxSource");
					$_fnMap$$($oSettings$$, $oInit$$, "sAjaxDataProp");
					$_fnMap$$($oSettings$$, $oInit$$, "iCookieDuration");
					$_fnMap$$($oSettings$$, $oInit$$, "sCookiePrefix");
					$_fnMap$$($oSettings$$, $oInit$$, "sDom");
					$_fnMap$$($oSettings$$, $oInit$$, "bSortCellsTop");
					$_fnMap$$($oSettings$$,
					$oInit$$, "iTabIndex");
					$_fnMap$$($oSettings$$, $oInit$$, "oSearch", "oPreviousSearch");
					$_fnMap$$($oSettings$$, $oInit$$, "aoSearchCols", "aoPreSearchCols");
					$_fnMap$$($oSettings$$, $oInit$$, "iDisplayLength", "_iDisplayLength");
					$_fnMap$$($oSettings$$, $oInit$$, "bJQueryUI", "bJUI");
					$_fnMap$$($oSettings$$, $oInit$$, "fnCookieCallback");
					$_fnMap$$($oSettings$$, $oInit$$, "fnStateLoad");
					$_fnMap$$($oSettings$$, $oInit$$, "fnStateSave");
					$_fnMap$$($oSettings$$.oLanguage, $oInit$$, "fnInfoCallback");
					$_fnCallbackReg$$($oSettings$$,
					"aoDrawCallback", $oInit$$.fnDrawCallback, "user");
					$_fnCallbackReg$$($oSettings$$, "aoServerParams", $oInit$$.fnServerParams, "user");
					$_fnCallbackReg$$($oSettings$$, "aoStateSaveParams", $oInit$$.fnStateSaveParams, "user");
					$_fnCallbackReg$$($oSettings$$, "aoStateLoadParams", $oInit$$.fnStateLoadParams, "user");
					$_fnCallbackReg$$($oSettings$$, "aoStateLoaded", $oInit$$.fnStateLoaded, "user");
					$_fnCallbackReg$$($oSettings$$, "aoRowCallback", $oInit$$.fnRowCallback, "user");
					$_fnCallbackReg$$($oSettings$$, "aoRowCreatedCallback",
					$oInit$$.fnCreatedRow, "user");
					$_fnCallbackReg$$($oSettings$$, "aoHeaderCallback", $oInit$$.fnHeaderCallback, "user");
					$_fnCallbackReg$$($oSettings$$, "aoFooterCallback", $oInit$$.fnFooterCallback, "user");
					$_fnCallbackReg$$($oSettings$$, "aoInitComplete", $oInit$$.fnInitComplete, "user");
					$_fnCallbackReg$$($oSettings$$, "aoPreDrawCallback", $oInit$$.fnPreDrawCallback, "user");
					$oSettings$$.oFeatures.bServerSide && $oSettings$$.oFeatures.bSort && $oSettings$$.oFeatures.bSortClasses ? $_fnCallbackReg$$($oSettings$$, "aoDrawCallback",
					$_fnSortingClasses$$, "server_side_sort_classes") : $oSettings$$.oFeatures.bDeferRender && $_fnCallbackReg$$($oSettings$$, "aoDrawCallback", $_fnSortingClasses$$, "defer_sort_classes");
					$oInit$$.bJQueryUI ? ($$$$.extend($oSettings$$.oClasses, $DataTable$$.ext.oJUIClasses), $oInit$$.sDom === $DataTable$$.defaults.sDom && "lfrtip" === $DataTable$$.defaults.sDom && ($oSettings$$.sDom = '<"H"lfr>t<"F"ip>')) : $$$$.extend($oSettings$$.oClasses, $DataTable$$.ext.oStdClasses);
					$$$$(this).addClass($oSettings$$.oClasses.sTable);
					if ("" !==
					$oSettings$$.oScroll.sX || "" !== $oSettings$$.oScroll.sY) $oSettings$$.oScroll.iBarWidth = $_fnScrollBarWidth$$();
					$oSettings$$.iInitDisplayStart === $undefined$$ && ($oSettings$$.iInitDisplayStart = $oInit$$.iDisplayStart, $oSettings$$._iDisplayStart = $oInit$$.iDisplayStart);
					$oInit$$.bStateSave && ($oSettings$$.oFeatures.bStateSave = !0, $_fnLoadState$$($oSettings$$, $oInit$$), $_fnCallbackReg$$($oSettings$$, "aoDrawCallback", $_fnSaveState$$, "state_save"));
					null !== $oInit$$.iDeferLoading && ($oSettings$$.bDeferLoading = !0,
					$captions_i$$64_nThead$$ = $$$$.isArray($oInit$$.iDeferLoading), $oSettings$$._iRecordsDisplay = $captions_i$$64_nThead$$ ? $oInit$$.iDeferLoading[0] : $oInit$$.iDeferLoading, $oSettings$$._iRecordsTotal = $captions_i$$64_nThead$$ ? $oInit$$.iDeferLoading[1] : $oInit$$.iDeferLoading);
					null !== $oInit$$.aaData && ($bUsePassedData$$ = !0);
					"" !== $oInit$$.oLanguage.sUrl ? ($oSettings$$.oLanguage.sUrl = $oInit$$.oLanguage.sUrl, $$$$.getJSON($oSettings$$.oLanguage.sUrl, null,
					function($json$$) {
						$_fnLanguageCompat$$($json$$);
						$$$$.extend(true,
						$oSettings$$.oLanguage, $oInit$$.oLanguage, $json$$);
						$_fnInitialise$$($oSettings$$)
					}), $bInitHandedOff$$ = !0) : $$$$.extend(!0, $oSettings$$.oLanguage, $oInit$$.oLanguage);
					null === $oInit$$.asStripeClasses && ($oSettings$$.asStripeClasses = [$oSettings$$.oClasses.sStripeOdd, $oSettings$$.oClasses.sStripeEven]);
					$iLen$$ = $oSettings$$.asStripeClasses.length;
					$oSettings$$.asDestroyStripes = [];
					if ($iLen$$) {
						$anThs_bStripeRemove_j$$ = !1;
						$anRows$$2_aoColumnsInit_jLen$$ = $$$$(this).children("tbody").children("tr:lt(" + $iLen$$ +
						")");
						for ($captions_i$$64_nThead$$ = 0; $captions_i$$64_nThead$$ < $iLen$$; $captions_i$$64_nThead$$++) $anRows$$2_aoColumnsInit_jLen$$.hasClass($oSettings$$.asStripeClasses[$captions_i$$64_nThead$$]) && ($anThs_bStripeRemove_j$$ = !0, $oSettings$$.asDestroyStripes.push($oSettings$$.asStripeClasses[$captions_i$$64_nThead$$]));
						$anThs_bStripeRemove_j$$ && $anRows$$2_aoColumnsInit_jLen$$.removeClass($oSettings$$.asStripeClasses.join(" "))
					}
					$anThs_bStripeRemove_j$$ = [];
					$captions_i$$64_nThead$$ = this.getElementsByTagName("thead");
					0 !== $captions_i$$64_nThead$$.length && ($_fnDetectHeader$$($oSettings$$.aoHeader, $captions_i$$64_nThead$$[0]), $anThs_bStripeRemove_j$$ = $_fnGetUniqueThs$$($oSettings$$));
					if (null === $oInit$$.aoColumns) {
						$anRows$$2_aoColumnsInit_jLen$$ = [];
						$captions_i$$64_nThead$$ = 0;
						for ($iLen$$ = $anThs_bStripeRemove_j$$.length; $captions_i$$64_nThead$$ < $iLen$$; $captions_i$$64_nThead$$++) $anRows$$2_aoColumnsInit_jLen$$.push(null)
					} else $anRows$$2_aoColumnsInit_jLen$$ = $oInit$$.aoColumns;
					$captions_i$$64_nThead$$ = 0;
					for ($iLen$$ =
					$anRows$$2_aoColumnsInit_jLen$$.length; $captions_i$$64_nThead$$ < $iLen$$; $captions_i$$64_nThead$$++) $oInit$$.saved_aoColumns !== $undefined$$ && $oInit$$.saved_aoColumns.length == $iLen$$ && (null === $anRows$$2_aoColumnsInit_jLen$$[$captions_i$$64_nThead$$] && ($anRows$$2_aoColumnsInit_jLen$$[$captions_i$$64_nThead$$] = {}), $anRows$$2_aoColumnsInit_jLen$$[$captions_i$$64_nThead$$].bVisible = $oInit$$.saved_aoColumns[$captions_i$$64_nThead$$].bVisible),
					$_fnAddColumn$$($oSettings$$, $anThs_bStripeRemove_j$$ ? $anThs_bStripeRemove_j$$[$captions_i$$64_nThead$$] :
					null);
					$_fnApplyColumnDefs$$($oSettings$$, $oInit$$.aoColumnDefs, $anRows$$2_aoColumnsInit_jLen$$,
					function($iCol$$, $oDef$$) {
						$_fnColumnOptions$$($oSettings$$, $iCol$$, $oDef$$)
					});
					$captions_i$$64_nThead$$ = 0;
					for ($iLen$$ = $oSettings$$.aaSorting.length; $captions_i$$64_nThead$$ < $iLen$$; $captions_i$$64_nThead$$++) {
						$oSettings$$.aaSorting[$captions_i$$64_nThead$$][0] >= $oSettings$$.aoColumns.length && ($oSettings$$.aaSorting[$captions_i$$64_nThead$$][0] = 0);
						var $oColumn$$ = $oSettings$$.aoColumns[$oSettings$$.aaSorting[$captions_i$$64_nThead$$][0]];
						$oSettings$$.aaSorting[$captions_i$$64_nThead$$][2] === $undefined$$ && ($oSettings$$.aaSorting[$captions_i$$64_nThead$$][2] = 0);
						$oInit$$.aaSorting === $undefined$$ && $oSettings$$.saved_aaSorting === $undefined$$ && ($oSettings$$.aaSorting[$captions_i$$64_nThead$$][1] = $oColumn$$.asSorting[0]);
						$anThs_bStripeRemove_j$$ = 0;
						for ($anRows$$2_aoColumnsInit_jLen$$ = $oColumn$$.asSorting.length; $anThs_bStripeRemove_j$$ < $anRows$$2_aoColumnsInit_jLen$$; $anThs_bStripeRemove_j$$++) if ($oSettings$$.aaSorting[$captions_i$$64_nThead$$][1] ==
						$oColumn$$.asSorting[$anThs_bStripeRemove_j$$]) {
							$oSettings$$.aaSorting[$captions_i$$64_nThead$$][2] = $anThs_bStripeRemove_j$$;
							break
						}
					}
					$_fnSortingClasses$$($oSettings$$);
					$_fnBrowserDetect$$($oSettings$$);
					$captions_i$$64_nThead$$ = $$$$(this).children("caption").each(function() {
						this._captionSide = $$$$(this).css("caption-side")
					});
					$iLen$$ = $$$$(this).children("thead");
					0 === $iLen$$.length && ($iLen$$ = [$document$$.createElement("thead")], this.appendChild($iLen$$[0]));
					$oSettings$$.nTHead = $iLen$$[0];
					$iLen$$ = $$$$(this).children("tbody");
					0 === $iLen$$.length && ($iLen$$ = [$document$$.createElement("tbody")], this.appendChild($iLen$$[0]));
					$oSettings$$.nTBody = $iLen$$[0];
					$oSettings$$.nTBody.setAttribute("role", "alert");
					$oSettings$$.nTBody.setAttribute("aria-live", "polite");
					$oSettings$$.nTBody.setAttribute("aria-relevant", "all");
					$iLen$$ = $$$$(this).children("tfoot");
					if (0 === $iLen$$.length && 0 < $captions_i$$64_nThead$$.length && ("" !== $oSettings$$.oScroll.sX || "" !== $oSettings$$.oScroll.sY)) $iLen$$ = [$document$$.createElement("tfoot")],
					this.appendChild($iLen$$[0]);
					0 < $iLen$$.length && ($oSettings$$.nTFoot = $iLen$$[0], $_fnDetectHeader$$($oSettings$$.aoFooter, $oSettings$$.nTFoot));
					if ($bUsePassedData$$) for ($captions_i$$64_nThead$$ = 0; $captions_i$$64_nThead$$ < $oInit$$.aaData.length; $captions_i$$64_nThead$$++) $_fnAddData$$($oSettings$$, $oInit$$.aaData[$captions_i$$64_nThead$$]);
					else $_fnGatherData$$($oSettings$$);
					$oSettings$$.aiDisplay = $oSettings$$.aiDisplayMaster.slice();
					$oSettings$$.bInitialised = !0; ! 1 === $bInitHandedOff$$ && $_fnInitialise$$($oSettings$$)
				}
			});
			$_that$$ =
			null;
			return this
		};
		$DataTable$$.fnVersionCheck = function $$DataTable$$$fnVersionCheck$($aThat_sVersion$$) {
			for (var $fnZPad$$ = function $$fnZPad$$$($Zpad$$, $count$$) {
				for (; $Zpad$$.length < $count$$;) $Zpad$$ += "0";
				return $Zpad$$
			},
			$aThis$$ = $DataTable$$.ext.sVersion.split("."), $aThat_sVersion$$ = $aThat_sVersion$$.split("."), $sThis$$ = "", $sThat$$ = "", $i$$ = 0, $iLen$$ = $aThat_sVersion$$.length; $i$$ < $iLen$$; $i$$++) $sThis$$ += $fnZPad$$($aThis$$[$i$$], 3),
			$sThat$$ += $fnZPad$$($aThat_sVersion$$[$i$$], 3);
			return parseInt($sThis$$,
			10) >= parseInt($sThat$$, 10)
		};
		$DataTable$$.fnIsDataTable = function $$DataTable$$$fnIsDataTable$($nTable$$) {
			for (var $o$$ = $DataTable$$.settings, $i$$ = 0; $i$$ < $o$$.length; $i$$++) if ($o$$[$i$$].nTable === $nTable$$ || $o$$[$i$$].nScrollHead === $nTable$$ || $o$$[$i$$].nScrollFoot === $nTable$$) return ! 0;
			return ! 1
		};
		$DataTable$$.fnTables = function $$DataTable$$$fnTables$($bVisible$$) {
			var $out$$ = [];
			jQuery.each($DataTable$$.settings,
			function($i$$, $o$$) { (!$bVisible$$ || !0 === $bVisible$$ && $$$$($o$$.nTable).is(":visible")) && $out$$.push($o$$.nTable)
			});
			return $out$$
		};
		$DataTable$$.version = "1.9.4";
		$DataTable$$.settings = [];
		$DataTable$$.models = {};
		$DataTable$$.models.ext = {
			afnFiltering: [],
			afnSortData: [],
			aoFeatures: [],
			aTypes: [],
			fnVersionCheck: $DataTable$$.fnVersionCheck,
			iApiIndex: 0,
			ofnSearch: {},
			oApi: {},
			oStdClasses: {},
			oJUIClasses: {},
			oPagination: {},
			oSort: {},
			sVersion: $DataTable$$.version,
			sErrMode: "alert",
			_oExternConfig: {
				iNextUnique: 0
			}
		};
		$DataTable$$.models.oSearch = {
			bCaseInsensitive: !0,
			sSearch: "",
			bRegex: !1,
			bSmart: !0
		};
		$DataTable$$.models.oRow = {
			nTr: null,
			_aData: [],
			_aSortData: [],
			_anHidden: [],
			_sRowStripe: ""
		};
		$DataTable$$.models.oColumn = {
			aDataSort: null,
			asSorting: null,
			bSearchable: null,
			bSortable: null,
			bUseRendered: null,
			bVisible: null,
			_bAutoType: !0,
			fnCreatedCell: null,
			fnGetData: null,
			fnRender: null,
			fnSetData: null,
			mData: null,
			mRender: null,
			nTh: null,
			nTf: null,
			sClass: null,
			sContentPadding: null,
			sDefaultContent: null,
			sName: null,
			sSortDataType: "std",
			sSortingClass: null,
			sSortingClassJUI: null,
			sTitle: null,
			sType: null,
			sWidth: null,
			sWidthOrig: null
		};
		$DataTable$$.defaults = {
			aaData: null,
			aaSorting: [[0,
			"asc"]],
			aaSortingFixed: null,
			aLengthMenu: [10, 25, 50, 100],
			aoColumns: null,
			aoColumnDefs: null,
			aoSearchCols: [],
			asStripeClasses: null,
			bAutoWidth: !0,
			bDeferRender: !1,
			bDestroy: !1,
			bFilter: !0,
			bInfo: !0,
			bJQueryUI: !1,
			bLengthChange: !0,
			bPaginate: !0,
			bProcessing: !1,
			bRetrieve: !1,
			bScrollAutoCss: !0,
			bScrollCollapse: !1,
			bScrollInfinite: !1,
			bServerSide: !1,
			bSort: !0,
			bSortCellsTop: !1,
			bSortClasses: !0,
			bStateSave: !1,
			fnCookieCallback: null,
			fnCreatedRow: null,
			fnDrawCallback: null,
			fnFooterCallback: null,
			fnFormatNumber: function $$DataTable$$$defaults$fnFormatNumber$($a$$) {
				if (1E3 >
				$a$$) return $a$$;
				for (var $iLen$$43_s$$ = $a$$ + "", $a$$ = $iLen$$43_s$$.split(""), $out$$ = "", $iLen$$43_s$$ = $iLen$$43_s$$.length, $i$$ = 0; $i$$ < $iLen$$43_s$$; $i$$++) 0 === $i$$ % 3 && 0 !== $i$$ && ($out$$ = this.oLanguage.sInfoThousands + $out$$),
				$out$$ = $a$$[$iLen$$43_s$$ - $i$$ - 1] + $out$$;
				return $out$$
			},
			fnHeaderCallback: null,
			fnInfoCallback: null,
			fnInitComplete: null,
			fnPreDrawCallback: null,
			fnRowCallback: null,
			fnServerData: function $$DataTable$$$defaults$fnServerData$($sUrl$$, $aoData$$, $fnCallback$$, $oSettings$$) {
				$oSettings$$.jqXHR =
				$$$$.ajax({
					url: $sUrl$$,
					data: $aoData$$,
					success: function($json$$) {
						$json$$.sError && $oSettings$$.oApi._fnLog($oSettings$$, 0, $json$$.sError);
						$$$$($oSettings$$.oInstance).trigger("xhr", [$oSettings$$, $json$$]);
						$fnCallback$$($json$$)
					},
					dataType: "json",
					cache: !1,
					type: $oSettings$$.sServerMethod,
					error: function($xhr$$, $error$$) {
						"parsererror" == $error$$ && $oSettings$$.oApi._fnLog($oSettings$$, 0, "DataTables warning: JSON data from server could not be parsed. This is caused by a JSON formatting error.")
					}
				})
			},
			fnServerParams: null,
			fnStateLoad: function $$DataTable$$$defaults$fnStateLoad$($oSettings$$88_sData$$) {
				var $oSettings$$88_sData$$ = this.oApi._fnReadCookie($oSettings$$88_sData$$.sCookiePrefix + $oSettings$$88_sData$$.sInstance),
				$oData$$;
				try {
					$oData$$ = "function" === typeof $$$$.parseJSON ? $$$$.parseJSON($oSettings$$88_sData$$) : eval("(" + $oSettings$$88_sData$$ + ")")
				} catch($e$$) {
					$oData$$ = null
				}
				return $oData$$
			},
			fnStateLoadParams: null,
			fnStateLoaded: null,
			fnStateSave: function $$DataTable$$$defaults$fnStateSave$($oSettings$$, $oData$$) {
				this.oApi._fnCreateCookie($oSettings$$.sCookiePrefix +
				$oSettings$$.sInstance, this.oApi._fnJsonString($oData$$), $oSettings$$.iCookieDuration, $oSettings$$.sCookiePrefix, $oSettings$$.fnCookieCallback)
			},
			fnStateSaveParams: null,
			iCookieDuration: 7200,
			iDeferLoading: null,
			iDisplayLength: 10,
			iDisplayStart: 0,
			iScrollLoadGap: 100,
			iTabIndex: 0,
			oLanguage: {
				oAria: {
					sSortAscending: ": activate to sort column ascending",
					sSortDescending: ": activate to sort column descending"
				},
				oPaginate: {
					sFirst: "First",
					sLast: "Last",
					sNext: "Next",
					sPrevious: "Previous"
				},
				sEmptyTable: "No data available in table",
				sInfo: "Showing _START_ to _END_ of _TOTAL_ entries",
				sInfoEmpty: "Showing 0 to 0 of 0 entries",
				sInfoFiltered: "(filtered from _MAX_ total entries)",
				sInfoPostFix: "",
				sInfoThousands: ",",
				sLengthMenu: "Show _MENU_ entries",
				sLoadingRecords: "Loading...",
				sProcessing: "Processing...",
				sSearch: "Search:",
				sUrl: "",
				sZeroRecords: "No matching records found"
			},
			oSearch: $$$$.extend({},
			$DataTable$$.models.oSearch),
			sAjaxDataProp: "aaData",
			sAjaxSource: null,
			sCookiePrefix: "SpryMedia_DataTables_",
			sDom: "lfrtip",
			sPaginationType: "two_button",
			sScrollX: "",
			sScrollXInner: "",
			sScrollY: "",
			sServerMethod: "GET"
		};
		$DataTable$$.defaults.columns = {
			aDataSort: null,
			asSorting: ["asc", "desc"],
			bSearchable: !0,
			bSortable: !0,
			bUseRendered: !0,
			bVisible: !0,
			fnCreatedCell: null,
			fnRender: null,
			iDataSort: -1,
			mData: null,
			mRender: null,
			sCellType: "td",
			sClass: "",
			sContentPadding: "",
			sDefaultContent: null,
			sName: "",
			sSortDataType: "std",
			sTitle: null,
			sType: null,
			sWidth: null
		};
		$DataTable$$.models.oSettings = {
			oFeatures: {
				bAutoWidth: null,
				bDeferRender: null,
				bFilter: null,
				bInfo: null,
				bLengthChange: null,
				bPaginate: null,
				bProcessing: null,
				bServerSide: null,
				bSort: null,
				bSortClasses: null,
				bStateSave: null
			},
			oScroll: {
				bAutoCss: null,
				bCollapse: null,
				bInfinite: null,
				iBarWidth: 0,
				iLoadGap: null,
				sX: null,
				sXInner: null,
				sY: null
			},
			oLanguage: {
				fnInfoCallback: null
			},
			oBrowser: {
				bScrollOversize: !1
			},
			aanFeatures: [],
			aoData: [],
			aiDisplay: [],
			aiDisplayMaster: [],
			aoColumns: [],
			aoHeader: [],
			aoFooter: [],
			asDataSearch: [],
			oPreviousSearch: {},
			aoPreSearchCols: [],
			aaSorting: null,
			aaSortingFixed: null,
			asStripeClasses: null,
			asDestroyStripes: [],
			sDestroyWidth: 0,
			aoRowCallback: [],
			aoHeaderCallback: [],
			aoFooterCallback: [],
			aoDrawCallback: [],
			aoRowCreatedCallback: [],
			aoPreDrawCallback: [],
			aoInitComplete: [],
			aoStateSaveParams: [],
			aoStateLoadParams: [],
			aoStateLoaded: [],
			sTableId: "",
			nTable: null,
			nTHead: null,
			nTFoot: null,
			nTBody: null,
			nTableWrapper: null,
			bDeferLoading: !1,
			bInitialised: !1,
			aoOpenRows: [],
			sDom: null,
			sPaginationType: "two_button",
			iCookieDuration: 0,
			sCookiePrefix: "",
			fnCookieCallback: null,
			aoStateSave: [],
			aoStateLoad: [],
			oLoadedState: null,
			sAjaxSource: null,
			sAjaxDataProp: null,
			bAjaxDataGet: !0,
			jqXHR: null,
			fnServerData: null,
			aoServerParams: [],
			sServerMethod: null,
			fnFormatNumber: null,
			aLengthMenu: null,
			iDraw: 0,
			bDrawing: !1,
			iDrawError: -1,
			_iDisplayLength: 10,
			_iDisplayStart: 0,
			_iDisplayEnd: 10,
			_iRecordsTotal: 0,
			_iRecordsDisplay: 0,
			bJUI: null,
			oClasses: {},
			bFiltered: !1,
			bSorted: !1,
			bSortCellsTop: null,
			oInit: null,
			aoDestroyCallback: [],
			fnRecordsTotal: function $$DataTable$$$models$oSettings$fnRecordsTotal$() {
				return this.oFeatures.bServerSide ? parseInt(this._iRecordsTotal, 10) : this.aiDisplayMaster.length
			},
			fnRecordsDisplay: function $$DataTable$$$models$oSettings$fnRecordsDisplay$() {
				return this.oFeatures.bServerSide ? parseInt(this._iRecordsDisplay, 10) : this.aiDisplay.length
			},
			fnDisplayEnd: function $$DataTable$$$models$oSettings$fnDisplayEnd$() {
				return this.oFeatures.bServerSide ? !1 === this.oFeatures.bPaginate || -1 == this._iDisplayLength ? this._iDisplayStart + this.aiDisplay.length: Math.min(this._iDisplayStart + this._iDisplayLength, this._iRecordsDisplay) : this._iDisplayEnd
			},
			oInstance: null,
			sInstance: null,
			iTabIndex: 0,
			nScrollHead: null,
			nScrollFoot: null
		};
		$DataTable$$.ext = $$$$.extend(!0, {},
		$DataTable$$.models.ext);
		$$$$.extend($DataTable$$.ext.oStdClasses, {
			sTable: "dataTable",
			sPagePrevEnabled: "paginate_enabled_previous",
			sPagePrevDisabled: "paginate_disabled_previous",
			sPageNextEnabled: "paginate_enabled_next",
			sPageNextDisabled: "paginate_disabled_next",
			sPageJUINext: "",
			sPageJUIPrev: "",
			sPageButton: "paginate_button",
			sPageButtonActive: "paginate_active",
			sPageButtonStaticDisabled: "paginate_button paginate_button_disabled",
			sPageFirst: "first",
			sPagePrevious: "previous",
			sPageNext: "next",
			sPageLast: "last",
			sStripeOdd: "odd",
			sStripeEven: "even",
			sRowEmpty: "dataTables_empty",
			sWrapper: "dataTables_wrapper",
			sFilter: "dataTables_filter",
			sInfo: "dataTables_info",
			sPaging: "dataTables_paginate paging_",
			sLength: "dataTables_length",
			sProcessing: "dataTables_processing",
			sSortAsc: "sorting_asc",
			sSortDesc: "sorting_desc",
			sSortable: "sorting",
			sSortableAsc: "sorting_asc_disabled",
			sSortableDesc: "sorting_desc_disabled",
			sSortableNone: "sorting_disabled",
			sSortColumn: "sorting_",
			sSortJUIAsc: "",
			sSortJUIDesc: "",
			sSortJUI: "",
			sSortJUIAscAllowed: "",
			sSortJUIDescAllowed: "",
			sSortJUIWrapper: "",
			sSortIcon: "",
			sScrollWrapper: "dataTables_scroll",
			sScrollHead: "dataTables_scrollHead",
			sScrollHeadInner: "dataTables_scrollHeadInner",
			sScrollBody: "dataTables_scrollBody",
			sScrollFoot: "dataTables_scrollFoot",
			sScrollFootInner: "dataTables_scrollFootInner",
			sFooterTH: "",
			sJUIHeader: "",
			sJUIFooter: ""
		});
		$$$$.extend($DataTable$$.ext.oJUIClasses, $DataTable$$.ext.oStdClasses, {
			sPagePrevEnabled: "fg-button ui-button ui-state-default ui-corner-left",
			sPagePrevDisabled: "fg-button ui-button ui-state-default ui-corner-left ui-state-disabled",
			sPageNextEnabled: "fg-button ui-button ui-state-default ui-corner-right",
			sPageNextDisabled: "fg-button ui-button ui-state-default ui-corner-right ui-state-disabled",
			sPageJUINext: "ui-icon ui-icon-circle-arrow-e",
			sPageJUIPrev: "ui-icon ui-icon-circle-arrow-w",
			sPageButton: "fg-button ui-button ui-state-default",
			sPageButtonActive: "fg-button ui-button ui-state-default ui-state-disabled",
			sPageButtonStaticDisabled: "fg-button ui-button ui-state-default ui-state-disabled",
			sPageFirst: "first ui-corner-tl ui-corner-bl",
			sPageLast: "last ui-corner-tr ui-corner-br",
			sPaging: "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",
			sSortAsc: "ui-state-default",
			sSortDesc: "ui-state-default",
			sSortable: "ui-state-default",
			sSortableAsc: "ui-state-default",
			sSortableDesc: "ui-state-default",
			sSortableNone: "ui-state-default",
			sSortJUIAsc: "css_right ui-icon ui-icon-triangle-1-n",
			sSortJUIDesc: "css_right ui-icon ui-icon-triangle-1-s",
			sSortJUI: "css_right ui-icon ui-icon-carat-2-n-s",
			sSortJUIAscAllowed: "css_right ui-icon ui-icon-carat-1-n",
			sSortJUIDescAllowed: "css_right ui-icon ui-icon-carat-1-s",
			sSortJUIWrapper: "DataTables_sort_wrapper",
			sSortIcon: "DataTables_sort_icon",
			sScrollHead: "dataTables_scrollHead ui-state-default",
			sScrollFoot: "dataTables_scrollFoot ui-state-default",
			sFooterTH: "ui-state-default",
			sJUIHeader: "fg-toolbar ui-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix",
			sJUIFooter: "fg-toolbar ui-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix"
		});
		$$$$.extend($DataTable$$.ext.oPagination, {
			two_button: {
				fnInit: function($oSettings$$, $nPaging$$, $fnCallbackDraw$$) {
					var $nPrevious_oLang$$ = $oSettings$$.oLanguage.oPaginate,
					$fnClickHandler$$ = function $$fnClickHandler$$$($e$$) {
						$oSettings$$.oApi._fnPageChange($oSettings$$, $e$$.data.action) && $fnCallbackDraw$$($oSettings$$)
					},
					$nPrevious_oLang$$ = !$oSettings$$.bJUI ? '<a class="' + $oSettings$$.oClasses.sPagePrevDisabled + '" tabindex="' + $oSettings$$.iTabIndex + '" role="button">' + $nPrevious_oLang$$.sPrevious + '</a><a class="' +
					$oSettings$$.oClasses.sPageNextDisabled + '" tabindex="' + $oSettings$$.iTabIndex + '" role="button">' + $nPrevious_oLang$$.sNext + "</a>": '<a class="' + $oSettings$$.oClasses.sPagePrevDisabled + '" tabindex="' + $oSettings$$.iTabIndex + '" role="button"><span class="' + $oSettings$$.oClasses.sPageJUIPrev + '"></span></a><a class="' + $oSettings$$.oClasses.sPageNextDisabled + '" tabindex="' + $oSettings$$.iTabIndex + '" role="button"><span class="' + $oSettings$$.oClasses.sPageJUINext + '"></span></a>';
					$$$$($nPaging$$).append($nPrevious_oLang$$);
					var $els_nNext$$ = $$$$("a", $nPaging$$),
					$nPrevious_oLang$$ = $els_nNext$$[0],
					$els_nNext$$ = $els_nNext$$[1];
					$oSettings$$.oApi._fnBindAction($nPrevious_oLang$$, {
						action: "previous"
					},
					$fnClickHandler$$);
					$oSettings$$.oApi._fnBindAction($els_nNext$$, {
						action: "next"
					},
					$fnClickHandler$$);
					$oSettings$$.aanFeatures.p || ($nPaging$$.id = $oSettings$$.sTableId + "_paginate", $nPrevious_oLang$$.id = $oSettings$$.sTableId + "_previous", $els_nNext$$.id = $oSettings$$.sTableId + "_next", $nPrevious_oLang$$.setAttribute("aria-controls", $oSettings$$.sTableId),
					$els_nNext$$.setAttribute("aria-controls", $oSettings$$.sTableId))
				},
				fnUpdate: function($oSettings$$) {
					if ($oSettings$$.aanFeatures.p) for (var $oClasses$$ = $oSettings$$.oClasses, $an$$ = $oSettings$$.aanFeatures.p, $nNode$$, $i$$ = 0, $iLen$$ = $an$$.length; $i$$ < $iLen$$; $i$$++) if ($nNode$$ = $an$$[$i$$].firstChild) $nNode$$.className = 0 === $oSettings$$._iDisplayStart ? $oClasses$$.sPagePrevDisabled: $oClasses$$.sPagePrevEnabled,
					$nNode$$ = $nNode$$.nextSibling,
					$nNode$$.className = $oSettings$$.fnDisplayEnd() == $oSettings$$.fnRecordsDisplay() ?
					$oClasses$$.sPageNextDisabled: $oClasses$$.sPageNextEnabled
				}
			},
			iFullNumbersShowPages: 5,
			full_numbers: {
				fnInit: function($oSettings$$, $nPaging$$, $fnCallbackDraw$$) {
					var $nFirst_oLang$$ = $oSettings$$.oLanguage.oPaginate,
					$nPrev_oClasses$$ = $oSettings$$.oClasses,
					$fnClickHandler$$ = function $$fnClickHandler$$$($e$$) {
						$oSettings$$.oApi._fnPageChange($oSettings$$, $e$$.data.action) && $fnCallbackDraw$$($oSettings$$)
					};
					$$$$($nPaging$$).append('<a  tabindex="' + $oSettings$$.iTabIndex + '" class="' + $nPrev_oClasses$$.sPageButton +
					" " + $nPrev_oClasses$$.sPageFirst + '">' + $nFirst_oLang$$.sFirst + '</a><a  tabindex="' + $oSettings$$.iTabIndex + '" class="' + $nPrev_oClasses$$.sPageButton + " " + $nPrev_oClasses$$.sPagePrevious + '">' + $nFirst_oLang$$.sPrevious + '</a><span></span><a tabindex="' + $oSettings$$.iTabIndex + '" class="' + $nPrev_oClasses$$.sPageButton + " " + $nPrev_oClasses$$.sPageNext + '">' + $nFirst_oLang$$.sNext + '</a><a tabindex="' + $oSettings$$.iTabIndex + '" class="' + $nPrev_oClasses$$.sPageButton + " " + $nPrev_oClasses$$.sPageLast + '">' + $nFirst_oLang$$.sLast +
					"</a>");
					var $els$$ = $$$$("a", $nPaging$$),
					$nFirst_oLang$$ = $els$$[0],
					$nPrev_oClasses$$ = $els$$[1],
					$nNext$$ = $els$$[2],
					$els$$ = $els$$[3];
					$oSettings$$.oApi._fnBindAction($nFirst_oLang$$, {
						action: "first"
					},
					$fnClickHandler$$);
					$oSettings$$.oApi._fnBindAction($nPrev_oClasses$$, {
						action: "previous"
					},
					$fnClickHandler$$);
					$oSettings$$.oApi._fnBindAction($nNext$$, {
						action: "next"
					},
					$fnClickHandler$$);
					$oSettings$$.oApi._fnBindAction($els$$, {
						action: "last"
					},
					$fnClickHandler$$);
					$oSettings$$.aanFeatures.p || ($nPaging$$.id = $oSettings$$.sTableId +
					"_paginate", $nFirst_oLang$$.id = $oSettings$$.sTableId + "_first", $nPrev_oClasses$$.id = $oSettings$$.sTableId + "_previous", $nNext$$.id = $oSettings$$.sTableId + "_next", $els$$.id = $oSettings$$.sTableId + "_last")
				},
				fnUpdate: function($oSettings$$, $fnCallbackDraw$$) {
					if ($oSettings$$.aanFeatures.p) {
						var $i$$ = $DataTable$$.ext.oPagination.iFullNumbersShowPages,
						$iEndButton_iLen$$ = Math.floor($i$$ / 2),
						$iPages$$ = Math.ceil($oSettings$$.fnRecordsDisplay() / $oSettings$$._iDisplayLength),
						$iCurrentPage$$ = Math.ceil($oSettings$$._iDisplayStart /
						$oSettings$$._iDisplayLength) + 1,
						$sList$$ = "",
						$iStartButton$$,
						$oClasses$$ = $oSettings$$.oClasses,
						$anButtons_anStatic_nNode$$,
						$an$$ = $oSettings$$.aanFeatures.p,
						$fnBind$$ = function $$fnBind$$$($j$$) {
							$oSettings$$.oApi._fnBindAction(this, {
								page: $j$$ + $iStartButton$$ - 1
							},
							function($e$$) {
								$oSettings$$.oApi._fnPageChange($oSettings$$, $e$$.data.page);
								$fnCallbackDraw$$($oSettings$$);
								$e$$.preventDefault()
							})
						}; - 1 === $oSettings$$._iDisplayLength ? $iCurrentPage$$ = $iEndButton_iLen$$ = $iStartButton$$ = 1: $iPages$$ < $i$$ ? ($iStartButton$$ =
						1, $iEndButton_iLen$$ = $iPages$$) : $iCurrentPage$$ <= $iEndButton_iLen$$ ? ($iStartButton$$ = 1, $iEndButton_iLen$$ = $i$$) : $iCurrentPage$$ >= $iPages$$ - $iEndButton_iLen$$ ? ($iStartButton$$ = $iPages$$ - $i$$ + 1, $iEndButton_iLen$$ = $iPages$$) : ($iStartButton$$ = $iCurrentPage$$ - Math.ceil($i$$ / 2) + 1, $iEndButton_iLen$$ = $iStartButton$$ + $i$$ - 1);
						for ($i$$ = $iStartButton$$; $i$$ <= $iEndButton_iLen$$; $i$$++) $sList$$ += $iCurrentPage$$ !== $i$$ ? '<a tabindex="' + $oSettings$$.iTabIndex + '" class="' + $oClasses$$.sPageButton + '">' + $oSettings$$.fnFormatNumber($i$$) +
						"</a>": '<a tabindex="' + $oSettings$$.iTabIndex + '" class="' + $oClasses$$.sPageButtonActive + '">' + $oSettings$$.fnFormatNumber($i$$) + "</a>";
						$i$$ = 0;
						for ($iEndButton_iLen$$ = $an$$.length; $i$$ < $iEndButton_iLen$$; $i$$++) $anButtons_anStatic_nNode$$ = $an$$[$i$$],
						$anButtons_anStatic_nNode$$.hasChildNodes() && ($$$$("span:eq(0)", $anButtons_anStatic_nNode$$).html($sList$$).children("a").each($fnBind$$), $anButtons_anStatic_nNode$$ = $anButtons_anStatic_nNode$$.getElementsByTagName("a"), $anButtons_anStatic_nNode$$ = [$anButtons_anStatic_nNode$$[0],
						$anButtons_anStatic_nNode$$[1], $anButtons_anStatic_nNode$$[$anButtons_anStatic_nNode$$.length - 2], $anButtons_anStatic_nNode$$[$anButtons_anStatic_nNode$$.length - 1]], $$$$($anButtons_anStatic_nNode$$).removeClass($oClasses$$.sPageButton + " " + $oClasses$$.sPageButtonActive + " " + $oClasses$$.sPageButtonStaticDisabled), $$$$([$anButtons_anStatic_nNode$$[0], $anButtons_anStatic_nNode$$[1]]).addClass(1 == $iCurrentPage$$ ? $oClasses$$.sPageButtonStaticDisabled: $oClasses$$.sPageButton), $$$$([$anButtons_anStatic_nNode$$[2],
						$anButtons_anStatic_nNode$$[3]]).addClass(0 === $iPages$$ || $iCurrentPage$$ === $iPages$$ || -1 === $oSettings$$._iDisplayLength ? $oClasses$$.sPageButtonStaticDisabled: $oClasses$$.sPageButton))
					}
				}
			}
		});
		$$$$.extend($DataTable$$.ext.oSort, {
			"string-pre": function($a$$) {
				"string" != typeof $a$$ && ($a$$ = null !== $a$$ && $a$$.toString ? $a$$.toString() : "");
				return $a$$.toLowerCase()
			},
			"string-asc": function($x$$, $y$$) {
				return $x$$ < $y$$ ? -1: $x$$ > $y$$ ? 1: 0
			},
			"string-desc": function($x$$, $y$$) {
				return $x$$ < $y$$ ? 1: $x$$ > $y$$ ? -1: 0
			},
			"html-pre": function($a$$) {
				return $a$$.replace(/<.*?>/g,
				"").toLowerCase()
			},
			"html-asc": function($x$$, $y$$) {
				return $x$$ < $y$$ ? -1: $x$$ > $y$$ ? 1: 0
			},
			"html-desc": function($x$$, $y$$) {
				return $x$$ < $y$$ ? 1: $x$$ > $y$$ ? -1: 0
			},
			"date-pre": function($a$$11_x$$) {
				$a$$11_x$$ = Date.parse($a$$11_x$$);
				if (isNaN($a$$11_x$$) || "" === $a$$11_x$$) $a$$11_x$$ = Date.parse("01/01/1970 00:00:00");
				return $a$$11_x$$
			},
			"date-asc": function($x$$, $y$$) {
				return $x$$ - $y$$
			},
			"date-desc": function($x$$, $y$$) {
				return $y$$ - $x$$
			},
			"numeric-pre": function($a$$) {
				return "-" == $a$$ || "" === $a$$ ? 0: 1 * $a$$
			},
			"numeric-asc": function($x$$,
			$y$$) {
				return $x$$ - $y$$
			},
			"numeric-desc": function($x$$, $y$$) {
				return $y$$ - $x$$
			}
		});
		$$$$.extend($DataTable$$.ext.aTypes, [function($sData$$) {
			if ("number" === typeof $sData$$) return "numeric";
			if ("string" !== typeof $sData$$) return null;
			var $Char$$,
			$bDecimal$$ = !1;
			$Char$$ = $sData$$.charAt(0);
			if ( - 1 == "0123456789-".indexOf($Char$$)) return null;
			for (var $i$$ = 1; $i$$ < $sData$$.length; $i$$++) {
				$Char$$ = $sData$$.charAt($i$$);
				if ( - 1 == "0123456789.".indexOf($Char$$)) return null;
				if ("." == $Char$$) {
					if ($bDecimal$$) return null;
					$bDecimal$$ =
					!0
				}
			}
			return "numeric"
		},
		function($sData$$) {
			var $iParse$$ = Date.parse($sData$$);
			return null !== $iParse$$ && !isNaN($iParse$$) || "string" === typeof $sData$$ && 0 === $sData$$.length ? "date": null
		},
		function($sData$$) {
			return "string" === typeof $sData$$ && -1 != $sData$$.indexOf("<") && -1 != $sData$$.indexOf(">") ? "html": null
		}]);
		$$$$.fn.DataTable = $DataTable$$;
		$$$$.fn.dataTable = $DataTable$$;
		$$$$.fn.dataTableSettings = $DataTable$$.settings;
		$$$$.fn.dataTableExt = $DataTable$$.ext
	};
	"function" === typeof define && define.amd ? define(["jquery"],
	$factory$$) : jQuery && !jQuery.fn.dataTable && $factory$$(jQuery)
})(window, document);
$.fn.dataTableExt.oApi.fnLengthChange = function $$$fn$dataTableExt$oApi$fnLengthChange$($oSettings$$, $iDisplay$$) {
	$oSettings$$._iDisplayLength = $iDisplay$$;
	$oSettings$$.oApi._fnCalculateEnd($oSettings$$);
	$oSettings$$._iDisplayEnd == $oSettings$$.aiDisplay.length && ($oSettings$$._iDisplayStart = $oSettings$$._iDisplayEnd - $oSettings$$._iDisplayLength, 0 > $oSettings$$._iDisplayStart && ($oSettings$$._iDisplayStart = 0)); - 1 == $oSettings$$._iDisplayLength && ($oSettings$$._iDisplayStart = 0);
	$oSettings$$.oApi._fnDraw($oSettings$$);
	$oSettings$$.aanFeatures.l && $("select", $oSettings$$.aanFeatures.l).val($iDisplay$$)
};
$.fn.dataTableExt.oSort["interface-asc"] = function $$$fn$dataTableExt$oSort$__0$($a$$, $b$$) {
	var $type$$ = [],
	$major$$ = [],
	$minor$$ = [];
	_.each(arguments,
	function($iface$$, $i$$) {
		var $match$$ = $iface$$.match(/([a-z]+)([0-9+]?)(.([0-9]+))?/);
		$type$$[$i$$] = $match$$[1];
		$major$$[$i$$] = parseInt($match$$[2] || 0, 10);
		$minor$$[$i$$] = parseInt($match$$[4] || 0, 10)
	});
	return $type$$[0] == $type$$[1] ? $major$$[0] == $major$$[1] ? $minor$$[0] == $minor$$[1] ? 0: $minor$$[0] < $minor$$[1] ? -1: 1: $major$$[0] < $major$$[1] ? -1: 1: $type$$[0] < $type$$[1] ?
	-1: 1
};
$.fn.dataTableExt.oSort["interface-desc"] = function $$$fn$dataTableExt$oSort$__1$($a$$, $b$$) {
	var $type$$ = [],
	$major$$ = [],
	$minor$$ = [];
	_.each(arguments,
	function($iface$$, $i$$) {
		var $match$$ = $iface$$.match(/([a-z]+)([0-9+]?)(.([0-9]+))?/);
		$type$$[$i$$] = $match$$[1];
		$major$$[$i$$] = parseInt($match$$[2] || 0, 10);
		$minor$$[$i$$] = parseInt($match$$[4] || 0, 10)
	});
	return $type$$[0] == $type$$[1] ? $major$$[0] == $major$$[1] ? $minor$$[0] == $minor$$[1] ? 0: $minor$$[0] < $minor$$[1] ? 1: -1: $major$$[0] < $major$$[1] ? 1: -1: $type$$[0] < $type$$[1] ?
	1: -1
};
function ipv4AddressPre($a$$15_m$$) {
	var $i$$ = $a$$15_m$$.split("/"),
	$a$$15_m$$ = $i$$[0].split("."),
	$x$$ = "";
	1 < $i$$.length && $a$$15_m$$.push($i$$[1]);
	for ($i$$ = 0; $i$$ < $a$$15_m$$.length; $i$$++) var $item$$ = $a$$15_m$$[$i$$],
	$x$$ = 1 == $item$$.length ? $x$$ + ("00" + $item$$) : 2 == $item$$.length ? $x$$ + ("0" + $item$$) : $x$$ + $item$$;
	return $x$$
}
$.fn.dataTableExt.oSort["ipv4-address-asc"] = function $$$fn$dataTableExt$oSort$__2$($a$$, $b$$) {
	$a$$ = ipv4AddressPre($a$$);
	$b$$ = ipv4AddressPre($b$$);
	return $a$$ < $b$$ ? -1: $a$$ > $b$$ ? 1: 0
};
$.fn.dataTableExt.oSort["ipv4-address-desc"] = function $$$fn$dataTableExt$oSort$__3$($a$$, $b$$) {
	$a$$ = ipv4AddressPre($a$$);
	$b$$ = ipv4AddressPre($b$$);
	return $a$$ < $b$$ ? 1: $a$$ > $b$$ ? -1: 0
};
$.fn.dataTableExt.oSort["ipv4-address-hyperlink-asc"] = function $$$fn$dataTableExt$oSort$__4$($a$$, $b$$) {
	$a$$ = ipv4AddressPre($($a$$).attr("href").replace("http://", ""));
	$b$$ = ipv4AddressPre($($b$$).attr("href").replace("http://", ""));
	return $a$$ < $b$$ ? -1: $a$$ > $b$$ ? 1: 0
};
$.fn.dataTableExt.oSort["ipv4-address-hyperlink-desc"] = function $$$fn$dataTableExt$oSort$__5$($a$$, $b$$) {
	$a$$ = ipv4AddressPre($($a$$).attr("href").replace("http://", ""));
	$b$$ = ipv4AddressPre($($b$$).attr("href").replace("http://", ""));
	return $a$$ < $b$$ ? 1: $a$$ > $b$$ ? -1: 0
};
function ipv4AddressHostPre($a$$20_p$$) {
	var $a$$20_p$$ = $a$$20_p$$.split(" - "),
	$host$$ = "",
	$ip$$ = "";
	1 < $a$$20_p$$.length ? ($ip$$ = ipv4AddressPre($a$$20_p$$[1]), $host$$ = $a$$20_p$$[0]) : $ip$$ = ipv4AddressPre($a$$20_p$$[0]);
	return $ip$$ + $host$$
}
$.fn.dataTableExt.oSort["ipv4-address-host-asc"] = function $$$fn$dataTableExt$oSort$__6$($a$$, $b$$) {
	$a$$ = ipv4AddressHostPre($a$$);
	$b$$ = ipv4AddressHostPre($b$$);
	return $a$$ < $b$$ ? -1: $a$$ > $b$$ ? 1: 0
};
$.fn.dataTableExt.oSort["ipv4-address-host-desc"] = function $$$fn$dataTableExt$oSort$__7$($a$$, $b$$) {
	$a$$ = ipv4AddressHostPre($a$$);
	$b$$ = ipv4AddressHostPre($b$$);
	return $a$$ < $b$$ ? 1: $a$$ > $b$$ ? -1: 0
};
function getNumWithoutUnit($n$$15_num$$) {
	var $parts_unit$$ = $n$$15_num$$.split(" "),
	$n$$15_num$$ = $parts_unit$$[0],
	$parts_unit$$ = $parts_unit$$[1];
	if (1 > $n$$15_num$$.length) return 0;
	if (!$parts_unit$$ || 1 > $parts_unit$$.length) return $n$$15_num$$;
	switch ($parts_unit$$[0]) {
	case "K":
		$n$$15_num$$ *= 1E3;
		break;
	case "M":
		$n$$15_num$$ *= 1E6;
		break;
	case "G":
		$n$$15_num$$ *= 1E9
	}
	return $n$$15_num$$
}
$.fn.dataTableExt.oSort["num-unit-asc"] = function $$$fn$dataTableExt$oSort$__8$($a$$, $b$$) {
	$a$$ = getNumWithoutUnit($a$$);
	$b$$ = getNumWithoutUnit($b$$);
	return $a$$ - $b$$
};
$.fn.dataTableExt.oSort["num-unit-desc"] = function $$$fn$dataTableExt$oSort$__9$($a$$, $b$$) {
	$a$$ = getNumWithoutUnit($a$$);
	$b$$ = getNumWithoutUnit($b$$);
	return $b$$ - $a$$
};
$.fn.dataTableExt.oApi.fnStandingRedraw = function $$$fn$dataTableExt$oApi$fnStandingRedraw$($oSettings$$) {
	if (!1 === $oSettings$$.oFeatures.bServerSide) {
		var $before$$ = $oSettings$$._iDisplayStart;
		$oSettings$$.oApi._fnReDraw($oSettings$$);
		$oSettings$$._iDisplayStart = $before$$;
		$oSettings$$.oApi._fnCalculateEnd($oSettings$$)
	}
	$oSettings$$.oApi._fnDraw($oSettings$$)
}; (function($$$$) {
	$$$$.widget("ui.selectmenu", {
		getter: "value",
		version: "1.8",
		eventPrefix: "selectmenu",
		options: {
			transferClasses: !0,
			typeAhead: "sequential",
			style: "dropdown",
			positionOptions: {
				my: "left top",
				at: "left bottom",
				offset: null
			},
			width: null,
			menuWidth: null,
			handleWidth: 26,
			maxHeight: null,
			icons: null,
			format: null,
			bgImage: function() {},
			wrapperElement: "<div />"
		},
		_create: function() {
			var $self$$ = this,
			$o$$ = this.options,
			$selectmenuId$$ = this.element.attr("id") || "ui-selectmenu-" + Math.random().toString(16).slice(2,
			10);
			this.ids = [$selectmenuId$$ + "-button", $selectmenuId$$ + "-menu"];
			this._safemouseup = !0;
			this.newelement = $$$$("<a />", {
				"class": this.widgetBaseClass + " ui-widget ui-state-default ui-corner-all",
				id: this.ids[0],
				role: "button",
				href: "#",
				tabindex: this.element.attr("disabled") ? 1: 0,
				"aria-haspopup": !0,
				"aria-owns": this.ids[1]
			});
			this.newelementWrap = $$$$($o$$.wrapperElement).append(this.newelement).insertAfter(this.element);
			var $tabindex$$ = this.element.attr("tabindex");
			$tabindex$$ && this.newelement.attr("tabindex",
			$tabindex$$);
			this.newelement.data("selectelement", this.element);
			this.selectmenuIcon = $$$$('<span class="' + this.widgetBaseClass + '-icon ui-icon"></span>').prependTo(this.newelement);
			this.newelement.prepend('<span class="' + $self$$.widgetBaseClass + '-status" />');
			$$$$('label[for="' + $selectmenuId$$ + '"]').attr("for", this.ids[0]).bind("click.selectmenu",
			function() {
				$self$$.newelement[0].focus();
				return ! 1
			});
			this.newelement.bind("mousedown.selectmenu",
			function($event$$) {
				$self$$._toggle($event$$, !0);
				"popup" == $o$$.style &&
				($self$$._safemouseup = !1, setTimeout(function() {
					$self$$._safemouseup = !0
				},
				300));
				return ! 1
			}).bind("click.selectmenu",
			function() {
				return ! 1
			}).bind("keydown.selectmenu",
			function($event$$) {
				var $ret$$ = !1;
				switch ($event$$.keyCode) {
				case $$$$.ui.keyCode.ENTER:
					$ret$$ = !0;
					break;
				case $$$$.ui.keyCode.SPACE:
					$self$$._toggle($event$$);
					break;
				case $$$$.ui.keyCode.UP:
					$event$$.altKey ? $self$$.open($event$$) : $self$$._moveSelection( - 1);
					break;
				case $$$$.ui.keyCode.DOWN:
					$event$$.altKey ? $self$$.open($event$$) : $self$$._moveSelection(1);
					break;
				case $$$$.ui.keyCode.LEFT:
					$self$$._moveSelection( - 1);
					break;
				case $$$$.ui.keyCode.RIGHT:
					$self$$._moveSelection(1);
					break;
				case $$$$.ui.keyCode.TAB:
					$ret$$ = !0;
					break;
				default:
					$ret$$ = !0
				}
				return $ret$$
			}).bind("keypress.selectmenu",
			function($event$$) {
				$self$$._typeAhead($event$$.which, "mouseup");
				return ! 0
			}).bind("mouseover.selectmenu focus.selectmenu",
			function() {
				$o$$.disabled || $$$$(this).addClass($self$$.widgetBaseClass + "-focus ui-state-hover")
			}).bind("mouseout.selectmenu blur.selectmenu",
			function() {
				$o$$.disabled ||
				$$$$(this).removeClass($self$$.widgetBaseClass + "-focus ui-state-hover")
			});
			$$$$(document).bind("mousedown.selectmenu",
			function($event$$) {
				$self$$.close($event$$)
			});
			this.element.bind("click.selectmenu",
			function() {
				$self$$._refreshValue()
			}).bind("focus.selectmenu",
			function() {
				$self$$.newelement && $self$$.newelement[0].focus()
			});
			$o$$.width || ($o$$.width = this.element.outerWidth());
			this.newelement.width($o$$.width);
			this.element.hide();
			this.list = $$$$("<ul />", {
				"class": "ui-widget ui-widget-content",
				"aria-hidden": !0,
				role: "listbox",
				"aria-labelledby": this.ids[0],
				id: this.ids[1]
			});
			this.listWrap = $$$$($o$$.wrapperElement).addClass($self$$.widgetBaseClass + "-menu").append(this.list).appendTo("body");
			this.list.bind("keydown.selectmenu",
			function($event$$) {
				var $ret$$ = false;
				switch ($event$$.keyCode) {
				case $$$$.ui.keyCode.UP:
					$event$$.altKey ? $self$$.close($event$$, true) : $self$$._moveFocus( - 1);
					break;
				case $$$$.ui.keyCode.DOWN:
					$event$$.altKey ? $self$$.close($event$$, true) : $self$$._moveFocus(1);
					break;
				case $$$$.ui.keyCode.LEFT:
					$self$$._moveFocus( - 1);
					break;
				case $$$$.ui.keyCode.RIGHT:
					$self$$._moveFocus(1);
					break;
				case $$$$.ui.keyCode.HOME:
					$self$$._moveFocus(":first");
					break;
				case $$$$.ui.keyCode.PAGE_UP:
					$self$$._scrollPage("up");
					break;
				case $$$$.ui.keyCode.PAGE_DOWN:
					$self$$._scrollPage("down");
					break;
				case $$$$.ui.keyCode.END:
					$self$$._moveFocus(":last");
					break;
				case $$$$.ui.keyCode.ENTER:
				case $$$$.ui.keyCode.SPACE:
					$self$$.close($event$$, true);
					$$$$($event$$.target).parents("li:eq(0)").trigger("mouseup");
					break;
				case $$$$.ui.keyCode.TAB:
					$ret$$ = true;
					$self$$.close($event$$,
					true);
					$$$$($event$$.target).parents("li:eq(0)").trigger("mouseup");
					break;
				case $$$$.ui.keyCode.ESCAPE:
					$self$$.close($event$$, true);
					break;
				default:
					$ret$$ = true
				}
				return $ret$$
			}).bind("keypress.selectmenu",
			function($event$$) {
				$self$$._typeAhead($event$$.which, "focus");
				return true
			}).bind("mousedown.selectmenu mouseup.selectmenu",
			function() {
				return false
			})
		},
		_init: function() {
			var $self$$ = this,
			$o$$ = this.options,
			$selectOptionData$$ = [];
			this.element.find("option").each(function() {
				var $opt$$ = $$$$(this);
				$selectOptionData$$.push({
					value: $opt$$.attr("value"),
					text: $self$$._formatText($opt$$.text()),
					selected: $opt$$.attr("selected"),
					disabled: $opt$$.attr("disabled"),
					classes: $opt$$.attr("class"),
					typeahead: $opt$$.attr("typeahead"),
					parentOptGroup: $opt$$.parent("optgroup"),
					bgImage: $o$$.bgImage.call($opt$$)
				})
			});
			var $activeClass$$ = "popup" == $self$$.options.style ? " ui-state-active": "";
			this.list.html("");
			if ($selectOptionData$$.length) for (var $i$$ = 0; $i$$ < $selectOptionData$$.length; $i$$++) {
				var $thisLi_thisLiAttr$$ = {
					role: "presentation"
				};
				$selectOptionData$$[$i$$].disabled &&
				($thisLi_thisLiAttr$$["class"] = this.namespace + "-state-disabled");
				var $iconClass_optGroupName_thisA_thisAAttr$$ = {
					html: $selectOptionData$$[$i$$].text,
					href: "#",
					tabindex: -1,
					role: "option",
					"aria-selected": !1
				};
				$selectOptionData$$[$i$$].disabled && ($iconClass_optGroupName_thisA_thisAAttr$$["aria-disabled"] = $selectOptionData$$[$i$$].disabled);
				$selectOptionData$$[$i$$].typeahead && ($iconClass_optGroupName_thisA_thisAAttr$$.typeahead = $selectOptionData$$[$i$$].typeahead);
				$iconClass_optGroupName_thisA_thisAAttr$$ =
				$$$$("<a/>", $iconClass_optGroupName_thisA_thisAAttr$$);
				$thisLi_thisLiAttr$$ = $$$$("<li/>", $thisLi_thisLiAttr$$).append($iconClass_optGroupName_thisA_thisAAttr$$).data("index", $i$$).addClass($selectOptionData$$[$i$$].classes).data("optionClasses", $selectOptionData$$[$i$$].classes || "").bind("mouseup.selectmenu",
				function($event$$) {
					if ($self$$._safemouseup && !$self$$._disabled($event$$.currentTarget) && !$self$$._disabled($$$$($event$$.currentTarget).parents("ul>li." + $self$$.widgetBaseClass + "-group "))) {
						var $changed$$ =
						$$$$(this).data("index") != $self$$._selectedIndex();
						$self$$.index($$$$(this).data("index"));
						$self$$.select($event$$);
						$changed$$ && $self$$.change($event$$);
						$self$$.close($event$$, true)
					}
					return false
				}).bind("click.selectmenu",
				function() {
					return false
				}).bind("mouseover.selectmenu focus.selectmenu",
				function($e$$) {
					if (!$$$$($e$$.currentTarget).hasClass($self$$.namespace + "-state-disabled") && !$$$$($e$$.currentTarget).parent("ul").parent("li").hasClass($self$$.namespace + "-state-disabled")) {
						$self$$._selectedOptionLi().addClass($activeClass$$);
						$self$$._focusedOptionLi().removeClass($self$$.widgetBaseClass + "-item-focus ui-state-hover");
						$$$$(this).removeClass("ui-state-active").addClass($self$$.widgetBaseClass + "-item-focus ui-state-hover")
					}
				}).bind("mouseout.selectmenu blur.selectmenu",
				function() {
					$$$$(this).is($self$$._selectedOptionLi().selector) && $$$$(this).addClass($activeClass$$);
					$$$$(this).removeClass($self$$.widgetBaseClass + "-item-focus ui-state-hover")
				});
				$selectOptionData$$[$i$$].parentOptGroup.length ? ($iconClass_optGroupName_thisA_thisAAttr$$ =
				$self$$.widgetBaseClass + "-group-" + this.element.find("optgroup").index($selectOptionData$$[$i$$].parentOptGroup), this.list.find("li." + $iconClass_optGroupName_thisA_thisAAttr$$).length ? this.list.find("li." + $iconClass_optGroupName_thisA_thisAAttr$$ + ":last ul").append($thisLi_thisLiAttr$$) : $$$$(' <li role="presentation" class="' + $self$$.widgetBaseClass + "-group " + $iconClass_optGroupName_thisA_thisAAttr$$ + ($selectOptionData$$[$i$$].parentOptGroup.attr("disabled") ? " " + this.namespace + '-state-disabled" aria-disabled="true"':
				'"') + '><span class="' + $self$$.widgetBaseClass + '-group-label">' + $selectOptionData$$[$i$$].parentOptGroup.attr("label") + "</span><ul></ul></li> ").appendTo(this.list).find("ul").append($thisLi_thisLiAttr$$)) : $thisLi_thisLiAttr$$.appendTo(this.list);
				if ($o$$.icons) for (var $j$$ in $o$$.icons) $thisLi_thisLiAttr$$.is($o$$.icons[$j$$].find) && ($thisLi_thisLiAttr$$.data("optionClasses", $selectOptionData$$[$i$$].classes + " " + $self$$.widgetBaseClass + "-hasIcon").addClass($self$$.widgetBaseClass + "-hasIcon"), $iconClass_optGroupName_thisA_thisAAttr$$ =
				$o$$.icons[$j$$].icon || "", $thisLi_thisLiAttr$$.find("a:eq(0)").prepend('<span class="' + $self$$.widgetBaseClass + "-item-icon ui-icon " + $iconClass_optGroupName_thisA_thisAAttr$$ + '"></span>'), $selectOptionData$$[$i$$].bgImage && $thisLi_thisLiAttr$$.find("span").css("background-image", $selectOptionData$$[$i$$].bgImage))
			} else $$$$('<li role="presentation"><a href="#" tabindex="-1" role="option"></a></li>').appendTo(this.list);
			$i$$ = "dropdown" == $o$$.style;
			this.newelement.toggleClass($self$$.widgetBaseClass +
			"-dropdown", $i$$).toggleClass($self$$.widgetBaseClass + "-popup", !$i$$);
			this.list.toggleClass($self$$.widgetBaseClass + "-menu-dropdown ui-corner-bottom", $i$$).toggleClass($self$$.widgetBaseClass + "-menu-popup ui-corner-all", !$i$$).find("li:first").toggleClass("ui-corner-top", !$i$$).end().find("li:last").addClass("ui-corner-bottom");
			this.selectmenuIcon.toggleClass("ui-icon-triangle-1-s", $i$$).toggleClass("ui-icon-triangle-2-n-s", !$i$$);
			$o$$.transferClasses && ($i$$ = this.element.attr("class") || "", this.newelement.add(this.list).addClass($i$$));
			"dropdown" == $o$$.style ? this.list.width($o$$.menuWidth ? $o$$.menuWidth: $o$$.width) : this.list.width($o$$.menuWidth ? $o$$.menuWidth: $o$$.width - $o$$.handleWidth);
			this.list.css("height", "auto");
			$i$$ = this.listWrap.height();
			$o$$.maxHeight && $o$$.maxHeight < $i$$ ? this.list.height($o$$.maxHeight) : ($j$$ = $$$$(window).height() / 3, $j$$ < $i$$ && this.list.height($j$$));
			this._optionLis = this.list.find("li:not(." + $self$$.widgetBaseClass + "-group)");
			this.element.attr("disabled") ? this.disable() : this.enable();
			this.index(this._selectedIndex());
			window.setTimeout(function() {
				$self$$._refreshPosition()
			},
			200)
		},
		destroy: function() {
			this.element.removeData(this.widgetName).removeClass(this.widgetBaseClass + "-disabled " + this.namespace + "-state-disabled").removeAttr("aria-disabled").unbind(".selectmenu");
			$$$$(document).unbind(".selectmenu");
			$$$$("label[for=" + this.newelement.attr("id") + "]").attr("for", this.element.attr("id")).unbind(".selectmenu");
			this.newelementWrap.remove();
			this.listWrap.remove();
			this.element.show();
			$$$$.Widget.prototype.destroy.apply(this,
			arguments)
		},
		_typeAhead: function($code$$, $eventType$$) {
			var $self$$ = this,
			$focusFound$$ = !1,
			$C$$ = String.fromCharCode($code$$).toUpperCase();
			c = $C$$.toLowerCase();
			if ("sequential" == $self$$.options.typeAhead) {
				window.clearTimeout("ui.selectmenu-" + $self$$.selectmenuId);
				var $find$$ = "undefined" == typeof $self$$._prevChar ? "": $self$$._prevChar.join(""),
				$focusOptSeq$$ = function $$focusOptSeq$$$($elem$$, $ind$$, $c$$) {
					$focusFound$$ = !0;
					$$$$($elem$$).trigger($eventType$$);
					"undefined" == typeof $self$$._prevChar ? $self$$._prevChar =
					[$c$$] : $self$$._prevChar[$self$$._prevChar.length] = $c$$
				};
				this.list.find("li a").each(function($i$$) {
					if (!$focusFound$$) {
						var $thisText$$ = $$$$(this).attr("typeahead") || $$$$(this).text();
						0 === $thisText$$.indexOf($find$$ + $C$$) ? $focusOptSeq$$(this, $i$$, $C$$) : 0 === $thisText$$.indexOf($find$$ + c) && $focusOptSeq$$(this, $i$$, c)
					}
				});
				window.setTimeout(function() {
					$self$$._prevChar = void 0
				},
				1E3, $self$$)
			} else $self$$._prevChar || ($self$$._prevChar = ["", 0]),
			$focusFound$$ = !1,
			this.list.find("li a").each(function($i$$) {
				if (!$focusFound$$) {
					var $thisText$$ =
					$$$$(this).text();
					if ($thisText$$.indexOf($C$$) === 0 || $thisText$$.indexOf(c) === 0) if ($self$$._prevChar[0] == $C$$) {
						if ($self$$._prevChar[1] < $i$$) {
							$focusFound$$ = true;
							$$$$(this).trigger($eventType$$);
							$self$$._prevChar[1] = $i$$
						}
					} else {
						$focusFound$$ = true;
						$$$$(this).trigger($eventType$$);
						$self$$._prevChar[1] = $i$$
					}
				}
			}),
			this._prevChar[0] = $C$$
		},
		_uiHash: function() {
			var $index$$ = this.index();
			return {
				index: $index$$,
				option: $$$$("option", this.element).get($index$$),
				value: this.element[0].value
			}
		},
		open: function($event$$) {
			var $o$$ =
			this.options;
			"true" != this.newelement.attr("aria-disabled") && (this._closeOthers($event$$), this.newelement.addClass("ui-state-active"), this.listWrap.appendTo($o$$.appendTo), this.list.attr("aria-hidden", !1), "dropdown" == $o$$.style && this.newelement.removeClass("ui-corner-all").addClass("ui-corner-top"), this.listWrap.addClass(this.widgetBaseClass + "-open"), $$$$.browser.msie && 7 == $$$$.browser.version.substr(0, 1) && this._refreshPosition(), $o$$ = this.list.attr("aria-hidden", !1).find("li:not(." + this.widgetBaseClass +
			"-group):eq(" + this._selectedIndex() + "):visible a"), $o$$.length && $o$$[0].focus(), this._refreshPosition(), this._trigger("open", $event$$, this._uiHash()))
		},
		close: function($event$$, $retainFocus$$) {
			this.newelement.is(".ui-state-active") && (this.newelement.removeClass("ui-state-active"), this.listWrap.removeClass(this.widgetBaseClass + "-open"), this.list.attr("aria-hidden", !0), "dropdown" == this.options.style && this.newelement.removeClass("ui-corner-top").addClass("ui-corner-all"), $retainFocus$$ && this.newelement.focus(),
			this._trigger("close", $event$$, this._uiHash()))
		},
		change: function($event$$) {
			this.element.trigger("change");
			this._trigger("change", $event$$, this._uiHash())
		},
		select: function($event$$) {
			if (this._disabled($event$$.currentTarget)) return ! 1;
			this._trigger("select", $event$$, this._uiHash())
		},
		_closeOthers: function($event$$) {
			$$$$("." + this.widgetBaseClass + ".ui-state-active").not(this.newelement).each(function() {
				$$$$(this).data("selectelement").selectmenu("close", $event$$)
			});
			$$$$("." + this.widgetBaseClass + ".ui-state-hover").trigger("mouseout")
		},
		_toggle: function($event$$, $retainFocus$$) {
			this.list.is("." + this.widgetBaseClass + "-open") ? this.close($event$$, $retainFocus$$) : this.open($event$$)
		},
		_formatText: function($text$$) {
			return this.options.format ? this.options.format($text$$) : $text$$
		},
		_selectedIndex: function() {
			return this.element[0].selectedIndex
		},
		_selectedOptionLi: function() {
			return this._optionLis.eq(this._selectedIndex())
		},
		_focusedOptionLi: function() {
			return this.list.find("." + this.widgetBaseClass + "-item-focus")
		},
		_moveSelection: function($amt$$,
		$recIndex$$) {
			if (!this.options.disabled) {
				var $newIndex$$ = parseInt(this._selectedOptionLi().data("index") || 0, 10) + $amt$$;
				0 > $newIndex$$ && ($newIndex$$ = 0);
				$newIndex$$ > this._optionLis.size() - 1 && ($newIndex$$ = this._optionLis.size() - 1);
				if ($newIndex$$ === $recIndex$$) return ! 1;
				if (this._optionLis.eq($newIndex$$).hasClass(this.namespace + "-state-disabled")) 0 < $amt$$ ? ++$amt$$: --$amt$$,
				this._moveSelection($amt$$, $newIndex$$);
				else return this._optionLis.eq($newIndex$$).trigger("mouseup")
			}
		},
		_moveFocus: function($amt$$,
		$recIndex$$) {
			var $newIndex$$ = isNaN($amt$$) ? parseInt(this._optionLis.filter($amt$$).data("index"), 10) : parseInt(this._focusedOptionLi().data("index") || 0, 10) + $amt$$;
			0 > $newIndex$$ && ($newIndex$$ = 0);
			$newIndex$$ > this._optionLis.size() - 1 && ($newIndex$$ = this._optionLis.size() - 1);
			if ($newIndex$$ === $recIndex$$) return ! 1;
			var $activeID$$ = this.widgetBaseClass + "-item-" + Math.round(1E3 * Math.random());
			this._focusedOptionLi().find("a:eq(0)").attr("id", "");
			this._optionLis.eq($newIndex$$).hasClass(this.namespace + "-state-disabled") ?
			(0 < $amt$$ ? ++$amt$$: --$amt$$, this._moveFocus($amt$$, $newIndex$$)) : this._optionLis.eq($newIndex$$).find("a:eq(0)").attr("id", $activeID$$).focus();
			this.list.attr("aria-activedescendant", $activeID$$)
		},
		_scrollPage: function($direction$$) {
			var $numPerPage$$ = Math.floor(this.list.outerHeight() / this.list.find("li:first").outerHeight());
			this._moveFocus("up" == $direction$$ ? -$numPerPage$$: $numPerPage$$)
		},
		_setOption: function($key$$, $value$$) {
			this.options[$key$$] = $value$$;
			"disabled" == $key$$ && (this.close(), this.element.add(this.newelement).add(this.list)[$value$$ ?
			"addClass": "removeClass"](this.widgetBaseClass + "-disabled " + this.namespace + "-state-disabled").attr("aria-disabled", $value$$))
		},
		disable: function($index$$, $type$$) {
			"undefined" == typeof $index$$ ? this._setOption("disabled", !0) : "optgroup" == $type$$ ? this._disableOptgroup($index$$) : this._disableOption($index$$)
		},
		enable: function($index$$, $type$$) {
			"undefined" == typeof $index$$ ? this._setOption("disabled", !1) : "optgroup" == $type$$ ? this._enableOptgroup($index$$) : this._enableOption($index$$)
		},
		_disabled: function($elem$$) {
			return $$$$($elem$$).hasClass(this.namespace +
			"-state-disabled")
		},
		_disableOption: function($index$$) {
			var $optionElem$$ = this._optionLis.eq($index$$);
			$optionElem$$ && ($optionElem$$.addClass(this.namespace + "-state-disabled").find("a").attr("aria-disabled", !0), this.element.find("option").eq($index$$).attr("disabled", "disabled"))
		},
		_enableOption: function($index$$) {
			var $optionElem$$ = this._optionLis.eq($index$$);
			$optionElem$$ && ($optionElem$$.removeClass(this.namespace + "-state-disabled").find("a").attr("aria-disabled", !1), this.element.find("option").eq($index$$).removeAttr("disabled"))
		},
		_disableOptgroup: function($index$$) {
			var $optGroupElem$$ = this.list.find("li." + this.widgetBaseClass + "-group-" + $index$$);
			$optGroupElem$$ && ($optGroupElem$$.addClass(this.namespace + "-state-disabled").attr("aria-disabled", !0), this.element.find("optgroup").eq($index$$).attr("disabled", "disabled"))
		},
		_enableOptgroup: function($index$$) {
			var $optGroupElem$$ = this.list.find("li." + this.widgetBaseClass + "-group-" + $index$$);
			$optGroupElem$$ && ($optGroupElem$$.removeClass(this.namespace + "-state-disabled").attr("aria-disabled",
			!1), this.element.find("optgroup").eq($index$$).removeAttr("disabled"))
		},
		index: function($newValue$$) {
			if (arguments.length) {
				if (this._disabled($$$$(this._optionLis[$newValue$$]))) return ! 1;
				this.element[0].selectedIndex = $newValue$$;
				this._refreshValue()
			} else return this._selectedIndex()
		},
		value: function($newValue$$) {
			if (arguments.length) this.element[0].value = $newValue$$,
			this._refreshValue();
			else return this.element[0].value
		},
		_refreshValue: function() {
			var $activeClass$$ = "popup" == this.options.style ? " ui-state-active":
			"",
			$activeID$$ = this.widgetBaseClass + "-item-" + Math.round(1E3 * Math.random());
			this.list.find("." + this.widgetBaseClass + "-item-selected").removeClass(this.widgetBaseClass + "-item-selected" + $activeClass$$).find("a").attr("aria-selected", "false").attr("id", "");
			this._selectedOptionLi().addClass(this.widgetBaseClass + "-item-selected" + $activeClass$$).find("a").attr("aria-selected", "true").attr("id", $activeID$$);
			var $activeClass$$ = this.newelement.data("optionClasses") ? this.newelement.data("optionClasses") : "",
			$newOptionClasses$$ = this._selectedOptionLi().data("optionClasses") ? this._selectedOptionLi().data("optionClasses") : "";
			this.newelement.removeClass($activeClass$$).data("optionClasses", $newOptionClasses$$).addClass($newOptionClasses$$).find("." + this.widgetBaseClass + "-status").html(this._selectedOptionLi().find("a:eq(0)").html());
			this.list.attr("aria-activedescendant", $activeID$$)
		},
		_refreshPosition: function() {
			var $o$$ = this.options;
			if ("popup" == $o$$.style && !$o$$.positionOptions.offset) var $_offset_selected$$ =
			this._selectedOptionLi(),
			$_offset_selected$$ = "0 -" + ($_offset_selected$$.outerHeight() + $_offset_selected$$.offset().top - this.list.offset().top);
			var $zIndexElement$$ = this.element.zIndex();
			$zIndexElement$$ && this.listWrap.css("zIndex", $zIndexElement$$);
			this.listWrap.position({
				of: $o$$.positionOptions.of || this.newelement,
				my: $o$$.positionOptions.my,
				at: $o$$.positionOptions.at,
				offset: $o$$.positionOptions.offset || $_offset_selected$$,
				collision: $o$$.positionOptions.collision || "flip"
			})
		}
	})
})(jQuery); (function($t$$) {
	$t$$.extend($t$$.fn, {
		validate: function($e$$0$$) {
			if (!this.length) return $e$$0$$ && $e$$0$$.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing."),
			void 0;
			var $i$$ = $t$$.data(this[0], "validator");
			return $i$$ ? $i$$: (this.attr("novalidate", "novalidate"), $i$$ = new $t$$.validator($e$$0$$, this[0]), $t$$.data(this[0], "validator", $i$$), $i$$.settings.onsubmit && (this.validateDelegate(":submit", "click",
			function($e$$) {
				$i$$.settings.submitHandler && ($i$$.submitButton =
				$e$$.target);
				$t$$($e$$.target).hasClass("cancel") && ($i$$.cancelSubmit = !0);
				void 0 !== $t$$($e$$.target).attr("formnovalidate") && ($i$$.cancelSubmit = !0)
			}), this.submit(function($e$$) {
				function $s$$0$$() {
					var $s$$;
					return $i$$.settings.submitHandler ? ($i$$.submitButton && ($s$$ = $t$$("<input type='hidden'/>").attr("name", $i$$.submitButton.name).val($t$$($i$$.submitButton).val()).appendTo($i$$.currentForm)), $i$$.settings.submitHandler.call($i$$, $i$$.currentForm, $e$$), $i$$.submitButton && $s$$.remove(), !1) : !0
				}
				return $i$$.settings.debug &&
				$e$$.preventDefault(),
				$i$$.cancelSubmit ? ($i$$.cancelSubmit = !1, $s$$0$$()) : $i$$.form() ? $i$$.pendingRequest ? ($i$$.formSubmitted = !0, !1) : $s$$0$$() : ($i$$.focusInvalid(), !1)
			})), $i$$)
		},
		valid: function() {
			if ($t$$(this[0]).is("form")) return this.validate().form();
			var $e$$ = !0,
			$i$$ = $t$$(this[0].form).validate();
			return this.each(function() {
				$e$$ = $e$$ && $i$$.element(this)
			}),
			$e$$
		},
		removeAttrs: function($e$$0$$) {
			var $i$$ = {},
			$s$$ = this;
			return $t$$.each($e$$0$$.split(/\s/),
			function($t$$, $e$$) {
				$i$$[$e$$] = $s$$.attr($e$$);
				$s$$.removeAttr($e$$)
			}),
			$i$$
		},
		rules: function($e$$0$$, $i$$) {
			var $o$$9_s$$ = this[0];
			if ($e$$0$$) {
				var $l$$ = $t$$.data($o$$9_s$$.form, "validator").settings,
				$n$$ = $l$$.rules,
				$a$$ = $t$$.validator.staticRules($o$$9_s$$);
				switch ($e$$0$$) {
				case "add":
					$t$$.extend($a$$, $t$$.validator.normalizeRule($i$$));
					delete $a$$.messages;
					$n$$[$o$$9_s$$.name] = $a$$;
					$i$$.messages && ($l$$.messages[$o$$9_s$$.name] = $t$$.extend($l$$.messages[$o$$9_s$$.name], $i$$.messages));
					break;
				case "remove":
					if (!$i$$) return delete $n$$[$o$$9_s$$.name],
					$a$$;
					var $u$$ = {};
					return $t$$.each($i$$.split(/\s/),
					function($t$$, $e$$) {
						$u$$[$e$$] = $a$$[$e$$];
						delete $a$$[$e$$]
					}),
					$u$$
				}
			}
			$o$$9_s$$ = $t$$.validator.normalizeRules($t$$.extend({},
			$t$$.validator.classRules($o$$9_s$$), $t$$.validator.attributeRules($o$$9_s$$), $t$$.validator.dataRules($o$$9_s$$), $t$$.validator.staticRules($o$$9_s$$)), $o$$9_s$$);
			$o$$9_s$$.required && ($l$$ = $o$$9_s$$.required, delete $o$$9_s$$.required, $o$$9_s$$ = $t$$.extend({
				required: $l$$
			},
			$o$$9_s$$));
			return $o$$9_s$$
		}
	});
	$t$$.extend($t$$.expr[":"],
	{
		blank: function($e$$) {
			return ! $t$$.trim("" + $t$$($e$$).val())
		},
		filled: function($e$$) {
			return !! $t$$.trim("" + $t$$($e$$).val())
		},
		unchecked: function($e$$) {
			return ! $t$$($e$$).prop("checked")
		}
	});
	$t$$.validator = function $$t$$$validator$($e$$, $i$$) {
		this.settings = $t$$.extend(!0, {},
		$t$$.validator.defaults, $e$$);
		this.currentForm = $i$$;
		this.init()
	};
	$t$$.validator.format = function $$t$$$validator$format$($e$$, $i$$0$$) {
		return 1 === arguments.length ?
		function() {
			var $i$$ = $t$$.makeArray(arguments);
			return $i$$.unshift($e$$),
			$t$$.validator.format.apply(this, $i$$)
		}: (2 < arguments.length && $i$$0$$.constructor !== Array && ($i$$0$$ = $t$$.makeArray(arguments).slice(1)), $i$$0$$.constructor !== Array && ($i$$0$$ = [$i$$0$$]), $t$$.each($i$$0$$,
		function($t$$, $i$$) {
			$e$$ = $e$$.replace(RegExp("\\{" + $t$$ + "\\}", "g"),
			function() {
				return $i$$
			})
		}), $e$$)
	};
	$t$$.extend($t$$.validator, {
		defaults: {
			messages: {},
			groups: {},
			rules: {},
			errorClass: "error",
			validClass: "valid",
			errorElement: "label",
			focusInvalid: !0,
			errorContainer: $t$$([]),
			errorLabelContainer: $t$$([]),
			onsubmit: !0,
			ignore: ":hidden",
			ignoreTitle: !1,
			onfocusin: function($t$$) {
				this.lastActive = $t$$;
				this.settings.focusCleanup && !this.blockFocusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, $t$$, this.settings.errorClass, this.settings.validClass), this.addWrapper(this.errorsFor($t$$)).hide())
			},
			onfocusout: function($t$$) {
				this.checkable($t$$) || !($t$$.name in this.submitted) && this.optional($t$$) || this.element($t$$)
			},
			onkeyup: function($t$$, $e$$) { (9 !== $e$$.which || "" !== this.elementValue($t$$)) && ($t$$.name in
				this.submitted || $t$$ === this.lastElement) && this.element($t$$)
			},
			onclick: function($t$$) {
				$t$$.name in this.submitted ? this.element($t$$) : $t$$.parentNode.name in this.submitted && this.element($t$$.parentNode)
			},
			highlight: function($e$$, $i$$, $s$$) {
				"radio" === $e$$.type ? this.findByName($e$$.name).addClass($i$$).removeClass($s$$) : $t$$($e$$).addClass($i$$).removeClass($s$$)
			},
			unhighlight: function($e$$, $i$$, $s$$) {
				"radio" === $e$$.type ? this.findByName($e$$.name).removeClass($i$$).addClass($s$$) : $t$$($e$$).removeClass($i$$).addClass($s$$)
			}
		},
		setDefaults: function($e$$) {
			$t$$.extend($t$$.validator.defaults, $e$$)
		},
		messages: {
			required: "This field is required.",
			remote: "Please fix this field.",
			email: "Please enter a valid email address.",
			url: "Please enter a valid URL.",
			date: "Please enter a valid date.",
			dateISO: "Please enter a valid date (ISO).",
			number: "Please enter a valid number.",
			digits: "Please enter only digits.",
			creditcard: "Please enter a valid credit card number.",
			equalTo: "Please enter the same value again.",
			maxlength: $t$$.validator.format("Please enter no more than {0} characters."),
			minlength: $t$$.validator.format("Please enter at least {0} characters."),
			rangelength: $t$$.validator.format("Please enter a value between {0} and {1} characters long."),
			range: $t$$.validator.format("Please enter a value between {0} and {1}."),
			max: $t$$.validator.format("Please enter a value less than or equal to {0}."),
			min: $t$$.validator.format("Please enter a value greater than or equal to {0}.")
		},
		autoCreateRanges: !1,
		prototype: {
			init: function() {
				function $e$$0$$($e$$) {
					var $i$$ = $t$$.data(this[0].form,
					"validator"),
					$s$$ = "on" + $e$$.type.replace(/^validate/, "");
					$i$$.settings[$s$$] && $i$$.settings[$s$$].call($i$$, this[0], $e$$)
				}
				this.labelContainer = $t$$(this.settings.errorLabelContainer);
				this.errorContext = this.labelContainer.length && this.labelContainer || $t$$(this.currentForm);
				this.containers = $t$$(this.settings.errorContainer).add(this.settings.errorLabelContainer);
				this.submitted = {};
				this.valueCache = {};
				this.pendingRequest = 0;
				this.pending = {};
				this.invalid = {};
				this.reset();
				var $i$$0$$ = this.groups = {};
				$t$$.each(this.settings.groups,
				function($e$$, $s$$0$$) {
					"string" == typeof $s$$0$$ && ($s$$0$$ = $s$$0$$.split(/\s/));
					$t$$.each($s$$0$$,
					function($t$$, $s$$) {
						$i$$0$$[$s$$] = $e$$
					})
				});
				var $s$$1$$ = this.settings.rules;
				$t$$.each($s$$1$$,
				function($e$$, $i$$) {
					$s$$1$$[$e$$] = $t$$.validator.normalizeRule($i$$)
				});
				$t$$(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] ",
				"focusin focusout keyup", $e$$0$$).validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", $e$$0$$);
				this.settings.invalidHandler && $t$$(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler)
			},
			form: function() {
				return this.checkForm(),
				$t$$.extend(this.submitted, this.errorMap),
				this.invalid = $t$$.extend({},
				this.errorMap),
				this.valid() || $t$$(this.currentForm).triggerHandler("invalid-form", [this]),
				this.showErrors(),
				this.valid()
			},
			checkForm: function() {
				this.prepareForm();
				for (var $t$$ = 0, $e$$ = this.currentElements = this.elements(); $e$$[$t$$]; $t$$++) this.check($e$$[$t$$]);
				return this.valid()
			},
			element: function($e$$) {
				this.lastElement = $e$$ = this.validationTargetFor(this.clean($e$$));
				this.prepareElement($e$$);
				this.currentElements = $t$$($e$$);
				var $i$$ = !1 !== this.check($e$$);
				return $i$$ ? delete this.invalid[$e$$.name] : this.invalid[$e$$.name] = !0,
				this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)),
				this.showErrors(),
				$i$$
			},
			showErrors: function($e$$) {
				if ($e$$) {
					$t$$.extend(this.errorMap,
					$e$$);
					this.errorList = [];
					for (var $i$$ in $e$$) this.errorList.push({
						message: $e$$[$i$$],
						element: this.findByName($i$$)[0]
					});
					this.successList = $t$$.grep(this.successList,
					function($t$$) {
						return ! ($t$$.name in $e$$)
					})
				}
				this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors()
			},
			resetForm: function() {
				$t$$.fn.resetForm && $t$$(this.currentForm).resetForm();
				this.submitted = {};
				this.lastElement = null;
				this.prepareForm();
				this.hideErrors();
				this.elements().removeClass(this.settings.errorClass).removeData("previousValue")
			},
			numberOfInvalids: function() {
				return this.objectLength(this.invalid)
			},
			objectLength: function($t$$) {
				var $e$$ = 0,
				$i$$;
				for ($i$$ in $t$$) $e$$++;
				return $e$$
			},
			hideErrors: function() {
				this.addWrapper(this.toHide).hide()
			},
			valid: function() {
				return 0 === this.size()
			},
			size: function() {
				return this.errorList.length
			},
			focusInvalid: function() {
				if (this.settings.focusInvalid) try {
					$t$$(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin")
				} catch($e$$) {}
			},
			findLastActive: function() {
				var $e$$ =
				this.lastActive;
				return $e$$ && 1 === $t$$.grep(this.errorList,
				function($t$$) {
					return $t$$.element.name === $e$$.name
				}).length && $e$$
			},
			elements: function() {
				var $e$$ = this,
				$i$$ = {};
				return $t$$(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function() {
					return ! this.name && $e$$.settings.debug && window.console && console.error("%o has no name assigned", this),
					this.name in $i$$ || !$e$$.objectLength($t$$(this).rules()) ? !1: ($i$$[this.name] = !0, !0)
				})
			},
			clean: function($e$$) {
				return $t$$($e$$)[0]
			},
			errors: function() {
				var $e$$ = this.settings.errorClass.replace(" ", ".");
				return $t$$(this.settings.errorElement + "." + $e$$, this.errorContext)
			},
			reset: function() {
				this.successList = [];
				this.errorList = [];
				this.errorMap = {};
				this.toShow = $t$$([]);
				this.toHide = $t$$([]);
				this.currentElements = $t$$([])
			},
			prepareForm: function() {
				this.reset();
				this.toHide = this.errors().add(this.containers)
			},
			prepareElement: function($t$$) {
				this.reset();
				this.toHide = this.errorsFor($t$$)
			},
			elementValue: function($e$$) {
				var $i$$ =
				$t$$($e$$).attr("type"),
				$s$$ = $t$$($e$$).val();
				return "radio" === $i$$ || "checkbox" === $i$$ ? $t$$("input[name='" + $t$$($e$$).attr("name") + "']:checked").val() : "string" == typeof $s$$ ? $s$$.replace(/\r/g, "") : $s$$
			},
			check: function($e$$) {
				var $e$$ = this.validationTargetFor(this.clean($e$$)),
				$i$$,
				$s$$ = $t$$($e$$).rules(),
				$r$$ = !1,
				$n$$ = this.elementValue($e$$),
				$a$$;
				for ($a$$ in $s$$) {
					var $u$$ = {
						method: $a$$,
						parameters: $s$$[$a$$]
					};
					try {
						if ($i$$ = $t$$.validator.methods[$a$$].call(this, $n$$, $e$$, $u$$.parameters), "dependency-mismatch" ===
						$i$$) $r$$ = !0;
						else {
							if ($r$$ = !1, "pending" === $i$$) return this.toHide = this.toHide.not(this.errorsFor($e$$)),
							void 0;
							if (!$i$$) return this.formatAndAdd($e$$, $u$$),
							!1
						}
					} catch($o$$) {
						throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + $e$$.id + ", check the '" + $u$$.method + "' method.", $o$$),
						$o$$;
					}
				}
				return $r$$ ? void 0: (this.objectLength($s$$) && this.successList.push($e$$), !0)
			},
			customDataMessage: function($e$$, $i$$) {
				return $t$$($e$$).data("msg-" + $i$$.toLowerCase()) || $e$$.attributes &&
				$t$$($e$$).attr("data-msg-" + $i$$.toLowerCase())
			},
			customMessage: function($t$$, $e$$) {
				var $i$$ = this.settings.messages[$t$$];
				return $i$$ && ($i$$.constructor === String ? $i$$: $i$$[$e$$])
			},
			findDefined: function() {
				for (var $t$$ = 0; arguments.length > $t$$; $t$$++) if (void 0 !== arguments[$t$$]) return arguments[$t$$]
			},
			defaultMessage: function($e$$, $i$$) {
				return this.findDefined(this.customMessage($e$$.name, $i$$), this.customDataMessage($e$$, $i$$), !this.settings.ignoreTitle && $e$$.title || void 0, $t$$.validator.messages[$i$$],
				"<strong>Warning: No message defined for " + $e$$.name + "</strong>")
			},
			formatAndAdd: function($e$$, $i$$) {
				var $s$$ = this.defaultMessage($e$$, $i$$.method),
				$r$$ = /\$?\{(\d+)\}/g;
				"function" == typeof $s$$ ? $s$$ = $s$$.call(this, $i$$.parameters, $e$$) : $r$$.test($s$$) && ($s$$ = $t$$.validator.format($s$$.replace($r$$, "{$1}"), $i$$.parameters));
				this.errorList.push({
					message: $s$$,
					element: $e$$
				});
				this.errorMap[$e$$.name] = $s$$;
				this.submitted[$e$$.name] = $s$$
			},
			addWrapper: function($t$$) {
				return this.settings.wrapper && ($t$$ = $t$$.add($t$$.parent(this.settings.wrapper))),
				$t$$
			},
			defaultShowErrors: function() {
				var $t$$,
				$e$$60_i$$;
				for ($t$$ = 0; this.errorList[$t$$]; $t$$++) $e$$60_i$$ = this.errorList[$t$$],
				this.settings.highlight && this.settings.highlight.call(this, $e$$60_i$$.element, this.settings.errorClass, this.settings.validClass),
				this.showLabel($e$$60_i$$.element, $e$$60_i$$.message);
				if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success) for ($t$$ = 0; this.successList[$t$$]; $t$$++) this.showLabel(this.successList[$t$$]);
				if (this.settings.unhighlight) {
					$t$$ =
					0;
					for ($e$$60_i$$ = this.validElements(); $e$$60_i$$[$t$$]; $t$$++) this.settings.unhighlight.call(this, $e$$60_i$$[$t$$], this.settings.errorClass, this.settings.validClass)
				}
				this.toHide = this.toHide.not(this.toShow);
				this.hideErrors();
				this.addWrapper(this.toShow).show()
			},
			validElements: function() {
				return this.currentElements.not(this.invalidElements())
			},
			invalidElements: function() {
				return $t$$(this.errorList).map(function() {
					return this.element
				})
			},
			showLabel: function($e$$, $i$$) {
				var $s$$ = this.errorsFor($e$$);
				$s$$.length ?
				($s$$.removeClass(this.settings.validClass).addClass(this.settings.errorClass), $s$$.html($i$$)) : ($s$$ = $t$$("<" + this.settings.errorElement + ">").attr("for", this.idOrName($e$$)).addClass(this.settings.errorClass).html($i$$ || ""), this.settings.wrapper && ($s$$ = $s$$.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), this.labelContainer.append($s$$).length || (this.settings.errorPlacement ? this.settings.errorPlacement($s$$, $t$$($e$$)) : $s$$.insertAfter($e$$))); ! $i$$ && this.settings.success && ($s$$.text(""),
				"string" == typeof this.settings.success ? $s$$.addClass(this.settings.success) : this.settings.success($s$$, $e$$));
				this.toShow = this.toShow.add($s$$)
			},
			errorsFor: function($e$$) {
				var $i$$ = this.idOrName($e$$);
				return this.errors().filter(function() {
					return $t$$(this).attr("for") === $i$$
				})
			},
			idOrName: function($t$$) {
				return this.groups[$t$$.name] || (this.checkable($t$$) ? $t$$.name: $t$$.id || $t$$.name)
			},
			validationTargetFor: function($t$$) {
				return this.checkable($t$$) && ($t$$ = this.findByName($t$$.name).not(this.settings.ignore)[0]),
				$t$$
			},
			checkable: function($t$$) {
				return /radio|checkbox/i.test($t$$.type)
			},
			findByName: function($e$$) {
				return $t$$(this.currentForm).find("[name='" + $e$$ + "']")
			},
			getLength: function($e$$, $i$$) {
				switch ($i$$.nodeName.toLowerCase()) {
				case "select":
					return $t$$("option:selected", $i$$).length;
				case "input":
					if (this.checkable($i$$)) return this.findByName($i$$.name).filter(":checked").length
				}
				return $e$$.length
			},
			depend: function($t$$, $e$$) {
				return this.dependTypes[typeof $t$$] ? this.dependTypes[typeof $t$$]($t$$, $e$$) : !0
			},
			dependTypes: {
				"boolean": function($t$$) {
					return $t$$
				},
				string: function($e$$, $i$$) {
					return !! $t$$($e$$, $i$$.form).length
				},
				"function": function($t$$, $e$$) {
					return $t$$($e$$)
				}
			},
			optional: function($e$$) {
				var $i$$ = this.elementValue($e$$);
				return ! $t$$.validator.methods.required.call(this, $i$$, $e$$) && "dependency-mismatch"
			},
			startRequest: function($t$$) {
				this.pending[$t$$.name] || (this.pendingRequest++, this.pending[$t$$.name] = !0)
			},
			stopRequest: function($e$$, $i$$) {
				this.pendingRequest--;
				0 > this.pendingRequest && (this.pendingRequest =
				0);
				delete this.pending[$e$$.name];
				$i$$ && 0 === this.pendingRequest && this.formSubmitted && this.form() ? ($t$$(this.currentForm).submit(), this.formSubmitted = !1) : !$i$$ && 0 === this.pendingRequest && this.formSubmitted && ($t$$(this.currentForm).triggerHandler("invalid-form", [this]), this.formSubmitted = !1)
			},
			previousValue: function($e$$) {
				return $t$$.data($e$$, "previousValue") || $t$$.data($e$$, "previousValue", {
					old: null,
					valid: !0,
					message: this.defaultMessage($e$$, "remote")
				})
			}
		},
		classRuleSettings: {
			required: {
				required: !0
			},
			email: {
				email: !0
			},
			url: {
				url: !0
			},
			date: {
				date: !0
			},
			dateISO: {
				dateISO: !0
			},
			number: {
				number: !0
			},
			digits: {
				digits: !0
			},
			creditcard: {
				creditcard: !0
			}
		},
		addClassRules: function($e$$, $i$$) {
			$e$$.constructor === String ? this.classRuleSettings[$e$$] = $i$$: $t$$.extend(this.classRuleSettings, $e$$)
		},
		classRules: function($e$$72_s$$) {
			var $i$$ = {},
			$e$$72_s$$ = $t$$($e$$72_s$$).attr("class");
			return $e$$72_s$$ && $t$$.each($e$$72_s$$.split(" "),
			function() {
				this in $t$$.validator.classRuleSettings && $t$$.extend($i$$, $t$$.validator.classRuleSettings[this])
			}),
			$i$$
		},
		attributeRules: function($e$$73_s$$) {
			var $i$$ = {},
			$e$$73_s$$ = $t$$($e$$73_s$$),
			$r$$ = $e$$73_s$$[0].getAttribute("type"),
			$n$$;
			for ($n$$ in $t$$.validator.methods) {
				var $a$$;
				"required" === $n$$ ? ($a$$ = $e$$73_s$$.get(0).getAttribute($n$$), "" === $a$$ && ($a$$ = !0), $a$$ = !!$a$$) : $a$$ = $e$$73_s$$.attr($n$$);
				/min|max/.test($n$$) && (null === $r$$ || /number|range|text/.test($r$$)) && ($a$$ = Number($a$$));
				$a$$ ? $i$$[$n$$] = $a$$: $r$$ === $n$$ && "range" !== $r$$ && ($i$$[$n$$] = !0)
			}
			return $i$$.maxlength && /-1|2147483647|524288/.test($i$$.maxlength) &&
			delete $i$$.maxlength,
			$i$$
		},
		dataRules: function($e$$74_s$$) {
			var $i$$,
			$r$$ = {},
			$n$$ = $t$$($e$$74_s$$);
			for ($i$$ in $t$$.validator.methods) $e$$74_s$$ = $n$$.data("rule-" + $i$$.toLowerCase()),
			void 0 !== $e$$74_s$$ && ($r$$[$i$$] = $e$$74_s$$);
			return $r$$
		},
		staticRules: function($e$$) {
			var $i$$ = {},
			$s$$ = $t$$.data($e$$.form, "validator");
			return $s$$.settings.rules && ($i$$ = $t$$.validator.normalizeRule($s$$.settings.rules[$e$$.name]) || {}),
			$i$$
		},
		normalizeRules: function($e$$, $i$$0$$) {
			return $t$$.each($e$$,
			function($s$$, $r$$) {
				if (!1 ===
				$r$$) return delete $e$$[$s$$],
				void 0;
				if ($r$$.param || $r$$.depends) {
					var $n$$ = !0;
					switch (typeof $r$$.depends) {
					case "string":
						$n$$ = !!$t$$($r$$.depends, $i$$0$$.form).length;
						break;
					case "function":
						$n$$ = $r$$.depends.call($i$$0$$, $i$$0$$)
					}
					$n$$ ? $e$$[$s$$] = void 0 !== $r$$.param ? $r$$.param: !0: delete $e$$[$s$$]
				}
			}),
			$t$$.each($e$$,
			function($s$$, $r$$) {
				$e$$[$s$$] = $t$$.isFunction($r$$) ? $r$$($i$$0$$) : $r$$
			}),
			$t$$.each(["minlength", "maxlength"],
			function() {
				$e$$[this] && ($e$$[this] = Number($e$$[this]))
			}),
			$t$$.each(["rangelength",
			"range"],
			function() {
				var $i$$;
				$e$$[this] && ($t$$.isArray($e$$[this]) ? $e$$[this] = [Number($e$$[this][0]), Number($e$$[this][1])] : "string" == typeof $e$$[this] && ($i$$ = $e$$[this].split(/[\s,]+/), $e$$[this] = [Number($i$$[0]), Number($i$$[1])]))
			}),
			$t$$.validator.autoCreateRanges && ($e$$.min && $e$$.max && ($e$$.range = [$e$$.min, $e$$.max], delete $e$$.min, delete $e$$.max), $e$$.minlength && $e$$.maxlength && ($e$$.rangelength = [$e$$.minlength, $e$$.maxlength], delete $e$$.minlength, delete $e$$.maxlength)),
			$e$$
		},
		normalizeRule: function($e$$) {
			if ("string" ==
			typeof $e$$) {
				var $i$$ = {};
				$t$$.each($e$$.split(/\s/),
				function() {
					$i$$[this] = !0
				});
				$e$$ = $i$$
			}
			return $e$$
		},
		addMethod: function($e$$, $i$$, $s$$) {
			$t$$.validator.methods[$e$$] = $i$$;
			$t$$.validator.messages[$e$$] = void 0 !== $s$$ ? $s$$: $t$$.validator.messages[$e$$];
			3 > $i$$.length && $t$$.validator.addClassRules($e$$, $t$$.validator.normalizeRule($e$$))
		},
		methods: {
			required: function($e$$79_r$$, $i$$, $s$$) {
				return ! this.depend($s$$, $i$$) ? "dependency-mismatch": "select" === $i$$.nodeName.toLowerCase() ? ($e$$79_r$$ = $t$$($i$$).val()) &&
				0 < $e$$79_r$$.length: this.checkable($i$$) ? 0 < this.getLength($e$$79_r$$, $i$$) : 0 < $t$$.trim($e$$79_r$$).length
			},
			email: function($t$$, $e$$) {
				return this.optional($e$$) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test($t$$)
			},
			url: function($t$$, $e$$) {
				return this.optional($e$$) || /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test($t$$)
			},
			date: function($t$$, $e$$) {
				return this.optional($e$$) || !/Invalid|NaN/.test("" + new Date($t$$))
			},
			dateISO: function($t$$, $e$$) {
				return this.optional($e$$) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test($t$$)
			},
			number: function($t$$, $e$$) {
				return this.optional($e$$) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test($t$$)
			},
			digits: function($t$$, $e$$) {
				return this.optional($e$$) || /^\d+$/.test($t$$)
			},
			creditcard: function($t$$, $e$$) {
				if (this.optional($e$$)) return "dependency-mismatch";
				if (/[^0-9 \-]+/.test($t$$)) return ! 1;
				for (var $i$$ = 0, $a$$28_s$$ = 0, $r$$ = !1, $t$$ = $t$$.replace(/\D/g, ""), $n$$ = $t$$.length - 1; 0 <= $n$$; $n$$--) $a$$28_s$$ = $t$$.charAt($n$$),
				$a$$28_s$$ = parseInt($a$$28_s$$, 10),
				$r$$ && 9 < ($a$$28_s$$ *= 2) && ($a$$28_s$$ -= 9),
				$i$$ += $a$$28_s$$,
				$r$$ = !$r$$;
				return 0 === $i$$ % 10
			},
			minlength: function($e$$87_r$$, $i$$, $s$$) {
				$e$$87_r$$ = $t$$.isArray($e$$87_r$$) ? $e$$87_r$$.length: this.getLength($t$$.trim($e$$87_r$$), $i$$);
				return this.optional($i$$) || $e$$87_r$$ >= $s$$
			},
			maxlength: function($e$$88_r$$, $i$$, $s$$) {
				$e$$88_r$$ = $t$$.isArray($e$$88_r$$) ?
				$e$$88_r$$.length: this.getLength($t$$.trim($e$$88_r$$), $i$$);
				return this.optional($i$$) || $s$$ >= $e$$88_r$$
			},
			rangelength: function($e$$89_r$$, $i$$, $s$$) {
				$e$$89_r$$ = $t$$.isArray($e$$89_r$$) ? $e$$89_r$$.length: this.getLength($t$$.trim($e$$89_r$$), $i$$);
				return this.optional($i$$) || $e$$89_r$$ >= $s$$[0] && $s$$[1] >= $e$$89_r$$
			},
			min: function($t$$, $e$$, $i$$) {
				return this.optional($e$$) || $t$$ >= $i$$
			},
			max: function($t$$, $e$$, $i$$) {
				return this.optional($e$$) || $i$$ >= $t$$
			},
			range: function($t$$, $e$$, $i$$) {
				return this.optional($e$$) ||
				$t$$ >= $i$$[0] && $i$$[1] >= $t$$
			},
			equalTo: function($e$$, $i$$, $r$$12_s$$) {
				$r$$12_s$$ = $t$$($r$$12_s$$);
				return this.settings.onfocusout && $r$$12_s$$.unbind(".validate-equalTo").bind("blur.validate-equalTo",
				function() {
					$t$$($i$$).valid()
				}),
				$e$$ === $r$$12_s$$.val()
			},
			remote: function($e$$, $i$$, $s$$) {
				if (this.optional($i$$)) return "dependency-mismatch";
				var $r$$ = this.previousValue($i$$);
				if (this.settings.messages[$i$$.name] || (this.settings.messages[$i$$.name] = {}), $r$$.originalMessage = this.settings.messages[$i$$.name].remote,
				this.settings.messages[$i$$.name].remote = $r$$.message, $s$$ = "string" == typeof $s$$ && {
					url: $s$$
				} || $s$$, $r$$.old === $e$$) return $r$$.valid;
				$r$$.old = $e$$;
				var $n$$ = this;
				this.startRequest($i$$);
				var $a$$0$$ = {};
				return $a$$0$$[$i$$.name] = $e$$,
				$t$$.ajax($t$$.extend(!0, {
					url: $s$$,
					mode: "abort",
					port: "validate" + $i$$.name,
					dataType: "json",
					data: $a$$0$$,
					success: function($l$$3_s$$) {
						$n$$.settings.messages[$i$$.name].remote = $r$$.originalMessage;
						var $a$$ = $l$$3_s$$ === true || "true" === $l$$3_s$$;
						if ($a$$) {
							var $o$$11_u$$ = $n$$.formSubmitted;
							$n$$.prepareElement($i$$);
							$n$$.formSubmitted = $o$$11_u$$;
							$n$$.successList.push($i$$);
							delete $n$$.invalid[$i$$.name];
							$n$$.showErrors()
						} else {
							$o$$11_u$$ = {};
							$l$$3_s$$ = $l$$3_s$$ || $n$$.defaultMessage($i$$, "remote");
							$o$$11_u$$[$i$$.name] = $r$$.message = $t$$.isFunction($l$$3_s$$) ? $l$$3_s$$($e$$) : $l$$3_s$$;
							$n$$.invalid[$i$$.name] = true;
							$n$$.showErrors($o$$11_u$$)
						}
						$r$$.valid = $a$$;
						$n$$.stopRequest($i$$, $a$$)
					}
				},
				$s$$)),
				"pending"
			}
		}
	});
	$t$$.format = $t$$.validator.format
})(jQuery);
 (function($t$$0$$) {
	var $e$$ = {};
	if ($t$$0$$.ajaxPrefilter) $t$$0$$.ajaxPrefilter(function($t$$, $i$$128_r$$, $s$$) {
		$i$$128_r$$ = $t$$.port;
		"abort" === $t$$.mode && ($e$$[$i$$128_r$$] && $e$$[$i$$128_r$$].abort(), $e$$[$i$$128_r$$] = $s$$)
	});
	else {
		var $i$$ = $t$$0$$.ajax;
		$t$$0$$.ajax = function $$t$$0$$$ajax$($s$$) {
			var $n$$ = ("port" in $s$$ ? $s$$: $t$$0$$.ajaxSettings).port;
			return "abort" === ("mode" in $s$$ ? $s$$: $t$$0$$.ajaxSettings).mode ? ($e$$[$n$$] && $e$$[$n$$].abort(), $e$$[$n$$] = $i$$.apply(this, arguments), $e$$[$n$$]) : $i$$.apply(this,
			arguments)
		}
	}
})(jQuery); (function($t$$) {
	$t$$.extend($t$$.fn, {
		validateDelegate: function($e$$, $i$$0$$, $s$$) {
			return this.bind($i$$0$$,
			function($i$$) {
				var $r$$ = $t$$($i$$.target);
				return $r$$.is($e$$) ? $s$$.apply($r$$, arguments) : void 0
			})
		}
	})
})(jQuery);
var JSON;
JSON || (JSON = {});
 (function() {
	function $f$$($n$$) {
		return 10 > $n$$ ? "0" + $n$$: $n$$
	}
	function $quote$$($string$$) {
		$escapable$$.lastIndex = 0;
		return $escapable$$.test($string$$) ? '"' + $string$$.replace($escapable$$,
		function($a$$) {
			var $c$$ = $meta$$[$a$$];
			return "string" === typeof $c$$ ? $c$$: "\\u" + ("0000" + $a$$.charCodeAt(0).toString(16)).slice( - 4)
		}) + '"': '"' + $string$$ + '"'
	}
	function $str$$($key$$, $holder$$) {
		var $i$$,
		$k$$,
		$v$$,
		$length$$,
		$mind$$ = $gap$$,
		$partial$$,
		$value$$ = $holder$$[$key$$];
		$value$$ && ("object" === typeof $value$$ && "function" ===
		typeof $value$$.toJSON) && ($value$$ = $value$$.toJSON($key$$));
		"function" === typeof $rep$$ && ($value$$ = $rep$$.call($holder$$, $key$$, $value$$));
		switch (typeof $value$$) {
		case "string":
			return $quote$$($value$$);
		case "number":
			return isFinite($value$$) ? String($value$$) : "null";
		case "boolean":
		case "null":
			return String($value$$);
		case "object":
			if (!$value$$) return "null";
			$gap$$ += $indent$$;
			$partial$$ = [];
			if ("[object Array]" === Object.prototype.toString.apply($value$$)) {
				$length$$ = $value$$.length;
				for ($i$$ = 0; $i$$ < $length$$; $i$$ +=
				1) $partial$$[$i$$] = $str$$($i$$, $value$$) || "null";
				$v$$ = 0 === $partial$$.length ? "[]": $gap$$ ? "[\n" + $gap$$ + $partial$$.join(",\n" + $gap$$) + "\n" + $mind$$ + "]": "[" + $partial$$.join(",") + "]";
				$gap$$ = $mind$$;
				return $v$$
			}
			if ($rep$$ && "object" === typeof $rep$$) {
				$length$$ = $rep$$.length;
				for ($i$$ = 0; $i$$ < $length$$; $i$$ += 1)"string" === typeof $rep$$[$i$$] && ($k$$ = $rep$$[$i$$], ($v$$ = $str$$($k$$, $value$$)) && $partial$$.push($quote$$($k$$) + ($gap$$ ? ": ": ":") + $v$$))
			} else for ($k$$ in $value$$) Object.prototype.hasOwnProperty.call($value$$,
			$k$$) && ($v$$ = $str$$($k$$, $value$$)) && $partial$$.push($quote$$($k$$) + ($gap$$ ? ": ": ":") + $v$$);
			$v$$ = 0 === $partial$$.length ? "{}": $gap$$ ? "{\n" + $gap$$ + $partial$$.join(",\n" + $gap$$) + "\n" + $mind$$ + "}": "{" + $partial$$.join(",") + "}";
			$gap$$ = $mind$$;
			return $v$$
		}
	}
	"function" !== typeof Date.prototype.toJSON && (Date.prototype.toJSON = function $Date$$toJSON$() {
		return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + $f$$(this.getUTCMonth() + 1) + "-" + $f$$(this.getUTCDate()) + "T" + $f$$(this.getUTCHours()) + ":" + $f$$(this.getUTCMinutes()) +
		":" + $f$$(this.getUTCSeconds()) + "Z": null
	},
	String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function $Boolean$$toJSON$() {
		return this.valueOf()
	});
	var $cx$$ = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	$escapable$$ = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	$gap$$,
	$indent$$,
	$meta$$ = {
		"\b": "\\b",
		"\t": "\\t",
		"\n": "\\n",
		"\f": "\\f",
		"\r": "\\r",
		'"': '\\"',
		"\\": "\\\\"
	},
	$rep$$;
	"function" !== typeof JSON.stringify && (JSON.stringify = function $JSON$stringify$($value$$, $replacer$$, $space$$) {
		var $i$$;
		$indent$$ = $gap$$ = "";
		if (typeof $space$$ === "number") for ($i$$ = 0; $i$$ < $space$$; $i$$ = $i$$ + 1) $indent$$ = $indent$$ + " ";
		else typeof $space$$ === "string" && ($indent$$ = $space$$);
		if (($rep$$ = $replacer$$) && typeof $replacer$$ !== "function" && (typeof $replacer$$ !== "object" || typeof $replacer$$.length !== "number")) throw Error("JSON.stringify");
		return $str$$("", {
			"": $value$$
		})
	});
	"function" !== typeof JSON.parse && (JSON.parse = function $JSON$parse$($text$$, $reviver$$) {
		function $walk$$($holder$$, $key$$) {
			var $k$$,
			$v$$,
			$value$$ = $holder$$[$key$$];
			if ($value$$ && typeof $value$$ === "object") for ($k$$ in $value$$) if (Object.prototype.hasOwnProperty.call($value$$, $k$$)) {
				$v$$ = $walk$$($value$$, $k$$);
				$v$$ !== void 0 ? $value$$[$k$$] = $v$$: delete $value$$[$k$$]
			}
			return $reviver$$.call($holder$$, $key$$, $value$$)
		}
		var $j$$,
		$text$$ = String($text$$);
		$cx$$.lastIndex = 0;
		$cx$$.test($text$$) && ($text$$ = $text$$.replace($cx$$,
		function($a$$) {
			return "\\u" + ("0000" + $a$$.charCodeAt(0).toString(16)).slice( - 4)
		}));
		if (/^[\],:{}\s]*$/.test($text$$.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
			$j$$ = eval("(" + $text$$ + ")");
			return typeof $reviver$$ === "function" ? $walk$$({
				"": $j$$
			},
			"") : $j$$
		}
		throw new SyntaxError("JSON.parse");
	})
})(); (function() {
	function $eq$$($a$$, $b$$, $stack$$) {
		if ($a$$ === $b$$) return 0 !== $a$$ || 1 / $a$$ == 1 / $b$$;
		if (null == $a$$ || null == $b$$) return $a$$ === $b$$;
		$a$$._chain && ($a$$ = $a$$._wrapped);
		$b$$._chain && ($b$$ = $b$$._wrapped);
		if ($a$$.isEqual && $_$$.isFunction($a$$.isEqual)) return $a$$.isEqual($b$$);
		if ($b$$.isEqual && $_$$.isFunction($b$$.isEqual)) return $b$$.isEqual($a$$);
		var $className$$ = $toString$$.call($a$$);
		if ($className$$ != $toString$$.call($b$$)) return ! 1;
		switch ($className$$) {
		case "[object String]":
			return $a$$ == String($b$$);
			case "[object Number]":
			return $a$$ != +$a$$ ? $b$$ != +$b$$: 0 == $a$$ ? 1 / $a$$ == 1 / $b$$: $a$$ == +$b$$;
		case "[object Date]":
		case "[object Boolean]":
			return + $a$$ == +$b$$;
		case "[object RegExp]":
			return $a$$.source == $b$$.source && $a$$.global == $b$$.global && $a$$.multiline == $b$$.multiline && $a$$.ignoreCase == $b$$.ignoreCase
		}
		if ("object" != typeof $a$$ || "object" != typeof $b$$) return ! 1;
		for (var $length$$13_size$$ = $stack$$.length; $length$$13_size$$--;) if ($stack$$[$length$$13_size$$] == $a$$) return ! 0;
		$stack$$.push($a$$);
		var $length$$13_size$$ =
		0,
		$result$$ = !0;
		if ("[object Array]" == $className$$) {
			if ($length$$13_size$$ = $a$$.length, $result$$ = $length$$13_size$$ == $b$$.length) for (; $length$$13_size$$--&&($result$$ = $length$$13_size$$ in $a$$ == $length$$13_size$$ in $b$$ && $eq$$($a$$[$length$$13_size$$], $b$$[$length$$13_size$$], $stack$$)););
		} else {
			if ("constructor" in $a$$ != "constructor" in $b$$ || $a$$.constructor != $b$$.constructor) return ! 1;
			for (var $key$$ in $a$$) if ($_$$.has($a$$, $key$$) && ($length$$13_size$$++, !($result$$ = $_$$.has($b$$, $key$$) && $eq$$($a$$[$key$$],
			$b$$[$key$$], $stack$$)))) break;
			if ($result$$) {
				for ($key$$ in $b$$) if ($_$$.has($b$$, $key$$) && !$length$$13_size$$--) break;
				$result$$ = !$length$$13_size$$
			}
		}
		$stack$$.pop();
		return $result$$
	}
	var $root$$ = this,
	$previousUnderscore$$ = $root$$._,
	$breaker$$ = {},
	$ArrayProto$$ = Array.prototype,
	$ObjProto_nativeIsArray$$ = Object.prototype,
	$slice$$ = $ArrayProto$$.slice,
	$unshift$$ = $ArrayProto$$.unshift,
	$toString$$ = $ObjProto_nativeIsArray$$.toString,
	$hasOwnProperty$$ = $ObjProto_nativeIsArray$$.hasOwnProperty,
	$nativeForEach$$ =
	$ArrayProto$$.forEach,
	$nativeMap$$ = $ArrayProto$$.map,
	$nativeReduce$$ = $ArrayProto$$.reduce,
	$nativeReduceRight$$ = $ArrayProto$$.reduceRight,
	$nativeFilter$$ = $ArrayProto$$.filter,
	$nativeEvery$$ = $ArrayProto$$.every,
	$nativeSome$$ = $ArrayProto$$.some,
	$nativeIndexOf$$ = $ArrayProto$$.indexOf,
	$nativeLastIndexOf$$ = $ArrayProto$$.lastIndexOf,
	$ObjProto_nativeIsArray$$ = Array.isArray,
	$nativeKeys$$ = Object.keys,
	$nativeBind$$ = Function.prototype.bind,
	$_$$ = function $$_$$$($obj$$) {
		return new $wrapper$$($obj$$)
	};
	"undefined" !==
	typeof exports ? ("undefined" !== typeof module && module.exports && (exports = module.exports = $_$$), exports._ = $_$$) : $root$$._ = $_$$;
	$_$$.VERSION = "1.3.3";
	var $each$$ = $_$$.each = $_$$.forEach = function $$_$$$forEach$($obj$$, $iterator$$, $context$$) {
		if ($obj$$ != null) if ($nativeForEach$$ && $obj$$.forEach === $nativeForEach$$) $obj$$.forEach($iterator$$, $context$$);
		else if ($obj$$.length === +$obj$$.length) for (var $i$$133_key$$ = 0, $l$$ = $obj$$.length; $i$$133_key$$ < $l$$; $i$$133_key$$++) {
			if ($i$$133_key$$ in $obj$$ && $iterator$$.call($context$$,
			$obj$$[$i$$133_key$$], $i$$133_key$$, $obj$$) === $breaker$$) break
		} else for ($i$$133_key$$ in $obj$$) if ($_$$.has($obj$$, $i$$133_key$$) && $iterator$$.call($context$$, $obj$$[$i$$133_key$$], $i$$133_key$$, $obj$$) === $breaker$$) break
	};
	$_$$.map = $_$$.collect = function $$_$$$collect$($obj$$, $iterator$$, $context$$) {
		var $results$$ = [];
		if ($obj$$ == null) return $results$$;
		if ($nativeMap$$ && $obj$$.map === $nativeMap$$) return $obj$$.map($iterator$$, $context$$);
		$each$$($obj$$,
		function($value$$, $index$$, $list$$) {
			$results$$[$results$$.length] =
			$iterator$$.call($context$$, $value$$, $index$$, $list$$)
		});
		if ($obj$$.length === +$obj$$.length) $results$$.length = $obj$$.length;
		return $results$$
	};
	$_$$.reduce = $_$$.foldl = $_$$.inject = function $$_$$$inject$($obj$$, $iterator$$, $memo$$, $context$$) {
		var $initial$$ = arguments.length > 2;
		$obj$$ == null && ($obj$$ = []);
		if ($nativeReduce$$ && $obj$$.reduce === $nativeReduce$$) {
			$context$$ && ($iterator$$ = $_$$.bind($iterator$$, $context$$));
			return $initial$$ ? $obj$$.reduce($iterator$$, $memo$$) : $obj$$.reduce($iterator$$)
		}
		$each$$($obj$$,
		function($value$$, $index$$, $list$$) {
			if ($initial$$) $memo$$ = $iterator$$.call($context$$, $memo$$, $value$$, $index$$, $list$$);
			else {
				$memo$$ = $value$$;
				$initial$$ = true
			}
		});
		if (!$initial$$) throw new TypeError("Reduce of empty array with no initial value");
		return $memo$$
	};
	$_$$.reduceRight = $_$$.foldr = function $$_$$$foldr$($obj$$, $iterator$$, $memo$$, $context$$) {
		var $initial$$ = arguments.length > 2;
		$obj$$ == null && ($obj$$ = []);
		if ($nativeReduceRight$$ && $obj$$.reduceRight === $nativeReduceRight$$) {
			$context$$ && ($iterator$$ =
			$_$$.bind($iterator$$, $context$$));
			return $initial$$ ? $obj$$.reduceRight($iterator$$, $memo$$) : $obj$$.reduceRight($iterator$$)
		}
		var $reversed$$ = $_$$.toArray($obj$$).reverse();
		$context$$ && !$initial$$ && ($iterator$$ = $_$$.bind($iterator$$, $context$$));
		return $initial$$ ? $_$$.reduce($reversed$$, $iterator$$, $memo$$, $context$$) : $_$$.reduce($reversed$$, $iterator$$)
	};
	$_$$.find = $_$$.detect = function $$_$$$detect$($obj$$, $iterator$$, $context$$) {
		var $result$$;
		$any$$($obj$$,
		function($value$$, $index$$, $list$$) {
			if ($iterator$$.call($context$$,
			$value$$, $index$$, $list$$)) {
				$result$$ = $value$$;
				return true
			}
		});
		return $result$$
	};
	$_$$.filter = $_$$.select = function $$_$$$select$($obj$$, $iterator$$, $context$$) {
		var $results$$ = [];
		if ($obj$$ == null) return $results$$;
		if ($nativeFilter$$ && $obj$$.filter === $nativeFilter$$) return $obj$$.filter($iterator$$, $context$$);
		$each$$($obj$$,
		function($value$$, $index$$, $list$$) {
			$iterator$$.call($context$$, $value$$, $index$$, $list$$) && ($results$$[$results$$.length] = $value$$)
		});
		return $results$$
	};
	$_$$.reject = function $$_$$$reject$($obj$$,
	$iterator$$, $context$$) {
		var $results$$ = [];
		if ($obj$$ == null) return $results$$;
		$each$$($obj$$,
		function($value$$, $index$$, $list$$) {
			$iterator$$.call($context$$, $value$$, $index$$, $list$$) || ($results$$[$results$$.length] = $value$$)
		});
		return $results$$
	};
	$_$$.every = $_$$.all = function $$_$$$all$($obj$$, $iterator$$, $context$$) {
		var $result$$ = true;
		if ($obj$$ == null) return $result$$;
		if ($nativeEvery$$ && $obj$$.every === $nativeEvery$$) return $obj$$.every($iterator$$, $context$$);
		$each$$($obj$$,
		function($value$$, $index$$,
		$list$$) {
			if (! ($result$$ = $result$$ && $iterator$$.call($context$$, $value$$, $index$$, $list$$))) return $breaker$$
		});
		return !! $result$$
	};
	var $any$$ = $_$$.some = $_$$.any = function $$_$$$any$($obj$$, $iterator$$, $context$$) {
		$iterator$$ || ($iterator$$ = $_$$.identity);
		var $result$$ = false;
		if ($obj$$ == null) return $result$$;
		if ($nativeSome$$ && $obj$$.some === $nativeSome$$) return $obj$$.some($iterator$$, $context$$);
		$each$$($obj$$,
		function($value$$, $index$$, $list$$) {
			if ($result$$ || ($result$$ = $iterator$$.call($context$$, $value$$,
			$index$$, $list$$))) return $breaker$$
		});
		return !! $result$$
	};
	$_$$.include = $_$$.contains = function $$_$$$contains$($obj$$, $target$$) {
		var $found$$ = false;
		if ($obj$$ == null) return $found$$;
		if ($nativeIndexOf$$ && $obj$$.indexOf === $nativeIndexOf$$) return $obj$$.indexOf($target$$) != -1;
		return $found$$ = $any$$($obj$$,
		function($value$$) {
			return $value$$ === $target$$
		})
	};
	$_$$.invoke = function $$_$$$invoke$($obj$$, $method$$) {
		var $args$$ = $slice$$.call(arguments, 2);
		return $_$$.map($obj$$,
		function($value$$) {
			return ($_$$.isFunction($method$$) ?
			$method$$ || $value$$: $value$$[$method$$]).apply($value$$, $args$$)
		})
	};
	$_$$.pluck = function $$_$$$pluck$($obj$$, $key$$) {
		return $_$$.map($obj$$,
		function($value$$) {
			return $value$$[$key$$]
		})
	};
	$_$$.max = function $$_$$$max$($obj$$, $iterator$$, $context$$) {
		if (!$iterator$$ && $_$$.isArray($obj$$) && $obj$$[0] === +$obj$$[0]) return Math.max.apply(Math, $obj$$);
		if (!$iterator$$ && $_$$.isEmpty($obj$$)) return - Infinity;
		var $result$$ = {
			computed: -Infinity
		};
		$each$$($obj$$,
		function($value$$, $computed_index$$, $list$$) {
			$computed_index$$ =
			$iterator$$ ? $iterator$$.call($context$$, $value$$, $computed_index$$, $list$$) : $value$$;
			$computed_index$$ >= $result$$.computed && ($result$$ = {
				value: $value$$,
				computed: $computed_index$$
			})
		});
		return $result$$.value
	};
	$_$$.min = function $$_$$$min$($obj$$, $iterator$$, $context$$) {
		if (!$iterator$$ && $_$$.isArray($obj$$) && $obj$$[0] === +$obj$$[0]) return Math.min.apply(Math, $obj$$);
		if (!$iterator$$ && $_$$.isEmpty($obj$$)) return Infinity;
		var $result$$ = {
			computed: Infinity
		};
		$each$$($obj$$,
		function($value$$, $computed$$1_index$$,
		$list$$) {
			$computed$$1_index$$ = $iterator$$ ? $iterator$$.call($context$$, $value$$, $computed$$1_index$$, $list$$) : $value$$;
			$computed$$1_index$$ < $result$$.computed && ($result$$ = {
				value: $value$$,
				computed: $computed$$1_index$$
			})
		});
		return $result$$.value
	};
	$_$$.shuffle = function $$_$$$shuffle$($obj$$) {
		var $shuffled$$ = [],
		$rand$$;
		$each$$($obj$$,
		function($value$$, $index$$) {
			$rand$$ = Math.floor(Math.random() * ($index$$ + 1));
			$shuffled$$[$index$$] = $shuffled$$[$rand$$];
			$shuffled$$[$rand$$] = $value$$
		});
		return $shuffled$$
	};
	$_$$.sortBy = function $$_$$$sortBy$($obj$$0$$, $val$$, $context$$) {
		var $iterator$$ = $_$$.isFunction($val$$) ? $val$$: function($obj$$) {
			return $obj$$[$val$$]
		};
		return $_$$.pluck($_$$.map($obj$$0$$,
		function($value$$, $index$$, $list$$) {
			return {
				value: $value$$,
				criteria: $iterator$$.call($context$$, $value$$, $index$$, $list$$)
			}
		}).sort(function($left$$, $right$$) {
			var $a$$ = $left$$.criteria,
			$b$$ = $right$$.criteria;
			return $a$$ === void 0 ? 1: $b$$ === void 0 ? -1: $a$$ < $b$$ ? -1: $a$$ > $b$$ ? 1: 0
		}), "value")
	};
	$_$$.groupBy = function $$_$$$groupBy$($obj$$0$$,
	$val$$) {
		var $result$$ = {},
		$iterator$$ = $_$$.isFunction($val$$) ? $val$$: function($obj$$) {
			return $obj$$[$val$$]
		};
		$each$$($obj$$0$$,
		function($value$$, $index$$) {
			var $key$$ = $iterator$$($value$$, $index$$); ($result$$[$key$$] || ($result$$[$key$$] = [])).push($value$$)
		});
		return $result$$
	};
	$_$$.sortedIndex = function $$_$$$sortedIndex$($array$$, $obj$$, $iterator$$) {
		$iterator$$ || ($iterator$$ = $_$$.identity);
		for (var $low$$ = 0, $high$$ = $array$$.length; $low$$ < $high$$;) {
			var $mid$$ = $low$$ + $high$$ >> 1;
			$iterator$$($array$$[$mid$$]) <
			$iterator$$($obj$$) ? $low$$ = $mid$$ + 1: $high$$ = $mid$$
		}
		return $low$$
	};
	$_$$.toArray = function $$_$$$toArray$($obj$$) {
		return ! $obj$$ ? [] : $_$$.isArray($obj$$) || $_$$.isArguments($obj$$) ? $slice$$.call($obj$$) : $obj$$.toArray && $_$$.isFunction($obj$$.toArray) ? $obj$$.toArray() : $_$$.values($obj$$)
	};
	$_$$.size = function $$_$$$size$($obj$$) {
		return $_$$.isArray($obj$$) ? $obj$$.length: $_$$.keys($obj$$).length
	};
	$_$$.first = $_$$.head = $_$$.take = function $$_$$$take$($array$$, $n$$, $guard$$) {
		return $n$$ != null && !$guard$$ ? $slice$$.call($array$$,
		0, $n$$) : $array$$[0]
	};
	$_$$.initial = function $$_$$$initial$($array$$, $n$$, $guard$$) {
		return $slice$$.call($array$$, 0, $array$$.length - ($n$$ == null || $guard$$ ? 1: $n$$))
	};
	$_$$.last = function $$_$$$last$($array$$, $n$$, $guard$$) {
		return $n$$ != null && !$guard$$ ? $slice$$.call($array$$, Math.max($array$$.length - $n$$, 0)) : $array$$[$array$$.length - 1]
	};
	$_$$.rest = $_$$.tail = function $$_$$$tail$($array$$, $index$$, $guard$$) {
		return $slice$$.call($array$$, $index$$ == null || $guard$$ ? 1: $index$$)
	};
	$_$$.compact = function $$_$$$compact$($array$$) {
		return $_$$.filter($array$$,
		function($value$$) {
			return !! $value$$
		})
	};
	$_$$.flatten = function $$_$$$flatten$($array$$, $shallow$$) {
		return $_$$.reduce($array$$,
		function($memo$$, $value$$) {
			if ($_$$.isArray($value$$)) return $memo$$.concat($shallow$$ ? $value$$: $_$$.flatten($value$$));
			$memo$$[$memo$$.length] = $value$$;
			return $memo$$
		},
		[])
	};
	$_$$.without = function $$_$$$without$($array$$) {
		return $_$$.difference($array$$, $slice$$.call(arguments, 1))
	};
	$_$$.uniq = $_$$.unique = function $$_$$$unique$($array$$, $isSorted$$, $initial$$2_iterator$$) {
		var $initial$$2_iterator$$ =
		$initial$$2_iterator$$ ? $_$$.map($array$$, $initial$$2_iterator$$) : $array$$,
		$results$$ = [];
		$array$$.length < 3 && ($isSorted$$ = true);
		$_$$.reduce($initial$$2_iterator$$,
		function($memo$$, $value$$, $index$$) {
			if ($isSorted$$ ? $_$$.last($memo$$) !== $value$$ || !$memo$$.length: !$_$$.include($memo$$, $value$$)) {
				$memo$$.push($value$$);
				$results$$.push($array$$[$index$$])
			}
			return $memo$$
		},
		[]);
		return $results$$
	};
	$_$$.union = function $$_$$$union$() {
		return $_$$.uniq($_$$.flatten(arguments, true))
	};
	$_$$.intersection = $_$$.intersect =
	function $$_$$$intersect$($array$$) {
		var $rest$$ = $slice$$.call(arguments, 1);
		return $_$$.filter($_$$.uniq($array$$),
		function($item$$) {
			return $_$$.every($rest$$,
			function($other$$) {
				return $_$$.indexOf($other$$, $item$$) >= 0
			})
		})
	};
	$_$$.difference = function $$_$$$difference$($array$$) {
		var $rest$$ = $_$$.flatten($slice$$.call(arguments, 1), true);
		return $_$$.filter($array$$,
		function($value$$) {
			return ! $_$$.include($rest$$, $value$$)
		})
	};
	$_$$.zip = function $$_$$$zip$() {
		for (var $args$$ = $slice$$.call(arguments), $length$$ =
		$_$$.max($_$$.pluck($args$$, "length")), $results$$ = Array($length$$), $i$$ = 0; $i$$ < $length$$; $i$$++) $results$$[$i$$] = $_$$.pluck($args$$, "" + $i$$);
		return $results$$
	};
	$_$$.indexOf = function $$_$$$indexOf$($array$$, $item$$, $i$$135_isSorted$$) {
		if ($array$$ == null) return - 1;
		var $l$$;
		if ($i$$135_isSorted$$) {
			$i$$135_isSorted$$ = $_$$.sortedIndex($array$$, $item$$);
			return $array$$[$i$$135_isSorted$$] === $item$$ ? $i$$135_isSorted$$: -1
		}
		if ($nativeIndexOf$$ && $array$$.indexOf === $nativeIndexOf$$) return $array$$.indexOf($item$$);
		$i$$135_isSorted$$ = 0;
		for ($l$$ = $array$$.length; $i$$135_isSorted$$ < $l$$; $i$$135_isSorted$$++) if ($i$$135_isSorted$$ in $array$$ && $array$$[$i$$135_isSorted$$] === $item$$) return $i$$135_isSorted$$;
		return - 1
	};
	$_$$.lastIndexOf = function $$_$$$lastIndexOf$($array$$, $item$$) {
		if ($array$$ == null) return - 1;
		if ($nativeLastIndexOf$$ && $array$$.lastIndexOf === $nativeLastIndexOf$$) return $array$$.lastIndexOf($item$$);
		for (var $i$$ = $array$$.length; $i$$--;) if ($i$$ in $array$$ && $array$$[$i$$] === $item$$) return $i$$;
		return - 1
	};
	$_$$.range = function $$_$$$range$($start$$, $stop$$, $step$$) {
		if (arguments.length <= 1) {
			$stop$$ = $start$$ || 0;
			$start$$ = 0
		}
		for (var $step$$ = arguments[2] || 1, $len$$ = Math.max(Math.ceil(($stop$$ - $start$$) / $step$$), 0), $idx$$ = 0, $range$$ = Array($len$$); $idx$$ < $len$$;) {
			$range$$[$idx$$++] = $start$$;
			$start$$ = $start$$ + $step$$
		}
		return $range$$
	};
	var $ctor$$ = function $$ctor$$$() {};
	$_$$.bind = function bind($func$$, $context$$) {
		var $bound$$,
		$args$$;
		if ($func$$.bind === $nativeBind$$ && $nativeBind$$) return $nativeBind$$.apply($func$$,
		$slice$$.call(arguments, 1));
		if (!$_$$.isFunction($func$$)) throw new TypeError;
		$args$$ = $slice$$.call(arguments, 2);
		return $bound$$ = function $$bound$$$() {
			if (! (this instanceof $bound$$)) return $func$$.apply($context$$, $args$$.concat($slice$$.call(arguments)));
			$ctor$$.prototype = $func$$.prototype;
			var $self$$ = new $ctor$$,
			$result$$ = $func$$.apply($self$$, $args$$.concat($slice$$.call(arguments)));
			return Object($result$$) === $result$$ ? $result$$: $self$$
		}
	};
	$_$$.bindAll = function $$_$$$bindAll$($obj$$) {
		var $funcs$$ =
		$slice$$.call(arguments, 1);
		$funcs$$.length == 0 && ($funcs$$ = $_$$.functions($obj$$));
		$each$$($funcs$$,
		function($f$$) {
			$obj$$[$f$$] = $_$$.bind($obj$$[$f$$], $obj$$)
		});
		return $obj$$
	};
	$_$$.memoize = function $$_$$$memoize$($func$$, $hasher$$) {
		var $memo$$ = {};
		$hasher$$ || ($hasher$$ = $_$$.identity);
		return function() {
			var $key$$ = $hasher$$.apply(this, arguments);
			return $_$$.has($memo$$, $key$$) ? $memo$$[$key$$] : $memo$$[$key$$] = $func$$.apply(this, arguments)
		}
	};
	$_$$.delay = function $$_$$$delay$($func$$, $wait$$) {
		var $args$$ =
		$slice$$.call(arguments, 2);
		return setTimeout(function() {
			return $func$$.apply(null, $args$$)
		},
		$wait$$)
	};
	$_$$.defer = function $$_$$$defer$($func$$) {
		return $_$$.delay.apply($_$$, [$func$$, 1].concat($slice$$.call(arguments, 1)))
	};
	$_$$.throttle = function $$_$$$throttle$($func$$, $wait$$) {
		var $context$$,
		$args$$,
		$timeout$$,
		$throttling$$,
		$more$$,
		$result$$,
		$whenDone$$ = $_$$.debounce(function() {
			$more$$ = $throttling$$ = false
		},
		$wait$$);
		return function() {
			$context$$ = this;
			$args$$ = arguments;
			$timeout$$ || ($timeout$$ = setTimeout(function() {
				$timeout$$ =
				null;
				$more$$ && $func$$.apply($context$$, $args$$);
				$whenDone$$()
			},
			$wait$$));
			$throttling$$ ? $more$$ = true: $result$$ = $func$$.apply($context$$, $args$$);
			$whenDone$$();
			$throttling$$ = true;
			return $result$$
		}
	};
	$_$$.debounce = function $$_$$$debounce$($func$$, $wait$$, $immediate$$) {
		var $timeout$$;
		return function() {
			var $context$$ = this,
			$args$$ = arguments;
			$immediate$$ && !$timeout$$ && $func$$.apply($context$$, $args$$);
			clearTimeout($timeout$$);
			$timeout$$ = setTimeout(function() {
				$timeout$$ = null;
				$immediate$$ || $func$$.apply($context$$,
				$args$$)
			},
			$wait$$)
		}
	};
	$_$$.once = function $$_$$$once$($func$$) {
		var $ran$$ = false,
		$memo$$;
		return function() {
			if ($ran$$) return $memo$$;
			$ran$$ = true;
			return $memo$$ = $func$$.apply(this, arguments)
		}
	};
	$_$$.wrap = function $$_$$$wrap$($func$$, $wrapper$$) {
		return function() {
			var $args$$ = [$func$$].concat($slice$$.call(arguments, 0));
			return $wrapper$$.apply(this, $args$$)
		}
	};
	$_$$.compose = function $$_$$$compose$() {
		var $funcs$$ = arguments;
		return function() {
			for (var $args$$ = arguments, $i$$ = $funcs$$.length - 1; $i$$ >= 0; $i$$--) $args$$ =
			[$funcs$$[$i$$].apply(this, $args$$)];
			return $args$$[0]
		}
	};
	$_$$.after = function $$_$$$after$($times$$, $func$$) {
		return $times$$ <= 0 ? $func$$() : function() {
			if (--$times$$ < 1) return $func$$.apply(this, arguments)
		}
	};
	$_$$.keys = $nativeKeys$$ ||
	function($obj$$) {
		if ($obj$$ !== Object($obj$$)) throw new TypeError("Invalid object");
		var $keys$$ = [],
		$key$$;
		for ($key$$ in $obj$$) $_$$.has($obj$$, $key$$) && ($keys$$[$keys$$.length] = $key$$);
		return $keys$$
	};
	$_$$.values = function $$_$$$values$($obj$$) {
		return $_$$.map($obj$$, $_$$.identity)
	};
	$_$$.functions = $_$$.methods = function $$_$$$methods$($obj$$) {
		var $names$$ = [],
		$key$$;
		for ($key$$ in $obj$$) $_$$.isFunction($obj$$[$key$$]) && $names$$.push($key$$);
		return $names$$.sort()
	};
	$_$$.extend = function $$_$$$extend$($obj$$) {
		$each$$($slice$$.call(arguments, 1),
		function($source$$) {
			for (var $prop$$ in $source$$) $obj$$[$prop$$] = $source$$[$prop$$]
		});
		return $obj$$
	};
	$_$$.pick = function $$_$$$pick$($obj$$) {
		var $result$$ = {};
		$each$$($_$$.flatten($slice$$.call(arguments, 1)),
		function($key$$) {
			$key$$ in $obj$$ &&
			($result$$[$key$$] = $obj$$[$key$$])
		});
		return $result$$
	};
	$_$$.defaults = function $$_$$$defaults$($obj$$) {
		$each$$($slice$$.call(arguments, 1),
		function($source$$) {
			for (var $prop$$ in $source$$) $obj$$[$prop$$] == null && ($obj$$[$prop$$] = $source$$[$prop$$])
		});
		return $obj$$
	};
	$_$$.clone = function $$_$$$clone$($obj$$) {
		return ! $_$$.isObject($obj$$) ? $obj$$: $_$$.isArray($obj$$) ? $obj$$.slice() : $_$$.extend({},
		$obj$$)
	};
	$_$$.tap = function $$_$$$tap$($obj$$, $interceptor$$) {
		$interceptor$$($obj$$);
		return $obj$$
	};
	$_$$.isEqual =
	function $$_$$$isEqual$($a$$, $b$$) {
		return $eq$$($a$$, $b$$, [])
	};
	$_$$.isEmpty = function $$_$$$isEmpty$($obj$$) {
		if ($obj$$ == null) return true;
		if ($_$$.isArray($obj$$) || $_$$.isString($obj$$)) return $obj$$.length === 0;
		for (var $key$$ in $obj$$) if ($_$$.has($obj$$, $key$$)) return false;
		return true
	};
	$_$$.isElement = function $$_$$$isElement$($obj$$) {
		return !! ($obj$$ && $obj$$.nodeType == 1)
	};
	$_$$.isArray = $ObjProto_nativeIsArray$$ ||
	function($obj$$) {
		return $toString$$.call($obj$$) == "[object Array]"
	};
	$_$$.isObject = function $$_$$$isObject$($obj$$) {
		return $obj$$ ===
		Object($obj$$)
	};
	$_$$.isArguments = function $$_$$$isArguments$($obj$$) {
		return $toString$$.call($obj$$) == "[object Arguments]"
	};
	$_$$.isArguments(arguments) || ($_$$.isArguments = function $$_$$$isArguments$($obj$$) {
		return ! (!$obj$$ || !$_$$.has($obj$$, "callee"))
	});
	$_$$.isFunction = function $$_$$$isFunction$($obj$$) {
		return $toString$$.call($obj$$) == "[object Function]"
	};
	$_$$.isString = function $$_$$$isString$($obj$$) {
		return $toString$$.call($obj$$) == "[object String]"
	};
	$_$$.isNumber = function $$_$$$isNumber$($obj$$) {
		return $toString$$.call($obj$$) ==
		"[object Number]"
	};
	$_$$.isFinite = function $$_$$$isFinite$($obj$$) {
		return $_$$.isNumber($obj$$) && isFinite($obj$$)
	};
	$_$$.isNaN = function $$_$$$isNaN$($obj$$) {
		return $obj$$ !== $obj$$
	};
	$_$$.isBoolean = function $$_$$$isBoolean$($obj$$) {
		return $obj$$ === true || $obj$$ === false || $toString$$.call($obj$$) == "[object Boolean]"
	};
	$_$$.isDate = function $$_$$$isDate$($obj$$) {
		return $toString$$.call($obj$$) == "[object Date]"
	};
	$_$$.isRegExp = function $$_$$$isRegExp$($obj$$) {
		return $toString$$.call($obj$$) == "[object RegExp]"
	};
	$_$$.isNull = function $$_$$$isNull$($obj$$) {
		return $obj$$ === null
	};
	$_$$.isUndefined = function $$_$$$isUndefined$($obj$$) {
		return $obj$$ === void 0
	};
	$_$$.has = function $$_$$$has$($obj$$, $key$$) {
		return $hasOwnProperty$$.call($obj$$, $key$$)
	};
	$_$$.noConflict = function $$_$$$noConflict$() {
		$root$$._ = $previousUnderscore$$;
		return this
	};
	$_$$.identity = function $$_$$$identity$($value$$) {
		return $value$$
	};
	$_$$.times = function $$_$$$times$($n$$, $iterator$$, $context$$) {
		for (var $i$$ = 0; $i$$ < $n$$; $i$$++) $iterator$$.call($context$$,
		$i$$)
	};
	$_$$.escape = function $$_$$$escape$($string$$) {
		return ("" + $string$$).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;")
	};
	$_$$.result = function $$_$$$result$($object$$, $property$$) {
		if ($object$$ == null) return null;
		var $value$$ = $object$$[$property$$];
		return $_$$.isFunction($value$$) ? $value$$.call($object$$) : $value$$
	};
	$_$$.mixin = function $$_$$$mixin$($obj$$) {
		$each$$($_$$.functions($obj$$),
		function($name$$) {
			var $func$$ =
			$_$$[$name$$] = $obj$$[$name$$];
			$wrapper$$.prototype[$name$$] = function $$wrapper$$$$$name$$$() {
				var $args$$ = $slice$$.call(arguments);
				$unshift$$.call($args$$, this._wrapped);
				return $result$$0$$($func$$.apply($_$$, $args$$), this._chain)
			}
		})
	};
	var $idCounter$$ = 0;
	$_$$.uniqueId = function $$_$$$uniqueId$($prefix$$) {
		var $id$$ = $idCounter$$++;
		return $prefix$$ ? $prefix$$ + $id$$: $id$$
	};
	$_$$.templateSettings = {
		evaluate: /<%([\s\S]+?)%>/g,
		interpolate: /<%=([\s\S]+?)%>/g,
		escape: /<%-([\s\S]+?)%>/g
	};
	var $noMatch$$ = /.^/,
	$escapes$$ =
	{
		"\\": "\\",
		"'": "'",
		r: "\r",
		n: "\n",
		t: "\t",
		u2028: "\u2028",
		u2029: "\u2029"
	},
	$p$$;
	for ($p$$ in $escapes$$) $escapes$$[$escapes$$[$p$$]] = $p$$;
	var $escaper$$ = /\\|'|\r|\n|\t|\u2028|\u2029/g,
	$unescaper$$ = /\\(\\|'|r|n|t|u2028|u2029)/g,
	$unescape$$ = function $$unescape$$$($code$$) {
		return $code$$.replace($unescaper$$,
		function($match$$, $escape$$) {
			return $escapes$$[$escape$$]
		})
	};
	$_$$.template = function $$_$$$template$($source$$3_text$$, $data$$0$$, $settings$$) {
		$settings$$ = $_$$.defaults($settings$$ || {},
		$_$$.templateSettings);
		$source$$3_text$$ = "__p+='" + $source$$3_text$$.replace($escaper$$,
		function($match$$) {
			return "\\" + $escapes$$[$match$$]
		}).replace($settings$$.escape || $noMatch$$,
		function($match$$, $code$$) {
			return "'+\n_.escape(" + $unescape$$($code$$) + ")+\n'"
		}).replace($settings$$.interpolate || $noMatch$$,
		function($match$$, $code$$) {
			return "'+\n(" + $unescape$$($code$$) + ")+\n'"
		}).replace($settings$$.evaluate || $noMatch$$,
		function($match$$, $code$$) {
			return "';\n" + $unescape$$($code$$) + "\n;__p+='"
		}) + "';\n";
		$settings$$.variable || ($source$$3_text$$ =
		"with(obj||{}){\n" + $source$$3_text$$ + "}\n");
		var $source$$3_text$$ = "var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};\n" + $source$$3_text$$ + "return __p;\n",
		$render$$ = new Function($settings$$.variable || "obj", "_", $source$$3_text$$);
		if ($data$$0$$) return $render$$($data$$0$$, $_$$);
		$data$$0$$ = function $$data$$0$$$($data$$) {
			return $render$$.call(this, $data$$, $_$$)
		};
		$data$$0$$.source = "function(" + ($settings$$.variable || "obj") + "){\n" + $source$$3_text$$ + "}";
		return $data$$0$$
	};
	$_$$.chain =
	function $$_$$$chain$($obj$$) {
		return $_$$($obj$$).chain()
	};
	var $wrapper$$ = function $$wrapper$$$($obj$$) {
		this._wrapped = $obj$$
	};
	$_$$.prototype = $wrapper$$.prototype;
	var $result$$0$$ = function $$result$$0$$$($obj$$, $chain$$) {
		return $chain$$ ? $_$$($obj$$).chain() : $obj$$
	};
	$_$$.mixin($_$$);
	$each$$("pop push reverse shift sort splice unshift".split(" "),
	function($name$$) {
		var $method$$ = $ArrayProto$$[$name$$];
		$wrapper$$.prototype[$name$$] = function $$wrapper$$$$$name$$$() {
			var $wrapped$$ = this._wrapped;
			$method$$.apply($wrapped$$,
			arguments);
			var $length$$ = $wrapped$$.length; ($name$$ == "shift" || $name$$ == "splice") && $length$$ === 0 && delete $wrapped$$[0];
			return $result$$0$$($wrapped$$, this._chain)
		}
	});
	$each$$(["concat", "join", "slice"],
	function($name$$) {
		var $method$$ = $ArrayProto$$[$name$$];
		$wrapper$$.prototype[$name$$] = function $$wrapper$$$$$name$$$() {
			return $result$$0$$($method$$.apply(this._wrapped, arguments), this._chain)
		}
	});
	$wrapper$$.prototype.chain = function $$wrapper$$$$chain$() {
		this._chain = true;
		return this
	};
	$wrapper$$.prototype.value =
	function $$wrapper$$$$value$() {
		return this._wrapped
	}
}).call(this); (function() {
	var $root$$ = this,
	$previousBackbone$$ = $root$$.Backbone,
	$slice$$ = Array.prototype.slice,
	$splice$$ = Array.prototype.splice,
	$Backbone$$;
	$Backbone$$ = "undefined" !== typeof exports ? exports: $root$$.Backbone = {};
	$Backbone$$.VERSION = "0.9.2";
	var $_$$ = $root$$._; ! $_$$ && "undefined" !== typeof require && ($_$$ = require("underscore"));
	var $$$$ = $root$$.jQuery || $root$$.Zepto || $root$$.ender;
	$Backbone$$.setDomLibrary = function $$Backbone$$$setDomLibrary$($lib$$) {
		$$$$ = $lib$$
	};
	$Backbone$$.noConflict = function $$Backbone$$$noConflict$() {
		$root$$.Backbone =
		$previousBackbone$$;
		return this
	};
	$Backbone$$.emulateHTTP = !1;
	$Backbone$$.emulateJSON = !1;
	var $eventSplitter$$ = /\s+/,
	$Events$$ = $Backbone$$.Events = {
		on: function $$Backbone$$$Events$on$($events$$, $callback$$, $context$$) {
			var $calls$$,
			$event$$,
			$node$$,
			$tail$$,
			$list$$;
			if (!$callback$$) return this;
			$events$$ = $events$$.split($eventSplitter$$);
			for ($calls$$ = this._callbacks || (this._callbacks = {}); $event$$ = $events$$.shift();) $node$$ = ($list$$ = $calls$$[$event$$]) ? $list$$.tail: {},
			$node$$.next = $tail$$ = {},
			$node$$.context =
			$context$$,
			$node$$.callback = $callback$$,
			$calls$$[$event$$] = {
				tail: $tail$$,
				next: $list$$ ? $list$$.next: $node$$
			};
			return this
		},
		off: function $$Backbone$$$Events$off$($events$$, $callback$$, $context$$) {
			var $event$$,
			$calls$$,
			$node$$,
			$tail$$,
			$cb$$,
			$ctx$$;
			if ($calls$$ = this._callbacks) {
				if (!$events$$ && !$callback$$ && !$context$$) return delete this._callbacks,
				this;
				for ($events$$ = $events$$ ? $events$$.split($eventSplitter$$) : $_$$.keys($calls$$); $event$$ = $events$$.shift();) if ($node$$ = $calls$$[$event$$], delete $calls$$[$event$$],
				$node$$ && ($callback$$ || $context$$)) for ($tail$$ = $node$$.tail; ($node$$ = $node$$.next) !== $tail$$;) if ($cb$$ = $node$$.callback, $ctx$$ = $node$$.context, $callback$$ && $cb$$ !== $callback$$ || $context$$ && $ctx$$ !== $context$$) this.on($event$$, $cb$$, $ctx$$);
				return this
			}
		},
		trigger: function $$Backbone$$$Events$trigger$($events$$) {
			var $args$$9_event$$,
			$node$$,
			$calls$$,
			$tail$$,
			$all$$,
			$rest$$;
			if (! ($calls$$ = this._callbacks)) return this;
			$all$$ = $calls$$.all;
			$events$$ = $events$$.split($eventSplitter$$);
			for ($rest$$ = $slice$$.call(arguments,
			1); $args$$9_event$$ = $events$$.shift();) {
				if ($node$$ = $calls$$[$args$$9_event$$]) for ($tail$$ = $node$$.tail; ($node$$ = $node$$.next) !== $tail$$;) $node$$.callback.apply($node$$.context || this, $rest$$);
				if ($node$$ = $all$$) {
					$tail$$ = $node$$.tail;
					for ($args$$9_event$$ = [$args$$9_event$$].concat($rest$$); ($node$$ = $node$$.next) !== $tail$$;) $node$$.callback.apply($node$$.context || this, $args$$9_event$$)
				}
			}
			return this
		}
	};
	$Events$$.bind = $Events$$.on;
	$Events$$.unbind = $Events$$.off;
	var $Model$$ = $Backbone$$.Model = function $$Backbone$$$Model$($attributes$$,
	$options$$) {
		var $defaults$$;
		$attributes$$ || ($attributes$$ = {});
		$options$$ && $options$$.parse && ($attributes$$ = this.parse($attributes$$));
		if ($defaults$$ = $getValue$$(this, "defaults")) $attributes$$ = $_$$.extend({},
		$defaults$$, $attributes$$);
		$options$$ && $options$$.collection && (this.collection = $options$$.collection);
		this.attributes = {};
		this._escapedAttributes = {};
		this.cid = $_$$.uniqueId("c");
		this.changed = {};
		this._silent = {};
		this._pending = {};
		this.set($attributes$$, {
			silent: !0
		});
		this.changed = {};
		this._silent = {};
		this._pending =
		{};
		this._previousAttributes = $_$$.clone(this.attributes);
		this.initialize.apply(this, arguments)
	};
	$_$$.extend($Model$$.prototype, $Events$$, {
		changed: null,
		_silent: null,
		_pending: null,
		idAttribute: "id",
		initialize: function() {},
		toJSON: function() {
			return $_$$.clone(this.attributes)
		},
		get: function($attr$$) {
			return this.attributes[$attr$$]
		},
		escape: function($attr$$) {
			var $html_val$$;
			if ($html_val$$ = this._escapedAttributes[$attr$$]) return $html_val$$;
			$html_val$$ = this.get($attr$$);
			return this._escapedAttributes[$attr$$] =
			$_$$.escape(null == $html_val$$ ? "": "" + $html_val$$)
		},
		has: function($attr$$) {
			return null != this.get($attr$$)
		},
		set: function($key$$28_val$$, $changes_value$$, $options$$) {
			var $attrs$$,
			$attr$$;
			$_$$.isObject($key$$28_val$$) || null == $key$$28_val$$ ? ($attrs$$ = $key$$28_val$$, $options$$ = $changes_value$$) : ($attrs$$ = {},
			$attrs$$[$key$$28_val$$] = $changes_value$$);
			$options$$ || ($options$$ = {});
			if (!$attrs$$) return this;
			$attrs$$ instanceof $Model$$ && ($attrs$$ = $attrs$$.attributes);
			if ($options$$.unset) for ($attr$$ in $attrs$$) $attrs$$[$attr$$] =
			void 0;
			if (!this._validate($attrs$$, $options$$)) return ! 1;
			this.idAttribute in $attrs$$ && (this.id = $attrs$$[this.idAttribute]);
			var $changes_value$$ = $options$$.changes = {},
			$now$$ = this.attributes,
			$escaped$$ = this._escapedAttributes,
			$prev$$ = this._previousAttributes || {};
			for ($attr$$ in $attrs$$) {
				$key$$28_val$$ = $attrs$$[$attr$$];
				if (!$_$$.isEqual($now$$[$attr$$], $key$$28_val$$) || $options$$.unset && $_$$.has($now$$, $attr$$)) delete $escaped$$[$attr$$],
				($options$$.silent ? this._silent: $changes_value$$)[$attr$$] = !0;
				$options$$.unset ? delete $now$$[$attr$$] : $now$$[$attr$$] = $key$$28_val$$; ! $_$$.isEqual($prev$$[$attr$$], $key$$28_val$$) || $_$$.has($now$$, $attr$$) != $_$$.has($prev$$, $attr$$) ? (this.changed[$attr$$] = $key$$28_val$$, $options$$.silent || (this._pending[$attr$$] = !0)) : (delete this.changed[$attr$$], delete this._pending[$attr$$])
			}
			$options$$.silent || this.change($options$$);
			return this
		},
		unset: function($attr$$, $options$$) { ($options$$ || ($options$$ = {})).unset = !0;
			return this.set($attr$$, null, $options$$)
		},
		clear: function($options$$) { ($options$$ ||
			($options$$ = {})).unset = !0;
			return this.set($_$$.clone(this.attributes), $options$$)
		},
		fetch: function($options$$) {
			var $options$$ = $options$$ ? $_$$.clone($options$$) : {},
			$model$$ = this,
			$success$$ = $options$$.success;
			$options$$.success = function $$options$$$success$($resp$$, $status$$, $xhr$$) {
				if (!$model$$.set($model$$.parse($resp$$, $xhr$$), $options$$)) return ! 1;
				$success$$ && $success$$($model$$, $resp$$)
			};
			$options$$.error = $Backbone$$.wrapError($options$$.error, $model$$, $options$$);
			return (this.sync || $Backbone$$.sync).call(this,
			"read", this, $options$$)
		},
		save: function($key$$, $method$$5_value$$65_xhr$$, $options$$) {
			var $attrs$$,
			$current$$;
			$_$$.isObject($key$$) || null == $key$$ ? ($attrs$$ = $key$$, $options$$ = $method$$5_value$$65_xhr$$) : ($attrs$$ = {},
			$attrs$$[$key$$] = $method$$5_value$$65_xhr$$);
			$options$$ = $options$$ ? $_$$.clone($options$$) : {};
			if ($options$$.wait) {
				if (!this._validate($attrs$$, $options$$)) return ! 1;
				$current$$ = $_$$.clone(this.attributes)
			}
			$key$$ = $_$$.extend({},
			$options$$, {
				silent: !0
			});
			if ($attrs$$ && !this.set($attrs$$, $options$$.wait ?
			$key$$: $options$$)) return ! 1;
			var $model$$ = this,
			$success$$ = $options$$.success;
			$options$$.success = function $$options$$$success$($resp$$, $serverAttrs_status$$, $xhr$$) {
				$serverAttrs_status$$ = $model$$.parse($resp$$, $xhr$$);
				if ($options$$.wait) {
					delete $options$$.wait;
					$serverAttrs_status$$ = $_$$.extend($attrs$$ || {},
					$serverAttrs_status$$)
				}
				if (!$model$$.set($serverAttrs_status$$, $options$$)) return false;
				$success$$ ? $success$$($model$$, $resp$$) : $model$$.trigger("sync", $model$$, $resp$$, $options$$)
			};
			$options$$.error =
			$Backbone$$.wrapError($options$$.error, $model$$, $options$$);
			$method$$5_value$$65_xhr$$ = this.isNew() ? "create": "update";
			$method$$5_value$$65_xhr$$ = (this.sync || $Backbone$$.sync).call(this, $method$$5_value$$65_xhr$$, this, $options$$);
			$options$$.wait && this.set($current$$, $key$$);
			return $method$$5_value$$65_xhr$$
		},
		destroy: function($options$$) {
			var $options$$ = $options$$ ? $_$$.clone($options$$) : {},
			$model$$ = this,
			$success$$ = $options$$.success,
			$triggerDestroy$$ = function $$triggerDestroy$$$() {
				$model$$.trigger("destroy",
				$model$$, $model$$.collection, $options$$)
			};
			if (this.isNew()) return $triggerDestroy$$(),
			!1;
			$options$$.success = function $$options$$$success$($resp$$) {
				$options$$.wait && $triggerDestroy$$();
				$success$$ ? $success$$($model$$, $resp$$) : $model$$.trigger("sync", $model$$, $resp$$, $options$$)
			};
			$options$$.error = $Backbone$$.wrapError($options$$.error, $model$$, $options$$);
			var $xhr$$ = (this.sync || $Backbone$$.sync).call(this, "delete", this, $options$$);
			$options$$.wait || $triggerDestroy$$();
			return $xhr$$
		},
		url: function() {
			var $base$$ =
			$getValue$$(this, "urlRoot") || $getValue$$(this.collection, "url") || $urlError$$();
			return this.isNew() ? $base$$: $base$$ + ("/" == $base$$.charAt($base$$.length - 1) ? "": "/") + encodeURIComponent(this.id)
		},
		parse: function($resp$$) {
			return $resp$$
		},
		clone: function() {
			return new this.constructor(this.attributes)
		},
		isNew: function() {
			return null == this.id
		},
		change: function($options$$) {
			$options$$ || ($options$$ = {});
			var $changing$$ = this._changing;
			this._changing = !0;
			for (var $attr$$ in this._silent) this._pending[$attr$$] = !0;
			var $changes$$ =
			$_$$.extend({},
			$options$$.changes, this._silent);
			this._silent = {};
			for ($attr$$ in $changes$$) this.trigger("change:" + $attr$$, this, this.get($attr$$), $options$$);
			if ($changing$$) return this;
			for (; ! $_$$.isEmpty(this._pending);) {
				this._pending = {};
				this.trigger("change", this, $options$$);
				for ($attr$$ in this.changed) ! this._pending[$attr$$] && !this._silent[$attr$$] && delete this.changed[$attr$$];
				this._previousAttributes = $_$$.clone(this.attributes)
			}
			this._changing = !1;
			return this
		},
		hasChanged: function($attr$$) {
			return ! arguments.length ?
			!$_$$.isEmpty(this.changed) : $_$$.has(this.changed, $attr$$)
		},
		changedAttributes: function($diff$$) {
			if (!$diff$$) return this.hasChanged() ? $_$$.clone(this.changed) : !1;
			var $val$$,
			$changed$$ = !1,
			$old$$ = this._previousAttributes,
			$attr$$;
			for ($attr$$ in $diff$$) if (!$_$$.isEqual($old$$[$attr$$], $val$$ = $diff$$[$attr$$]))($changed$$ || ($changed$$ = {}))[$attr$$] = $val$$;
			return $changed$$
		},
		previous: function($attr$$) {
			return ! arguments.length || !this._previousAttributes ? null: this._previousAttributes[$attr$$]
		},
		previousAttributes: function() {
			return $_$$.clone(this._previousAttributes)
		},
		isValid: function() {
			return ! this.validate(this.attributes)
		},
		_validate: function($attrs$$, $options$$) {
			if ($options$$.silent || !this.validate) return ! 0;
			var $attrs$$ = $_$$.extend({},
			this.attributes, $attrs$$),
			$error$$ = this.validate($attrs$$, $options$$);
			if (!$error$$) return ! 0;
			$options$$ && $options$$.error ? $options$$.error(this, $error$$, $options$$) : this.trigger("error", this, $error$$, $options$$);
			return ! 1
		}
	});
	var $Collection$$ = $Backbone$$.Collection = function $$Backbone$$$Collection$($models$$, $options$$) {
		$options$$ ||
		($options$$ = {});
		$options$$.model && (this.model = $options$$.model);
		$options$$.comparator && (this.comparator = $options$$.comparator);
		this._reset();
		this.initialize.apply(this, arguments);
		$models$$ && this.reset($models$$, {
			silent: !0,
			parse: $options$$.parse
		})
	};
	$_$$.extend($Collection$$.prototype, $Events$$, {
		model: $Model$$,
		initialize: function() {},
		toJSON: function($options$$) {
			return this.map(function($model$$) {
				return $model$$.toJSON($options$$)
			})
		},
		add: function($models$$, $options$$) {
			var $i$$,
			$length$$,
			$model$$,
			$cid$$,
			$id$$,
			$cids$$ = {},
			$ids$$ = {},
			$dups$$ = [];
			$options$$ || ($options$$ = {});
			$models$$ = $_$$.isArray($models$$) ? $models$$.slice() : [$models$$];
			$i$$ = 0;
			for ($length$$ = $models$$.length; $i$$ < $length$$; $i$$++) {
				if (! ($model$$ = $models$$[$i$$] = this._prepareModel($models$$[$i$$], $options$$))) throw Error("Can't add an invalid model to a collection");
				$cid$$ = $model$$.cid;
				$id$$ = $model$$.id;
				$cids$$[$cid$$] || this._byCid[$cid$$] || null != $id$$ && ($ids$$[$id$$] || this._byId[$id$$]) ? $dups$$.push($i$$) : $cids$$[$cid$$] = $ids$$[$id$$] = $model$$
			}
			for ($i$$ =
			$dups$$.length; $i$$--;) $models$$.splice($dups$$[$i$$], 1);
			$i$$ = 0;
			for ($length$$ = $models$$.length; $i$$ < $length$$; $i$$++)($model$$ = $models$$[$i$$]).on("all", this._onModelEvent, this),
			this._byCid[$model$$.cid] = $model$$,
			null != $model$$.id && (this._byId[$model$$.id] = $model$$);
			this.length += $length$$;
			$splice$$.apply(this.models, [null != $options$$.at ? $options$$.at: this.models.length, 0].concat($models$$));
			this.comparator && this.sort({
				silent: !0
			});
			if ($options$$.silent) return this;
			$i$$ = 0;
			for ($length$$ = this.models.length; $i$$ <
			$length$$; $i$$++) if ($cids$$[($model$$ = this.models[$i$$]).cid]) $options$$.index = $i$$,
			$model$$.trigger("add", $model$$, this, $options$$);
			return this
		},
		remove: function($models$$, $options$$) {
			var $i$$,
			$l$$,
			$index$$,
			$model$$;
			$options$$ || ($options$$ = {});
			$models$$ = $_$$.isArray($models$$) ? $models$$.slice() : [$models$$];
			$i$$ = 0;
			for ($l$$ = $models$$.length; $i$$ < $l$$; $i$$++) if ($model$$ = this.getByCid($models$$[$i$$]) || this.get($models$$[$i$$])) delete this._byId[$model$$.id],
			delete this._byCid[$model$$.cid],
			$index$$ =
			this.indexOf($model$$),
			this.models.splice($index$$, 1),
			this.length--,
			$options$$.silent || ($options$$.index = $index$$, $model$$.trigger("remove", $model$$, this, $options$$)),
			this._removeReference($model$$);
			return this
		},
		push: function($model$$, $options$$) {
			$model$$ = this._prepareModel($model$$, $options$$);
			this.add($model$$, $options$$);
			return $model$$
		},
		pop: function($options$$) {
			var $model$$ = this.at(this.length - 1);
			this.remove($model$$, $options$$);
			return $model$$
		},
		unshift: function($model$$, $options$$) {
			$model$$ =
			this._prepareModel($model$$, $options$$);
			this.add($model$$, $_$$.extend({
				at: 0
			},
			$options$$));
			return $model$$
		},
		shift: function($options$$) {
			var $model$$ = this.at(0);
			this.remove($model$$, $options$$);
			return $model$$
		},
		get: function($id$$) {
			return null == $id$$ ? void 0: this._byId[null != $id$$.id ? $id$$.id: $id$$]
		},
		getByCid: function($cid$$) {
			return $cid$$ && this._byCid[$cid$$.cid || $cid$$]
		},
		at: function($index$$) {
			return this.models[$index$$]
		},
		where: function($attrs$$) {
			return $_$$.isEmpty($attrs$$) ? [] : this.filter(function($model$$) {
				for (var $key$$ in $attrs$$) if ($attrs$$[$key$$] !==
				$model$$.get($key$$)) return ! 1;
				return ! 0
			})
		},
		sort: function($options$$) {
			$options$$ || ($options$$ = {});
			if (!this.comparator) throw Error("Cannot sort a set without a comparator");
			var $boundComparator$$ = $_$$.bind(this.comparator, this);
			1 == this.comparator.length ? this.models = this.sortBy($boundComparator$$) : this.models.sort($boundComparator$$);
			$options$$.silent || this.trigger("reset", this, $options$$);
			return this
		},
		pluck: function($attr$$) {
			return $_$$.map(this.models,
			function($model$$) {
				return $model$$.get($attr$$)
			})
		},
		reset: function($models$$, $options$$) {
			$models$$ || ($models$$ = []);
			$options$$ || ($options$$ = {});
			for (var $i$$ = 0, $l$$ = this.models.length; $i$$ < $l$$; $i$$++) this._removeReference(this.models[$i$$]);
			this._reset();
			this.add($models$$, $_$$.extend({
				silent: !0
			},
			$options$$));
			$options$$.silent || this.trigger("reset", this, $options$$);
			return this
		},
		fetch: function($options$$) {
			$options$$ = $options$$ ? $_$$.clone($options$$) : {};
			void 0 === $options$$.parse && ($options$$.parse = !0);
			var $collection$$ = this,
			$success$$ = $options$$.success;
			$options$$.success = function $$options$$$success$($resp$$, $status$$, $xhr$$) {
				$collection$$[$options$$.add ? "add": "reset"]($collection$$.parse($resp$$, $xhr$$), $options$$);
				$success$$ && $success$$($collection$$, $resp$$)
			};
			$options$$.error = $Backbone$$.wrapError($options$$.error, $collection$$, $options$$);
			return (this.sync || $Backbone$$.sync).call(this, "read", this, $options$$)
		},
		create: function($model$$, $options$$) {
			var $coll$$ = this,
			$options$$ = $options$$ ? $_$$.clone($options$$) : {},
			$model$$ = this._prepareModel($model$$,
			$options$$);
			if (!$model$$) return ! 1;
			$options$$.wait || $coll$$.add($model$$, $options$$);
			var $success$$ = $options$$.success;
			$options$$.success = function $$options$$$success$($nextModel$$, $resp$$) {
				$options$$.wait && $coll$$.add($nextModel$$, $options$$);
				$success$$ ? $success$$($nextModel$$, $resp$$) : $nextModel$$.trigger("sync", $model$$, $resp$$, $options$$)
			};
			$model$$.save(null, $options$$);
			return $model$$
		},
		parse: function($resp$$) {
			return $resp$$
		},
		chain: function() {
			return $_$$(this.models).chain()
		},
		_reset: function() {
			this.length =
			0;
			this.models = [];
			this._byId = {};
			this._byCid = {}
		},
		_prepareModel: function($model$$, $options$$) {
			$options$$ || ($options$$ = {});
			$model$$ instanceof $Model$$ ? $model$$.collection || ($model$$.collection = this) : ($options$$.collection = this, $model$$ = new this.model($model$$, $options$$), $model$$._validate($model$$.attributes, $options$$) || ($model$$ = !1));
			return $model$$
		},
		_removeReference: function($model$$) {
			this == $model$$.collection && delete $model$$.collection;
			$model$$.off("all", this._onModelEvent, this)
		},
		_onModelEvent: function($event$$,
		$model$$, $collection$$, $options$$) { ("add" == $event$$ || "remove" == $event$$) && $collection$$ != this || ("destroy" == $event$$ && this.remove($model$$, $options$$), $model$$ && $event$$ === "change:" + $model$$.idAttribute && (delete this._byId[$model$$.previous($model$$.idAttribute)], this._byId[$model$$.id] = $model$$), this.trigger.apply(this, arguments))
		}
	});
	$_$$.each("forEach each map reduce reduceRight find detect filter select reject every all some any include contains invoke max min sortBy sortedIndex toArray size first initial rest last without indexOf shuffle lastIndexOf isEmpty groupBy".split(" "),
	function($method$$) {
		$Collection$$.prototype[$method$$] = function $$Collection$$$$$method$$$() {
			return $_$$[$method$$].apply($_$$, [this.models].concat($_$$.toArray(arguments)))
		}
	});
	var $Router$$ = $Backbone$$.Router = function $$Backbone$$$Router$($options$$) {
		$options$$ || ($options$$ = {});
		$options$$.routes && (this.routes = $options$$.routes);
		this._bindRoutes();
		this.initialize.apply(this, arguments)
	},
	$namedParam$$ = /:\w+/g,
	$splatParam$$ = /\*\w+/g,
	$escapeRegExp$$ = /[-[\]{}()+?.,\\^$|#\s]/g;
	$_$$.extend($Router$$.prototype,
	$Events$$, {
		initialize: function() {},
		route: function($route$$, $name$$, $callback$$) {
			$Backbone$$.history || ($Backbone$$.history = new $History$$);
			$_$$.isRegExp($route$$) || ($route$$ = this._routeToRegExp($route$$));
			$callback$$ || ($callback$$ = this[$name$$]);
			$Backbone$$.history.route($route$$, $_$$.bind(function($args$$) {
				$args$$ = this._extractParameters($route$$, $args$$);
				$callback$$ && $callback$$.apply(this, $args$$);
				this.trigger.apply(this, ["route:" + $name$$].concat($args$$));
				$Backbone$$.history.trigger("route", this,
				$name$$, $args$$)
			},
			this));
			return this
		},
		navigate: function($fragment$$, $options$$) {
			$Backbone$$.history.navigate($fragment$$, $options$$)
		},
		_bindRoutes: function() {
			if (this.routes) {
				var $routes$$ = [],
				$i$$142_route$$;
				for ($i$$142_route$$ in this.routes) $routes$$.unshift([$i$$142_route$$, this.routes[$i$$142_route$$]]);
				$i$$142_route$$ = 0;
				for (var $l$$ = $routes$$.length; $i$$142_route$$ < $l$$; $i$$142_route$$++) this.route($routes$$[$i$$142_route$$][0], $routes$$[$i$$142_route$$][1], this[$routes$$[$i$$142_route$$][1]])
			}
		},
		_routeToRegExp: function($route$$) {
			$route$$ = $route$$.replace($escapeRegExp$$, "\\$&").replace($namedParam$$, "([^/]+)").replace($splatParam$$, "(.*?)");
			return RegExp("^" + $route$$ + "$")
		},
		_extractParameters: function($route$$, $fragment$$) {
			return $route$$.exec($fragment$$).slice(1)
		}
	});
	var $History$$ = $Backbone$$.History = function $$Backbone$$$History$() {
		this.handlers = [];
		$_$$.bindAll(this, "checkUrl")
	},
	$routeStripper$$ = /^[#\/]/,
	$isExplorer$$ = /msie [\w.]+/;
	$History$$.started = !1;
	$_$$.extend($History$$.prototype,
	$Events$$, {
		interval: 50,
		getHash: function($match$$) {
			return ($match$$ = ($match$$ ? $match$$.location: window.location).href.match(/#(.*)$/)) ? $match$$[1] : ""
		},
		getFragment: function($fragment$$, $forcePushState$$) {
			if (null == $fragment$$) if (this._hasPushState || $forcePushState$$) {
				var $fragment$$ = window.location.pathname,
				$search$$ = window.location.search;
				$search$$ && ($fragment$$ += $search$$)
			} else $fragment$$ = this.getHash();
			$fragment$$.indexOf(this.options.root) || ($fragment$$ = $fragment$$.substr(this.options.root.length));
			return $fragment$$.replace($routeStripper$$, "")
		},
		start: function($fragment$$4_loc$$1_options$$) {
			if ($History$$.started) throw Error("Backbone.history has already been started");
			$History$$.started = !0;
			this.options = $_$$.extend({},
			{
				root: "/"
			},
			this.options, $fragment$$4_loc$$1_options$$);
			this._wantsHashChange = !1 !== this.options.hashChange;
			this._wantsPushState = !!this.options.pushState;
			this._hasPushState = !(!this.options.pushState || !window.history || !window.history.pushState);
			var $fragment$$4_loc$$1_options$$ = this.getFragment(),
			$atRoot_docMode_oldIE$$ = document.documentMode;
			if ($atRoot_docMode_oldIE$$ = $isExplorer$$.exec(navigator.userAgent.toLowerCase()) && (!$atRoot_docMode_oldIE$$ || 7 >= $atRoot_docMode_oldIE$$)) this.iframe = $$$$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow,
			this.navigate($fragment$$4_loc$$1_options$$);
			this._hasPushState ? $$$$(window).bind("popstate", this.checkUrl) : this._wantsHashChange && "onhashchange" in window && !$atRoot_docMode_oldIE$$ ? $$$$(window).bind("hashchange", this.checkUrl) :
			this._wantsHashChange && (this._checkUrlInterval = setInterval(this.checkUrl, this.interval));
			this.fragment = $fragment$$4_loc$$1_options$$;
			$fragment$$4_loc$$1_options$$ = window.location;
			$atRoot_docMode_oldIE$$ = $fragment$$4_loc$$1_options$$.pathname == this.options.root;
			if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !$atRoot_docMode_oldIE$$) return this.fragment = this.getFragment(null, !0),
			window.location.replace(this.options.root + "#" + this.fragment),
			!0;
			this._wantsPushState && (this._hasPushState &&
			$atRoot_docMode_oldIE$$ && $fragment$$4_loc$$1_options$$.hash) && (this.fragment = this.getHash().replace($routeStripper$$, ""), window.history.replaceState({},
			document.title, $fragment$$4_loc$$1_options$$.protocol + "//" + $fragment$$4_loc$$1_options$$.host + this.options.root + this.fragment));
			if (!this.options.silent) return this.loadUrl()
		},
		stop: function() {
			$$$$(window).unbind("popstate", this.checkUrl).unbind("hashchange", this.checkUrl);
			clearInterval(this._checkUrlInterval);
			$History$$.started = !1
		},
		route: function($route$$,
		$callback$$) {
			this.handlers.unshift({
				route: $route$$,
				callback: $callback$$
			})
		},
		checkUrl: function() {
			var $current$$ = this.getFragment();
			$current$$ == this.fragment && this.iframe && ($current$$ = this.getFragment(this.getHash(this.iframe)));
			if ($current$$ == this.fragment) return ! 1;
			this.iframe && this.navigate($current$$);
			this.loadUrl() || this.loadUrl(this.getHash())
		},
		loadUrl: function($fragmentOverride$$) {
			var $fragment$$ = this.fragment = this.getFragment($fragmentOverride$$);
			return $_$$.any(this.handlers,
			function($handler$$) {
				if ($handler$$.route.test($fragment$$)) return $handler$$.callback($fragment$$),
				!0
			})
		},
		navigate: function($fragment$$, $options$$) {
			if (!$History$$.started) return ! 1;
			if (!$options$$ || !0 === $options$$) $options$$ = {
				trigger: $options$$
			};
			var $frag$$ = ($fragment$$ || "").replace($routeStripper$$, "");
			this.fragment != $frag$$ && (this._hasPushState ? (0 != $frag$$.indexOf(this.options.root) && ($frag$$ = this.options.root + $frag$$), this.fragment = $frag$$, window.history[$options$$.replace ? "replaceState": "pushState"]({},
			document.title, $frag$$)) : this._wantsHashChange ? (this.fragment = $frag$$, this._updateHash(window.location,
			$frag$$, $options$$.replace), this.iframe && $frag$$ != this.getFragment(this.getHash(this.iframe)) && ($options$$.replace || this.iframe.document.open().close(), this._updateHash(this.iframe.location, $frag$$, $options$$.replace))) : window.location.assign(this.options.root + $fragment$$), $options$$.trigger && this.loadUrl($fragment$$))
		},
		_updateHash: function($location$$, $fragment$$, $replace$$) {
			$replace$$ ? $location$$.replace($location$$.toString().replace(/(javascript:|#).*$/, "") + "#" + $fragment$$) : $location$$.hash = $fragment$$
		}
	});
	var $View$$ = $Backbone$$.View = function $$Backbone$$$View$($options$$) {
		this.cid = $_$$.uniqueId("view");
		this._configure($options$$ || {});
		this._ensureElement();
		this.initialize.apply(this, arguments);
		this.delegateEvents()
	},
	$delegateEventSplitter$$ = /^(\S+)\s*(.*)$/,
	$viewOptions$$ = "model collection el id attributes className tagName".split(" ");
	$_$$.extend($View$$.prototype, $Events$$, {
		tagName: "div",
		$: function($selector$$) {
			return this.$el.find($selector$$)
		},
		initialize: function() {},
		render: function() {
			return this
		},
		remove: function() {
			this.$el.remove();
			return this
		},
		make: function($el$$2_tagName$$, $attributes$$, $content$$) {
			$el$$2_tagName$$ = document.createElement($el$$2_tagName$$);
			$attributes$$ && $$$$($el$$2_tagName$$).attr($attributes$$);
			$content$$ && $$$$($el$$2_tagName$$).html($content$$);
			return $el$$2_tagName$$
		},
		setElement: function($element$$, $delegate$$) {
			this.$el && this.undelegateEvents();
			this.$el = $element$$ instanceof $$$$ ? $element$$: $$$$($element$$);
			this.el = this.$el[0]; ! 1 !== $delegate$$ && this.delegateEvents();
			return this
		},
		delegateEvents: function($events$$) {
			if ($events$$ || ($events$$ = $getValue$$(this, "events"))) {
				this.undelegateEvents();
				for (var $key$$ in $events$$) {
					var $method$$ = $events$$[$key$$];
					$_$$.isFunction($method$$) || ($method$$ = this[$events$$[$key$$]]);
					if (!$method$$) throw Error('Method "' + $events$$[$key$$] + '" does not exist');
					var $match$$8_selector$$ = $key$$.match($delegateEventSplitter$$),
					$eventName$$ = $match$$8_selector$$[1],
					$match$$8_selector$$ = $match$$8_selector$$[2],
					$method$$ = $_$$.bind($method$$,
					this),
					$eventName$$ = $eventName$$ + (".delegateEvents" + this.cid);
					"" === $match$$8_selector$$ ? this.$el.bind($eventName$$, $method$$) : this.$el.delegate($match$$8_selector$$, $eventName$$, $method$$)
				}
			}
		},
		undelegateEvents: function() {
			this.$el.unbind(".delegateEvents" + this.cid)
		},
		_configure: function($options$$) {
			this.options && ($options$$ = $_$$.extend({},
			this.options, $options$$));
			for (var $i$$ = 0, $l$$ = $viewOptions$$.length; $i$$ < $l$$; $i$$++) {
				var $attr$$ = $viewOptions$$[$i$$];
				$options$$[$attr$$] && (this[$attr$$] = $options$$[$attr$$])
			}
			this.options =
			$options$$
		},
		_ensureElement: function() {
			if (this.el) this.setElement(this.el, !1);
			else {
				var $attrs$$ = $getValue$$(this, "attributes") || {};
				this.id && ($attrs$$.id = this.id);
				this.className && ($attrs$$["class"] = this.className);
				this.setElement(this.make(this.tagName, $attrs$$), !1)
			}
		}
	});
	$Model$$.extend = $Collection$$.extend = $Router$$.extend = $View$$.extend = function $$View$$$extend$($protoProps$$, $classProps$$) {
		var $parent$$ = this,
		$child$$;
		$child$$ = $protoProps$$ && $protoProps$$.hasOwnProperty("constructor") ? $protoProps$$.constructor:
		function() {
			$parent$$.apply(this, arguments)
		};
		$_$$.extend($child$$, $parent$$);
		$ctor$$.prototype = $parent$$.prototype;
		$child$$.prototype = new $ctor$$;
		$protoProps$$ && $_$$.extend($child$$.prototype, $protoProps$$);
		$classProps$$ && $_$$.extend($child$$, $classProps$$);
		$child$$.prototype.constructor = $child$$;
		$child$$.__super__ = $parent$$.prototype;
		$child$$.extend = this.extend;
		return $child$$
	};
	var $methodMap$$ = {
		create: "POST",
		update: "PUT",
		"delete": "DELETE",
		read: "GET"
	};
	$Backbone$$.sync = function $$Backbone$$$sync$($method$$,
	$model$$, $options$$) {
		var $type$$ = $methodMap$$[$method$$];
		$options$$ || ($options$$ = {});
		var $params$$ = {
			type: $type$$,
			dataType: "json"
		};
		$options$$.url || ($params$$.url = $getValue$$($model$$, "url") || $urlError$$());
		if (!$options$$.data && $model$$ && ("create" == $method$$ || "update" == $method$$)) $params$$.contentType = "application/json",
		$params$$.data = JSON.stringify($model$$.toJSON());
		$Backbone$$.emulateJSON && ($params$$.contentType = "application/x-www-form-urlencoded", $params$$.data = $params$$.data ? {
			model: $params$$.data
		}:
		{});
		if ($Backbone$$.emulateHTTP && ("PUT" === $type$$ || "DELETE" === $type$$)) $Backbone$$.emulateJSON && ($params$$.data._method = $type$$),
		$params$$.type = "POST",
		$params$$.beforeSend = function $$params$$$beforeSend$($xhr$$) {
			$xhr$$.setRequestHeader("X-HTTP-Method-Override", $type$$)
		};
		"GET" !== $params$$.type && !$Backbone$$.emulateJSON && ($params$$.processData = !1);
		return $$$$.ajax($_$$.extend($params$$, $options$$))
	};
	$Backbone$$.wrapError = function $$Backbone$$$wrapError$($onError$$, $originalModel$$, $options$$) {
		return function($model$$,
		$resp$$) {
			$resp$$ = $model$$ === $originalModel$$ ? $resp$$: $model$$;
			$onError$$ ? $onError$$($originalModel$$, $resp$$, $options$$) : $originalModel$$.trigger("error", $originalModel$$, $resp$$, $options$$)
		}
	};
	var $ctor$$ = function $$ctor$$$() {},
	$getValue$$ = function $$getValue$$$($object$$, $prop$$) {
		return ! $object$$ || !$object$$[$prop$$] ? null: $_$$.isFunction($object$$[$prop$$]) ? $object$$[$prop$$]() : $object$$[$prop$$]
	},
	$urlError$$ = function $$urlError$$$() {
		throw Error('A "url" property or function must be specified');

	}
}).call(this);
var swfobject = function() {
	function $f$$() {
		if (!$J$$) {
			try {
				var $X_Z$$ = $j$$.getElementsByTagName("body")[0].appendChild($j$$.createElement("span"));
				$X_Z$$.parentNode.removeChild($X_Z$$)
			} catch($aa$$) {
				return
			}
			$J$$ = !0;
			for (var $X_Z$$ = $U$$.length, $Y$$ = 0; $Y$$ < $X_Z$$; $Y$$++) $U$$[$Y$$]()
		}
	}
	function $K$$($X$$) {
		$J$$ ? $X$$() : $U$$[$U$$.length] = $X$$
	}
	function $s$$($Y$$) {
		if (typeof $O$$.addEventListener != $D$$) $O$$.addEventListener("load", $Y$$, !1);
		else if (typeof $j$$.addEventListener != $D$$) $j$$.addEventListener("load", $Y$$,
		!1);
		else if (typeof $O$$.attachEvent != $D$$) {
			var $Z$$ = $O$$;
			$Z$$.attachEvent("onload", $Y$$);
			$I$$[$I$$.length] = [$Z$$, "onload", $Y$$]
		} else if ("function" == typeof $O$$.onload) {
			var $X$$ = $O$$.onload;
			$O$$.onload = function $$O$$$onload$() {
				$X$$();
				$Y$$()
			}
		} else $O$$.onload = $Y$$
	}
	function $H$$() {
		var $ag$$ = $o$$.length;
		if (0 < $ag$$) for (var $af$$ = 0; $af$$ < $ag$$; $af$$++) {
			var $Y$$3_Z$$ = $o$$[$af$$].id,
			$ab$$ = $o$$[$af$$].callbackFn,
			$aa$$ = {
				success: !1,
				id: $Y$$3_Z$$
			};
			if (0 < $M$$.pv[0]) {
				var $X$$ = $c$$($Y$$3_Z$$);
				if ($X$$) if ($F$$($o$$[$af$$].swfVersion) &&
				!($M$$.wk && 312 > $M$$.wk)) $w$$($Y$$3_Z$$, !0),
				$ab$$ && ($aa$$.success = !0, $aa$$.ref = $z$$($Y$$3_Z$$), $ab$$($aa$$));
				else if ($o$$[$af$$].expressInstall && $A$$()) {
					$aa$$ = {};
					$aa$$.data = $o$$[$af$$].expressInstall;
					$aa$$.width = $X$$.getAttribute("width") || "0";
					$aa$$.height = $X$$.getAttribute("height") || "0";
					$X$$.getAttribute("class") && ($aa$$.styleclass = $X$$.getAttribute("class"));
					$X$$.getAttribute("align") && ($aa$$.align = $X$$.getAttribute("align"));
					for (var $ah$$ = {},
					$X$$ = $X$$.getElementsByTagName("param"), $ac$$ = $X$$.length,
					$ad$$ = 0; $ad$$ < $ac$$; $ad$$++)"movie" != $X$$[$ad$$].getAttribute("name").toLowerCase() && ($ah$$[$X$$[$ad$$].getAttribute("name")] = $X$$[$ad$$].getAttribute("value"));
					$P$$($aa$$, $ah$$, $Y$$3_Z$$, $ab$$)
				} else $p$$($X$$),
				$ab$$ && $ab$$($aa$$)
			} else if ($w$$($Y$$3_Z$$, !0), $ab$$) {
				if (($Y$$3_Z$$ = $z$$($Y$$3_Z$$)) && typeof $Y$$3_Z$$.SetVariable != $D$$) $aa$$.success = !0,
				$aa$$.ref = $Y$$3_Z$$;
				$ab$$($aa$$)
			}
		}
	}
	function $z$$($Y$$4_Z$$3_aa$$) {
		var $X$$ = null;
		if (($Y$$4_Z$$3_aa$$ = $c$$($Y$$4_Z$$3_aa$$)) && "OBJECT" == $Y$$4_Z$$3_aa$$.nodeName) typeof $Y$$4_Z$$3_aa$$.SetVariable !=
		$D$$ ? $X$$ = $Y$$4_Z$$3_aa$$: ($Y$$4_Z$$3_aa$$ = $Y$$4_Z$$3_aa$$.getElementsByTagName($r$$)[0]) && ($X$$ = $Y$$4_Z$$3_aa$$);
		return $X$$
	}
	function $A$$() {
		return ! $a$$ && $F$$("6.0.65") && ($M$$.win || $M$$.mac) && !($M$$.wk && 312 > $M$$.wk)
	}
	function $P$$($aa$$, $ab$$, $X$$, $Y$$5_Z$$4_ac$$1_ad$$) {
		$a$$ = !0;
		$E$$ = $Y$$5_Z$$4_ac$$1_ad$$ || null;
		$B$$ = {
			success: !1,
			id: $X$$
		};
		var $ae$$ = $c$$($X$$);
		if ($ae$$) {
			"OBJECT" == $ae$$.nodeName ? ($l$$ = $g$$($ae$$), $Q$$ = null) : ($l$$ = $ae$$, $Q$$ = $X$$);
			$aa$$.id = $R$$;
			if (typeof $aa$$.width == $D$$ || !/%$/.test($aa$$.width) &&
			310 > parseInt($aa$$.width, 10)) $aa$$.width = "310";
			if (typeof $aa$$.height == $D$$ || !/%$/.test($aa$$.height) && 137 > parseInt($aa$$.height, 10)) $aa$$.height = "137";
			$j$$.title = $j$$.title.slice(0, 47) + " - Flash Player Installation";
			$Y$$5_Z$$4_ac$$1_ad$$ = $M$$.ie && $M$$.win ? "ActiveX": "PlugIn";
			$Y$$5_Z$$4_ac$$1_ad$$ = "MMredirectURL=" + $O$$.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + $Y$$5_Z$$4_ac$$1_ad$$ + "&MMdoctitle=" + $j$$.title;
			$ab$$.flashvars = typeof $ab$$.flashvars != $D$$ ? $ab$$.flashvars + ("&" + $Y$$5_Z$$4_ac$$1_ad$$) :
			$Y$$5_Z$$4_ac$$1_ad$$;
			$M$$.ie && ($M$$.win && 4 != $ae$$.readyState) && ($Y$$5_Z$$4_ac$$1_ad$$ = $j$$.createElement("div"), $X$$ += "SWFObjectNew", $Y$$5_Z$$4_ac$$1_ad$$.setAttribute("id", $X$$), $ae$$.parentNode.insertBefore($Y$$5_Z$$4_ac$$1_ad$$, $ae$$), $ae$$.style.display = "none",
			function() {
				$ae$$.readyState == 4 ? $ae$$.parentNode.removeChild($ae$$) : setTimeout(arguments.callee, 10)
			} ());
			$u$$($aa$$, $ab$$, $X$$)
		}
	}
	function $p$$($Y$$) {
		if ($M$$.ie && $M$$.win && 4 != $Y$$.readyState) {
			var $X$$ = $j$$.createElement("div");
			$Y$$.parentNode.insertBefore($X$$,
			$Y$$);
			$X$$.parentNode.replaceChild($g$$($Y$$), $X$$);
			$Y$$.style.display = "none"; (function() {
				4 == $Y$$.readyState ? $Y$$.parentNode.removeChild($Y$$) : setTimeout(arguments.callee, 10)
			})()
		} else $Y$$.parentNode.replaceChild($g$$($Y$$), $Y$$)
	}
	function $g$$($Y$$7_ab$$3_ad$$) {
		var $aa$$ = $j$$.createElement("div");
		if ($M$$.win && $M$$.ie) $aa$$.innerHTML = $Y$$7_ab$$3_ad$$.innerHTML;
		else if ($Y$$7_ab$$3_ad$$ = $Y$$7_ab$$3_ad$$.getElementsByTagName($r$$)[0]) if ($Y$$7_ab$$3_ad$$ = $Y$$7_ab$$3_ad$$.childNodes) for (var $X$$ = $Y$$7_ab$$3_ad$$.length,
		$Z$$ = 0; $Z$$ < $X$$; $Z$$++) ! (1 == $Y$$7_ab$$3_ad$$[$Z$$].nodeType && "PARAM" == $Y$$7_ab$$3_ad$$[$Z$$].nodeName) && 8 != $Y$$7_ab$$3_ad$$[$Z$$].nodeType && $aa$$.appendChild($Y$$7_ab$$3_ad$$[$Z$$].cloneNode(!0));
		return $aa$$
	}
	function $u$$($Z$$inline_35_ai$$, $ag$$, $Y$$8_aa$$) {
		var $X$$,
		$aa$$ = $c$$($Y$$8_aa$$);
		if ($M$$.wk && 312 > $M$$.wk) return $X$$;
		if ($aa$$) if (typeof $Z$$inline_35_ai$$.id == $D$$ && ($Z$$inline_35_ai$$.id = $Y$$8_aa$$), $M$$.ie && $M$$.win) {
			var $ab$$4_ah$$ = "",
			$X$$inline_36_ae$$2_af$$;
			for ($X$$inline_36_ae$$2_af$$ in $Z$$inline_35_ai$$) $Z$$inline_35_ai$$[$X$$inline_36_ae$$2_af$$] !=
			Object.prototype[$X$$inline_36_ae$$2_af$$] && ("data" == $X$$inline_36_ae$$2_af$$.toLowerCase() ? $ag$$.movie = $Z$$inline_35_ai$$[$X$$inline_36_ae$$2_af$$] : "styleclass" == $X$$inline_36_ae$$2_af$$.toLowerCase() ? $ab$$4_ah$$ += ' class="' + $Z$$inline_35_ai$$[$X$$inline_36_ae$$2_af$$] + '"': "classid" != $X$$inline_36_ae$$2_af$$.toLowerCase() && ($ab$$4_ah$$ += " " + $X$$inline_36_ae$$2_af$$ + '="' + $Z$$inline_35_ai$$[$X$$inline_36_ae$$2_af$$] + '"'));
			$X$$inline_36_ae$$2_af$$ = "";
			for (var $Z$$6_ad$$ in $ag$$) $ag$$[$Z$$6_ad$$] != Object.prototype[$Z$$6_ad$$] &&
			($X$$inline_36_ae$$2_af$$ += '<param name="' + $Z$$6_ad$$ + '" value="' + $ag$$[$Z$$6_ad$$] + '" />');
			$aa$$.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + $ab$$4_ah$$ + ">" + $X$$inline_36_ae$$2_af$$ + "</object>";
			$N$$[$N$$.length] = $Z$$inline_35_ai$$.id;
			$X$$ = $c$$($Z$$inline_35_ai$$.id)
		} else {
			$Z$$6_ad$$ = $j$$.createElement($r$$);
			$Z$$6_ad$$.setAttribute("type", $q$$);
			for (var $Y$$inline_37_ac$$ in $Z$$inline_35_ai$$) $Z$$inline_35_ai$$[$Y$$inline_37_ac$$] != Object.prototype[$Y$$inline_37_ac$$] &&
			("styleclass" == $Y$$inline_37_ac$$.toLowerCase() ? $Z$$6_ad$$.setAttribute("class", $Z$$inline_35_ai$$[$Y$$inline_37_ac$$]) : "classid" != $Y$$inline_37_ac$$.toLowerCase() && $Z$$6_ad$$.setAttribute($Y$$inline_37_ac$$, $Z$$inline_35_ai$$[$Y$$inline_37_ac$$]));
			for ($ab$$4_ah$$ in $ag$$) $ag$$[$ab$$4_ah$$] != Object.prototype[$ab$$4_ah$$] && "movie" != $ab$$4_ah$$.toLowerCase() && ($Z$$inline_35_ai$$ = $Z$$6_ad$$, $X$$inline_36_ae$$2_af$$ = $ab$$4_ah$$, $Y$$inline_37_ac$$ = $ag$$[$ab$$4_ah$$], $Y$$8_aa$$ = $j$$.createElement("param"),
			$Y$$8_aa$$.setAttribute("name", $X$$inline_36_ae$$2_af$$), $Y$$8_aa$$.setAttribute("value", $Y$$inline_37_ac$$), $Z$$inline_35_ai$$.appendChild($Y$$8_aa$$));
			$aa$$.parentNode.replaceChild($Z$$6_ad$$, $aa$$);
			$X$$ = $Z$$6_ad$$
		}
		return $X$$
	}
	function $y$$($Y$$0$$) {
		var $X$$0$$ = $c$$($Y$$0$$);
		$X$$0$$ && "OBJECT" == $X$$0$$.nodeName && ($M$$.ie && $M$$.win ? ($X$$0$$.style.display = "none",
		function() {
			if (4 == $X$$0$$.readyState) {
				var $Y$$ = $c$$($Y$$0$$);
				if ($Y$$) {
					for (var $X$$ in $Y$$)"function" == typeof $Y$$[$X$$] && ($Y$$[$X$$] = null);
					$Y$$.parentNode.removeChild($Y$$)
				}
			} else setTimeout(arguments.callee, 10)
		} ()) : $X$$0$$.parentNode.removeChild($X$$0$$))
	}
	function $c$$($Z$$) {
		var $X$$ = null;
		try {
			$X$$ = $j$$.getElementById($Z$$)
		} catch($Y$$) {}
		return $X$$
	}
	function $F$$($X$$16_Z$$) {
		var $Y$$ = $M$$.pv,
		$X$$16_Z$$ = $X$$16_Z$$.split(".");
		$X$$16_Z$$[0] = parseInt($X$$16_Z$$[0], 10);
		$X$$16_Z$$[1] = parseInt($X$$16_Z$$[1], 10) || 0;
		$X$$16_Z$$[2] = parseInt($X$$16_Z$$[2], 10) || 0;
		return $Y$$[0] > $X$$16_Z$$[0] || $Y$$[0] == $X$$16_Z$$[0] && $Y$$[1] > $X$$16_Z$$[1] || $Y$$[0] ==
		$X$$16_Z$$[0] && $Y$$[1] == $X$$16_Z$$[1] && $Y$$[2] >= $X$$16_Z$$[2] ? !0: !1
	}
	function $v$$($ac$$, $Y$$, $X$$17_ad$$, $Z$$12_ab$$) {
		if (!$M$$.ie || !$M$$.mac) {
			var $aa$$ = $j$$.getElementsByTagName("head")[0];
			if ($aa$$) {
				$X$$17_ad$$ = $X$$17_ad$$ && "string" == typeof $X$$17_ad$$ ? $X$$17_ad$$: "screen";
				$Z$$12_ab$$ && ($G$$ = $n$$ = null);
				if (!$n$$ || $G$$ != $X$$17_ad$$) $Z$$12_ab$$ = $j$$.createElement("style"),
				$Z$$12_ab$$.setAttribute("type", "text/css"),
				$Z$$12_ab$$.setAttribute("media", $X$$17_ad$$),
				$n$$ = $aa$$.appendChild($Z$$12_ab$$),
				$M$$.ie &&
				($M$$.win && typeof $j$$.styleSheets != $D$$ && 0 < $j$$.styleSheets.length) && ($n$$ = $j$$.styleSheets[$j$$.styleSheets.length - 1]),
				$G$$ = $X$$17_ad$$;
				$M$$.ie && $M$$.win ? $n$$ && typeof $n$$.addRule == $r$$ && $n$$.addRule($ac$$, $Y$$) : $n$$ && typeof $j$$.createTextNode != $D$$ && $n$$.appendChild($j$$.createTextNode($ac$$ + " {" + $Y$$ + "}"))
			}
		}
	}
	function $w$$($Z$$, $X$$) {
		if ($m$$) {
			var $Y$$ = $X$$ ? "visible": "hidden";
			$J$$ && $c$$($Z$$) ? $c$$($Z$$).style.visibility = $Y$$: $v$$("#" + $Z$$, "visibility:" + $Y$$)
		}
	}
	function $L$$($Y$$) {
		return null != /[\\\"<>\.;]/.exec($Y$$) &&
		typeof encodeURIComponent != $D$$ ? encodeURIComponent($Y$$) : $Y$$
	}
	var $D$$ = "undefined",
	$r$$ = "object",
	$q$$ = "application/x-shockwave-flash",
	$R$$ = "SWFObjectExprInst",
	$O$$ = window,
	$j$$ = document,
	$t$$ = navigator,
	$T$$ = !1,
	$U$$ = [function h() {
		if ($T$$) {
			var $X$$ = $j$$.getElementsByTagName("body")[0],
			$aa$$ = $j$$.createElement($r$$);
			$aa$$.setAttribute("type", $q$$);
			var $Z$$ = $X$$.appendChild($aa$$);
			if ($Z$$) {
				var $Y$$ = 0; (function() {
					if (typeof $Z$$.GetVariable != $D$$) {
						var $ab$$ = $Z$$.GetVariable("$version");
						$ab$$ && ($ab$$ = $ab$$.split(" ")[1].split(","),
						$M$$.pv = [parseInt($ab$$[0], 10), parseInt($ab$$[1], 10), parseInt($ab$$[2], 10)])
					} else if (10 > $Y$$) {
						$Y$$++;
						setTimeout(arguments.callee, 10);
						return
					}
					$X$$.removeChild($aa$$);
					$Z$$ = null;
					$H$$()
				})()
			} else $H$$()
		} else $H$$()
	}],
	$o$$ = [],
	$N$$ = [],
	$I$$ = [],
	$l$$,
	$Q$$,
	$E$$,
	$B$$,
	$J$$ = !1,
	$a$$ = !1,
	$n$$,
	$G$$,
	$m$$ = !0,
	$M$$,
	$aa$$0$$ = typeof $j$$.getElementById != $D$$ && typeof $j$$.getElementsByTagName != $D$$ && typeof $j$$.createElement != $D$$,
	$af$$inline_49_ah$$ = $t$$.userAgent.toLowerCase(),
	$Y$$inline_46_ac$$ = $t$$.platform.toLowerCase(),
	$ae$$0$$ = $Y$$inline_46_ac$$ ? /win/.test($Y$$inline_46_ac$$) : /win/.test($af$$inline_49_ah$$),
	$Y$$inline_46_ac$$ = $Y$$inline_46_ac$$ ? /mac/.test($Y$$inline_46_ac$$) : /mac/.test($af$$inline_49_ah$$),
	$af$$inline_49_ah$$ = /webkit/.test($af$$inline_49_ah$$) ? parseFloat($af$$inline_49_ah$$.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : !1,
	$X$$1$$ = !+"\v1",
	$ag$$0$$ = [0, 0, 0],
	$ab$$0$$ = null;
	if (typeof $t$$.plugins != $D$$ && typeof $t$$.plugins["Shockwave Flash"] == $r$$) {
		if (($ab$$0$$ = $t$$.plugins["Shockwave Flash"].description) &&
		!(typeof $t$$.mimeTypes != $D$$ && $t$$.mimeTypes[$q$$] && !$t$$.mimeTypes[$q$$].enabledPlugin)) $T$$ = !0,
		$X$$1$$ = !1,
		$ab$$0$$ = $ab$$0$$.replace(/^.*\s+(\S+\s+\S+$)/, "$1"),
		$ag$$0$$[0] = parseInt($ab$$0$$.replace(/^(.*)\..*$/, "$1"), 10),
		$ag$$0$$[1] = parseInt($ab$$0$$.replace(/^.*\.(.*)\s.*$/, "$1"), 10),
		$ag$$0$$[2] = /[a-zA-Z]/.test($ab$$0$$) ? parseInt($ab$$0$$.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
	} else if (typeof $O$$.ActiveXObject != $D$$) try {
		var $ad$$0$$ = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
		if ($ad$$0$$ &&
		($ab$$0$$ = $ad$$0$$.GetVariable("$version"))) $X$$1$$ = !0,
		$ab$$0$$ = $ab$$0$$.split(" ")[1].split(","),
		$ag$$0$$ = [parseInt($ab$$0$$[0], 10), parseInt($ab$$0$$[1], 10), parseInt($ab$$0$$[2], 10)]
	} catch($Z$$0$$) {}
	$M$$ = {
		w3: $aa$$0$$,
		pv: $ag$$0$$,
		wk: $af$$inline_49_ah$$,
		ie: $X$$1$$,
		win: $ae$$0$$,
		mac: $Y$$inline_46_ac$$
	};
	$M$$.w3 && ((typeof $j$$.readyState != $D$$ && "complete" == $j$$.readyState || typeof $j$$.readyState == $D$$ && ($j$$.getElementsByTagName("body")[0] || $j$$.body)) && $f$$(), $J$$ || (typeof $j$$.addEventListener != $D$$ &&
	$j$$.addEventListener("DOMContentLoaded", $f$$, !1), $M$$.ie && $M$$.win && ($j$$.attachEvent("onreadystatechange",
	function() {
		"complete" == $j$$.readyState && ($j$$.detachEvent("onreadystatechange", arguments.callee), $f$$())
	}), $O$$ == top &&
	function() {
		if (!$J$$) {
			try {
				$j$$.documentElement.doScroll("left")
			} catch($X$$) {
				setTimeout(arguments.callee, 0);
				return
			}
			$f$$()
		}
	} ()), $M$$.wk &&
	function() {
		$J$$ || (/loaded|complete/.test($j$$.readyState) ? $f$$() : setTimeout(arguments.callee, 0))
	} (), $s$$($f$$)));
	$M$$.ie && $M$$.win && window.attachEvent("onunload",
	function() {
		for (var $Z$$inline_60_ac$$ = $I$$.length, $aa$$inline_61_ab$$ = 0; $aa$$inline_61_ab$$ < $Z$$inline_60_ac$$; $aa$$inline_61_ab$$++) $I$$[$aa$$inline_61_ab$$][0].detachEvent($I$$[$aa$$inline_61_ab$$][1], $I$$[$aa$$inline_61_ab$$][2]);
		$Z$$inline_60_ac$$ = $N$$.length;
		for ($aa$$inline_61_ab$$ = 0; $aa$$inline_61_ab$$ < $Z$$inline_60_ac$$; $aa$$inline_61_ab$$++) $y$$($N$$[$aa$$inline_61_ab$$]);
		for (var $Y$$ in $M$$) $M$$[$Y$$] = null;
		$M$$ = null;
		for (var $X$$ in swfobject) swfobject[$X$$] = null;
		swfobject = null
	});
	return {
		registerObject: function($ab$$,
		$X$$, $aa$$, $Z$$) {
			if ($M$$.w3 && $ab$$ && $X$$) {
				var $Y$$ = {};
				$Y$$.id = $ab$$;
				$Y$$.swfVersion = $X$$;
				$Y$$.expressInstall = $aa$$;
				$Y$$.callbackFn = $Z$$;
				$o$$[$o$$.length] = $Y$$;
				$w$$($ab$$, false)
			} else $Z$$ && $Z$$({
				success: false,
				id: $ab$$
			})
		},
		getObjectById: function($X$$) {
			if ($M$$.w3) return $z$$($X$$)
		},
		embedSWF: function($ab$$, $ah$$, $ae$$, $ag$$, $Y$$, $aa$$, $Z$$, $ad$$, $af$$, $ac$$) {
			var $X$$ = {
				success: false,
				id: $ah$$
			};
			if ($M$$.w3 && !($M$$.wk && $M$$.wk < 312) && $ab$$ && $ah$$ && $ae$$ && $ag$$ && $Y$$) {
				$w$$($ah$$, false);
				$K$$(function() {
					$ae$$ =
					$ae$$ + "";
					$ag$$ = $ag$$ + "";
					var $aj$$ = {};
					if ($af$$ && typeof $af$$ === $r$$) for (var $al_am$$ in $af$$) $aj$$[$al_am$$] = $af$$[$al_am$$];
					$aj$$.data = $ab$$;
					$aj$$.width = $ae$$;
					$aj$$.height = $ag$$;
					$al_am$$ = {};
					if ($ad$$ && typeof $ad$$ === $r$$) for (var $ak_an$$ in $ad$$) $al_am$$[$ak_an$$] = $ad$$[$ak_an$$];
					if ($Z$$ && typeof $Z$$ === $r$$) for (var $ai$$ in $Z$$) $al_am$$.flashvars = typeof $al_am$$.flashvars != $D$$ ? $al_am$$.flashvars + ("&" + $ai$$ + "=" + $Z$$[$ai$$]) : $ai$$ + "=" + $Z$$[$ai$$];
					if ($F$$($Y$$)) {
						$ak_an$$ = $u$$($aj$$, $al_am$$, $ah$$);
						$aj$$.id == $ah$$ && $w$$($ah$$, true);
						$X$$.success = true;
						$X$$.ref = $ak_an$$
					} else {
						if ($aa$$ && $A$$()) {
							$aj$$.data = $aa$$;
							$P$$($aj$$, $al_am$$, $ah$$, $ac$$);
							return
						}
						$w$$($ah$$, true)
					}
					$ac$$ && $ac$$($X$$)
				})
			} else $ac$$ && $ac$$($X$$)
		},
		switchOffAutoHideShow: function() {
			$m$$ = false
		},
		ua: $M$$,
		getFlashPlayerVersion: function() {
			return {
				major: $M$$.pv[0],
				minor: $M$$.pv[1],
				release: $M$$.pv[2]
			}
		},
		hasFlashPlayerVersion: $F$$,
		createSWF: function($Z$$, $Y$$, $X$$) {
			if ($M$$.w3) return $u$$($Z$$, $Y$$, $X$$)
		},
		showExpressInstall: function($Z$$, $aa$$,
		$X$$, $Y$$) {
			$M$$.w3 && $A$$() && $P$$($Z$$, $aa$$, $X$$, $Y$$)
		},
		removeSWF: function($X$$) {
			$M$$.w3 && $y$$($X$$)
		},
		createCSS: function($aa$$, $Z$$, $Y$$, $X$$) {
			$M$$.w3 && $v$$($aa$$, $Z$$, $Y$$, $X$$)
		},
		addDomLoadEvent: $K$$,
		addLoadEvent: $s$$,
		getQueryParamValue: function($aa$$) {
			var $Y$$25_Z$$ = $j$$.location.search || $j$$.location.hash;
			if ($Y$$25_Z$$) { / \ ? /.test($Y$$25_Z$$)&&($Y$$25_Z$$=$Y$$25_Z$$.split("?")[1]);if($aa$$==null)return $L$$($Y$$25_Z$$);for(var $Y$$25_Z$$=$Y$$25_Z$$.split("&"),$X$$=0;$X$$<$Y$$25_Z$$.length;$X$$++)if($Y$$25_Z$$[$X$$].substring(0,
$Y$$25_Z$$[$X$$].indexOf("="))==$aa$$)return $L$$($Y$$25_Z$$[$X$$].substring($Y$$25_Z$$[$X$$].indexOf("=")+1))}return""},expressInstallCallback:function(){if($a$$){var $X$$=$c$$($R$$);if($X$$&&$l$$){$X$$.parentNode.replaceChild($l$$,$X$$);if($Q$$){$w$$($Q$$,true);if($M$$.ie&&$M$$.win)$l$$.style.display="block"}$E$$&&$E$$($B$$)}$a$$=false}}}}();/ *

				jquery.layout 1.3.0 - Release Candidate 30.79
				 $Date: 2013 - 01 - 12 08: 00: 00(Sat, 12 Jan 2013) $
				 $Rev: 303007 $

				 Copyright(c) 2013 Kevin Dalman(http:
				//allpro.net)
				Based on work by Fabrizio Balliano(http:
				//www.fabrizioballiano.net)
				Dual licensed under the GPL(http:
				//www.gnu.org/licenses/gpl.html)
				and MIT(http:
				//www.opensource.org/licenses/mit-license.php) licenses.
				SEE: http:
				//layout.jquery-dev.net/LICENSE.txt
				Changelog: http:
				//layout.jquery-dev.net/changelog.cfm#1.3.0.rc30.79
				Docs: http:
				//layout.jquery-dev.net/documentation.html
				Tips: http:
				//layout.jquery-dev.net/tips.html
				Help: http:
				//groups.google.com/group/jquery-ui-layout
				*/
(function($$$$){var $min$$=Math.min,$max$$=Math.max,$round$$=Math.floor,$isStr$$=function $$isStr$$$($v$$){return"string"===$$$$.type($v$$)},$runPluginCallbacks$$=function $$runPluginCallbacks$$$($Instance$$,$a_fn$$){if($$$$.isArray($a_fn$$))for(var $i$$=0,$c$$=$a_fn$$.length;$i$$<$c$$;$i$$++){var $fn$$=$a_fn$$[$i$$];try{$isStr$$($fn$$)&&($fn$$=eval($fn$$)),$$$$.isFunction($fn$$)&&$fn$$($Instance$$)}catch($ex$$){}}};$$$$.layout={version:"1.3.rc30.79",revision:0.033007,browser:{},effects:{slide:{all:{duration:"fast"},
north:{direction:"up"},south:{direction:"down"},east:{direction:"right"},west:{direction:"left"}},drop:{all:{duration:"slow"},north:{direction:"up"},south:{direction:"down"},east:{direction:"right"},west:{direction:"left"}},scale:{all:{duration:"fast"}},blind:{},clip:{},explode:{},fade:{},fold:{},puff:{},size:{all:{easing:"swing"}}},config:{optionRootKeys:"effects panes north south west east center".split(" "),allPanes:["north","south","west","east","center"],borderPanes:["north","south","west","east"],
oppositeEdge:{north:"south",south:"north",east:"west",west:"east"},offscreenCSS:{left:"-99999px",right:"auto"},offscreenReset:"offscreenReset",hidden:{visibility:"hidden"},visible:{visibility:"visible"},resizers:{cssReq:{position:"absolute",padding:0,margin:0,fontSize:"1px",textAlign:"left",overflow:"hidden"},cssDemo:{background:"#DDD",border:"none"}},togglers:{cssReq:{position:"absolute",display:"block",padding:0,margin:0,overflow:"hidden",textAlign:"center",fontSize:"1px",cursor:"pointer",zIndex:1},
cssDemo:{background:"#AAA"}},content:{cssReq:{position:"relative"},cssDemo:{overflow:"auto",padding:"10px"},cssDemoPane:{overflow:"hidden",padding:0}},panes:{cssReq:{position:"absolute",margin:0},cssDemo:{padding:"10px",background:"#FFF",border:"1px solid #BBB",overflow:"auto"}},north:{side:"top",sizeType:"Height",dir:"horz",cssReq:{top:0,bottom:"auto",left:0,right:0,width:"auto"}},south:{side:"bottom",sizeType:"Height",dir:"horz",cssReq:{top:"auto",bottom:0,left:0,right:0,width:"auto"}},east:{side:"right",
sizeType:"Width",dir:"vert",cssReq:{left:"auto",right:0,top:"auto",bottom:"auto",height:"auto"}},west:{side:"left",sizeType:"Width",dir:"vert",cssReq:{left:0,right:"auto",top:"auto",bottom:"auto",height:"auto"}},center:{dir:"center",cssReq:{left:"auto",right:"auto",top:"auto",bottom:"auto",height:"auto",width:"auto"}}},callbacks:{},getParentPaneElem:function $$$$$$layout$getParentPaneElem$($$cont_$el_$pane_el$$){$$cont_$el_$pane_el$$=$$$$($$cont_$el_$pane_el$$);if($$cont_$el_$pane_el$$=$$cont_$el_$pane_el$$.data("layout")||
$$cont_$el_$pane_el$$.data("parentLayout")){$$cont_$el_$pane_el$$=$$cont_$el_$pane_el$$.container;if($$cont_$el_$pane_el$$.data("layoutPane"))return $$cont_$el_$pane_el$$;$$cont_$el_$pane_el$$=$$cont_$el_$pane_el$$.closest("."+$$$$.layout.defaults.panes.paneClass);if($$cont_$el_$pane_el$$.data("layoutPane"))return $$cont_$el_$pane_el$$}return null},getParentPaneInstance:function $$$$$$layout$getParentPaneInstance$($$pane$$1_el$$){return($$pane$$1_el$$=$$$$.layout.getParentPaneElem($$pane$$1_el$$))?
$$pane$$1_el$$.data("layoutPane"):null},getParentLayoutInstance:function $$$$$$layout$getParentLayoutInstance$($$pane$$2_el$$){return($$pane$$2_el$$=$$$$.layout.getParentPaneElem($$pane$$2_el$$))?$$pane$$2_el$$.data("parentLayout"):null},getEventObject:function $$$$$$layout$getEventObject$($evt$$){return"object"===typeof $evt$$&&$evt$$.stopPropagation?$evt$$:null},parsePaneName:function $$$$$$layout$parsePaneName$($evt_or_pane_pane$$){var $evt$$=$$$$.layout.getEventObject($evt_or_pane_pane$$);$evt$$&&
($evt$$.stopPropagation(),$evt_or_pane_pane$$=$$$$(this).data("layoutEdge"));$evt_or_pane_pane$$&&!/ ^ (west | east | north | south | center) $ / .test($evt_or_pane_pane$$) && ($$$$.layout.msg('LAYOUT ERROR - Invalid pane-name: "' + $evt_or_pane_pane$$ + '"'), $evt_or_pane_pane$$ = "error");
				return $evt_or_pane_pane$$
			},
			plugins: {
				draggable: !!$$$$.fn.draggable,
				effects: {
					core: !!$$$$.effects,
					slide: $$$$.effects && ($$$$.effects.slide || $$$$.effects.effect && $$$$.effects.effect.slide)
				}
			},
			onCreate: [], onLoad: [], onReady: [], onDestroy: [],
			onUnload: [], afterOpen: [], afterClose: [], scrollbarWidth: function $$$$$$layout$scrollbarWidth$() {
				return window.scrollbarWidth || $$$$.layout.getScrollbarSize("width")
			},
			scrollbarHeight: function $$$$$$layout$scrollbarHeight$() {
				return window.scrollbarHeight || $$$$.layout.getScrollbarSize("height")
			},
			getScrollbarSize: function $$$$$$layout$getScrollbarSize$($dim$$) {
				var $$c$$ = $$$$('<div style="position: absolute; top: -10000px; left: -10000px; width: 100px; height: 100px; overflow: scroll;"></div>').appendTo("body"),
				$d$$ = {
					width: $$c$$.css("width") - $$c$$[0].clientWidth,
					height: $$c$$.height() - $$c$$[0].clientHeight
				};
				$$c$$.remove();
				window.scrollbarWidth = $d$$.width;
				window.scrollbarHeight = $d$$.height;
				return $dim$$.match(/^(width|height)$/) ? $d$$[$dim$$] : $d$$
			},
			showInvisibly: function $$$$$$layout$showInvisibly$($$E$$, $force$$) {
				if ($$E$$ && $$E$$.length && ($force$$ || "none" === $$E$$.css("display"))) {
					var $CSS_s$$ = $$E$$[0].style,
					$CSS_s$$ = {
						display: $CSS_s$$.display || "",
						visibility: $CSS_s$$.visibility || ""
					};
					$$E$$.css({
						display: "block",
						visibility: "hidden"
					});
					return $CSS_s$$
				}
				return {}
			},
			getElementDimensions: function $$$$$$layout$getElementDimensions$($$E$$, $inset$$) {
				var $d$$ = {
					css: {},
					inset: {}
				},
				$x$$ = $d$$.css,
				$i$$ = {
					bottom: 0
				},
				$N$$ = $$$$.layout.cssNum,
				$off$$ = $$E$$.offset(),
				$b$$,
				$p$$,
				$ei$$;
				$d$$.offsetLeft = $off$$.left;
				$d$$.offsetTop = $off$$.top;
				$inset$$ || ($inset$$ = {});
				$$$$.each(["Left", "Right", "Top", "Bottom"],
				function($idx$$, $e$$) {
					$b$$ = $x$$["border" + $e$$] = $$$$.layout.borderWidth($$E$$, $e$$);
					$p$$ = $x$$["padding" + $e$$] = $$$$.layout.cssNum($$E$$,
					"padding" + $e$$);
					$ei$$ = $e$$.toLowerCase();
					$d$$.inset[$ei$$] = 0 <= $inset$$[$ei$$] ? $inset$$[$ei$$] : $p$$;
					$i$$[$ei$$] = $d$$.inset[$ei$$] + $b$$
				});
				$x$$.width = $$E$$.width();
				$x$$.height = $$E$$.height();
				$x$$.top = $N$$($$E$$, "top", !0);
				$x$$.bottom = $N$$($$E$$, "bottom", !0);
				$x$$.left = $N$$($$E$$, "left", !0);
				$x$$.right = $N$$($$E$$, "right", !0);
				$d$$.outerWidth = $$E$$.outerWidth();
				$d$$.outerHeight = $$E$$.outerHeight();
				$d$$.innerWidth = $max$$(0, $d$$.outerWidth - $i$$.left - $i$$.right);
				$d$$.innerHeight = $max$$(0, $d$$.outerHeight - $i$$.top -
				$i$$.bottom);
				$d$$.layoutWidth = $$E$$.innerWidth();
				$d$$.layoutHeight = $$E$$.innerHeight();
				return $d$$
			},
			getElementStyles: function $$$$$$layout$getElementStyles$($$E$$, $list$$) {
				var $CSS$$ = {},
				$style$$ = $$E$$[0].style,
				$props$$ = $list$$.split(","),
				$sides$$ = ["Top", "Bottom", "Left", "Right"],
				$attrs$$ = ["Color", "Style", "Width"],
				$p$$,
				$s$$,
				$a$$,
				$i$$,
				$j$$,
				$k$$;
				for ($i$$ = 0; $i$$ < $props$$.length; $i$$++) if ($p$$ = $props$$[$i$$], $p$$.match(/(border|padding|margin)$/)) for ($j$$ = 0; 4 > $j$$; $j$$++) if ($s$$ = $sides$$[$j$$], "border" ===
				$p$$) for ($k$$ = 0; 3 > $k$$; $k$$++) $a$$ = $attrs$$[$k$$],
				$CSS$$[$p$$ + $s$$ + $a$$] = $style$$[$p$$ + $s$$ + $a$$];
				else $CSS$$[$p$$ + $s$$] = $style$$[$p$$ + $s$$];
				else $CSS$$[$p$$] = $style$$[$p$$];
				return $CSS$$
			},
			cssWidth: function $$$$$$layout$cssWidth$($$E$$, $outerWidth$$) {
				if (0 >= $outerWidth$$) return 0;
				var $bs$$ = !$$$$.layout.browser.boxModel ? "border-box": $$$$.support.boxSizing ? $$E$$.css("boxSizing") : "content-box",
				$b$$ = $$$$.layout.borderWidth,
				$n$$ = $$$$.layout.cssNum,
				$W$$ = $outerWidth$$;
				"border-box" !== $bs$$ && ($W$$ -= $b$$($$E$$,
				"Left") + $b$$($$E$$, "Right"));
				"content-box" === $bs$$ && ($W$$ -= $n$$($$E$$, "paddingLeft") + $n$$($$E$$, "paddingRight"));
				return $max$$(0, $W$$)
			},
			cssHeight: function $$$$$$layout$cssHeight$($$E$$, $outerHeight$$) {
				if (0 >= $outerHeight$$) return 0;
				var $bs$$ = !$$$$.layout.browser.boxModel ? "border-box": $$$$.support.boxSizing ? $$E$$.css("boxSizing") : "content-box",
				$b$$ = $$$$.layout.borderWidth,
				$n$$ = $$$$.layout.cssNum,
				$H$$ = $outerHeight$$;
				"border-box" !== $bs$$ && ($H$$ -= $b$$($$E$$, "Top") + $b$$($$E$$, "Bottom"));
				"content-box" ===
				$bs$$ && ($H$$ -= $n$$($$E$$, "paddingTop") + $n$$($$E$$, "paddingBottom"));
				return $max$$(0, $H$$)
			},
			cssNum: function $$$$$$layout$cssNum$($$E$$, $p$$6_prop$$, $allowAuto_v$$) {
				$$E$$.jquery || ($$E$$ = $$$$($$E$$));
				var $CSS$$ = $$$$.layout.showInvisibly($$E$$),
				$p$$6_prop$$ = $$$$.css($$E$$[0], $p$$6_prop$$, !0),
				$allowAuto_v$$ = $allowAuto_v$$ && "auto" == $p$$6_prop$$ ? $p$$6_prop$$: Math.round(parseFloat($p$$6_prop$$) || 0);
				$$E$$.css($CSS$$);
				return $allowAuto_v$$
			},
			borderWidth: function $$$$$$layout$borderWidth$($el$$, $side$$) {
				$el$$.jquery &&
				($el$$ = $el$$[0]);
				var $b$$ = "border" + $side$$.substr(0, 1).toUpperCase() + $side$$.substr(1);
				return "none" === $$$$.css($el$$, $b$$ + "Style", !0) ? 0: Math.round(parseFloat($$$$.css($el$$, $b$$ + "Width", !0)) || 0)
			},
			isMouseOverElem: function $$$$$$layout$isMouseOverElem$($evt$$, $el$$) {
				var $$E$$6_B$$ = $$$$($el$$ || this),
				$L$$1_d$$ = $$E$$6_B$$.offset(),
				$T$$ = $L$$1_d$$.top,
				$L$$1_d$$ = $L$$1_d$$.left,
				$R$$ = $L$$1_d$$ + $$E$$6_B$$.outerWidth(),
				$$E$$6_B$$ = $T$$ + $$E$$6_B$$.outerHeight(),
				$x$$ = $evt$$.pageX,
				$y$$ = $evt$$.pageY;
				return $$$$.layout.browser.msie &&
				0 > $x$$ && 0 > $y$$ || $x$$ >= $L$$1_d$$ && $x$$ <= $R$$ && $y$$ >= $T$$ && $y$$ <= $$E$$6_B$$
			},
			msg: function $$$$$$layout$msg$($info$$, $$e$$, $debugTitle_t$$, $debugOpts_o$$) {
				$$$$.isPlainObject($info$$) && window.debugData ? ("string" === typeof $$e$$ ? ($debugOpts_o$$ = $debugTitle_t$$, $debugTitle_t$$ = $$e$$) : "object" === typeof $debugTitle_t$$ && ($debugOpts_o$$ = $debugTitle_t$$, $debugTitle_t$$ = null), $debugTitle_t$$ = $debugTitle_t$$ || "log( <object> )", $debugOpts_o$$ = $$$$.extend({
					sort: !1,
					returnHTML: !1,
					display: !1
				},
				$debugOpts_o$$), !0 ===
				$$e$$ || $debugOpts_o$$.display ? debugData($info$$, $debugTitle_t$$, $debugOpts_o$$) : window.console && console.log(debugData($info$$, $debugTitle_t$$, $debugOpts_o$$))) : $$e$$ ? alert($info$$) : window.console ? console.log($info$$) : ($$e$$ = $$$$("#layoutLogger"), $$e$$.length || ($$e$$ = $$$$('<div id="layoutLogger" style="position: ' + ($$$$.support.fixedPosition ? "fixed": "absolute") + '; top: 5px; z-index: 999999; max-width: 25%; overflow: hidden; border: 1px solid #000; border-radius: 5px; background: #FBFBFB; box-shadow: 0 2px 10px rgba(0,0,0,0.3);"><div style="font-size: 13px; font-weight: bold; padding: 5px 10px; background: #F6F6F6; border-radius: 5px 5px 0 0; cursor: move;"><span style="float: right; padding-left: 7px; cursor: pointer;" title="Remove Console" onclick="$(this).closest(\'#layoutLogger\').remove()">X</span>Layout console.log</div><ul style="font-size: 13px; font-weight: none; list-style: none; margin: 0; padding: 0 0 2px;"></ul></div>').appendTo("body"),
				$$e$$.css("left", $$$$(window).width() - $$e$$.outerWidth() - 5), $$$$.ui.draggable && $$e$$.draggable({
					handle: ":first-child"
				})), $$e$$.children("ul").append('<li style="padding: 4px 10px; margin: 0; border-top: 1px solid #CCC;">' + $info$$.replace(/\</g, "&lt;").replace(/\>/g, "&gt;") + "</li>"))
			}
		};
		var $b$$17_u$$ = navigator.userAgent.toLowerCase(), $m$$3_v$$ = /(chrome)[ \/]([\w.]+)/.exec($b$$17_u$$) || /(webkit)[ \/]([\w.]+)/.exec($b$$17_u$$) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec($b$$17_u$$) || /(msie) ([\w.]+)/.exec($b$$17_u$$) ||
		0 > $b$$17_u$$.indexOf("compatible") && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec($b$$17_u$$) || [], $b$$17_u$$ = $m$$3_v$$[1] || "", $m$$3_v$$ = $m$$3_v$$[2] || 0, $ie$$ = "msie" === $b$$17_u$$; $$$$.layout.browser = {
			version: $m$$3_v$$,
			safari: "webkit" === $b$$17_u$$,
			webkit: "chrome" === $b$$17_u$$,
			msie: $ie$$,
			isIE6: $ie$$ && 6 == $m$$3_v$$,
			boxModel: !$ie$$ || !1 !== $$$$.support.boxModel
		}; $b$$17_u$$ && ($$$$.layout.browser[$b$$17_u$$] = !0); $ie$$ && $$$$(function() {
			$$$$.layout.browser.boxModel = $$$$.support.boxModel
		}); $$$$.layout.defaults = {
			name: "",
			containerClass: "ui-layout-container",
			inset: null,
			scrollToBookmarkOnLoad: !0,
			resizeWithWindow: !0,
			resizeWithWindowDelay: 200,
			resizeWithWindowMaxDelay: 0,
			maskPanesEarly: !1,
			onresizeall_start: null,
			onresizeall_end: null,
			onload_start: null,
			onload_end: null,
			onunload_start: null,
			onunload_end: null,
			initPanes: !0,
			showErrorMessages: !0,
			showDebugMessages: !1,
			zIndex: null,
			zIndexes: {
				pane_normal: 0,
				content_mask: 1,
				resizer_normal: 2,
				pane_sliding: 100,
				pane_animate: 1E3,
				resizer_drag: 1E4
			},
			errors: {
				pane: "pane",
				selector: "selector",
				addButtonError: "Error Adding Button\nInvalid ",
				containerMissing: "UI Layout Initialization Error\nThe specified layout-container does not exist.",
				centerPaneMissing: "UI Layout Initialization Error\nThe center-pane element does not exist.\nThe center-pane is a required element.",
				noContainerHeight: "UI Layout Initialization Warning\nThe layout-container \"CONTAINER\" has no height.\nTherefore the layout is 0-height and hence 'invisible'!",
				callbackError: "UI Layout Callback Error\nThe EVENT callback is not a valid function."
			},
			panes: {
				applyDemoStyles: !1,
				closable: !0,
				resizable: !0,
				slidable: !0,
				initClosed: !1,
				initHidden: !1,
				contentSelector: ".ui-layout-content",
				contentIgnoreSelector: ".ui-layout-ignore",
				findNestedContent: !1,
				paneClass: "ui-layout-pane",
				resizerClass: "ui-layout-resizer",
				togglerClass: "ui-layout-toggler",
				buttonClass: "ui-layout-button",
				minSize: 0,
				maxSize: 0,
				spacing_open: 6,
				spacing_closed: 6,
				togglerLength_open: 50,
				togglerLength_closed: 50,
				togglerAlign_open: "center",
				togglerAlign_closed: "center",
				togglerContent_open: "",
				togglerContent_closed: "",
				resizerDblClickToggle: !0,
				autoResize: !0,
				autoReopen: !0,
				resizerDragOpacity: 1,
				maskContents: !1,
				maskObjects: !1,
				maskZindex: null,
				resizingGrid: !1,
				livePaneResizing: !1,
				liveContentResizing: !1,
				liveResizingTolerance: 1,
				sliderCursor: "pointer",
				slideTrigger_open: "click",
				slideTrigger_close: "mouseleave",
				slideDelay_open: 300,
				slideDelay_close: 300,
				hideTogglerOnSlide: !1,
				preventQuickSlideClose: $$$$.layout.browser.webkit,
				preventPrematureSlideClose: !1,
				tips: {
					Open: "Open",
					Close: "Close",
					Resize: "Resize",
					Slide: "Slide Open",
					Pin: "Pin",
					Unpin: "Un-Pin",
					noRoomToOpen: "Not enough room to show this panel.",
					minSizeWarning: "Panel has reached its minimum size",
					maxSizeWarning: "Panel has reached its maximum size"
				},
				showOverflowOnHover: !1,
				enableCursorHotkey: !0,
				customHotkeyModifier: "SHIFT",
				fxName: "slide",
				fxSpeed: null,
				fxSettings: {},
				fxOpacityFix: !0,
				animatePaneSizing: !1,
				children: null,
				containerSelector: "",
				initChildren: !0,
				destroyChildren: !0,
				resizeChildren: !0,
				triggerEventsOnLoad: !1,
				triggerEventsDuringLiveResize: !0,
				onshow_start: null,
				onshow_end: null,
				onhide_start: null,
				onhide_end: null,
				onopen_start: null,
				onopen_end: null,
				onclose_start: null,
				onclose_end: null,
				onresize_start: null,
				onresize_end: null,
				onsizecontent_start: null,
				onsizecontent_end: null,
				onswap_start: null,
				onswap_end: null,
				ondrag_start: null,
				ondrag_end: null
			},
			north: {
				paneSelector: ".ui-layout-north",
				size: "auto",
				resizerCursor: "n-resize",
				customHotkey: ""
			},
			south: {
				paneSelector: ".ui-layout-south",
				size: "auto",
				resizerCursor: "s-resize",
				customHotkey: ""
			},
			east: {
				paneSelector: ".ui-layout-east",
				size: 200,
				resizerCursor: "e-resize",
				customHotkey: ""
			},
			west: {
				paneSelector: ".ui-layout-west",
				size: 200,
				resizerCursor: "w-resize",
				customHotkey: ""
			},
			center: {
				paneSelector: ".ui-layout-center",
				minWidth: 0,
				minHeight: 0
			}
		}; $$$$.layout.optionsMap = {
			layout: "name instanceKey stateManagement effects inset zIndexes errors zIndex scrollToBookmarkOnLoad showErrorMessages maskPanesEarly outset resizeWithWindow resizeWithWindowDelay resizeWithWindowMaxDelay onresizeall onresizeall_start onresizeall_end onload onload_start onload_end onunload onunload_start onunload_end".split(" "),
			center: "paneClass contentSelector contentIgnoreSelector findNestedContent applyDemoStyles triggerEventsOnLoad showOverflowOnHover maskContents maskObjects liveContentResizing containerSelector children initChildren resizeChildren destroyChildren onresize onresize_start onresize_end onsizecontent onsizecontent_start onsizecontent_end".split(" "),
			noDefault: ["paneSelector", "resizerCursor", "customHotkey"]
		}; $$$$.layout.transformData = function $$$$$$layout$transformData$($hash$$, $addKeys$$) {
			var $json$$ = $addKeys$$ ? {
				panes: {},
				center: {}
			}: {},
			$branch$$,
			$optKey$$,
			$keys$$,
			$key$$,
			$val$$,
			$i$$,
			$c$$;
			if ("object" !== typeof $hash$$) return $json$$;
			for ($optKey$$ in $hash$$) {
				$branch$$ = $json$$;
				$val$$ = $hash$$[$optKey$$];
				$keys$$ = $optKey$$.split("__");
				$c$$ = $keys$$.length - 1;
				for ($i$$ = 0; $i$$ <= $c$$; $i$$++) $key$$ = $keys$$[$i$$],
				$i$$ === $c$$ ? $branch$$[$key$$] = $$$$.isPlainObject($val$$) ?
				$$$$.layout.transformData($val$$) : $val$$: ($branch$$[$key$$] || ($branch$$[$key$$] = {}), $branch$$ = $branch$$[$key$$])
			}
			return $json$$
		}; $$$$.layout.backwardCompatibility = {
			map: {
				applyDefaultStyles: "applyDemoStyles",
				childOptions: "children",
				initChildLayout: "initChildren",
				destroyChildLayout: "destroyChildren",
				resizeChildLayout: "resizeChildren",
				resizeNestedLayout: "resizeChildren",
				resizeWhileDragging: "livePaneResizing",
				resizeContentWhileDragging: "liveContentResizing",
				triggerEventsWhileDragging: "triggerEventsDuringLiveResize",
				maskIframesOnResize: "maskContents",
				useStateCookie: "stateManagement.enabled",
				"cookie.autoLoad": "stateManagement.autoLoad",
				"cookie.autoSave": "stateManagement.autoSave",
				"cookie.keys": "stateManagement.stateKeys",
				"cookie.name": "stateManagement.cookie.name",
				"cookie.domain": "stateManagement.cookie.domain",
				"cookie.path": "stateManagement.cookie.path",
				"cookie.expires": "stateManagement.cookie.expires",
				"cookie.secure": "stateManagement.cookie.secure",
				noRoomToOpenTip: "tips.noRoomToOpen",
				togglerTip_open: "tips.Close",
				togglerTip_closed: "tips.Open",
				resizerTip: "tips.Resize",
				sliderTip: "tips.Slide"
			},
			renameOptions: function $$$$$$layout$backwardCompatibility$renameOptions$($opts$$) {
				function $getBranch$$($path$$, $create$$) {
					for (var $a$$ = $path$$.split("."), $c$$ = $a$$.length - 1, $D$$ = {
						branch: $opts$$,
						key: $a$$[$c$$]
					},
					$i$$ = 0, $k$$; $i$$ < $c$$; $i$$++) $k$$ = $a$$[$i$$],
					$D$$.branch = void 0 == $D$$.branch[$k$$] ? $create$$ ? $D$$.branch[$k$$] = {}: {}: $D$$.branch[$k$$];
					return $D$$
				}
				var $map$$ = $$$$.layout.backwardCompatibility.map,
				$oldData$$,
				$newData$$,
				$value$$,
				$itemPath$$;
				for ($itemPath$$ in $map$$) $oldData$$ = $getBranch$$($itemPath$$),
				$value$$ = $oldData$$.branch[$oldData$$.key],
				void 0 !== $value$$ && ($newData$$ = $getBranch$$($map$$[$itemPath$$], !0), $newData$$.branch[$newData$$.key] = $value$$, delete $oldData$$.branch[$oldData$$.key])
			},
			renameAllOptions: function $$$$$$layout$backwardCompatibility$renameAllOptions$($opts$$) {
				var $ren$$ = $$$$.layout.backwardCompatibility.renameOptions;
				$ren$$($opts$$);
				$opts$$.defaults && ("object" !== typeof $opts$$.panes && ($opts$$.panes =
				{}), $$$$.extend(!0, $opts$$.panes, $opts$$.defaults), delete $opts$$.defaults);
				$opts$$.panes && $ren$$($opts$$.panes);
				$$$$.each($$$$.layout.config.allPanes,
				function($i$$, $pane$$) {
					$opts$$[$pane$$] && $ren$$($opts$$[$pane$$])
				});
				return $opts$$
			}
		}; $$$$.fn.layout = function $$$$$$fn$layout$($opts$$0$$) {
			function $keyDown$$($evt$$) {
				if (!$evt$$) return ! 0;
				var $code$$ = $evt$$.keyCode;
				if (33 > $code$$) return ! 0;
				var $PANE$$ = {
					38: "north",
					40: "south",
					37: "west",
					39: "east"
				},
				$SHIFT$$ = $evt$$.shiftKey,
				$CTRL$$ = $evt$$.ctrlKey,
				$o$$,
				$k$$,
				$m$$,
				$pane$$;
				$CTRL$$ && (37 <= $code$$ && 40 >= $code$$) && $options$$[$PANE$$[$code$$]].enableCursorHotkey ? $pane$$ = $PANE$$[$code$$] : ($CTRL$$ || $SHIFT$$) && $$$$.each($_c$$.borderPanes,
				function($i$$, $p$$) {
					$o$$ = $options$$[$p$$];
					$k$$ = $o$$.customHotkey;
					$m$$ = $o$$.customHotkeyModifier;
					if ($SHIFT$$ && "SHIFT" == $m$$ || $CTRL$$ && "CTRL" == $m$$ || $CTRL$$ && $SHIFT$$) if ($k$$ && $code$$ === (isNaN($k$$) || 9 >= $k$$ ? $k$$.toUpperCase().charCodeAt(0) : $k$$)) return $pane$$ = $p$$,
					!1
				});
				if (!$pane$$ || !$$Ps$$[$pane$$] || !$options$$[$pane$$].closable ||
				$state$$[$pane$$].isHidden) return ! 0;
				$toggle$$($pane$$);
				$evt$$.stopPropagation();
				return $evt$$.returnValue = !1
			}
			function $allowOverflow$$($el$$8_s$$) {
				if ($isInitialized$$()) {
					this && this.tagName && ($el$$8_s$$ = this);
					var $$P$$;
					$isStr$$($el$$8_s$$) ? $$P$$ = $$Ps$$[$el$$8_s$$] : $$$$($el$$8_s$$).data("layoutRole") ? $$P$$ = $$$$($el$$8_s$$) : $$$$($el$$8_s$$).parents().each(function() {
						if ($$$$(this).data("layoutRole")) return $$P$$ = $$$$(this),
						!1
					});
					if ($$P$$ && $$P$$.length) {
						var $pane$$ = $$P$$.data("layoutEdge"),
						$el$$8_s$$ = $state$$[$pane$$];
						$el$$8_s$$.cssSaved && $resetOverflow$$($pane$$);
						if ($el$$8_s$$.isSliding || $el$$8_s$$.isResizing || $el$$8_s$$.isClosed) $el$$8_s$$.cssSaved = !1;
						else {
							var $newCSS$$ = {
								zIndex: $options$$.zIndexes.resizer_normal + 1
							},
							$curCSS$$ = {},
							$of$$ = $$P$$.css("overflow"),
							$ofX$$ = $$P$$.css("overflowX"),
							$ofY$$ = $$P$$.css("overflowY");
							"visible" != $of$$ && ($curCSS$$.overflow = $of$$, $newCSS$$.overflow = "visible");
							$ofX$$ && !$ofX$$.match(/(visible|auto)/) && ($curCSS$$.overflowX = $ofX$$, $newCSS$$.overflowX = "visible");
							$ofY$$ && !$ofY$$.match(/(visible|auto)/) &&
							($curCSS$$.overflowY = $ofX$$, $newCSS$$.overflowY = "visible");
							$el$$8_s$$.cssSaved = $curCSS$$;
							$$P$$.css($newCSS$$);
							$$$$.each($_c$$.allPanes,
							function($i$$, $p$$) {
								$p$$ != $pane$$ && $resetOverflow$$($p$$)
							})
						}
					}
				}
			}
			function $resetOverflow$$($el$$9_pane$$4_s$$) {
				if ($isInitialized$$()) {
					this && this.tagName && ($el$$9_pane$$4_s$$ = this);
					var $$P$$;
					$isStr$$($el$$9_pane$$4_s$$) ? $$P$$ = $$Ps$$[$el$$9_pane$$4_s$$] : $$$$($el$$9_pane$$4_s$$).data("layoutRole") ? $$P$$ = $$$$($el$$9_pane$$4_s$$) : $$$$($el$$9_pane$$4_s$$).parents().each(function() {
						if ($$$$(this).data("layoutRole")) return $$P$$ =
						$$$$(this),
						!1
					});
					if ($$P$$ && $$P$$.length) {
						var $el$$9_pane$$4_s$$ = $$P$$.data("layoutEdge"),
						$el$$9_pane$$4_s$$ = $state$$[$el$$9_pane$$4_s$$],
						$CSS$$ = $el$$9_pane$$4_s$$.cssSaved || {}; ! $el$$9_pane$$4_s$$.isSliding && !$el$$9_pane$$4_s$$.isResizing && $$P$$.css("zIndex", $options$$.zIndexes.pane_normal);
						$$P$$.css($CSS$$);
						$el$$9_pane$$4_s$$.cssSaved = !1
					}
				}
			}
			var $browser$$ = $$$$.layout.browser,
			$_c$$ = $$$$.layout.config,
			$cssW$$ = $$$$.layout.cssWidth,
			$cssH$$ = $$$$.layout.cssHeight,
			$elDims$$ = $$$$.layout.getElementDimensions,
			$styles$$ = $$$$.layout.getElementStyles,
			$evtObj$$ = $$$$.layout.getEventObject,
			$evtPane$$ = $$$$.layout.parsePaneName,
			$options$$ = $$$$.extend(!0, {},
			$$$$.layout.defaults);
			$options$$.effects = $$$$.extend(!0, {},
			$$$$.layout.effects);
			var $state$$ = {
				id: "layout" + $$$$.now(),
				initialized: !1,
				paneResizing: !1,
				panesSliding: {},
				container: {
					innerWidth: 0,
					innerHeight: 0,
					outerWidth: 0,
					outerHeight: 0,
					layoutWidth: 0,
					layoutHeight: 0
				},
				north: {
					childIdx: 0
				},
				south: {
					childIdx: 0
				},
				east: {
					childIdx: 0
				},
				west: {
					childIdx: 0
				},
				center: {
					childIdx: 0
				}
			},
			$children$$ =
			{
				north: null,
				south: null,
				east: null,
				west: null,
				center: null
			},
			$timer$$ = {
				data: {},
				set: function($s$$, $fn$$, $ms$$) {
					$timer$$.clear($s$$);
					$timer$$.data[$s$$] = setTimeout($fn$$, $ms$$)
				},
				clear: function($s$$) {
					var $t$$ = $timer$$.data;
					$t$$[$s$$] && (clearTimeout($t$$[$s$$]), delete $t$$[$s$$])
				}
			},
			$_log$$ = function $$_log$$$($msg$$, $popup$$, $debug$$) {
				var $o$$ = $options$$; ($o$$.showErrorMessages && !$debug$$ || $debug$$ && $o$$.showDebugMessages) && $$$$.layout.msg($o$$.name + " / " + $msg$$, !1 !== $popup$$);
				return ! 1
			},
			$_runCallbacks$$ = function $$_runCallbacks$$$($evtName$$,
			$pane$$, $$P$$) {
				var $hasPane$$ = $pane$$ && $isStr$$($pane$$),
				$s$$ = $hasPane$$ ? $state$$[$pane$$] : $state$$,
				$o$$ = $hasPane$$ ? $options$$[$pane$$] : $options$$,
				$lName$$ = $options$$.name,
				$lng$$ = $evtName$$ + ($evtName$$.match(/_/) ? "": "_end"),
				$shrt$$ = $lng$$.match(/_end$/) ? $lng$$.substr(0, $lng$$.length - 4) : "",
				$fn$$ = $o$$[$lng$$] || $o$$[$shrt$$],
				$retVal$$ = "NC",
				$args$$ = []; ! $hasPane$$ && "boolean" === $$$$.type($pane$$) && ($$P$$ = $pane$$, $pane$$ = "");
				if ($fn$$) try {
					$isStr$$($fn$$) && ($fn$$.match(/,/) ? ($args$$ = $fn$$.split(","), $fn$$ =
					eval($args$$[0])) : $fn$$ = eval($fn$$)),
					$$$$.isFunction($fn$$) && ($retVal$$ = $args$$.length ? $fn$$($args$$[1]) : $hasPane$$ ? $fn$$($pane$$, $$Ps$$[$pane$$], $s$$, $o$$, $lName$$) : $fn$$($Instance$$, $s$$, $o$$, $lName$$))
				} catch($ex$$) {
					$_log$$($options$$.errors.callbackError.replace(/EVENT/, $$$$.trim(($pane$$ || "") + " " + $lng$$)), !1),
					"string" === $$$$.type($ex$$) && string.length && $_log$$("Exception:  " + $ex$$, !1)
				} ! $$P$$ && !1 !== $retVal$$ && ($hasPane$$ ? ($$P$$ = $$Ps$$[$pane$$], $o$$ = $options$$[$pane$$], $s$$ = $state$$[$pane$$], $$P$$.triggerHandler("layoutpane" +
				$lng$$, [$pane$$, $$P$$, $s$$, $o$$, $lName$$]), $shrt$$ && $$P$$.triggerHandler("layoutpane" + $shrt$$, [$pane$$, $$P$$, $s$$, $o$$, $lName$$])) : ($$N$$.triggerHandler("layout" + $lng$$, [$Instance$$, $s$$, $o$$, $lName$$]), $shrt$$ && $$N$$.triggerHandler("layout" + $shrt$$, [$Instance$$, $s$$, $o$$, $lName$$])));
				$hasPane$$ && "onresize_end" === $evtName$$ && $resizeChildren$$($pane$$ + "", !0);
				return $retVal$$
			},
			$_fixIframe$$ = function $$_fixIframe$$$($pane$$) {
				if (!$browser$$.mozilla) {
					var $$P$$ = $$Ps$$[$pane$$];
					"IFRAME" === $state$$[$pane$$].tagName ?
					$$P$$.css($_c$$.hidden).css($_c$$.visible) : $$P$$.find("IFRAME").css($_c$$.hidden).css($_c$$.visible)
				}
			},
			$cssMinDims$$ = function $$cssMinDims$$$($dir_pane$$) {
				var $$P$$4_d$$ = $$Ps$$[$dir_pane$$],
				$dir_pane$$ = $_c$$[$dir_pane$$].dir,
				$$P$$4_d$$ = {
					minWidth: 1001 - $cssW$$($$P$$4_d$$, 1E3),
					minHeight: 1001 - $cssH$$($$P$$4_d$$, 1E3)
				};
				"horz" === $dir_pane$$ && ($$P$$4_d$$.minSize = $$P$$4_d$$.minHeight);
				"vert" === $dir_pane$$ && ($$P$$4_d$$.minSize = $$P$$4_d$$.minWidth);
				return $$P$$4_d$$
			},
			$_parseSize$$ = function $$_parseSize$$$($$C_pane$$,
			$size$$, $dim$$1_dir$$) {
				$dim$$1_dir$$ || ($dim$$1_dir$$ = $_c$$[$$C_pane$$].dir);
				$isStr$$($size$$) && $size$$.match(/%/) && ($size$$ = "100%" === $size$$ ? -1: parseInt($size$$, 10) / 100);
				if (0 === $size$$) return 0;
				if (1 <= $size$$) return parseInt($size$$, 10);
				var $$P$$5_o$$ = $options$$,
				$avail_vis$$ = 0;
				"horz" == $dim$$1_dir$$ ? $avail_vis$$ = $sC$$.innerHeight - ($$Ps$$.north ? $$P$$5_o$$.north.spacing_open: 0) - ($$Ps$$.south ? $$P$$5_o$$.south.spacing_open: 0) : "vert" == $dim$$1_dir$$ && ($avail_vis$$ = $sC$$.innerWidth - ($$Ps$$.west ? $$P$$5_o$$.west.spacing_open:
				0) - ($$Ps$$.east ? $$P$$5_o$$.east.spacing_open: 0));
				if ( - 1 === $size$$) return $avail_vis$$;
				if (0 < $size$$) return $round$$($avail_vis$$ * $size$$);
				if ("center" == $$C_pane$$) return 0;
				var $dim$$1_dir$$ = "horz" === $dim$$1_dir$$ ? "height": "width",
				$$P$$5_o$$ = $$Ps$$[$$C_pane$$],
				$$C_pane$$ = "height" === $dim$$1_dir$$ ? $$Cs$$[$$C_pane$$] : !1,
				$avail_vis$$ = $$$$.layout.showInvisibly($$P$$5_o$$),
				$szP$$ = $$P$$5_o$$.css($dim$$1_dir$$),
				$szC$$ = $$C_pane$$ ? $$C_pane$$.css($dim$$1_dir$$) : 0;
				$$P$$5_o$$.css($dim$$1_dir$$, "auto");
				$$C_pane$$ &&
				$$C_pane$$.css($dim$$1_dir$$, "auto");
				$size$$ = "height" === $dim$$1_dir$$ ? $$P$$5_o$$.outerHeight() : $$P$$5_o$$.outerWidth();
				$$P$$5_o$$.css($dim$$1_dir$$, $szP$$).css($avail_vis$$);
				$$C_pane$$ && $$C_pane$$.css($dim$$1_dir$$, $szC$$);
				return $size$$
			},
			$getPaneSize$$ = function $$getPaneSize$$$($pane$$, $inclSpace$$) {
				var $$P$$ = $$Ps$$[$pane$$],
				$cSp_o$$ = $options$$[$pane$$],
				$s$$ = $state$$[$pane$$],
				$oSp$$ = $inclSpace$$ ? $cSp_o$$.spacing_open: 0,
				$cSp_o$$ = $inclSpace$$ ? $cSp_o$$.spacing_closed: 0;
				return ! $$P$$ || $s$$.isHidden ? 0:
				$s$$.isClosed || $s$$.isSliding && $inclSpace$$ ? $cSp_o$$: "horz" === $_c$$[$pane$$].dir ? $$P$$.outerHeight() + $oSp$$: $$P$$.outerWidth() + $oSp$$
			},
			$setSizeLimits$$ = function $$setSizeLimits$$$($pane$$, $slide$$) {
				if ($isInitialized$$()) {
					var $o$$ = $options$$[$pane$$],
					$r$$18_s$$ = $state$$[$pane$$],
					$c$$9_isSliding_limitSize_maxSize$$ = $_c$$[$pane$$],
					$dir$$ = $c$$9_isSliding_limitSize_maxSize$$.dir;
					$c$$9_isSliding_limitSize_maxSize$$.sizeType.toLowerCase();
					var $c$$9_isSliding_limitSize_maxSize$$ = void 0 != $slide$$ ? $slide$$:
					$r$$18_s$$.isSliding,
					$paneSpacing_top$$ = $o$$.spacing_open,
					$W$$ = $_c$$.oppositeEdge[$pane$$],
					$H$$ = $state$$[$W$$],
					$$altP_minCenterDims_minCenterSize$$ = $$Ps$$[$W$$],
					$altPaneSize_left$$ = !$$altP_minCenterDims_minCenterSize$$ || !1 === $H$$.isVisible || $H$$.isSliding ? 0: "horz" == $dir$$ ? $$altP_minCenterDims_minCenterSize$$.outerHeight() : $$altP_minCenterDims_minCenterSize$$.outerWidth(),
					$W$$ = (!$$altP_minCenterDims_minCenterSize$$ || $H$$.isHidden ? 0: $options$$[$W$$][!1 !== $H$$.isClosed ? "spacing_closed": "spacing_open"]) ||
					0,
					$H$$ = "horz" == $dir$$ ? $sC$$.innerHeight: $sC$$.innerWidth,
					$$altP_minCenterDims_minCenterSize$$ = $cssMinDims$$("center"),
					$$altP_minCenterDims_minCenterSize$$ = "horz" == $dir$$ ? $max$$($options$$.center.minHeight, $$altP_minCenterDims_minCenterSize$$.minHeight) : $max$$($options$$.center.minWidth, $$altP_minCenterDims_minCenterSize$$.minWidth),
					$c$$9_isSliding_limitSize_maxSize$$ = $H$$ - $paneSpacing_top$$ - ($c$$9_isSliding_limitSize_maxSize$$ ? 0: $_parseSize$$("center", $$altP_minCenterDims_minCenterSize$$, $dir$$) +
					$altPaneSize_left$$ + $W$$),
					$dir$$ = $r$$18_s$$.minSize = $max$$($_parseSize$$($pane$$, $o$$.minSize), $cssMinDims$$($pane$$).minSize),
					$c$$9_isSliding_limitSize_maxSize$$ = $r$$18_s$$.maxSize = $min$$($o$$.maxSize ? $_parseSize$$($pane$$, $o$$.maxSize) : 1E5, $c$$9_isSliding_limitSize_maxSize$$),
					$r$$18_s$$ = $r$$18_s$$.resizerPosition = {},
					$paneSpacing_top$$ = $sC$$.inset.top,
					$altPaneSize_left$$ = $sC$$.inset.left,
					$W$$ = $sC$$.innerWidth,
					$H$$ = $sC$$.innerHeight,
					$o$$ = $o$$.spacing_open;
					switch ($pane$$) {
					case "north":
						$r$$18_s$$.min =
						$paneSpacing_top$$ + $dir$$;
						$r$$18_s$$.max = $paneSpacing_top$$ + $c$$9_isSliding_limitSize_maxSize$$;
						break;
					case "west":
						$r$$18_s$$.min = $altPaneSize_left$$ + $dir$$;
						$r$$18_s$$.max = $altPaneSize_left$$ + $c$$9_isSliding_limitSize_maxSize$$;
						break;
					case "south":
						$r$$18_s$$.min = $paneSpacing_top$$ + $H$$ - $c$$9_isSliding_limitSize_maxSize$$ - $o$$;
						$r$$18_s$$.max = $paneSpacing_top$$ + $H$$ - $dir$$ - $o$$;
						break;
					case "east":
						$r$$18_s$$.min = $altPaneSize_left$$ + $W$$ - $c$$9_isSliding_limitSize_maxSize$$ - $o$$,
						$r$$18_s$$.max = $altPaneSize_left$$ +
						$W$$ - $dir$$ - $o$$
					}
				}
			},
			$getHoverClasses$$ = function $$getHoverClasses$$$($el$$, $allStates$$) {
				var $$El$$ = $$$$($el$$),
				$type$$ = $$El$$.data("layoutRole"),
				$_pane_pane$$ = $$El$$.data("layoutEdge"),
				$root$$ = $options$$[$_pane_pane$$][$type$$ + "Class"],
				$_pane_pane$$ = "-" + $_pane_pane$$,
				$_state_classes$$ = $$El$$.hasClass($root$$ + "-closed") ? "-closed": "-open",
				$_alt$$ = "-closed" === $_state_classes$$ ? "-open": "-closed",
				$_state_classes$$ = $root$$ + "-hover " + ($root$$ + $_pane_pane$$ + "-hover ") + ($root$$ + $_state_classes$$ + "-hover ") +
				($root$$ + $_pane_pane$$ + $_state_classes$$ + "-hover ");
				$allStates$$ && ($_state_classes$$ += $root$$ + $_alt$$ + "-hover " + ($root$$ + $_pane_pane$$ + $_alt$$ + "-hover "));
				"resizer" == $type$$ && $$El$$.hasClass($root$$ + "-sliding") && ($_state_classes$$ += $root$$ + "-sliding-hover " + ($root$$ + $_pane_pane$$ + "-sliding-hover "));
				return $$$$.trim($_state_classes$$)
			},
			$addHover$$ = function $$addHover$$$($evt$$, $el$$) {
				var $$E$$ = $$$$($el$$ || this);
				$evt$$ && "toggler" === $$E$$.data("layoutRole") && $evt$$.stopPropagation();
				$$E$$.addClass($getHoverClasses$$($$E$$))
			},
			$removeHover$$ = function $$removeHover$$$($evt$$, $el$$) {
				var $$E$$ = $$$$($el$$ || this);
				$$E$$.removeClass($getHoverClasses$$($$E$$, !0))
			},
			$onResizerEnter$$ = function $$onResizerEnter$$$() {
				var $pane$$ = $$$$(this).data("layoutEdge"),
				$s$$ = $state$$[$pane$$]; ! $s$$.isClosed && (!$s$$.isResizing && !$state$$.paneResizing) && ($$$$.fn.disableSelection && $$$$("body").disableSelection(), $options$$.maskPanesEarly && $showMasks$$($pane$$, {
					resizing: !0
				}))
			},
			$onResizerLeave$$ = function $$onResizerLeave$$$($evt$$, $el$$) {
				var $e$$ = $el$$ ||
				this,
				$pane$$ = $$$$($e$$).data("layoutEdge"),
				$name$$ = $pane$$ + "ResizerLeave";
				$timer$$.clear($pane$$ + "_openSlider");
				$timer$$.clear($name$$);
				$el$$ ? $state$$.paneResizing || ($$$$.fn.enableSelection && $$$$("body").enableSelection(), $options$$.maskPanesEarly && $hideMasks$$()) : $timer$$.set($name$$,
				function() {
					$onResizerLeave$$($evt$$, $e$$)
				},
				200)
			},
			$isInitialized$$ = function $$isInitialized$$$() {
				return $state$$.initialized || $state$$.creatingLayout ? !0: $_initLayoutElements$$()
			},
			$_initLayoutElements$$ = function $$_initLayoutElements$$$($l$$) {
				var $o$$ =
				$options$$;
				if (!$$N$$.is(":visible")) return ! $l$$ && ($browser$$.webkit && "BODY" === $$N$$[0].tagName) && setTimeout(function() {
					$_initLayoutElements$$(!0)
				},
				50),
				!1;
				if (!$getPane$$("center").length) return $_log$$($o$$.errors.centerPaneMissing);
				$state$$.creatingLayout = !0;
				$$$$.extend($sC$$, $elDims$$($$N$$, $o$$.inset));
				$evtPane$$(void 0);
				$$$$.each($_c$$.allPanes,
				function($idx$$, $pane$$) {
					$addPane$$($pane$$, !0)
				});
				$initHandles$$();
				$$$$.each($_c$$.borderPanes,
				function($i$$, $pane$$) {
					$$Ps$$[$pane$$] && $state$$[$pane$$].isVisible &&
					($setSizeLimits$$($pane$$), $makePaneFit$$($pane$$))
				});
				$sizeMidPanes$$("center");
				$$$$.each($_c$$.allPanes,
				function($idx$$, $pane$$) {
					$afterInitPane$$($pane$$)
				});
				$o$$.scrollToBookmarkOnLoad && ($l$$ = self.location, $l$$.hash && $l$$.replace($l$$.hash));
				$Instance$$.hasParentLayout ? $o$$.resizeWithWindow = !1: $o$$.resizeWithWindow && $$$$(window).bind("resize." + $sID$$, $windowResize$$);
				delete $state$$.creatingLayout;
				$state$$.initialized = !0;
				$runPluginCallbacks$$($Instance$$, $$$$.layout.onReady);
				$_runCallbacks$$("onload_end");
				return ! 0
			},
			$createChildren$$ = function $$createChildren$$$($evt_or_pane$$, $opts$$) {
				var $pane$$ = $evtPane$$.call(this, $evt_or_pane$$),
				$$P$$ = $$Ps$$[$pane$$];
				if ($$P$$) {
					var $$C$$ = $$Cs$$[$pane$$],
					$s$$ = $state$$[$pane$$],
					$cos_o$$ = $options$$[$pane$$],
					$sm$$ = $options$$.stateManagement || {},
					$cos_o$$ = $opts$$ ? $cos_o$$.children = $opts$$: $cos_o$$.children;
					if ($$$$.isPlainObject($cos_o$$)) $cos_o$$ = [$cos_o$$];
					else if (!$cos_o$$ || !$$$$.isArray($cos_o$$)) return;
					$$$$.each($cos_o$$,
					function($idx$$, $co$$) {
						$$$$.isPlainObject($co$$) &&
						($co$$.containerSelector ? $$P$$.find($co$$.containerSelector) : $$C$$ || $$P$$).each(function() {
							var $$cont$$ = $$$$(this),
							$child$$ = $$cont$$.data("layout");
							if (!$child$$) {
								$setInstanceKey$$({
									container: $$cont$$,
									options: $co$$
								},
								$s$$);
								if ($sm$$.includeChildren && $state$$.stateData[$pane$$]) {
									var $child$$ = ($state$$.stateData[$pane$$].children || {})[$co$$.instanceKey],
									$co_sm$$ = $co$$.stateManagement || ($co$$.stateManagement = {
										autoLoad: !0
									}); ! 0 === $co_sm$$.autoLoad && $child$$ && ($co_sm$$.autoSave = !1, $co_sm$$.includeChildren =
									!0, $co_sm$$.autoLoad = $$$$.extend(!0, {},
									$child$$))
								} ($child$$ = $$cont$$.layout($co$$)) && $refreshChildren$$($pane$$, $child$$)
							}
						})
					})
				}
			},
			$setInstanceKey$$ = function $$setInstanceKey$$$($child$$, $parentPaneState$$) {
				var $$c$$ = $child$$.container,
				$o$$ = $child$$.options,
				$sm$$ = $o$$.stateManagement,
				$key$$ = $o$$.instanceKey || $$c$$.data("layoutInstanceKey");
				$key$$ || ($key$$ = ($sm$$ && $sm$$.cookie ? $sm$$.cookie.name: "") || $o$$.name);
				$key$$ = $key$$ ? $key$$.replace(/[^\w-]/gi, "_").replace(/_{2,}/g, "_") : "layout" + ++$parentPaneState$$.childIdx;
				$o$$.instanceKey = $key$$;
				$$c$$.data("layoutInstanceKey", $key$$);
				return $key$$
			},
			$refreshChildren$$ = function $$refreshChildren$$$($pane$$, $newChild$$) {
				var $$P$$9_o$$ = $$Ps$$[$pane$$],
				$pC$$ = $children$$[$pane$$],
				$s$$ = $state$$[$pane$$];
				$$$$.isPlainObject($pC$$) && ($$$$.each($pC$$,
				function($key$$, $child$$) {
					$child$$.destroyed && delete $pC$$[$key$$]
				}), $$$$.isEmptyObject($pC$$) && ($pC$$ = $children$$[$pane$$] = null)); ! $newChild$$ && !$pC$$ && ($newChild$$ = $$P$$9_o$$.data("layout"));
				$newChild$$ && ($newChild$$.hasParentLayout =
				!0, $$P$$9_o$$ = $newChild$$.options, $setInstanceKey$$($newChild$$, $s$$), $pC$$ || ($pC$$ = $children$$[$pane$$] = {}), $pC$$[$$P$$9_o$$.instanceKey] = $newChild$$.container.data("layout"));
				$Instance$$[$pane$$].children = $children$$[$pane$$];
				$newChild$$ || $createChildren$$($pane$$)
			},
			$windowResize$$ = function $$windowResize$$$() {
				var $o$$ = $options$$,
				$delay$$ = Number($o$$.resizeWithWindowDelay);
				10 > $delay$$ && ($delay$$ = 100);
				$timer$$.clear("winResize");
				$timer$$.set("winResize",
				function() {
					$timer$$.clear("winResize");
					$timer$$.clear("winResizeRepeater");
					var $dims$$ = $elDims$$($$N$$, $o$$.inset); ($dims$$.innerWidth !== $sC$$.innerWidth || $dims$$.innerHeight !== $sC$$.innerHeight) && $resizeAll$$()
				},
				$delay$$);
				$timer$$.data.winResizeRepeater || $setWindowResizeRepeater$$()
			},
			$setWindowResizeRepeater$$ = function $$setWindowResizeRepeater$$$() {
				var $delay$$ = Number($options$$.resizeWithWindowMaxDelay);
				0 < $delay$$ && $timer$$.set("winResizeRepeater",
				function() {
					$setWindowResizeRepeater$$();
					$resizeAll$$()
				},
				$delay$$)
			},
			$unload$$ = function $$unload$$$() {
				$_runCallbacks$$("onunload_start");
				$runPluginCallbacks$$($Instance$$, $$$$.layout.onUnload);
				$_runCallbacks$$("onunload_end")
			},
			$initHotkeys$$ = function $$initHotkeys$$$($panes$$) {
				$panes$$ = $panes$$ ? $panes$$.split(",") : $_c$$.borderPanes;
				$$$$.each($panes$$,
				function($i$$, $pane$$) {
					var $o$$ = $options$$[$pane$$];
					if ($o$$.enableCursorHotkey || $o$$.customHotkey) return $$$$(document).bind("keydown." + $sID$$, $keyDown$$),
					!1
				})
			},
			$getPane$$ = function $$getPane$$$($pane$$) {
				$pane$$ = $options$$[$pane$$].paneSelector;
				if ("#" === $pane$$.substr(0, 1)) return $$N$$.find($pane$$).eq(0);
				var $$P$$ = $$N$$.children($pane$$).eq(0);
				return $$P$$.length ? $$P$$: $$N$$.children("form:first").children($pane$$).eq(0)
			},
			$addPane$$ = function $$addPane$$$($pane$$, $force$$) {
				if ($force$$ || $isInitialized$$()) {
					var $o$$ = $options$$[$pane$$],
					$s$$ = $state$$[$pane$$],
					$c$$ = $_c$$[$pane$$],
					$dir$$ = $c$$.dir,
					$isCenter_minSize$$ = "center" === $pane$$,
					$CSS$$ = {},
					$$P$$ = $$Ps$$[$pane$$],
					$size$$,
					$maxSize$$2_name$$;
					$$P$$ ? $removePane$$($pane$$, !1, !0, !1) : $$Cs$$[$pane$$] = !1;
					$$P$$ = $$Ps$$[$pane$$] = $getPane$$($pane$$);
					if ($$P$$.length) {
						$$P$$.data("layoutCSS") ||
						$$P$$.data("layoutCSS", $styles$$($$P$$, "position,top,left,bottom,right,width,height,overflow,zIndex,display,backgroundColor,padding,margin,border"));
						$Instance$$[$pane$$] = {
							name: $pane$$,
							pane: $$Ps$$[$pane$$],
							content: $$Cs$$[$pane$$],
							options: $options$$[$pane$$],
							state: $state$$[$pane$$],
							children: $children$$[$pane$$]
						};
						$$P$$.data({
							parentLayout: $Instance$$,
							layoutPane: $Instance$$[$pane$$],
							layoutEdge: $pane$$,
							layoutRole: "pane"
						}).css($c$$.cssReq).css("zIndex", $options$$.zIndexes.pane_normal).css($o$$.applyDemoStyles ?
						$c$$.cssDemo: {}).addClass($o$$.paneClass + " " + $o$$.paneClass + "-" + $pane$$).bind("mouseenter." + $sID$$, $addHover$$).bind("mouseleave." + $sID$$, $removeHover$$);
						$c$$ = {
							hide: "",
							show: "",
							toggle: "",
							close: "",
							open: "",
							slideOpen: "",
							slideClose: "",
							slideToggle: "",
							size: "sizePane",
							sizePane: "sizePane",
							sizeContent: "",
							sizeHandles: "",
							enableClosable: "",
							disableClosable: "",
							enableSlideable: "",
							disableSlideable: "",
							enableResizable: "",
							disableResizable: "",
							swapPanes: "swapPanes",
							swap: "swapPanes",
							move: "swapPanes",
							removePane: "removePane",
							remove: "removePane",
							createChildren: "",
							resizeChildren: "",
							resizeAll: "resizeAll",
							resizeLayout: "resizeAll"
						};
						for ($maxSize$$2_name$$ in $c$$) $$P$$.bind("layoutpane" + $maxSize$$2_name$$.toLowerCase() + "." + $sID$$, $Instance$$[$c$$[$maxSize$$2_name$$] || $maxSize$$2_name$$]);
						$initContent$$($pane$$, !1);
						$isCenter_minSize$$ || ($size$$ = $s$$.size = $_parseSize$$($pane$$, $o$$.size), $isCenter_minSize$$ = $_parseSize$$($pane$$, $o$$.minSize) || 1, $maxSize$$2_name$$ = $_parseSize$$($pane$$, $o$$.maxSize) || 1E5, 0 < $size$$ && ($size$$ =
						$max$$($min$$($size$$, $maxSize$$2_name$$), $isCenter_minSize$$)), $s$$.autoResize = $o$$.autoResize, $s$$.isClosed = !1, $s$$.isSliding = !1, $s$$.isResizing = !1, $s$$.isHidden = !1, $s$$.pins || ($s$$.pins = []));
						$s$$.tagName = $$P$$[0].tagName;
						$s$$.edge = $pane$$;
						$s$$.noRoom = !1;
						$s$$.isVisible = !0;
						$setPanePosition$$($pane$$);
						"horz" === $dir$$ ? $CSS$$.height = $cssH$$($$P$$, $size$$) : "vert" === $dir$$ && ($CSS$$.width = $cssW$$($$P$$, $size$$));
						$$P$$.css($CSS$$);
						"horz" != $dir$$ && $sizeMidPanes$$($pane$$, !0);
						$state$$.initialized && ($initHandles$$($pane$$),
						$initHotkeys$$($pane$$));
						$o$$.initClosed && $o$$.closable && !$o$$.initHidden ? $close$$($pane$$, !0, !0) : $o$$.initHidden || $o$$.initClosed ? $hide$$($pane$$) : $s$$.noRoom || $$P$$.css("display", "block");
						$$P$$.css("visibility", "visible");
						$o$$.showOverflowOnHover && $$P$$.hover($allowOverflow$$, $resetOverflow$$);
						$state$$.initialized && $afterInitPane$$($pane$$)
					} else $$Ps$$[$pane$$] = !1
				}
			},
			$afterInitPane$$ = function $$afterInitPane$$$($pane$$) {
				var $$P$$ = $$Ps$$[$pane$$],
				$s$$ = $state$$[$pane$$],
				$o$$ = $options$$[$pane$$];
				$$P$$ &&
				($$P$$.data("layout") && $refreshChildren$$($pane$$, $$P$$.data("layout")), $s$$.isVisible && ($state$$.initialized ? $resizeAll$$() : $sizeContent$$($pane$$), $o$$.triggerEventsOnLoad ? $_runCallbacks$$("onresize_end", $pane$$) : $resizeChildren$$($pane$$, !0)), $o$$.initChildren && $o$$.children && $createChildren$$($pane$$))
			},
			$setPanePosition$$ = function $$setPanePosition$$$($panes$$) {
				$panes$$ = $panes$$ ? $panes$$.split(",") : $_c$$.borderPanes;
				$$$$.each($panes$$,
				function($i$$, $pane$$) {
					var $$P$$ = $$Ps$$[$pane$$],
					$$R$$ = $$Rs$$[$pane$$],
					$s$$ = $state$$[$pane$$],
					$side$$ = $_c$$[$pane$$].side,
					$CSS$$ = {};
					if ($$P$$) {
						switch ($pane$$) {
						case "north":
							$CSS$$.top = $sC$$.inset.top;
							$CSS$$.left = $sC$$.inset.left;
							$CSS$$.right = $sC$$.inset.right;
							break;
						case "south":
							$CSS$$.bottom = $sC$$.inset.bottom;
							$CSS$$.left = $sC$$.inset.left;
							$CSS$$.right = $sC$$.inset.right;
							break;
						case "west":
							$CSS$$.left = $sC$$.inset.left;
							break;
						case "east":
							$CSS$$.right = $sC$$.inset.right
						}
						$$P$$.css($CSS$$);
						$$R$$ && $s$$.isClosed ? $$R$$.css($side$$, $sC$$.inset[$side$$]) : $$R$$ && !$s$$.isHidden && $$R$$.css($side$$,
						$sC$$.inset[$side$$] + $getPaneSize$$($pane$$))
					}
				})
			},
			$initHandles$$ = function $$initHandles$$$($panes$$) {
				$panes$$ = $panes$$ ? $panes$$.split(",") : $_c$$.borderPanes;
				$$$$.each($panes$$,
				function($i$$, $pane$$0$$) {
					var $$P$$14_s$$ = $$Ps$$[$pane$$0$$];
					$$Rs$$[$pane$$0$$] = !1;
					$$Ts$$[$pane$$0$$] = !1;
					if ($$P$$14_s$$) {
						var $o$$35_panes$$ = $options$$[$pane$$0$$],
						$$P$$14_s$$ = $state$$[$pane$$0$$],
						$paneId$$ = "#" === $o$$35_panes$$.paneSelector.substr(0, 1) ? $o$$35_panes$$.paneSelector.substr(1) : "",
						$rClass$$ = $o$$35_panes$$.resizerClass,
						$tClass$$ = $o$$35_panes$$.togglerClass,
						$_pane$$ = "-" + $pane$$0$$,
						$$T_I$$ = $Instance$$[$pane$$0$$],
						$$R$$0$$ = $$T_I$$.resizer = $$Rs$$[$pane$$0$$] = $$$$("<div></div>"),
						$$T_I$$ = $$T_I$$.toggler = $o$$35_panes$$.closable ? $$Ts$$[$pane$$0$$] = $$$$("<div></div>") : !1; ! $$P$$14_s$$.isVisible && $o$$35_panes$$.slidable && $$R$$0$$.attr("title", $o$$35_panes$$.tips.Slide).css("cursor", $o$$35_panes$$.sliderCursor);
						$$R$$0$$.attr("id", $paneId$$ ? $paneId$$ + "-resizer": "").data({
							parentLayout: $Instance$$,
							layoutPane: $Instance$$[$pane$$0$$],
							layoutEdge: $pane$$0$$,
							layoutRole: "resizer"
						}).css($_c$$.resizers.cssReq).css("zIndex", $options$$.zIndexes.resizer_normal).css($o$$35_panes$$.applyDemoStyles ? $_c$$.resizers.cssDemo: {}).addClass($rClass$$ + " " + $rClass$$ + $_pane$$).hover($addHover$$, $removeHover$$).hover($onResizerEnter$$, $onResizerLeave$$).appendTo($$N$$);
						$o$$35_panes$$.resizerDblClickToggle && $$R$$0$$.bind("dblclick." + $sID$$, $toggle$$);
						$$T_I$$ && ($$T_I$$.attr("id", $paneId$$ ? $paneId$$ + "-toggler": "").data({
							parentLayout: $Instance$$,
							layoutPane: $Instance$$[$pane$$0$$],
							layoutEdge: $pane$$0$$,
							layoutRole: "toggler"
						}).css($_c$$.togglers.cssReq).css($o$$35_panes$$.applyDemoStyles ? $_c$$.togglers.cssDemo: {}).addClass($tClass$$ + " " + $tClass$$ + $_pane$$).hover($addHover$$, $removeHover$$).bind("mouseenter", $onResizerEnter$$).appendTo($$R$$0$$), $o$$35_panes$$.togglerContent_open && $$$$("<span>" + $o$$35_panes$$.togglerContent_open + "</span>").data({
							layoutEdge: $pane$$0$$,
							layoutRole: "togglerContent"
						}).data("layoutRole", "togglerContent").data("layoutEdge", $pane$$0$$).addClass("content content-open").css("display",
						"none").appendTo($$T_I$$), $o$$35_panes$$.togglerContent_closed && $$$$("<span>" + $o$$35_panes$$.togglerContent_closed + "</span>").data({
							layoutEdge: $pane$$0$$,
							layoutRole: "togglerContent"
						}).addClass("content content-closed").css("display", "none").appendTo($$T_I$$), $enableClosable$$($pane$$0$$));
						var $o$$35_panes$$ = $pane$$0$$,
						$draggingAvailable$$ = $$$$.layout.plugins.draggable,
						$o$$35_panes$$ = $o$$35_panes$$ ? $o$$35_panes$$.split(",") : $_c$$.borderPanes;
						$$$$.each($o$$35_panes$$,
						function($idx$$, $pane$$) {
							var $o$$ =
							$options$$[$pane$$];
							if (!$draggingAvailable$$ || !$$Ps$$[$pane$$] || !$o$$.resizable) {
								$o$$.resizable = false;
								return true
							}
							var $s$$ = $state$$[$pane$$],
							$z$$ = $options$$.zIndexes,
							$c$$ = $_c$$[$pane$$],
							$side$$ = $c$$.dir == "horz" ? "top": "left",
							$$R$$ = $$Rs$$[$pane$$],
							$base$$ = $o$$.resizerClass,
							$lastPos$$ = 0,
							$r$$,
							$live$$,
							$resizerClass$$ = $base$$ + "-drag",
							$resizerPaneClass$$ = $base$$ + "-" + $pane$$ + "-drag",
							$helperClass$$ = $base$$ + "-dragging",
							$helperPaneClass$$ = $base$$ + "-" + $pane$$ + "-dragging",
							$helperLimitClass$$ = $base$$ + "-dragging-limit",
							$helperPaneLimitClass$$ = $base$$ + "-" + $pane$$ + "-dragging-limit",
							$helperClassesSet$$ = false;
							$s$$.isClosed || $$R$$.attr("title", $o$$.tips.Resize).css("cursor", $o$$.resizerCursor);
							$$R$$.draggable({
								containment: $$N$$[0],
								axis: $c$$.dir == "horz" ? "y": "x",
								delay: 0,
								distance: 1,
								grid: $o$$.resizingGrid,
								helper: "clone",
								opacity: $o$$.resizerDragOpacity,
								addClasses: false,
								zIndex: $z$$.resizer_drag,
								start: function($e$$, $ui$$) {
									$o$$ = $options$$[$pane$$];
									$s$$ = $state$$[$pane$$];
									$live$$ = $o$$.livePaneResizing;
									if (false === $_runCallbacks$$("ondrag_start",
									$pane$$)) return false;
									$s$$.isResizing = true;
									$state$$.paneResizing = $pane$$;
									$timer$$.clear($pane$$ + "_closeSlider");
									$setSizeLimits$$($pane$$);
									$r$$ = $s$$.resizerPosition;
									$lastPos$$ = $ui$$.position[$side$$];
									$$R$$.addClass($resizerClass$$ + " " + $resizerPaneClass$$);
									$helperClassesSet$$ = false;
									$$$$("body").disableSelection();
									$showMasks$$($pane$$, {
										resizing: true
									})
								},
								drag: function($e$$, $ui$$) {
									if (!$helperClassesSet$$) {
										$ui$$.helper.addClass($helperClass$$ + " " + $helperPaneClass$$).css({
											right: "auto",
											bottom: "auto"
										}).children().css("visibility",
										"hidden");
										$helperClassesSet$$ = true;
										$s$$.isSliding && $$Ps$$[$pane$$].css("zIndex", $z$$.pane_sliding)
									}
									var $limit$$ = 0;
									if ($ui$$.position[$side$$] < $r$$.min) {
										$ui$$.position[$side$$] = $r$$.min;
										$limit$$ = -1
									} else if ($ui$$.position[$side$$] > $r$$.max) {
										$ui$$.position[$side$$] = $r$$.max;
										$limit$$ = 1
									}
									if ($limit$$) {
										$ui$$.helper.addClass($helperLimitClass$$ + " " + $helperPaneLimitClass$$);
										window.defaultStatus = $limit$$ > 0 && $pane$$.match(/(north|west)/) || $limit$$ < 0 && $pane$$.match(/(south|east)/) ? $o$$.tips.maxSizeWarning: $o$$.tips.minSizeWarning
									} else {
										$ui$$.helper.removeClass($helperLimitClass$$ +
										" " + $helperPaneLimitClass$$);
										window.defaultStatus = ""
									}
									if ($live$$ && Math.abs($ui$$.position[$side$$] - $lastPos$$) >= $o$$.liveResizingTolerance) {
										$lastPos$$ = $ui$$.position[$side$$];
										$resizePanes$$($e$$, $ui$$, $pane$$)
									}
								},
								stop: function($e$$, $ui$$) {
									$$$$("body").enableSelection();
									window.defaultStatus = "";
									$$R$$.removeClass($resizerClass$$ + " " + $resizerPaneClass$$);
									$s$$.isResizing = false;
									$state$$.paneResizing = false;
									$resizePanes$$($e$$, $ui$$, $pane$$, true)
								}
							})
						});
						var $resizePanes$$ = function $$resizePanes$$$($evt$$inline_121_o$$,
						$s$$inline_128_ui$$, $pane$$, $resizingDone$$) {
							var $dragPos$$ = $s$$inline_128_ui$$.position,
							$c$$ = $_c$$[$pane$$],
							$evt$$inline_121_o$$ = $options$$[$pane$$],
							$s$$inline_128_ui$$ = $state$$[$pane$$],
							$newSize$$inline_130_resizerPos$$;
							switch ($pane$$) {
							case "north":
								$newSize$$inline_130_resizerPos$$ = $dragPos$$.top;
								break;
							case "west":
								$newSize$$inline_130_resizerPos$$ = $dragPos$$.left;
								break;
							case "south":
								$newSize$$inline_130_resizerPos$$ = $sC$$.layoutHeight - $dragPos$$.top - $evt$$inline_121_o$$.spacing_open;
								break;
							case "east":
								$newSize$$inline_130_resizerPos$$ =
								$sC$$.layoutWidth - $dragPos$$.left - $evt$$inline_121_o$$.spacing_open
							}
							$newSize$$inline_130_resizerPos$$ = $newSize$$inline_130_resizerPos$$ - $sC$$.inset[$c$$.side];
							if ($resizingDone$$) {
								false !== $_runCallbacks$$("ondrag_end", $pane$$) && $manualSizePane$$($pane$$, $newSize$$inline_130_resizerPos$$, false, true);
								$hideMasks$$(true);
								$s$$inline_128_ui$$.isSliding && $showMasks$$($pane$$, {
									resizing: true
								})
							} else if (! (Math.abs($newSize$$inline_130_resizerPos$$ - $s$$inline_128_ui$$.size) < $evt$$inline_121_o$$.liveResizingTolerance)) {
								$manualSizePane$$($pane$$,
								$newSize$$inline_130_resizerPos$$, false, true);
								$$Ms$$.each($sizeMask$$)
							}
						};
						$$P$$14_s$$.isVisible ? $setAsOpen$$($pane$$0$$) : ($setAsClosed$$($pane$$0$$), $bindStartSlidingEvents$$($pane$$0$$, !0))
					}
				});
				$sizeHandles$$()
			},
			$initContent$$ = function $$initContent$$$($pane$$, $resize$$) {
				if ($isInitialized$$()) {
					var $o$$ = $options$$[$pane$$],
					$sel$$ = $o$$.contentSelector,
					$I$$ = $Instance$$[$pane$$],
					$$P$$ = $$Ps$$[$pane$$],
					$$C$$;
					$sel$$ && ($$C$$ = $I$$.content = $$Cs$$[$pane$$] = $o$$.findNestedContent ? $$P$$.find($sel$$).eq(0) : $$P$$.children($sel$$).eq(0));
					$$C$$ && $$C$$.length ? ($$C$$.data("layoutRole", "content"), $$C$$.data("layoutCSS") || $$C$$.data("layoutCSS", $styles$$($$C$$, "height")), $$C$$.css($_c$$.content.cssReq), $o$$.applyDemoStyles && ($$C$$.css($_c$$.content.cssDemo), $$P$$.css($_c$$.content.cssDemoPane)), $$P$$.css("overflowX").match(/(scroll|auto)/) && $$P$$.css("overflow", "hidden"), $state$$[$pane$$].content = {},
					!1 !== $resize$$ && $sizeContent$$($pane$$)) : $I$$.content = $$Cs$$[$pane$$] = !1
				}
			},
			$sizeMask$$ = function $$sizeMask$$$() {
				var $$M$$ = $$$$(this),
				$pane$$33_s$$ =
				$$M$$.data("layoutMask"),
				$pane$$33_s$$ = $state$$[$pane$$33_s$$];
				"IFRAME" == $pane$$33_s$$.tagName && $pane$$33_s$$.isVisible && $$M$$.css({
					top: $pane$$33_s$$.offsetTop,
					left: $pane$$33_s$$.offsetLeft,
					width: $pane$$33_s$$.outerWidth,
					height: $pane$$33_s$$.outerHeight
				})
			},
			$showMasks$$ = function $$showMasks$$$($pane$$, $args$$) {
				var $c$$ = $_c$$[$pane$$],
				$panes$$ = ["center"],
				$z$$ = $options$$.zIndexes,
				$a$$ = $$$$.extend({
					objectsOnly: !1,
					animation: !1,
					resizing: !0,
					sliding: $state$$[$pane$$].isSliding
				},
				$args$$),
				$o$$,
				$s$$;
				$a$$.resizing &&
				$panes$$.push($pane$$);
				$a$$.sliding && $panes$$.push($_c$$.oppositeEdge[$pane$$]);
				"horz" === $c$$.dir && ($panes$$.push("west"), $panes$$.push("east"));
				$$$$.each($panes$$,
				function($i$$, $p$$) {
					$s$$ = $state$$[$p$$];
					$o$$ = $options$$[$p$$];
					if ($s$$.isVisible && ($o$$.maskObjects || !$a$$.objectsOnly && $o$$.maskContents)) {
						var $$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$;
						$$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$ = $$$$([]);
						for (var $$M$$inline_134_s$$, $i$$inline_135_o$$ = 0, $c$$inline_136_z$$ =
						$$Ms$$.length; $i$$inline_135_o$$ < $c$$inline_136_z$$; $i$$inline_135_o$$++) {
							$$M$$inline_134_s$$ = $$Ms$$.eq($i$$inline_135_o$$);
							$$M$$inline_134_s$$.data("layoutMask") === $p$$ && ($$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$ = $$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$.add($$M$$inline_134_s$$))
						}
						if (!$$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$.length) {
							$$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$ = $$Ps$$[$p$$];
							$$M$$inline_134_s$$ = $state$$[$p$$];
							var $i$$inline_135_o$$ = $options$$[$p$$],
							$c$$inline_136_z$$ = $options$$.zIndexes,
							$$Masks$$ = $$$$([]),
							$isIframe$$,
							$el$$,
							$$M$$,
							$css$$,
							$i$$0$$;
							if ($i$$inline_135_o$$.maskContents || $i$$inline_135_o$$.maskObjects) for ($i$$0$$ = 0; $i$$0$$ < ($i$$inline_135_o$$.maskObjects ? 2: 1); $i$$0$$++) {
								$isIframe$$ = $i$$inline_135_o$$.maskObjects && $i$$0$$ == 0;
								$el$$ = document.createElement($isIframe$$ ? "iframe": "div");
								$$M$$ = $$$$($el$$).data("layoutMask", $p$$);
								$el$$.className = "ui-layout-mask ui-layout-mask-" + $p$$;
								$css$$ = $el$$.style;
								$css$$.display = "block";
								$css$$.position = "absolute";
								$css$$.background = "#FFF";
								if ($isIframe$$) {
									$el$$.frameborder = 0;
									$el$$.src = "about:blank";
									$css$$.opacity = 0;
									$css$$.filter = "Alpha(Opacity='0')";
									$css$$.border = 0
								}
								if ($$M$$inline_134_s$$.tagName == "IFRAME") {
									$css$$.zIndex = $c$$inline_136_z$$.pane_normal + 1;
									$$N$$.append($el$$)
								} else {
									$$M$$.addClass("ui-layout-mask-inside-pane");
									$css$$.zIndex = $i$$inline_135_o$$.maskZindex || $c$$inline_136_z$$.content_mask;
									$css$$.top = 0;
									$css$$.left = 0;
									$css$$.width = "100%";
									$css$$.height = "100%";
									$$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$.append($el$$)
								}
								$$Masks$$ = $$Masks$$.add($el$$);
								$$Ms$$ = $$Ms$$.add($el$$)
							}
							$$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$ = $$Masks$$
						}
						$$Masks$$inline_133_$P$$inline_168_JSCompiler_inline_result$$.each(function() {
							$sizeMask$$.call(this);
							this.style.zIndex = $s$$.isSliding ? $z$$.pane_sliding + 1: $z$$.pane_normal + 1;
							this.style.display = "block"
						})
					}
				})
			},
			$hideMasks$$ = function $$hideMasks$$$($force$$2_i$$) {
				if ($force$$2_i$$ || !$state$$.paneResizing) $$Ms$$.hide();
				else if (!$force$$2_i$$ && !$$$$.isEmptyObject($state$$.panesSliding)) for (var $force$$2_i$$ = $$Ms$$.length - 1, $p$$, $$M$$; 0 <= $force$$2_i$$; $force$$2_i$$--) $$M$$ = $$Ms$$.eq($force$$2_i$$),
				$p$$ = $$M$$.data("layoutMask"),
				$options$$[$p$$].maskObjects || $$M$$.hide()
			},
			$removePane$$ = function $$removePane$$$($evt_or_pane$$2_pane$$, $classes$$1_remove_root$$, $skipResize$$, $destroy$$) {
				if ($isInitialized$$()) {
					var $evt_or_pane$$2_pane$$ = $evtPane$$.call(this, $evt_or_pane$$2_pane$$),
					$$P$$ = $$Ps$$[$evt_or_pane$$2_pane$$],
					$$C$$ =
					$$Cs$$[$evt_or_pane$$2_pane$$],
					$$R$$ = $$Rs$$[$evt_or_pane$$2_pane$$],
					$$T$$ = $$Ts$$[$evt_or_pane$$2_pane$$];
					$$P$$ && $$$$.isEmptyObject($$P$$.data()) && ($$P$$ = !1);
					$$C$$ && $$$$.isEmptyObject($$C$$.data()) && ($$C$$ = !1);
					$$R$$ && $$$$.isEmptyObject($$R$$.data()) && ($$R$$ = !1);
					$$T$$ && $$$$.isEmptyObject($$T$$.data()) && ($$T$$ = !1);
					$$P$$ && $$P$$.stop(!0, !0);
					var $o$$ = $options$$[$evt_or_pane$$2_pane$$],
					$pC$$ = $children$$[$evt_or_pane$$2_pane$$],
					$hasChildren$$ = $$$$.isPlainObject($pC$$) && !$$$$.isEmptyObject($pC$$),
					$destroy$$ =
					void 0 !== $destroy$$ ? $destroy$$: $o$$.destroyChildren;
					$hasChildren$$ && $destroy$$ && ($$$$.each($pC$$,
					function($key$$, $child$$) {
						$child$$.destroyed || $child$$.destroy(!0);
						$child$$.destroyed && delete $pC$$[$key$$]
					}), $$$$.isEmptyObject($pC$$) && ($pC$$ = $children$$[$evt_or_pane$$2_pane$$] = null, $hasChildren$$ = !1));
					$$P$$ && $classes$$1_remove_root$$ && !$hasChildren$$ ? $$P$$.remove() : $$P$$ && $$P$$[0] && ($classes$$1_remove_root$$ = $o$$.paneClass, $destroy$$ = $classes$$1_remove_root$$ + "-" + $evt_or_pane$$2_pane$$, $classes$$1_remove_root$$ =
					[$classes$$1_remove_root$$, $classes$$1_remove_root$$ + "-open", $classes$$1_remove_root$$ + "-closed", $classes$$1_remove_root$$ + "-sliding", $destroy$$, $destroy$$ + "-open", $destroy$$ + "-closed", $destroy$$ + "-sliding"], $$$$.merge($classes$$1_remove_root$$, $getHoverClasses$$($$P$$, !0)), $$P$$.removeClass($classes$$1_remove_root$$.join(" ")).removeData("parentLayout").removeData("layoutPane").removeData("layoutRole").removeData("layoutEdge").removeData("autoHidden").unbind("." + $sID$$), $hasChildren$$ && $$C$$ ? ($$C$$.width($$C$$.width()),
					$$$$.each($pC$$,
					function($key$$, $child$$) {
						$child$$.resizeAll()
					})) : $$C$$ && $$C$$.css($$C$$.data("layoutCSS")).removeData("layoutCSS").removeData("layoutRole"), $$P$$.data("layout") || $$P$$.css($$P$$.data("layoutCSS")).removeData("layoutCSS"));
					$$T$$ && $$T$$.remove();
					$$R$$ && $$R$$.remove();
					$Instance$$[$evt_or_pane$$2_pane$$] = $$Ps$$[$evt_or_pane$$2_pane$$] = $$Cs$$[$evt_or_pane$$2_pane$$] = $$Rs$$[$evt_or_pane$$2_pane$$] = $$Ts$$[$evt_or_pane$$2_pane$$] = !1;
					$skipResize$$ || $resizeAll$$()
				}
			},
			$_hidePane$$ = function $$_hidePane$$$($pane$$) {
				var $$P$$ =
				$$Ps$$[$pane$$],
				$s$$ = $$P$$[0].style;
				$options$$[$pane$$].useOffscreenClose ? ($$P$$.data($_c$$.offscreenReset) || $$P$$.data($_c$$.offscreenReset, {
					left: $s$$.left,
					right: $s$$.right
				}), $$P$$.css($_c$$.offscreenCSS)) : $$P$$.hide().removeData($_c$$.offscreenReset)
			},
			$_showPane$$ = function $$_showPane$$$($o$$43_pane$$) {
				var $$P$$ = $$Ps$$[$o$$43_pane$$],
				$o$$43_pane$$ = $options$$[$o$$43_pane$$],
				$off$$ = $_c$$.offscreenCSS,
				$old$$ = $$P$$.data($_c$$.offscreenReset),
				$s$$ = $$P$$[0].style;
				$$P$$.show().removeData($_c$$.offscreenReset);
				if ($o$$43_pane$$.useOffscreenClose && $old$$ && ($s$$.left == $off$$.left && ($s$$.left = $old$$.left), $s$$.right == $off$$.right)) $s$$.right = $old$$.right
			},
			$hide$$ = function $$hide$$$($evt_or_pane$$, $noAnimation$$) {
				if ($isInitialized$$()) {
					var $pane$$ = $evtPane$$.call(this, $evt_or_pane$$),
					$o$$ = $options$$[$pane$$],
					$s$$ = $state$$[$pane$$],
					$$R$$ = $$Rs$$[$pane$$];
					$$Ps$$[$pane$$] && !$s$$.isHidden && !($state$$.initialized && !1 === $_runCallbacks$$("onhide_start", $pane$$)) && ($s$$.isSliding = !1, delete $state$$.panesSliding[$pane$$],
					$$R$$ && $$R$$.hide(), !$state$$.initialized || $s$$.isClosed ? ($s$$.isClosed = !0, $s$$.isHidden = !0, $s$$.isVisible = !1, $state$$.initialized || $_hidePane$$($pane$$), $sizeMidPanes$$("horz" === $_c$$[$pane$$].dir ? "": "center"), ($state$$.initialized || $o$$.triggerEventsOnLoad) && $_runCallbacks$$("onhide_end", $pane$$)) : ($s$$.isHiding = !0, $close$$($pane$$, !1, $noAnimation$$)))
				}
			},
			$show$$ = function $$show$$$($evt_or_pane$$4_pane$$, $openPane$$, $noAnimation$$, $noAlert$$) {
				if ($isInitialized$$()) {
					var $evt_or_pane$$4_pane$$ = $evtPane$$.call(this,
					$evt_or_pane$$4_pane$$),
					$s$$ = $state$$[$evt_or_pane$$4_pane$$];
					$$Ps$$[$evt_or_pane$$4_pane$$] && $s$$.isHidden && !1 !== $_runCallbacks$$("onshow_start", $evt_or_pane$$4_pane$$) && ($s$$.isShowing = !0, $s$$.isSliding = !1, delete $state$$.panesSliding[$evt_or_pane$$4_pane$$], !1 === $openPane$$ ? $close$$($evt_or_pane$$4_pane$$, !0) : $open$$($evt_or_pane$$4_pane$$, !1, $noAnimation$$, $noAlert$$))
				}
			},
			$toggle$$ = function $$toggle$$$($evt_or_pane$$, $slide$$) {
				if ($isInitialized$$()) {
					var $evt$$ = $evtObj$$($evt_or_pane$$),
					$pane$$ =
					$evtPane$$.call(this, $evt_or_pane$$),
					$s$$ = $state$$[$pane$$];
					$evt$$ && $evt$$.stopImmediatePropagation();
					$s$$.isHidden ? $show$$($pane$$) : $s$$.isClosed ? $open$$($pane$$, !!$slide$$) : $close$$($pane$$)
				}
			},
			$close$$ = function $$close$$$($evt_or_pane$$6_pane$$, $force$$, $noAnimation$$, $skipCallback$$) {
				function $close_2$$() {
					$s$$0$$.isMoving = !1;
					$bindStartSlidingEvents$$($pane$$, !0);
					var $altPane$$ = $_c$$.oppositeEdge[$pane$$];
					$state$$[$altPane$$].noRoom && ($setSizeLimits$$($altPane$$), $makePaneFit$$($altPane$$));
					if (!$skipCallback$$ &&
					($state$$.initialized || $o$$.triggerEventsOnLoad)) $isShowing$$ || $_runCallbacks$$("onclose_end", $pane$$),
					$isShowing$$ && $_runCallbacks$$("onshow_end", $pane$$),
					$isHiding$$ && $_runCallbacks$$("onhide_end", $pane$$)
				}
				var $pane$$ = $evtPane$$.call(this, $evt_or_pane$$6_pane$$);
				if (!$state$$.initialized && $$Ps$$[$pane$$]) {
					var $evt_or_pane$$6_pane$$ = $pane$$,
					$s$$ = $state$$[$evt_or_pane$$6_pane$$];
					$_hidePane$$($evt_or_pane$$6_pane$$);
					$s$$.isClosed = !0;
					$s$$.isVisible = !1;
					$setAsClosed$$($evt_or_pane$$6_pane$$)
				} else if ($isInitialized$$()) {
					var $$P$$ =
					$$Ps$$[$pane$$],
					$o$$ = $options$$[$pane$$],
					$s$$0$$ = $state$$[$pane$$],
					$doFX$$,
					$isShowing$$,
					$isHiding$$;
					$$N$$.queue(function($queueNext$$) {
						if (!$$P$$ || !$o$$.closable && !$s$$0$$.isShowing && !$s$$0$$.isHiding || !$force$$ && $s$$0$$.isClosed && !$s$$0$$.isShowing) return $queueNext$$();
						var $abort$$ = !$s$$0$$.isShowing && !1 === $_runCallbacks$$("onclose_start", $pane$$);
						$isShowing$$ = $s$$0$$.isShowing;
						$isHiding$$ = $s$$0$$.isHiding;
						delete $s$$0$$.isShowing;
						delete $s$$0$$.isHiding;
						if ($abort$$) return $queueNext$$();
						$doFX$$ =
						!$noAnimation$$ && !$s$$0$$.isClosed && "none" != $o$$.fxName_close;
						$s$$0$$.isMoving = !0;
						$s$$0$$.isClosed = !0;
						$s$$0$$.isVisible = !1;
						$isHiding$$ ? $s$$0$$.isHidden = !0: $isShowing$$ && ($s$$0$$.isHidden = !1);
						$s$$0$$.isSliding ? $bindStopSlidingEvents$$($pane$$, !1) : $sizeMidPanes$$("horz" === $_c$$[$pane$$].dir ? "": "center", !1);
						$setAsClosed$$($pane$$);
						$doFX$$ ? ($lockPaneForFX$$($pane$$, !0), $$P$$.hide($o$$.fxName_close, $o$$.fxSettings_close, $o$$.fxSpeed_close,
						function() {
							$lockPaneForFX$$($pane$$, false);
							$s$$0$$.isClosed && $close_2$$();
							$queueNext$$()
						})) : ($_hidePane$$($pane$$), $close_2$$(), $queueNext$$())
					})
				}
			},
			$setAsClosed$$ = function $$setAsClosed$$$($pane$$) {
				if ($$Rs$$[$pane$$]) {
					var $$R$$ = $$Rs$$[$pane$$],
					$$T$$ = $$Ts$$[$pane$$],
					$o$$ = $options$$[$pane$$],
					$side$$ = $_c$$[$pane$$].side,
					$rClass$$ = $o$$.resizerClass,
					$tClass$$ = $o$$.togglerClass,
					$_pane$$ = "-" + $pane$$;
					$$R$$.css($side$$, $sC$$.inset[$side$$]).removeClass($rClass$$ + "-open " + $rClass$$ + $_pane$$ + "-open").removeClass($rClass$$ + "-sliding " + $rClass$$ + $_pane$$ + "-sliding").addClass($rClass$$ +
					"-closed " + $rClass$$ + $_pane$$ + "-closed");
					$o$$.resizable && $$$$.layout.plugins.draggable && $$R$$.draggable("disable").removeClass("ui-state-disabled").css("cursor", "default").attr("title", "");
					$$T$$ && ($$T$$.removeClass($tClass$$ + "-open " + $tClass$$ + $_pane$$ + "-open").addClass($tClass$$ + "-closed " + $tClass$$ + $_pane$$ + "-closed").attr("title", $o$$.tips.Open), $$T$$.children(".content-open").hide(), $$T$$.children(".content-closed").css("display", "block"));
					$syncPinBtns$$($pane$$, !1);
					$state$$.initialized && $sizeHandles$$()
				}
			},
			$open$$ = function $$open$$$($evt_or_pane$$, $slide$$, $noAnimation$$, $noAlert$$) {
				function $open_2$$() {
					$s$$.isMoving = !1;
					$_fixIframe$$($pane$$);
					$s$$.isSliding || $sizeMidPanes$$("vert" == $_c$$[$pane$$].dir ? "center": "", !1);
					$setAsOpen$$($pane$$)
				}
				if ($isInitialized$$()) {
					var $pane$$ = $evtPane$$.call(this, $evt_or_pane$$),
					$$P$$ = $$Ps$$[$pane$$],
					$o$$ = $options$$[$pane$$],
					$s$$ = $state$$[$pane$$],
					$doFX$$,
					$isShowing$$;
					$$N$$.queue(function($queueNext$$) {
						if (!$$P$$ || !$o$$.resizable && !$o$$.closable && !$s$$.isShowing || $s$$.isVisible &&
						!$s$$.isSliding) return $queueNext$$();
						if ($s$$.isHidden && !$s$$.isShowing) $queueNext$$(),
						$show$$($pane$$, !0);
						else {
							$s$$.autoResize && $s$$.size != $o$$.size ? $sizePane$$($pane$$, $o$$.size, !0, !0, !0) : $setSizeLimits$$($pane$$, $slide$$);
							var $cbReturn$$ = $_runCallbacks$$("onopen_start", $pane$$);
							if ("abort" === $cbReturn$$) return $queueNext$$();
							"NC" !== $cbReturn$$ && $setSizeLimits$$($pane$$, $slide$$);
							if ($s$$.minSize > $s$$.maxSize) return $syncPinBtns$$($pane$$, !1),
							!$noAlert$$ && $o$$.tips.noRoomToOpen && alert($o$$.tips.noRoomToOpen),
							$queueNext$$();
							$slide$$ ? $bindStopSlidingEvents$$($pane$$, !0) : $s$$.isSliding ? $bindStopSlidingEvents$$($pane$$, !1) : $o$$.slidable && $bindStartSlidingEvents$$($pane$$, !1);
							$s$$.noRoom = !1;
							$makePaneFit$$($pane$$);
							$isShowing$$ = $s$$.isShowing;
							delete $s$$.isShowing;
							$doFX$$ = !$noAnimation$$ && $s$$.isClosed && "none" != $o$$.fxName_open;
							$s$$.isMoving = !0;
							$s$$.isVisible = !0;
							$s$$.isClosed = !1;
							$isShowing$$ && ($s$$.isHidden = !1);
							$doFX$$ ? ($lockPaneForFX$$($pane$$, !0), $$P$$.show($o$$.fxName_open, $o$$.fxSettings_open, $o$$.fxSpeed_open,
							function() {
								$lockPaneForFX$$($pane$$, false);
								$s$$.isVisible && $open_2$$();
								$queueNext$$()
							})) : ($_showPane$$($pane$$), $open_2$$(), $queueNext$$())
						}
					})
				}
			},
			$setAsOpen$$ = function $$setAsOpen$$$($pane$$, $skipCallback$$) {
				var $$P$$ = $$Ps$$[$pane$$],
				$$R$$ = $$Rs$$[$pane$$],
				$$T$$ = $$Ts$$[$pane$$],
				$o$$ = $options$$[$pane$$],
				$s$$ = $state$$[$pane$$],
				$side$$ = $_c$$[$pane$$].side,
				$rClass$$ = $o$$.resizerClass,
				$tClass$$ = $o$$.togglerClass,
				$_pane$$ = "-" + $pane$$;
				$$R$$.css($side$$, $sC$$.inset[$side$$] + $getPaneSize$$($pane$$)).removeClass($rClass$$ +
				"-closed " + $rClass$$ + $_pane$$ + "-closed").addClass($rClass$$ + "-open " + $rClass$$ + $_pane$$ + "-open");
				$s$$.isSliding ? $$R$$.addClass($rClass$$ + "-sliding " + $rClass$$ + $_pane$$ + "-sliding") : $$R$$.removeClass($rClass$$ + "-sliding " + $rClass$$ + $_pane$$ + "-sliding");
				$removeHover$$(0, $$R$$);
				$o$$.resizable && $$$$.layout.plugins.draggable ? $$R$$.draggable("enable").css("cursor", $o$$.resizerCursor).attr("title", $o$$.tips.Resize) : $s$$.isSliding || $$R$$.css("cursor", "default");
				$$T$$ && ($$T$$.removeClass($tClass$$ + "-closed " +
				$tClass$$ + $_pane$$ + "-closed").addClass($tClass$$ + "-open " + $tClass$$ + $_pane$$ + "-open").attr("title", $o$$.tips.Close), $removeHover$$(0, $$T$$), $$T$$.children(".content-closed").hide(), $$T$$.children(".content-open").css("display", "block"));
				$syncPinBtns$$($pane$$, !$s$$.isSliding);
				$$$$.extend($s$$, $elDims$$($$P$$));
				$state$$.initialized && ($sizeHandles$$(), $sizeContent$$($pane$$, !0));
				if (!$skipCallback$$ && ($state$$.initialized || $o$$.triggerEventsOnLoad) && $$P$$.is(":visible")) $_runCallbacks$$("onopen_end",
				$pane$$),
				$s$$.isShowing && $_runCallbacks$$("onshow_end", $pane$$),
				$state$$.initialized && $_runCallbacks$$("onresize_end", $pane$$)
			},
			$slideOpen$$ = function $$slideOpen$$$($delay$$5_evt_or_pane$$) {
				function $open_NOW$$() {
					$s$$.isClosed ? $s$$.isMoving || $open$$($pane$$, !0) : $bindStopSlidingEvents$$($pane$$, !0)
				}
				if ($isInitialized$$()) {
					var $evt$$ = $evtObj$$($delay$$5_evt_or_pane$$),
					$pane$$ = $evtPane$$.call(this, $delay$$5_evt_or_pane$$),
					$s$$ = $state$$[$pane$$],
					$delay$$5_evt_or_pane$$ = $options$$[$pane$$].slideDelay_open;
					$evt$$ && $evt$$.stopImmediatePropagation();
					$s$$.isClosed && $evt$$ && "mouseenter" === $evt$$.type && 0 < $delay$$5_evt_or_pane$$ ? $timer$$.set($pane$$ + "_openSlider", $open_NOW$$, $delay$$5_evt_or_pane$$) : $open_NOW$$()
				}
			},
			$slideClose$$ = function $$slideClose$$$($evt_or_pane$$9_o$$) {
				function $close_NOW$$() {
					$s$$.isClosed ? $bindStopSlidingEvents$$($pane$$, !1) : $s$$.isMoving || $close$$($pane$$)
				}
				if ($isInitialized$$()) {
					var $evt$$ = $evtObj$$($evt_or_pane$$9_o$$),
					$pane$$ = $evtPane$$.call(this, $evt_or_pane$$9_o$$),
					$evt_or_pane$$9_o$$ =
					$options$$[$pane$$],
					$s$$ = $state$$[$pane$$],
					$delay$$ = $s$$.isMoving ? 1E3: 300; ! $s$$.isClosed && !$s$$.isResizing && ("click" === $evt_or_pane$$9_o$$.slideTrigger_close ? $close_NOW$$() : $evt_or_pane$$9_o$$.preventQuickSlideClose && $s$$.isMoving || $evt_or_pane$$9_o$$.preventPrematureSlideClose && $evt$$ && $$$$.layout.isMouseOverElem($evt$$, $$Ps$$[$pane$$]) || ($evt$$ ? $timer$$.set($pane$$ + "_closeSlider", $close_NOW$$, $max$$($evt_or_pane$$9_o$$.slideDelay_close, $delay$$)) : $close_NOW$$()))
				}
			},
			$lockPaneForFX$$ = function $$lockPaneForFX$$$($pane$$,
			$doLock$$) {
				var $$P$$ = $$Ps$$[$pane$$],
				$s$$ = $state$$[$pane$$],
				$o$$ = $options$$[$pane$$],
				$z$$ = $options$$.zIndexes;
				$doLock$$ ? ($showMasks$$($pane$$, {
					animation: !0,
					objectsOnly: !0
				}), $$P$$.css({
					zIndex: $z$$.pane_animate
				}), "south" == $pane$$ ? $$P$$.css({
					top: $sC$$.inset.top + $sC$$.innerHeight - $$P$$.outerHeight()
				}) : "east" == $pane$$ && $$P$$.css({
					left: $sC$$.inset.left + $sC$$.innerWidth - $$P$$.outerWidth()
				})) : ($hideMasks$$(), $$P$$.css({
					zIndex: $s$$.isSliding ? $z$$.pane_sliding: $z$$.pane_normal
				}), "south" == $pane$$ ? $$P$$.css({
					top: "auto"
				}) :
				"east" == $pane$$ && !$$P$$.css("left").match(/\-99999/) && $$P$$.css({
					left: "auto"
				}), $browser$$.msie && ($o$$.fxOpacityFix && "slide" != $o$$.fxName_open && $$P$$.css("filter") && 1 == $$P$$.css("opacity")) && $$P$$[0].style.removeAttribute("filter"))
			},
			$bindStartSlidingEvents$$ = function $$bindStartSlidingEvents$$$($pane$$, $enable$$) {
				var $o$$ = $options$$[$pane$$],
				$$R$$ = $$Rs$$[$pane$$],
				$evtName$$ = $o$$.slideTrigger_open.toLowerCase();
				if ($$R$$ && (!$enable$$ || $o$$.slidable)) {
					$evtName$$.match(/mouseover/) ? $evtName$$ = $o$$.slideTrigger_open =
					"mouseenter": $evtName$$.match(/(click|dblclick|mouseenter)/) || ($evtName$$ = $o$$.slideTrigger_open = "click");
					if ($o$$.resizerDblClickToggle && $evtName$$.match(/click/)) $$R$$[$enable$$ ? "unbind": "bind"]("dblclick." + $sID$$, $toggle$$);
					$$R$$[$enable$$ ? "bind": "unbind"]($evtName$$ + "." + $sID$$, $slideOpen$$).css("cursor", $enable$$ ? $o$$.sliderCursor: "default").attr("title", $enable$$ ? $o$$.tips.Slide: "")
				}
			},
			$bindStopSlidingEvents$$ = function $$bindStopSlidingEvents$$$($pane$$, $enable$$) {
				function $cancelMouseOut$$($evt$$) {
					$timer$$.clear($pane$$ +
					"_closeSlider");
					$evt$$.stopPropagation()
				}
				var $o$$ = $options$$[$pane$$],
				$s$$ = $state$$[$pane$$],
				$z$$ = $options$$.zIndexes,
				$evtName$$ = $o$$.slideTrigger_close.toLowerCase(),
				$action$$ = $enable$$ ? "bind": "unbind",
				$$P$$ = $$Ps$$[$pane$$],
				$$R$$ = $$Rs$$[$pane$$];
				$timer$$.clear($pane$$ + "_closeSlider");
				$enable$$ ? ($s$$.isSliding = !0, $state$$.panesSliding[$pane$$] = !0, $bindStartSlidingEvents$$($pane$$, !1)) : ($s$$.isSliding = !1, delete $state$$.panesSliding[$pane$$]);
				$$P$$.css("zIndex", $enable$$ ? $z$$.pane_sliding: $z$$.pane_normal);
				$$R$$.css("zIndex", $enable$$ ? $z$$.pane_sliding + 2: $z$$.resizer_normal);
				$evtName$$.match(/(click|mouseleave)/) || ($evtName$$ = $o$$.slideTrigger_close = "mouseleave");
				$$R$$[$action$$]($evtName$$, $slideClose$$);
				"mouseleave" === $evtName$$ && ($$P$$[$action$$]("mouseleave." + $sID$$, $slideClose$$), $$R$$[$action$$]("mouseenter." + $sID$$, $cancelMouseOut$$), $$P$$[$action$$]("mouseenter." + $sID$$, $cancelMouseOut$$));
				$enable$$ ? "click" === $evtName$$ && !$o$$.resizable && ($$R$$.css("cursor", $enable$$ ? $o$$.sliderCursor: "default"),
				$$R$$.attr("title", $enable$$ ? $o$$.tips.Close: "")) : $timer$$.clear($pane$$ + "_closeSlider")
			},
			$makePaneFit$$ = function $$makePaneFit$$$($pane$$, $isOpening_o$$, $pos$$1_skipCallback$$, $force$$) {
				var $isOpening_o$$ = $options$$[$pane$$],
				$s$$ = $state$$[$pane$$],
				$c$$ = $_c$$[$pane$$],
				$$P$$ = $$Ps$$[$pane$$],
				$$R$$ = $$Rs$$[$pane$$],
				$isSidePane$$ = "vert" === $c$$.dir,
				$hasRoom$$ = !1;
				if ("center" === $pane$$ || $isSidePane$$ && $s$$.noVerticalRoom)($hasRoom$$ = 0 <= $s$$.maxHeight) && $s$$.noRoom ? ($_showPane$$($pane$$), $$R$$ && $$R$$.show(),
				$s$$.isVisible = !0, $s$$.noRoom = !1, $isSidePane$$ && ($s$$.noVerticalRoom = !1), $_fixIframe$$($pane$$)) : !$hasRoom$$ && !$s$$.noRoom && ($_hidePane$$($pane$$), $$R$$ && $$R$$.hide(), $s$$.isVisible = !1, $s$$.noRoom = !0);
				if ("center" !== $pane$$) if ($s$$.minSize <= $s$$.maxSize) {
					if ($s$$.size > $s$$.maxSize ? $sizePane$$($pane$$, $s$$.maxSize, $pos$$1_skipCallback$$, !0, $force$$) : $s$$.size < $s$$.minSize ? $sizePane$$($pane$$, $s$$.minSize, $pos$$1_skipCallback$$, !0, $force$$) : $$R$$ && ($s$$.isVisible && $$P$$.is(":visible")) && ($pos$$1_skipCallback$$ =
					$s$$.size + $sC$$.inset[$c$$.side], $$$$.layout.cssNum($$R$$, $c$$.side) != $pos$$1_skipCallback$$ && $$R$$.css($c$$.side, $pos$$1_skipCallback$$)), $s$$.noRoom) $s$$.wasOpen && $isOpening_o$$.closable ? $isOpening_o$$.autoReopen ? $open$$($pane$$, !1, !0, !0) : $s$$.noRoom = !1: $show$$($pane$$, $s$$.wasOpen, !0, !0)
				} else $s$$.noRoom || ($s$$.noRoom = !0, $s$$.wasOpen = !$s$$.isClosed && !$s$$.isSliding, $s$$.isClosed || ($isOpening_o$$.closable ? $close$$($pane$$, !0, !0) : $hide$$($pane$$, !0)))
			},
			$manualSizePane$$ = function $$manualSizePane$$$($evt_or_pane$$11_pane$$,
			$size$$, $skipCallback$$, $noAnimation$$, $force$$) {
				if ($isInitialized$$()) {
					var $evt_or_pane$$11_pane$$ = $evtPane$$.call(this, $evt_or_pane$$11_pane$$),
					$o$$ = $options$$[$evt_or_pane$$11_pane$$],
					$s$$ = $state$$[$evt_or_pane$$11_pane$$],
					$force$$ = $force$$ || $o$$.livePaneResizing && !$s$$.isResizing;
					$s$$.autoResize = !1;
					$sizePane$$($evt_or_pane$$11_pane$$, $size$$, $skipCallback$$, $noAnimation$$, $force$$)
				}
			},
			$sizePane$$ = function $$sizePane$$$($evt_or_pane$$, $size$$, $skipCallback$$, $noAnimation$$, $force$$) {
				function $sizePane_2$$() {
					for (var $actual_tries$$ =
					"width" === $dimName$$ ? $$P$$.outerWidth() : $$P$$.outerHeight(), $actual_tries$$ = [{
						pane: $pane$$,
						count: 1,
						target: $size$$,
						actual: $actual_tries$$,
						correct: $size$$ === $actual_tries$$,
						attempt: $size$$,
						cssSize: $newSize$$
					}], $altPane$$ = $actual_tries$$[0], $thisTry$$ = {},
					$msg$$ = "Inaccurate size after resizing the " + $pane$$ + "-pane."; ! $altPane$$.correct;) {
						$thisTry$$ = {
							pane: $pane$$,
							count: $altPane$$.count + 1,
							target: $size$$
						};
						$thisTry$$.attempt = $altPane$$.actual > $size$$ ? $max$$(0, $altPane$$.attempt - ($altPane$$.actual - $size$$)) :
						$max$$(0, $altPane$$.attempt + ($size$$ - $altPane$$.actual));
						$thisTry$$.cssSize = ("horz" == $_c$$[$pane$$].dir ? $cssH$$: $cssW$$)($$Ps$$[$pane$$], $thisTry$$.attempt);
						$$P$$.css($dimName$$, $thisTry$$.cssSize);
						$thisTry$$.actual = "width" == $dimName$$ ? $$P$$.outerWidth() : $$P$$.outerHeight();
						$thisTry$$.correct = $size$$ === $thisTry$$.actual;
						1 === $actual_tries$$.length && ($_log$$($msg$$, !1, !0), $_log$$($altPane$$, !1, !0));
						$_log$$($thisTry$$, !1, !0);
						if (3 < $actual_tries$$.length) break;
						$actual_tries$$.push($thisTry$$);
						$altPane$$ =
						$actual_tries$$[$actual_tries$$.length - 1]
					}
					$s$$.size = $size$$;
					$$$$.extend($s$$, $elDims$$($$P$$));
					$s$$.isVisible && $$P$$.is(":visible") && ($$R$$ && $$R$$.css($side$$, $size$$ + $sC$$.inset[$side$$]), $sizeContent$$($pane$$)); ! $skipCallback$$ && (!$skipResizeWhileDragging$$ && $state$$.initialized && $s$$.isVisible) && $_runCallbacks$$("onresize_end", $pane$$);
					$skipCallback$$ || ($s$$.isSliding || $sizeMidPanes$$("horz" == $_c$$[$pane$$].dir ? "": "center", $skipResizeWhileDragging$$, $force$$), $sizeHandles$$());
					$altPane$$ = $_c$$.oppositeEdge[$pane$$];
					$size$$ < $oldSize$$ && $state$$[$altPane$$].noRoom && ($setSizeLimits$$($altPane$$), $makePaneFit$$($altPane$$, !1, $skipCallback$$));
					1 < $actual_tries$$.length && $_log$$($msg$$ + "\nSee the Error Console for details.", !0, !0)
				}
				if ($isInitialized$$()) {
					var $pane$$ = $evtPane$$.call(this, $evt_or_pane$$),
					$o$$ = $options$$[$pane$$],
					$s$$ = $state$$[$pane$$],
					$$P$$ = $$Ps$$[$pane$$],
					$$R$$ = $$Rs$$[$pane$$],
					$side$$ = $_c$$[$pane$$].side,
					$dimName$$ = $_c$$[$pane$$].sizeType.toLowerCase(),
					$skipResizeWhileDragging$$ = $s$$.isResizing && !$o$$.triggerEventsDuringLiveResize,
					$doFX$$ = !0 !== $noAnimation$$ && $o$$.animatePaneSizing,
					$oldSize$$,
					$newSize$$;
					$$N$$.queue(function($queueNext$$) {
						$setSizeLimits$$($pane$$);
						$oldSize$$ = $s$$.size;
						$size$$ = $_parseSize$$($pane$$, $size$$);
						$size$$ = $max$$($size$$, $_parseSize$$($pane$$, $o$$.minSize));
						$size$$ = $min$$($size$$, $s$$.maxSize);
						if ($size$$ < $s$$.minSize) $queueNext$$(),
						$makePaneFit$$($pane$$, !1, $skipCallback$$);
						else {
							if (!$force$$ && $size$$ === $oldSize$$) return $queueNext$$();
							$s$$.newSize = $size$$; ! $skipCallback$$ && ($state$$.initialized && $s$$.isVisible) &&
							$_runCallbacks$$("onresize_start", $pane$$);
							$newSize$$ = ("horz" == $_c$$[$pane$$].dir ? $cssH$$: $cssW$$)($$Ps$$[$pane$$], $size$$);
							if ($doFX$$ && $$P$$.is(":visible")) {
								var $easing_fx$$ = $$$$.layout.effects.size[$pane$$] || $$$$.layout.effects.size.all,
								$easing_fx$$ = $o$$.fxSettings_size.easing || $easing_fx$$.easing,
								$z$$ = $options$$.zIndexes,
								$props$$ = {};
								$props$$[$dimName$$] = $newSize$$ + "px";
								$s$$.isMoving = !0;
								$$P$$.css({
									zIndex: $z$$.pane_animate
								}).show().animate($props$$, $o$$.fxSpeed_size, $easing_fx$$,
								function() {
									$$P$$.css({
										zIndex: $s$$.isSliding ?
										$z$$.pane_sliding: $z$$.pane_normal
									});
									$s$$.isMoving = !1;
									delete $s$$.newSize;
									$sizePane_2$$();
									$queueNext$$()
								})
							} else $$P$$.css($dimName$$, $newSize$$),
							delete $s$$.newSize,
							$$P$$.is(":visible") ? $sizePane_2$$() : ($s$$.size = $size$$, $$$$.extend($s$$, $elDims$$($$P$$))),
							$queueNext$$()
						}
					})
				}
			},
			$sizeMidPanes$$ = function $$sizeMidPanes$$$($panes$$, $skipCallback$$, $force$$) {
				$panes$$ = ($panes$$ ? $panes$$: "east,west,center").split(",");
				$$$$.each($panes$$,
				function($i$$, $pane$$) {
					if ($$Ps$$[$pane$$]) {
						var $o$$ = $options$$[$pane$$],
						$fix_s$$ = $state$$[$pane$$],
						$$P$$ = $$Ps$$[$pane$$],
						$hasRoom$$ = !0,
						$CSS$$ = {},
						$visCSS$$ = $$$$.layout.showInvisibly($$P$$),
						$d$$ = {
							top: $getPaneSize$$("north", !0),
							bottom: $getPaneSize$$("south", !0),
							left: $getPaneSize$$("west", !0),
							right: $getPaneSize$$("east", !0),
							width: 0,
							height: 0
						};
						$d$$.width = $sC$$.innerWidth - $d$$.left - $d$$.right;
						$d$$.height = $sC$$.innerHeight - $d$$.bottom - $d$$.top;
						$d$$.top += $sC$$.inset.top;
						$d$$.bottom += $sC$$.inset.bottom;
						$d$$.left += $sC$$.inset.left;
						$d$$.right += $sC$$.inset.right;
						$$$$.extend($fix_s$$,
						$elDims$$($$P$$));
						if ("center" === $pane$$) {
							if (!$force$$ && $fix_s$$.isVisible && $d$$.width === $fix_s$$.outerWidth && $d$$.height === $fix_s$$.outerHeight) return $$P$$.css($visCSS$$),
							!0;
							$$$$.extend($fix_s$$, $cssMinDims$$($pane$$), {
								maxWidth: $d$$.width,
								maxHeight: $d$$.height
							});
							$CSS$$ = $d$$;
							$fix_s$$.newWidth = $CSS$$.width;
							$fix_s$$.newHeight = $CSS$$.height;
							$CSS$$.width = $cssW$$($$P$$, $CSS$$.width);
							$CSS$$.height = $cssH$$($$P$$, $CSS$$.height);
							$hasRoom$$ = 0 <= $CSS$$.width && 0 <= $CSS$$.height;
							if (!$state$$.initialized && $o$$.minWidth >
							$d$$.width) {
								var $o$$ = $o$$.minWidth - $fix_s$$.outerWidth,
								$d$$ = $options$$.east.minSize || 0,
								$minW$$ = $options$$.west.minSize || 0,
								$sizeE$$ = $state$$.east.size,
								$sizeW$$ = $state$$.west.size,
								$newE$$ = $sizeE$$,
								$newW$$ = $sizeW$$;
								0 < $o$$ && ($state$$.east.isVisible && $sizeE$$ > $d$$) && ($newE$$ = $max$$($sizeE$$ - $d$$, $sizeE$$ - $o$$), $o$$ -= $sizeE$$ - $newE$$);
								0 < $o$$ && ($state$$.west.isVisible && $sizeW$$ > $minW$$) && ($newW$$ = $max$$($sizeW$$ - $minW$$, $sizeW$$ - $o$$), $o$$ -= $sizeW$$ - $newW$$);
								if (0 === $o$$) {
									$sizeE$$ && $sizeE$$ != $d$$ && $sizePane$$("east",
									$newE$$, !0, !0, $force$$);
									$sizeW$$ && $sizeW$$ != $minW$$ && $sizePane$$("west", $newW$$, !0, !0, $force$$);
									$sizeMidPanes$$("center", $skipCallback$$, $force$$);
									$$P$$.css($visCSS$$);
									return
								}
							}
						} else {
							$fix_s$$.isVisible && !$fix_s$$.noVerticalRoom && $$$$.extend($fix_s$$, $elDims$$($$P$$), $cssMinDims$$($pane$$));
							if (!$force$$ && !$fix_s$$.noVerticalRoom && $d$$.height === $fix_s$$.outerHeight) return $$P$$.css($visCSS$$),
							!0;
							$CSS$$.top = $d$$.top;
							$CSS$$.bottom = $d$$.bottom;
							$fix_s$$.newSize = $d$$.height;
							$CSS$$.height = $cssH$$($$P$$, $d$$.height);
							$fix_s$$.maxHeight = $CSS$$.height;
							$hasRoom$$ = 0 <= $fix_s$$.maxHeight;
							$hasRoom$$ || ($fix_s$$.noVerticalRoom = !0)
						}
						$hasRoom$$ ? (!$skipCallback$$ && $state$$.initialized && $_runCallbacks$$("onresize_start", $pane$$), $$P$$.css($CSS$$), "center" !== $pane$$ && $sizeHandles$$($pane$$), $fix_s$$.noRoom && (!$fix_s$$.isClosed && !$fix_s$$.isHidden) && $makePaneFit$$($pane$$), $fix_s$$.isVisible && ($$$$.extend($fix_s$$, $elDims$$($$P$$)), $state$$.initialized && $sizeContent$$($pane$$))) : !$fix_s$$.noRoom && $fix_s$$.isVisible && $makePaneFit$$($pane$$);
						$$P$$.css($visCSS$$);
						delete $fix_s$$.newSize;
						delete $fix_s$$.newWidth;
						delete $fix_s$$.newHeight;
						if (!$fix_s$$.isVisible) return ! 0;
						"center" === $pane$$ && ($fix_s$$ = $browser$$.isIE6 || !$browser$$.boxModel, $$Ps$$.north && ($fix_s$$ || "IFRAME" == $state$$.north.tagName) && $$Ps$$.north.css("width", $cssW$$($$Ps$$.north, $sC$$.innerWidth)), $$Ps$$.south && ($fix_s$$ || "IFRAME" == $state$$.south.tagName) && $$Ps$$.south.css("width", $cssW$$($$Ps$$.south, $sC$$.innerWidth))); ! $skipCallback$$ && $state$$.initialized && $_runCallbacks$$("onresize_end",
						$pane$$)
					}
				})
			},
			$resizeAll$$ = function $$resizeAll$$$($evt_or_refresh$$) {
				$evtPane$$($evt_or_refresh$$);
				if ($$N$$.is(":visible")) if ($state$$.initialized) {
					if (!0 === $evt_or_refresh$$ && $$$$.isPlainObject($options$$.outset) && $$N$$.css($options$$.outset), $$$$.extend($sC$$, $elDims$$($$N$$, $options$$.inset)), $sC$$.outerHeight) { ! 0 === $evt_or_refresh$$ && $setPanePosition$$();
						if (!1 === $_runCallbacks$$("onresizeall_start")) return ! 1;
						var $$P$$,
						$o$$,
						$s$$;
						$$$$.each(["south", "north", "east", "west"],
						function($i$$, $pane$$) {
							$$Ps$$[$pane$$] &&
							($o$$ = $options$$[$pane$$], $s$$ = $state$$[$pane$$], $s$$.autoResize && $s$$.size != $o$$.size ? $sizePane$$($pane$$, $o$$.size, !0, !0, !0) : ($setSizeLimits$$($pane$$), $makePaneFit$$($pane$$, !1, !0, !0)))
						});
						$sizeMidPanes$$("", !0, !0);
						$sizeHandles$$();
						$$$$.each($_c$$.allPanes,
						function($i$$, $pane$$) { ($$P$$ = $$Ps$$[$pane$$]) && $state$$[$pane$$].isVisible && $_runCallbacks$$("onresize_end", $pane$$)
						});
						$_runCallbacks$$("onresizeall_end")
					}
				} else $_initLayoutElements$$()
			},
			$resizeChildren$$ = function $$resizeChildren$$$($evt_or_pane$$,
			$skipRefresh$$) {
				var $pC$$2_pane$$ = $evtPane$$.call(this, $evt_or_pane$$);
				$options$$[$pC$$2_pane$$].resizeChildren && ($skipRefresh$$ || $refreshChildren$$($pC$$2_pane$$), $pC$$2_pane$$ = $children$$[$pC$$2_pane$$], $$$$.isPlainObject($pC$$2_pane$$) && $$$$.each($pC$$2_pane$$,
				function($key$$, $child$$) {
					$child$$.destroyed || $child$$.resizeAll()
				}))
			},
			$sizeContent$$ = function $$sizeContent$$$($evt_or_panes$$, $remeasure$$) {
				if ($isInitialized$$()) {
					var $panes$$ = $evtPane$$.call(this, $evt_or_panes$$),
					$panes$$ = $panes$$ ? $panes$$.split(",") :
					$_c$$.allPanes;
					$$$$.each($panes$$,
					function($idx$$, $pane$$) {
						function $_below$$($$E$$) {
							return $max$$($s$$.css.paddingBottom, parseInt($$E$$.css("marginBottom"), 10) || 0)
						}
						function $_measure$$() {
							var $$Fs_ignore$$ = $options$$[$pane$$].contentIgnoreSelector,
							$$Fs_ignore$$ = $$C$$.nextAll().not(".ui-layout-mask").not($$Fs_ignore$$ || ":lt(0)"),
							$$Fs_vis$$ = $$Fs_ignore$$.filter(":visible"),
							$$F$$ = $$Fs_vis$$.filter(":last");
							$m$$ = {
								top: $$C$$[0].offsetTop,
								height: $$C$$.outerHeight(),
								numFooters: $$Fs_ignore$$.length,
								hiddenFooters: $$Fs_ignore$$.length -
								$$Fs_vis$$.length,
								spaceBelow: 0
							};
							$m$$.spaceAbove = $m$$.top;
							$m$$.bottom = $m$$.top + $m$$.height;
							$m$$.spaceBelow = $$F$$.length ? $$F$$[0].offsetTop + $$F$$.outerHeight() - $m$$.bottom + $_below$$($$F$$) : $_below$$($$C$$)
						}
						var $$P$$ = $$Ps$$[$pane$$],
						$$C$$ = $$Cs$$[$pane$$],
						$$E$$inline_148_o$$ = $options$$[$pane$$],
						$s$$ = $state$$[$pane$$],
						$m$$ = $s$$.content;
						if (!$$P$$ || !$$C$$ || !$$P$$.is(":visible")) return ! 0;
						if (!$$C$$.length && ($initContent$$($pane$$, !1), !$$C$$)) return;
						if (!1 !== $_runCallbacks$$("onsizecontent_start", $pane$$)) {
							if (!$s$$.isMoving &&
							!$s$$.isResizing || $$E$$inline_148_o$$.liveContentResizing || $remeasure$$ || void 0 == $m$$.top) $_measure$$(),
							0 < $m$$.hiddenFooters && "hidden" === $$P$$.css("overflow") && ($$P$$.css("overflow", "visible"), $_measure$$(), $$P$$.css("overflow", "hidden"));
							$$P$$ = $s$$.innerHeight - ($m$$.spaceAbove - $s$$.css.paddingTop) - ($m$$.spaceBelow - $s$$.css.paddingBottom);
							if (!$$C$$.is(":visible") || $m$$.height != $$P$$) {
								var $el$$inline_145_h$$ = $$C$$,
								$$E$$inline_148_o$$ = $el$$inline_145_h$$;
								$isStr$$($el$$inline_145_h$$) ? $$E$$inline_148_o$$ =
								$$Ps$$[$el$$inline_145_h$$] : $el$$inline_145_h$$.jquery || ($$E$$inline_148_o$$ = $$$$($el$$inline_145_h$$));
								$el$$inline_145_h$$ = $cssH$$($$E$$inline_148_o$$, $$P$$);
								$$E$$inline_148_o$$.css({
									height: $el$$inline_145_h$$,
									visibility: "visible"
								});
								0 < $el$$inline_145_h$$ && 0 < $$E$$inline_148_o$$.innerWidth() ? $$E$$inline_148_o$$.data("autoHidden") && ($$E$$inline_148_o$$.show().data("autoHidden", !1), $browser$$.mozilla || $$E$$inline_148_o$$.css($_c$$.hidden).css($_c$$.visible)) : $$E$$inline_148_o$$.data("autoHidden") || $$E$$inline_148_o$$.hide().data("autoHidden",
								!0);
								$m$$.height = $$P$$
							}
							$state$$.initialized && $_runCallbacks$$("onsizecontent_end", $pane$$)
						}
					})
				}
			},
			$sizeHandles$$ = function $$sizeHandles$$$($evt_or_panes$$1_panes$$) {
				$evt_or_panes$$1_panes$$ = ($evt_or_panes$$1_panes$$ = $evtPane$$.call(this, $evt_or_panes$$1_panes$$)) ? $evt_or_panes$$1_panes$$.split(",") : $_c$$.borderPanes;
				$$$$.each($evt_or_panes$$1_panes$$,
				function($i$$, $pane$$) {
					var $o$$ = $options$$[$pane$$],
					$s$$ = $state$$[$pane$$],
					$$P$$36_left$$5_x$$ = $$Ps$$[$pane$$],
					$$R$$ = $$Rs$$[$pane$$],
					$$T$$ = $$Ts$$[$pane$$],
					$$TC$$;
					if ($$P$$36_left$$5_x$$ && $$R$$) {
						var $dir$$ = $_c$$[$pane$$].dir,
						$_state$$ = $s$$.isClosed ? "_closed": "_open",
						$spacing$$ = $o$$["spacing" + $_state$$],
						$offset$$ = $o$$["togglerAlign" + $_state$$],
						$_state$$ = $o$$["togglerLength" + $_state$$],
						$paneLen$$;
						if (0 === $spacing$$) $$R$$.hide();
						else { ! $s$$.noRoom && !$s$$.isHidden && $$R$$.show();
							"horz" === $dir$$ ? ($paneLen$$ = $sC$$.innerWidth, $s$$.resizerLength = $paneLen$$, $$P$$36_left$$5_x$$ = $$$$.layout.cssNum($$P$$36_left$$5_x$$, "left"), $$R$$.css({
								width: $cssW$$($$R$$, $paneLen$$),
								height: $cssH$$($$R$$, $spacing$$),
								left: -9999 < $$P$$36_left$$5_x$$ ? $$P$$36_left$$5_x$$: $sC$$.inset.left
							})) : ($paneLen$$ = $$P$$36_left$$5_x$$.outerHeight(), $s$$.resizerLength = $paneLen$$, $$R$$.css({
								height: $cssH$$($$R$$, $paneLen$$),
								width: $cssW$$($$R$$, $spacing$$),
								top: $sC$$.inset.top + $getPaneSize$$("north", !0)
							}));
							$removeHover$$($o$$, $$R$$);
							if ($$T$$) {
								if (0 === $_state$$ || $s$$.isSliding && $o$$.hideTogglerOnSlide) {
									$$T$$.hide();
									return
								}
								$$T$$.show();
								if (! (0 < $_state$$) || "100%" === $_state$$ || $_state$$ > $paneLen$$) $_state$$ =
								$paneLen$$,
								$offset$$ = 0;
								else if ($isStr$$($offset$$)) switch ($offset$$) {
								case "top":
								case "left":
									$offset$$ = 0;
									break;
								case "bottom":
								case "right":
									$offset$$ = $paneLen$$ - $_state$$;
									break;
								default:
									$offset$$ = $round$$(($paneLen$$ - $_state$$) / 2)
								} else $$P$$36_left$$5_x$$ = parseInt($offset$$, 10),
								$offset$$ = 0 <= $offset$$ ? $$P$$36_left$$5_x$$: $paneLen$$ - $_state$$ + $$P$$36_left$$5_x$$;
								if ("horz" === $dir$$) {
									var $width$$ = $cssW$$($$T$$, $_state$$);
									$$T$$.css({
										width: $width$$,
										height: $cssH$$($$T$$, $spacing$$),
										left: $offset$$,
										top: 0
									});
									$$T$$.children(".content").each(function() {
										$$TC$$ =
										$$$$(this);
										$$TC$$.css("marginLeft", $round$$(($width$$ - $$TC$$.outerWidth()) / 2))
									})
								} else {
									var $height$$ = $cssH$$($$T$$, $_state$$);
									$$T$$.css({
										height: $height$$,
										width: $cssW$$($$T$$, $spacing$$),
										top: $offset$$,
										left: 0
									});
									$$T$$.children(".content").each(function() {
										$$TC$$ = $$$$(this);
										$$TC$$.css("marginTop", $round$$(($height$$ - $$TC$$.outerHeight()) / 2))
									})
								}
								$removeHover$$(0, $$T$$)
							}
							if (!$state$$.initialized && ($o$$.initHidden || $s$$.isHidden)) $$R$$.hide(),
							$$T$$ && $$T$$.hide()
						}
					}
				})
			},
			$enableClosable$$ = function $$enableClosable$$$($$T$$7_evt_or_pane$$) {
				if ($isInitialized$$()) {
					var $pane$$ =
					$evtPane$$.call(this, $$T$$7_evt_or_pane$$),
					$$T$$7_evt_or_pane$$ = $$Ts$$[$pane$$],
					$o$$ = $options$$[$pane$$];
					$$T$$7_evt_or_pane$$ && ($o$$.closable = !0, $$T$$7_evt_or_pane$$.bind("click." + $sID$$,
					function($evt$$) {
						$evt$$.stopPropagation();
						$toggle$$($pane$$)
					}).css("visibility", "visible").css("cursor", "pointer").attr("title", $state$$[$pane$$].isClosed ? $o$$.tips.Open: $o$$.tips.Close).show())
				}
			},
			$syncPinBtns$$ = function $$syncPinBtns$$$($pane$$, $doPin$$) {
				$$$$.layout.plugins.buttons && $$$$.each($state$$[$pane$$].pins,
				function($i$$, $selector$$) {
					$$$$.layout.buttons.setPinState($Instance$$, $$$$($selector$$), $pane$$, $doPin$$)
				})
			},
			$$N$$ = $$$$(this).eq(0);
			if (!$$N$$.length) return $_log$$($options$$.errors.containerMissing);
			if ($$N$$.data("layoutContainer") && $$N$$.data("layout")) return $$N$$.data("layout");
			var $$Ps$$ = {},
			$$Cs$$ = {},
			$$Rs$$ = {},
			$$Ts$$ = {},
			$$Ms$$ = $$$$([]),
			$sC$$ = $state$$.container,
			$sID$$ = $state$$.id,
			$Instance$$ = {
				options: $options$$,
				state: $state$$,
				container: $$N$$,
				panes: $$Ps$$,
				contents: $$Cs$$,
				resizers: $$Rs$$,
				togglers: $$Ts$$,
				hide: $hide$$,
				show: $show$$,
				toggle: $toggle$$,
				open: $open$$,
				close: $close$$,
				slideOpen: $slideOpen$$,
				slideClose: $slideClose$$,
				slideToggle: function($evt_or_pane$$10_pane$$) {
					$evt_or_pane$$10_pane$$ = $evtPane$$.call(this, $evt_or_pane$$10_pane$$);
					$toggle$$($evt_or_pane$$10_pane$$, !0)
				},
				setSizeLimits: $setSizeLimits$$,
				_sizePane: $sizePane$$,
				sizePane: $manualSizePane$$,
				sizeContent: $sizeContent$$,
				swapPanes: function($evt_or_pane1$$, $pane2$$) {
					function $copy$$($n$$) {
						var $$P$$ = $$Ps$$[$n$$],
						$$C$$ = $$Cs$$[$n$$];
						return ! $$P$$ ?
						!1: {
							pane: $n$$,
							P: $$P$$ ? $$P$$[0] : !1,
							C: $$C$$ ? $$C$$[0] : !1,
							state: $$$$.extend(!0, {},
							$state$$[$n$$]),
							options: $$$$.extend(!0, {},
							$options$$[$n$$])
						}
					}
					function $move$$($oPane$$, $pane$$) {
						if ($oPane$$) {
							var $P$$1_size$$ = $oPane$$.P,
							$C$$ = $oPane$$.C,
							$oldPane$$ = $oPane$$.pane,
							$c$$ = $_c$$[$pane$$],
							$s$$ = $$$$.extend(!0, {},
							$state$$[$pane$$]),
							$o$$ = $options$$[$pane$$],
							$fx$$ = {
								resizerCursor: $o$$.resizerCursor
							};
							$$$$.each(["fxName", "fxSpeed", "fxSettings"],
							function($i$$, $k$$) {
								$fx$$[$k$$ + "_open"] = $o$$[$k$$ + "_open"];
								$fx$$[$k$$ + "_close"] =
								$o$$[$k$$ + "_close"];
								$fx$$[$k$$ + "_size"] = $o$$[$k$$ + "_size"]
							});
							$$Ps$$[$pane$$] = $$$$($P$$1_size$$).data({
								layoutPane: $Instance$$[$pane$$],
								layoutEdge: $pane$$
							}).css($_c$$.hidden).css($c$$.cssReq);
							$$Cs$$[$pane$$] = $C$$ ? $$$$($C$$) : !1;
							$options$$[$pane$$] = $$$$.extend(!0, {},
							$oPane$$.options, $fx$$);
							$state$$[$pane$$] = $$$$.extend(!0, {},
							$oPane$$.state);
							$P$$1_size$$.className = $P$$1_size$$.className.replace(RegExp($o$$.paneClass + "-" + $oldPane$$, "g"), $o$$.paneClass + "-" + $pane$$);
							$initHandles$$($pane$$);
							$c$$.dir != $_c$$[$oldPane$$].dir ?
							($P$$1_size$$ = $sizes$$[$pane$$] || 0, $setSizeLimits$$($pane$$), $P$$1_size$$ = $max$$($P$$1_size$$, $state$$[$pane$$].minSize), $manualSizePane$$($pane$$, $P$$1_size$$, !0, !0)) : $$Rs$$[$pane$$].css($c$$.side, $sC$$.inset[$c$$.side] + ($state$$[$pane$$].isVisible ? $getPaneSize$$($pane$$) : 0));
							$oPane$$.state.isVisible && !$s$$.isVisible ? $setAsOpen$$($pane$$, !0) : ($setAsClosed$$($pane$$), $bindStartSlidingEvents$$($pane$$, !0));
							$oPane$$ = null
						}
					}
					if ($isInitialized$$()) {
						var $pane1$$ = $evtPane$$.call(this, $evt_or_pane1$$);
						$state$$[$pane1$$].edge =
						$pane2$$;
						$state$$[$pane2$$].edge = $pane1$$;
						if (!1 === $_runCallbacks$$("onswap_start", $pane1$$) || !1 === $_runCallbacks$$("onswap_start", $pane2$$)) $state$$[$pane1$$].edge = $pane1$$,
						$state$$[$pane2$$].edge = $pane2$$;
						else {
							var $oPane1$$ = $copy$$($pane1$$),
							$oPane2$$ = $copy$$($pane2$$),
							$sizes$$ = {};
							$sizes$$[$pane1$$] = $oPane1$$ ? $oPane1$$.state.size: 0;
							$sizes$$[$pane2$$] = $oPane2$$ ? $oPane2$$.state.size: 0;
							$$Ps$$[$pane1$$] = !1;
							$$Ps$$[$pane2$$] = !1;
							$state$$[$pane1$$] = {};
							$state$$[$pane2$$] = {};
							$$Ts$$[$pane1$$] && $$Ts$$[$pane1$$].remove();
							$$Ts$$[$pane2$$] && $$Ts$$[$pane2$$].remove();
							$$Rs$$[$pane1$$] && $$Rs$$[$pane1$$].remove();
							$$Rs$$[$pane2$$] && $$Rs$$[$pane2$$].remove();
							$$Rs$$[$pane1$$] = $$Rs$$[$pane2$$] = $$Ts$$[$pane1$$] = $$Ts$$[$pane2$$] = !1;
							$move$$($oPane1$$, $pane2$$);
							$move$$($oPane2$$, $pane1$$);
							$oPane1$$ = $oPane2$$ = $sizes$$ = null;
							$$Ps$$[$pane1$$] && $$Ps$$[$pane1$$].css($_c$$.visible);
							$$Ps$$[$pane2$$] && $$Ps$$[$pane2$$].css($_c$$.visible);
							$resizeAll$$();
							$_runCallbacks$$("onswap_end", $pane1$$);
							$_runCallbacks$$("onswap_end", $pane2$$)
						}
					}
				},
				showMasks: $showMasks$$,
				hideMasks: $hideMasks$$,
				initContent: $initContent$$,
				addPane: $addPane$$,
				removePane: $removePane$$,
				createChildren: $createChildren$$,
				refreshChildren: $refreshChildren$$,
				enableClosable: $enableClosable$$,
				disableClosable: function($evt_or_pane$$, $hide$$) {
					if ($isInitialized$$()) {
						var $pane$$ = $evtPane$$.call(this, $evt_or_pane$$),
						$$T$$ = $$Ts$$[$pane$$];
						$$T$$ && ($options$$[$pane$$].closable = !1, $state$$[$pane$$].isClosed && $open$$($pane$$, !1, !0), $$T$$.unbind("." + $sID$$).css("visibility", $hide$$ ? "hidden": "visible").css("cursor",
						"default").attr("title", ""))
					}
				},
				enableSlidable: function($evt_or_pane$$16_pane$$) {
					if ($isInitialized$$()) {
						var $evt_or_pane$$16_pane$$ = $evtPane$$.call(this, $evt_or_pane$$16_pane$$),
						$$R$$ = $$Rs$$[$evt_or_pane$$16_pane$$];
						$$R$$ && $$R$$.data("draggable") && ($options$$[$evt_or_pane$$16_pane$$].slidable = !0, $state$$[$evt_or_pane$$16_pane$$].isClosed && $bindStartSlidingEvents$$($evt_or_pane$$16_pane$$, !0))
					}
				},
				disableSlidable: function($evt_or_pane$$17_pane$$) {
					if ($isInitialized$$()) {
						var $evt_or_pane$$17_pane$$ = $evtPane$$.call(this,
						$evt_or_pane$$17_pane$$),
						$$R$$ = $$Rs$$[$evt_or_pane$$17_pane$$];
						$$R$$ && ($options$$[$evt_or_pane$$17_pane$$].slidable = !1, $state$$[$evt_or_pane$$17_pane$$].isSliding ? $close$$($evt_or_pane$$17_pane$$, !1, !0) : ($bindStartSlidingEvents$$($evt_or_pane$$17_pane$$, !1), $$R$$.css("cursor", "default").attr("title", ""), $removeHover$$(null, $$R$$[0])))
					}
				},
				enableResizable: function($evt_or_pane$$18_pane$$) {
					if ($isInitialized$$()) {
						var $evt_or_pane$$18_pane$$ = $evtPane$$.call(this, $evt_or_pane$$18_pane$$),
						$$R$$ = $$Rs$$[$evt_or_pane$$18_pane$$],
						$o$$ = $options$$[$evt_or_pane$$18_pane$$];
						$$R$$ && $$R$$.data("draggable") && ($o$$.resizable = !0, $$R$$.draggable("enable"), $state$$[$evt_or_pane$$18_pane$$].isClosed || $$R$$.css("cursor", $o$$.resizerCursor).attr("title", $o$$.tips.Resize))
					}
				},
				disableResizable: function($evt_or_pane$$19_pane$$) {
					if ($isInitialized$$()) {
						var $evt_or_pane$$19_pane$$ = $evtPane$$.call(this, $evt_or_pane$$19_pane$$),
						$$R$$ = $$Rs$$[$evt_or_pane$$19_pane$$];
						$$R$$ && $$R$$.data("draggable") && ($options$$[$evt_or_pane$$19_pane$$].resizable = !1,
						$$R$$.draggable("disable").css("cursor", "default").attr("title", ""), $removeHover$$(null, $$R$$[0]))
					}
				},
				allowOverflow: $allowOverflow$$,
				resetOverflow: $resetOverflow$$,
				destroy: function($evt_or_destroyChildren$$, $destroyChildren$$) {
					$$$$(window).unbind("." + $sID$$);
					$$$$(document).unbind("." + $sID$$);
					"object" === typeof $evt_or_destroyChildren$$ ? $evtPane$$($evt_or_destroyChildren$$) : $destroyChildren$$ = $evt_or_destroyChildren$$;
					$$N$$.clearQueue().removeData("layout").removeData("layoutContainer").removeClass($options$$.containerClass).unbind("." +
					$sID$$);
					$$Ms$$.remove();
					$$$$.each($_c$$.allPanes,
					function($i$$, $pane$$) {
						$removePane$$($pane$$, !1, !0, $destroyChildren$$)
					});
					$$N$$.data("layoutCSS") && !$$N$$.data("layoutRole") && $$N$$.css($$N$$.data("layoutCSS")).removeData("layoutCSS");
					"BODY" === $sC$$.tagName && ($$N$$ = $$$$("html")).data("layoutCSS") && $$N$$.css($$N$$.data("layoutCSS")).removeData("layoutCSS");
					$runPluginCallbacks$$($Instance$$, $$$$.layout.onDestroy);
					$unload$$();
					for (var $n$$ in $Instance$$) $n$$.match(/^(container|options)$/) || delete $Instance$$[$n$$];
					$Instance$$.destroyed = !0;
					return $Instance$$
				},
				initPanes: $isInitialized$$,
				resizeAll: $resizeAll$$,
				runCallbacks: $_runCallbacks$$,
				hasParentLayout: !1,
				children: $children$$,
				north: !1,
				south: !1,
				west: !1,
				east: !1,
				center: !1
			},
			$JSCompiler_inline_result$$;
			var $data$$,
			$d$$0$$,
			$key$$0$$,
			$val$$,
			$i$$1$$,
			$c$$0$$,
			$o$$0$$,
			$opts$$0$$ = $$$$.layout.transformData($opts$$0$$, !0),
			$opts$$0$$ = $$$$.layout.backwardCompatibility.renameAllOptions($opts$$0$$);
			if (!$$$$.isEmptyObject($opts$$0$$.panes)) {
				$data$$ = $$$$.layout.optionsMap.noDefault;
				$i$$1$$ = 0;
				for ($c$$0$$ = $data$$.length; $i$$1$$ < $c$$0$$; $i$$1$$++) $key$$0$$ = $data$$[$i$$1$$],
				delete $opts$$0$$.panes[$key$$0$$];
				$data$$ = $$$$.layout.optionsMap.layout;
				$i$$1$$ = 0;
				for ($c$$0$$ = $data$$.length; $i$$1$$ < $c$$0$$; $i$$1$$++) $key$$0$$ = $data$$[$i$$1$$],
				delete $opts$$0$$.panes[$key$$0$$]
			}
			$data$$ = $$$$.layout.optionsMap.layout;
			var $rootKeys$$ = $$$$.layout.config.optionRootKeys;
			for ($key$$0$$ in $opts$$0$$) $val$$ = $opts$$0$$[$key$$0$$],
			0 > $$$$.inArray($key$$0$$, $rootKeys$$) && 0 > $$$$.inArray($key$$0$$, $data$$) &&
			($opts$$0$$.panes[$key$$0$$] || ($opts$$0$$.panes[$key$$0$$] = $$$$.isPlainObject($val$$) ? $$$$.extend(!0, {},
			$val$$) : $val$$), delete $opts$$0$$[$key$$0$$]);
			$$$$.extend(!0, $options$$, $opts$$0$$);
			$$$$.each($_c$$.allPanes,
			function($i$$0$$, $pane$$) {
				$_c$$[$pane$$] = $$$$.extend(!0, {},
				$_c$$.panes, $_c$$[$pane$$]);
				$d$$0$$ = $options$$.panes;
				$o$$0$$ = $options$$[$pane$$];
				if ("center" === $pane$$) {
					$data$$ = $$$$.layout.optionsMap.center;
					$i$$0$$ = 0;
					for ($c$$0$$ = $data$$.length; $i$$0$$ < $c$$0$$; $i$$0$$++) if ($key$$0$$ = $data$$[$i$$0$$],
					!$opts$$0$$.center[$key$$0$$] && ($opts$$0$$.panes[$key$$0$$] || !$o$$0$$[$key$$0$$])) $o$$0$$[$key$$0$$] = $d$$0$$[$key$$0$$]
				} else {
					$o$$0$$ = $options$$[$pane$$] = $$$$.extend(!0, {},
					$d$$0$$, $o$$0$$);
					var $o$$ = $options$$[$pane$$],
					$d$$ = $options$$.panes;
					$o$$.fxSettings || ($o$$.fxSettings = {});
					$d$$.fxSettings || ($d$$.fxSettings = {});
					$$$$.each(["_open", "_close", "_size"],
					function($i$$, $n$$) {
						var $fx_all$$inline_201_sName$$ = "fxName" + $n$$,
						$sSpeed$$ = "fxSpeed" + $n$$,
						$sSettings$$ = "fxSettings" + $n$$,
						$fx$$inline_200_fxName$$inline_198_fx_pane$$ =
						$o$$[$fx_all$$inline_201_sName$$] = $o$$[$fx_all$$inline_201_sName$$] || $d$$[$fx_all$$inline_201_sName$$] || $o$$.fxName || $d$$.fxName || "none",
						$fxExists$$ = $$$$.effects && ($$$$.effects[$fx$$inline_200_fxName$$inline_198_fx_pane$$] || $$$$.effects.effect && $$$$.effects.effect[$fx$$inline_200_fxName$$inline_198_fx_pane$$]);
						if ($fx$$inline_200_fxName$$inline_198_fx_pane$$ === "none" || !$options$$.effects[$fx$$inline_200_fxName$$inline_198_fx_pane$$] || !$fxExists$$) $fx$$inline_200_fxName$$inline_198_fx_pane$$ = $o$$[$fx_all$$inline_201_sName$$] =
						"none";
						$fx$$inline_200_fxName$$inline_198_fx_pane$$ = $options$$.effects[$fx$$inline_200_fxName$$inline_198_fx_pane$$] || {};
						$fx_all$$inline_201_sName$$ = $fx$$inline_200_fxName$$inline_198_fx_pane$$.all || null;
						$fx$$inline_200_fxName$$inline_198_fx_pane$$ = $fx$$inline_200_fxName$$inline_198_fx_pane$$[$pane$$] || null;
						$o$$[$sSpeed$$] = $o$$[$sSpeed$$] || $d$$[$sSpeed$$] || $o$$.fxSpeed || $d$$.fxSpeed || null;
						$o$$[$sSettings$$] = $$$$.extend(true, {},
						$fx_all$$inline_201_sName$$, $fx$$inline_200_fxName$$inline_198_fx_pane$$,
						$d$$.fxSettings, $o$$.fxSettings, $d$$[$sSettings$$], $o$$[$sSettings$$])
					});
					delete $o$$.fxName;
					delete $o$$.fxSpeed;
					delete $o$$.fxSettings;
					$o$$0$$.resizerClass || ($o$$0$$.resizerClass = "ui-layout-resizer");
					$o$$0$$.togglerClass || ($o$$0$$.togglerClass = "ui-layout-toggler")
				}
				$o$$0$$.paneClass || ($o$$0$$.paneClass = "ui-layout-pane")
			});
			var $zo$$ = $opts$$0$$.zIndex,
			$z$$0$$ = $options$$.zIndexes;
			0 < $zo$$ && ($z$$0$$.pane_normal = $zo$$, $z$$0$$.content_mask = $max$$($zo$$ + 1, $z$$0$$.content_mask), $z$$0$$.resizer_normal = $max$$($zo$$ +
			2, $z$$0$$.resizer_normal));
			delete $options$$.panes;
			var $o$$1$$ = $options$$,
			$s$$1$$ = $state$$;
			$s$$1$$.creatingLayout = !0;
			$runPluginCallbacks$$($Instance$$, $$$$.layout.onCreate);
			if (!1 === $_runCallbacks$$("onload_start")) $JSCompiler_inline_result$$ = "cancel";
			else {
				var $N$$ = $$N$$[0],
				$$H$$ = $$$$("html"),
				$tag$$ = $sC$$.tagName = $N$$.tagName,
				$id$$ = $sC$$.id = $N$$.id,
				$cls$$ = $sC$$.className = $N$$.className,
				$o$$2$$ = $options$$,
				$name$$0$$ = $o$$2$$.name,
				$CSS$$0$$ = {},
				$parent$$ = $$N$$.data("parentLayout"),
				$pane$$1$$ = $$N$$.data("layoutEdge"),
				$isChild$$ = $parent$$ && $pane$$1$$,
				$num$$ = $$$$.layout.cssNum,
				$$parent$$,
				$n$$0$$;
				$sC$$.selector = $$N$$.selector.split(".slice")[0];
				$sC$$.ref = ($o$$2$$.name ? $o$$2$$.name + " layout / ": "") + $tag$$ + ($id$$ ? "#" + $id$$: $cls$$ ? ".[" + $cls$$ + "]": "");
				$sC$$.isBody = "BODY" === $tag$$; ! $isChild$$ && !$sC$$.isBody && ($$parent$$ = $$N$$.closest("." + $$$$.layout.defaults.panes.paneClass), $parent$$ = $$parent$$.data("parentLayout"), $pane$$1$$ = $$parent$$.data("layoutEdge"), $isChild$$ = $parent$$ && $pane$$1$$);
				$$N$$.data({
					layout: $Instance$$,
					layoutContainer: $sID$$
				}).addClass($o$$2$$.containerClass);
				var $layoutMethods$$ = {
					destroy: "",
					initPanes: "",
					resizeAll: "resizeAll",
					resize: "resizeAll"
				};
				for ($name$$0$$ in $layoutMethods$$) $$N$$.bind("layout" + $name$$0$$.toLowerCase() + "." + $sID$$, $Instance$$[$layoutMethods$$[$name$$0$$] || $name$$0$$]);
				$isChild$$ && ($Instance$$.hasParentLayout = !0, $parent$$.refreshChildren($pane$$1$$, $Instance$$));
				$$N$$.data("layoutCSS") || ($sC$$.isBody ? ($$N$$.data("layoutCSS", $$$$.extend($styles$$($$N$$, "position,margin,padding,border"),
				{
					height: $$N$$.css("height"),
					overflow: $$N$$.css("overflow"),
					overflowX: $$N$$.css("overflowX"),
					overflowY: $$N$$.css("overflowY")
				})), $$H$$.data("layoutCSS", $$$$.extend($styles$$($$H$$, "padding"), {
					height: "auto",
					overflow: $$H$$.css("overflow"),
					overflowX: $$H$$.css("overflowX"),
					overflowY: $$H$$.css("overflowY")
				}))) : $$N$$.data("layoutCSS", $styles$$($$N$$, "position,margin,padding,border,top,bottom,left,right,width,height,overflow,overflowX,overflowY")));
				try {
					$CSS$$0$$ = {
						overflow: "hidden",
						overflowX: "hidden",
						overflowY: "hidden"
					};
					$$N$$.css($CSS$$0$$);
					$o$$2$$.inset && !$$$$.isPlainObject($o$$2$$.inset) && ($n$$0$$ = parseInt($o$$2$$.inset, 10) || 0, $o$$2$$.inset = {
						top: $n$$0$$,
						bottom: $n$$0$$,
						left: $n$$0$$,
						right: $n$$0$$
					});
					if ($sC$$.isBody) $o$$2$$.outset ? $$$$.isPlainObject($o$$2$$.outset) || ($n$$0$$ = parseInt($o$$2$$.outset, 10) || 0, $o$$2$$.outset = {
						top: $n$$0$$,
						bottom: $n$$0$$,
						left: $n$$0$$,
						right: $n$$0$$
					}) : $o$$2$$.outset = {
						top: $num$$($$H$$, "paddingTop"),
						bottom: $num$$($$H$$, "paddingBottom"),
						left: $num$$($$H$$, "paddingLeft"),
						right: $num$$($$H$$, "paddingRight")
					},
					$$H$$.css($CSS$$0$$).css({
						height: "100%",
						border: "none",
						padding: 0,
						margin: 0
					}),
					$browser$$.isIE6 ? ($$N$$.css({
						width: "100%",
						height: "100%",
						border: "none",
						padding: 0,
						margin: 0,
						position: "relative"
					}), $o$$2$$.inset || ($o$$2$$.inset = $elDims$$($$N$$).inset)) : ($$N$$.css({
						width: "auto",
						height: "auto",
						margin: 0,
						position: "absolute"
					}), $$N$$.css($o$$2$$.outset)),
					$$$$.extend($sC$$, $elDims$$($$N$$, $o$$2$$.inset));
					else {
						var $p$$0$$ = $$N$$.css("position"); (!$p$$0$$ || !$p$$0$$.match(/(fixed|absolute|relative)/)) && $$N$$.css("position",
						"relative");
						$$N$$.is(":visible") && ($$$$.extend($sC$$, $elDims$$($$N$$, $o$$2$$.inset)), 1 > $sC$$.innerHeight && $_log$$($o$$2$$.errors.noContainerHeight.replace(/CONTAINER/, $sC$$.ref)))
					}
					$num$$($$N$$, "minWidth") && $$N$$.parent().css("overflowX", "auto");
					$num$$($$N$$, "minHeight") && $$N$$.parent().css("overflowY", "auto")
				} catch($ex$$0$$) {}
				$initHotkeys$$();
				$$$$(window).bind("unload." + $sID$$, $unload$$);
				$runPluginCallbacks$$($Instance$$, $$$$.layout.onLoad);
				$o$$1$$.initPanes && $_initLayoutElements$$();
				delete $s$$1$$.creatingLayout;
				$JSCompiler_inline_result$$ = $state$$.initialized
			}
			return "cancel" === $JSCompiler_inline_result$$ ? null: $Instance$$
		}
	})(jQuery);
	 (function($$$$) {
		$$$$.ui || ($$$$.ui = {});
		$$$$.ui.cookie = {
			acceptsCookies: !!navigator.cookieEnabled,
			read: function $$$$$$ui$cookie$read$($name$$) {
				for (var $c$$ = document.cookie, $c$$ = $c$$ ? $c$$.split(";") : [], $pair$$, $i$$ = 0, $n$$ = $c$$.length; $i$$ < $n$$; $i$$++) {
					$pair$$ = $$$$.trim($c$$[$i$$]).split("=");
					if ($pair$$[0] == $name$$) return decodeURIComponent($pair$$[1])
				}
				return null
			},
			write: function $$$$$$ui$cookie$write$($name$$, $val$$, $cookieOpts_o$$) {
				var $params$$ = "",
				$date$$ = "",
				$clear$$ = false,
				$cookieOpts_o$$ = $cookieOpts_o$$ ||
				{},
				$x$$ = $cookieOpts_o$$.expires || null,
				$t$$ = $$$$.type($x$$);
				if ($t$$ === "date") $date$$ = $x$$;
				else if ($t$$ === "string" && $x$$ > 0) {
					$x$$ = parseInt($x$$, 10);
					$t$$ = "number"
				}
				if ($t$$ === "number") {
					$date$$ = new Date;
					if ($x$$ > 0) $date$$.setDate($date$$.getDate() + $x$$);
					else {
						$date$$.setFullYear(1970);
						$clear$$ = true
					}
				}
				$date$$ && ($params$$ = $params$$ + (";expires=" + $date$$.toUTCString()));
				$cookieOpts_o$$.path && ($params$$ = $params$$ + (";path=" + $cookieOpts_o$$.path));
				$cookieOpts_o$$.domain && ($params$$ = $params$$ + (";domain=" + $cookieOpts_o$$.domain));
				$cookieOpts_o$$.secure && ($params$$ = $params$$ + ";secure");
				document.cookie = $name$$ + "=" + ($clear$$ ? "": encodeURIComponent($val$$)) + $params$$
			},
			clear: function $$$$$$ui$cookie$clear$($name$$) {
				$$$$.ui.cookie.write($name$$, "", {
					expires: -1
				})
			}
		};
		$$$$.cookie || ($$$$.cookie = function $$$$$$cookie$($k$$, $v$$, $o$$) {
			var $C$$ = $$$$.ui.cookie;
			if ($v$$ === null) $C$$.clear($k$$);
			else {
				if ($v$$ === void 0) return $C$$.read($k$$);
				$C$$.write($k$$, $v$$, $o$$)
			}
		});
		$$$$.layout.plugins.stateManagement = !0;
		$$$$.layout.config.optionRootKeys.push("stateManagement");
		$$$$.layout.defaults.stateManagement = {
			enabled: !1,
			autoSave: !0,
			autoLoad: !0,
			animateLoad: !0,
			includeChildren: !0,
			stateKeys: "north.size,south.size,east.size,west.size,north.isClosed,south.isClosed,east.isClosed,west.isClosed,north.isHidden,south.isHidden,east.isHidden,west.isHidden",
			cookie: {
				name: "",
				domain: "",
				path: "",
				expires: "",
				secure: !1
			}
		};
		$$$$.layout.optionsMap.layout.push("stateManagement");
		$$$$.layout.state = {
			saveCookie: function $$$$$$layout$state$saveCookie$($data$$, $keys$$, $cookieOpts$$) {
				var $o$$ = $data$$.options,
				$sm$$ = $o$$.stateManagement,
				$cookieOpts$$ = $$$$.extend(true, {},
				$sm$$.cookie, $cookieOpts$$ || null),
				$data$$ = $data$$.state.stateData = $data$$.readState($keys$$ || $sm$$.stateKeys);
				$$$$.ui.cookie.write($cookieOpts$$.name || $o$$.name || "Layout", $$$$.layout.state.encodeJSON($data$$), $cookieOpts$$);
				return $$$$.extend(true, {},
				$data$$)
			},
			deleteCookie: function $$$$$$layout$state$deleteCookie$($inst$$1_o$$) {
				$inst$$1_o$$ = $inst$$1_o$$.options;
				$$$$.ui.cookie.clear($inst$$1_o$$.stateManagement.cookie.name || $inst$$1_o$$.name ||
				"Layout")
			},
			readCookie: function $$$$$$layout$state$readCookie$($c$$23_inst$$2_o$$) {
				$c$$23_inst$$2_o$$ = $c$$23_inst$$2_o$$.options;
				return ($c$$23_inst$$2_o$$ = $$$$.ui.cookie.read($c$$23_inst$$2_o$$.stateManagement.cookie.name || $c$$23_inst$$2_o$$.name || "Layout")) ? $$$$.layout.state.decodeJSON($c$$23_inst$$2_o$$) : {}
			},
			loadCookie: function $$$$$$layout$state$loadCookie$($inst$$) {
				var $c$$ = $$$$.layout.state.readCookie($inst$$);
				if ($c$$) {
					$inst$$.state.stateData = $$$$.extend(true, {},
					$c$$);
					$inst$$.loadState($c$$)
				}
				return $c$$
			},
			loadState: function $$$$$$layout$state$loadState$($inst$$, $data$$, $opts$$) {
				if ($$$$.isPlainObject($data$$) && !$$$$.isEmptyObject($data$$)) {
					$data$$ = $inst$$.state.stateData = $$$$.layout.transformData($data$$);
					$opts$$ = $$$$.extend({
						animateLoad: false,
						includeChildren: $inst$$.options.stateManagement.includeChildren
					},
					$opts$$);
					if ($inst$$.state.initialized) {
						var $noAnimate$$ = !$opts$$.animateLoad,
						$c$$,
						$h$$,
						$state$$,
						$open$$;
						$$$$.each($$$$.layout.config.borderPanes,
						function($idx$$, $pane$$) {
							$o$$ = $data$$[$pane$$];
							if ($$$$.isPlainObject($o$$)) {
								s =
								$o$$.size;
								$c$$ = $o$$.initClosed;
								$h$$ = $o$$.initHidden;
								ar = $o$$.autoResize;
								$state$$ = $inst$$.state[$pane$$];
								$open$$ = $state$$.isVisible;
								if (ar) $state$$.autoResize = ar;
								$open$$ || $inst$$._sizePane($pane$$, s, false, false, false);
								$h$$ === true ? $inst$$.hide($pane$$, $noAnimate$$) : $c$$ === true ? $inst$$.close($pane$$, false, $noAnimate$$) : $c$$ === false ? $inst$$.open($pane$$, false, $noAnimate$$) : $h$$ === false && $inst$$.show($pane$$, false, $noAnimate$$);
								$open$$ && $inst$$._sizePane($pane$$, s, false, false, $noAnimate$$)
							}
						});
						if ($opts$$.includeChildren) {
							var $paneStateChildren$$,
							$childState$$;
							$$$$.each($inst$$.children,
							function($pane$$, $paneChildren$$) { ($paneStateChildren$$ = $data$$[$pane$$] ? $data$$[$pane$$].children: 0) && $paneChildren$$ && $$$$.each($paneChildren$$,
								function($stateKey$$, $child$$) {
									$childState$$ = $paneStateChildren$$[$stateKey$$];
									$child$$ && $childState$$ && $child$$.loadState($childState$$)
								})
							})
						}
					} else {
						var $o$$ = $$$$.extend(true, {},
						$data$$);
						$$$$.each($$$$.layout.config.allPanes,
						function($idx$$, $pane$$) {
							$o$$[$pane$$] && delete $o$$[$pane$$].children
						});
						$$$$.extend(true, $inst$$.options,
						$o$$)
					}
				}
			},
			readState: function $$$$$$layout$state$readState$($inst$$, $opts$$) {
				$$$$.type($opts$$) === "string" && ($opts$$ = {
					keys: $opts$$
				});
				$opts$$ || ($opts$$ = {});
				var $keys$$3_sm$$ = $inst$$.options.stateManagement,
				$ic_recurse$$ = $opts$$.includeChildren,
				$ic_recurse$$ = $ic_recurse$$ !== void 0 ? $ic_recurse$$: $keys$$3_sm$$.includeChildren,
				$keys$$3_sm$$ = $opts$$.stateKeys || $keys$$3_sm$$.stateKeys,
				$alt$$ = {
					isClosed: "initClosed",
					isHidden: "initHidden"
				},
				$state$$ = $inst$$.state,
				$panes$$ = $$$$.layout.config.allPanes,
				$data$$ = {},
				$key$$39_pair$$,
				$pane$$0$$,
				$val$$,
				$ps$$,
				$pC$$,
				$branch$$;
				$$$$.isArray($keys$$3_sm$$) && ($keys$$3_sm$$ = $keys$$3_sm$$.join(","));
				for (var $keys$$3_sm$$ = $keys$$3_sm$$.replace(/__/g, ".").split(","), $i$$ = 0, $n$$ = $keys$$3_sm$$.length; $i$$ < $n$$; $i$$++) {
					$key$$39_pair$$ = $keys$$3_sm$$[$i$$].split(".");
					$pane$$0$$ = $key$$39_pair$$[0];
					$key$$39_pair$$ = $key$$39_pair$$[1];
					if (! ($$$$.inArray($pane$$0$$, $panes$$) < 0)) {
						$val$$ = $state$$[$pane$$0$$][$key$$39_pair$$];
						if ($val$$ != void 0) {
							$key$$39_pair$$ == "isClosed" && $state$$[$pane$$0$$].isSliding &&
							($val$$ = true); ($data$$[$pane$$0$$] || ($data$$[$pane$$0$$] = {}))[$alt$$[$key$$39_pair$$] ? $alt$$[$key$$39_pair$$] : $key$$39_pair$$] = $val$$
						}
					}
				}
				$ic_recurse$$ && $$$$.each($panes$$,
				function($idx$$, $pane$$) {
					$pC$$ = $inst$$.children[$pane$$];
					$ps$$ = $state$$.stateData[$pane$$];
					if ($$$$.isPlainObject($pC$$) && !$$$$.isEmptyObject($pC$$)) {
						$branch$$ = $data$$[$pane$$] || ($data$$[$pane$$] = {});
						if (!$branch$$.children) $branch$$.children = {};
						$$$$.each($pC$$,
						function($key$$, $child$$) {
							$child$$.state.initialized ? $branch$$.children[$key$$] =
							$$$$.layout.state.readState($child$$) : $ps$$ && ($ps$$.children && $ps$$.children[$key$$]) && ($branch$$.children[$key$$] = $$$$.extend(true, {},
							$ps$$.children[$key$$]))
						})
					}
				});
				return $data$$
			},
			encodeJSON: function $$$$$$layout$state$encodeJSON$($JSON$$) {
				function $parse$$($h$$) {
					var $D$$ = [],
					$i$$ = 0,
					$k$$,
					$v$$,
					$t$$,
					$a$$ = $$$$.isArray($h$$);
					for ($k$$ in $h$$) {
						$v$$ = $h$$[$k$$];
						$t$$ = typeof $v$$;
						$t$$ == "string" ? $v$$ = '"' + $v$$ + '"': $t$$ == "object" && ($v$$ = $parse$$($v$$));
						$D$$[$i$$++] = (!$a$$ ? '"' + $k$$ + '":': "") + $v$$
					}
					return ($a$$ ? "[":
					"{") + $D$$.join(",") + ($a$$ ? "]": "}")
				}
				return $parse$$($JSON$$)
			},
			decodeJSON: function $$$$$$layout$state$decodeJSON$($str$$) {
				try {
					return $$$$.parseJSON ? $$$$.parseJSON($str$$) : window.eval("(" + $str$$ + ")") || {}
				} catch($e$$) {
					return {}
				}
			},
			_create: function $$$$$$layout$state$_create$($inst$$) {
				var $_$$ = $$$$.layout.state,
				$sm$$ = $inst$$.options.stateManagement;
				$$$$.extend($inst$$, {
					readCookie: function() {
						return $_$$.readCookie($inst$$)
					},
					deleteCookie: function() {
						$_$$.deleteCookie($inst$$)
					},
					saveCookie: function($keys$$, $cookieOpts$$) {
						return $_$$.saveCookie($inst$$,
						$keys$$, $cookieOpts$$)
					},
					loadCookie: function() {
						return $_$$.loadCookie($inst$$)
					},
					loadState: function($stateData$$, $opts$$) {
						$_$$.loadState($inst$$, $stateData$$, $opts$$)
					},
					readState: function($keys$$) {
						return $_$$.readState($inst$$, $keys$$)
					},
					encodeJSON: $_$$.encodeJSON,
					decodeJSON: $_$$.decodeJSON
				});
				$inst$$.state.stateData = {};
				if ($sm$$.autoLoad) if ($$$$.isPlainObject($sm$$.autoLoad)) $$$$.isEmptyObject($sm$$.autoLoad) || $inst$$.loadState($sm$$.autoLoad);
				else if ($sm$$.enabled) if ($$$$.isFunction($sm$$.autoLoad)) {
					var $d$$ =
					{};
					try {
						$d$$ = $sm$$.autoLoad($inst$$, $inst$$.state, $inst$$.options, $inst$$.options.name || "")
					} catch($e$$) {}
					$d$$ && ($$$$.isPlainObject($d$$) && !$$$$.isEmptyObject($d$$)) && $inst$$.loadState($d$$)
				} else $inst$$.loadCookie()
			},
			_unload: function $$$$$$layout$state$_unload$($inst$$) {
				var $sm$$ = $inst$$.options.stateManagement;
				if ($sm$$.enabled && $sm$$.autoSave) if ($$$$.isFunction($sm$$.autoSave)) try {
					$sm$$.autoSave($inst$$, $inst$$.state, $inst$$.options, $inst$$.options.name || "")
				} catch($e$$) {} else $inst$$.saveCookie()
			}
		};
		$$$$.layout.onCreate.push($$$$.layout.state._create);
		$$$$.layout.onUnload.push($$$$.layout.state._unload);
		$$$$.layout.plugins.buttons = !0;
		$$$$.layout.defaults.autoBindCustomButtons = !1;
		$$$$.layout.optionsMap.layout.push("autoBindCustomButtons");
		$$$$.layout.buttons = {
			init: function $$$$$$layout$buttons$init$($inst$$) {
				var $layout$$ = $inst$$.options.name || "",
				$name$$;
				$$$$.each(["toggle", "open", "close", "pin", "toggle-slide", "open-slide"],
				function($i$$, $action$$) {
					$$$$.each($$$$.layout.config.borderPanes,
					function($ii$$,
					$pane$$) {
						$$$$(".ui-layout-button-" + $action$$ + "-" + $pane$$).each(function() {
							$name$$ = $$$$(this).data("layoutName") || $$$$(this).attr("layoutName"); ($name$$ == void 0 || $name$$ === $layout$$) && $inst$$.bindButton(this, $action$$, $pane$$)
						})
					})
				})
			},
			get: function $$$$$$layout$buttons$get$($inst$$9_o$$, $btn_selector$$, $pane$$, $action$$) {
				var $$E$$ = $$$$($btn_selector$$),
				$inst$$9_o$$ = $inst$$9_o$$.options,
				$err$$ = $inst$$9_o$$.errors.addButtonError;
				if ($$E$$.length) if ($$$$.inArray($pane$$, $$$$.layout.config.borderPanes) < 0) {
					$$$$.layout.msg($err$$ +
					" " + $inst$$9_o$$.errors.pane + ": " + $pane$$, true);
					$$E$$ = $$$$("")
				} else {
					$btn_selector$$ = $inst$$9_o$$[$pane$$].buttonClass + "-" + $action$$;
					$$E$$.addClass($btn_selector$$ + " " + $btn_selector$$ + "-" + $pane$$).data("layoutName", $inst$$9_o$$.name)
				} else $$$$.layout.msg($err$$ + " " + $inst$$9_o$$.errors.selector + ": " + $btn_selector$$, true);
				return $$E$$
			},
			bind: function $$$$$$layout$buttons$bind$($inst$$, $selector$$, $action$$, $pane$$) {
				var $_$$ = $$$$.layout.buttons;
				switch ($action$$.toLowerCase()) {
				case "toggle":
					$_$$.addToggle($inst$$,
					$selector$$, $pane$$);
					break;
				case "open":
					$_$$.addOpen($inst$$, $selector$$, $pane$$);
					break;
				case "close":
					$_$$.addClose($inst$$, $selector$$, $pane$$);
					break;
				case "pin":
					$_$$.addPin($inst$$, $selector$$, $pane$$);
					break;
				case "toggle-slide":
					$_$$.addToggle($inst$$, $selector$$, $pane$$, true);
					break;
				case "open-slide":
					$_$$.addOpen($inst$$, $selector$$, $pane$$, true)
				}
				return $inst$$
			},
			addToggle: function $$$$$$layout$buttons$addToggle$($inst$$, $selector$$, $pane$$, $slide$$) {
				$$$$.layout.buttons.get($inst$$, $selector$$, $pane$$,
				"toggle").click(function($evt$$) {
					$inst$$.toggle($pane$$, !!$slide$$);
					$evt$$.stopPropagation()
				});
				return $inst$$
			},
			addOpen: function $$$$$$layout$buttons$addOpen$($inst$$, $selector$$, $pane$$, $slide$$) {
				$$$$.layout.buttons.get($inst$$, $selector$$, $pane$$, "open").attr("title", $inst$$.options[$pane$$].tips.Open).click(function($evt$$) {
					$inst$$.open($pane$$, !!$slide$$);
					$evt$$.stopPropagation()
				});
				return $inst$$
			},
			addClose: function $$$$$$layout$buttons$addClose$($inst$$, $selector$$, $pane$$) {
				$$$$.layout.buttons.get($inst$$,
				$selector$$, $pane$$, "close").attr("title", $inst$$.options[$pane$$].tips.Close).click(function($evt$$) {
					$inst$$.close($pane$$);
					$evt$$.stopPropagation()
				});
				return $inst$$
			},
			addPin: function $$$$$$layout$buttons$addPin$($inst$$, $selector$$, $pane$$) {
				var $_$$ = $$$$.layout.buttons,
				$$E$$ = $_$$.get($inst$$, $selector$$, $pane$$, "pin");
				if ($$E$$.length) {
					var $s$$ = $inst$$.state[$pane$$];
					$$E$$.click(function($evt$$) {
						$_$$.setPinState($inst$$, $$$$(this), $pane$$, $s$$.isSliding || $s$$.isClosed);
						$s$$.isSliding || $s$$.isClosed ?
						$inst$$.open($pane$$) : $inst$$.close($pane$$);
						$evt$$.stopPropagation()
					});
					$_$$.setPinState($inst$$, $$E$$, $pane$$, !$s$$.isClosed && !$s$$.isSliding);
					$s$$.pins.push($selector$$)
				}
				return $inst$$
			},
			setPinState: function $$$$$$layout$buttons$setPinState$($inst$$15_o$$, $$Pin$$, $UP_pane$$, $doPin$$) {
				var $DN_pin_updown$$ = $$Pin$$.attr("pin");
				if (! ($DN_pin_updown$$ && $doPin$$ === ($DN_pin_updown$$ == "down"))) {
					var $inst$$15_o$$ = $inst$$15_o$$.options[$UP_pane$$],
					$DN_pin_updown$$ = $inst$$15_o$$.buttonClass + "-pin",
					$side$$ = $DN_pin_updown$$ +
					"-" + $UP_pane$$,
					$UP_pane$$ = $DN_pin_updown$$ + "-up " + $side$$ + "-up",
					$DN_pin_updown$$ = $DN_pin_updown$$ + "-down " + $side$$ + "-down";
					$$Pin$$.attr("pin", $doPin$$ ? "down": "up").attr("title", $doPin$$ ? $inst$$15_o$$.tips.Unpin: $inst$$15_o$$.tips.Pin).removeClass($doPin$$ ? $UP_pane$$: $DN_pin_updown$$).addClass($doPin$$ ? $DN_pin_updown$$: $UP_pane$$)
				}
			},
			syncPinBtns: function $$$$$$layout$buttons$syncPinBtns$($inst$$, $pane$$, $doPin$$) {
				$$$$.each($inst$$.state[$pane$$].pins,
				function($i$$, $selector$$) {
					$$$$.layout.buttons.setPinState($inst$$,
					$$$$($selector$$), $pane$$, $doPin$$)
				})
			},
			_load: function $$$$$$layout$buttons$_load$($inst$$) {
				var $_$$ = $$$$.layout.buttons;
				$$$$.extend($inst$$, {
					bindButton: function($sel$$, $action$$, $pane$$) {
						return $_$$.bind($inst$$, $sel$$, $action$$, $pane$$)
					},
					addToggleBtn: function($sel$$, $pane$$, $slide$$) {
						return $_$$.addToggle($inst$$, $sel$$, $pane$$, $slide$$)
					},
					addOpenBtn: function($sel$$, $pane$$, $slide$$) {
						return $_$$.addOpen($inst$$, $sel$$, $pane$$, $slide$$)
					},
					addCloseBtn: function($sel$$, $pane$$) {
						return $_$$.addClose($inst$$,
						$sel$$, $pane$$)
					},
					addPinBtn: function($sel$$, $pane$$) {
						return $_$$.addPin($inst$$, $sel$$, $pane$$)
					}
				});
				for (var $i$$ = 0; $i$$ < 4; $i$$++) $inst$$.state[$$$$.layout.config.borderPanes[$i$$]].pins = [];
				$inst$$.options.autoBindCustomButtons && $_$$.init($inst$$)
			},
			_unload: function $$$$$$layout$buttons$_unload$() {}
		};
		$$$$.layout.onLoad.push($$$$.layout.buttons._load);
		$$$$.layout.plugins.browserZoom = !0;
		$$$$.layout.defaults.browserZoomCheckInterval = 1E3;
		$$$$.layout.optionsMap.layout.push("browserZoomCheckInterval");
		$$$$.layout.browserZoom =
		{
			_init: function $$$$$$layout$browserZoom$_init$($inst$$) {
				$$$$.layout.browserZoom.ratio() !== false && $$$$.layout.browserZoom._setTimer($inst$$)
			},
			_setTimer: function $$$$$$layout$browserZoom$_setTimer$($inst$$) {
				if (!$inst$$.destroyed) {
					var $o$$ = $inst$$.options,
					$s$$ = $inst$$.state,
					$ms$$ = $inst$$.hasParentLayout ? 5E3: Math.max($o$$.browserZoomCheckInterval, 100);
					setTimeout(function() {
						if (!$inst$$.destroyed && $o$$.resizeWithWindow) {
							var $d$$ = $$$$.layout.browserZoom.ratio();
							if ($d$$ !== $s$$.browserZoom) {
								$s$$.browserZoom =
								$d$$;
								$inst$$.resizeAll()
							}
							$$$$.layout.browserZoom._setTimer($inst$$)
						}
					},
					$ms$$)
				}
			},
			ratio: function $$$$$$layout$browserZoom$ratio$() {
				function $calc$$($x$$, $y$$) {
					return (parseInt($x$$, 10) / parseInt($y$$, 10) * 100).toFixed()
				}
				var $w$$ = window,
				$s$$ = screen,
				$d$$ = document,
				$dE$$ = $d$$.documentElement || $d$$.body,
				$b$$ = $$$$.layout.browser,
				$v$$ = $b$$.version,
				$r$$,
				$sW$$,
				$cW$$;
				return $b$$.msie && $v$$ > 8 || !$b$$.msie ? false: $s$$.deviceXDPI && $s$$.systemXDPI ? $calc$$($s$$.deviceXDPI, $s$$.systemXDPI) : $b$$.webkit && ($r$$ = $d$$.body.getBoundingClientRect) ?
				$calc$$($r$$.left - $r$$.right, $d$$.body.offsetWidth) : $b$$.webkit && ($sW$$ = $w$$.outerWidth) ? $calc$$($sW$$, $w$$.innerWidth) : ($sW$$ = $s$$.width) && ($cW$$ = $dE$$.clientWidth) ? $calc$$($sW$$, $cW$$) : false
			}
		};
		$$$$.layout.onReady.push($$$$.layout.browserZoom._init)
	})(jQuery);
	$.widget("ui.addable", {
		options: {
			max: null,
			min: 1,
			template: null,
			add: null,
			added: null
		},
		_create: function() {
			var $self$$ = this;
			this.options.add && this.element.append(this.options.add.bind("click",
			function() {
				$self$$.add()
			}))
		},
		add: function() {
			this.inserted = this.options.template.clone();
			this.options.add ? this.options.add.before(this.inserted) : this.element.append(this.inserted);
			this.options.added && this.options.added.apply(this)
		},
		last: function() {
			return this.inserted
		},
		template: function() {
			return this.options.template.clone()
		}
	});
	$.widget("ui.tabslite", {
		options: {
			init: function() {
				return ! 1
			},
			content: function() {
				return ! 1
			},
			toggleable: !1
		},
		show: function($tab$$, $noSwap$$) {
			var $$oldTab$$ = this.list.find("li.ui-tabs-selected.ui-state-active a"); (!$noSwap$$ || 0 == $$oldTab$$.length) && this.anchors[$tab$$] && $(this.anchors[$tab$$]).trigger("show")
		},
		tabs: function() {
			return this.anchors
		},
		active: function() {
			var $active$$ = null;
			this.anchors.each(function($id$$, $anchor$$) {
				$($anchor$$).data("tab").hasClass("ui-state-active") && ($active$$ = $anchor$$)
			});
			return $active$$
		},
		_create: function() {
			var $options$$ = this.options;
			this.list = this.element.find("ol,ul").eq(0);
			this.lis = $("li:has(a[href])", this.list);
			this.anchors = this.lis.map(function() {
				return $("a", this)[0]
			});
			this.element.addClass("ui-tabs ui-widget ui-widget-content");
			this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
			this.lis.addClass("ui-state-default ui-corner-top");
			$options$$.manual || this.anchors.each(function() {
				var $$anchor$$ = $(this),
				$$content$$ =
				$options$$.content($$anchor$$);
				$$anchor$$.data("tab", $$anchor$$.parents("li")).bind("click",
				function($event$$) {
					$options$$.preventDefault && $event$$.preventDefault();
					$$anchor$$.hasClass("disabled") || ($options$$.toggleable && $$anchor$$.data("tab").hasClass("ui-state-active") ? $(this).trigger("hide", !0) : $(this).trigger("show"))
				}).bind("hide",
				function() {
					$(this).data("tab").removeClass("ui-tabs-selected ui-state-active")
				}).bind("show",
				function() {
					var $$this$$ = $(this);
					$$this$$.parents("ul").find("li.ui-tabs-selected.ui-state-active a").trigger("hide");
					$$this$$.data("tab").addClass("ui-tabs-selected ui-state-active")
				});
				$$content$$.length && $$anchor$$.data("content", $$content$$).bind("show",
				function() {
					$(this).data("content").show()
				}).bind("hide",
				function($event$$, $toggled$$) {
					$toggled$$ || $(this).data("content").hide()
				});
				$$anchor$$.trigger("hide")
			})
		},
		_init: function() {
			this.options.init(this.anchors)
		}
	});
	$.widget("ui.form", {
		_create: function() {
			var $options$$ = this.options;
			$options$$.validation && $options$$.validation.rules && (this._validator = this.element.validate($options$$.validation));
			this.element.find("li fieldset.nested").parents("ul").each(function() {
				$(this).children("li").each(function() {
					var $$item$$ = $(this),
					$$input$$ = $$item$$.find("input").first(),
					$$nested$$ = $$item$$.find("fieldset.nested").first();
					$$nested$$.length && $$item$$.bind("render", {
						$input: $$input$$,
						$nested: $$nested$$
					},
					function() {
						$$input$$.is(":checked") ?
						$$nested$$.hasClass("disabled") || $$nested$$.show("fade") : $$nested$$.hide()
					}).trigger("render");
					$options$$.render && $$item$$.bind("render", $options$$.render);
					$$input$$.bind("change", {
						$item: $$item$$
					},
					function() {
						$$item$$.trigger("render");
						$$input$$.is(":radio") && $$item$$.siblings().trigger("render")
					})
				})
			})
		},
		validator: function() {
			return this._validator
		}
	});
	$.widget("ui.dialoglite", {
		options: {
			view: null,
			draggable: {}
		},
		_create: function() {
			var $options$$ = this.options;
			this.element.find(".dialog-close").bind("click",
			function() {
				$options$$.view.remove()
			});
			this.element.draggable($.extend({
				handle: "div.dialog-header",
				containment: "window"
			},
			$options$$.draggable));
			var $self$$ = this;
			this.element.find("div.dialog-header").bind("dblclick",
			function($e$$) {
				$e$$.preventDefault();
				$self$$.shade()
			})
		},
		tabify: function($callbacks$$) {
			var $self$$ = this,
			$callbacks$$ = $callbacks$$ || {};
			this.element.find("div.dialog-tabs").tabslite({
				preventDefault: !0,
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$1_anchor$$) {
						$$anchor$$1_anchor$$ = $($$anchor$$1_anchor$$);
						$$anchor$$1_anchor$$.data("content", $self$$.element.find("div.tab-content." + $$anchor$$1_anchor$$.attr("href").substr(1))).bind("show",
						function($event$$, $silent$$) {
							$(this).data("content").show(); ! $silent$$ && $callbacks$$.changed && $callbacks$$.changed()
						}).bind("hide",
						function($event$$, $silent$$) {
							$(this).data("content").hide();
							 ! $silent$$ && $callbacks$$.changed && $callbacks$$.changed()
						}).trigger("hide", !0)
					});
					$($anchors$$[0]).trigger("show")
				}
			})
		},
		shade: function() {
			var $$content$$ = this.element.find(".dialog-content");
			$$content$$.is(":visible") ? $$content$$.hide() : $$content$$.show()
		}
	}); (function($$$$) {
		$$$$.widget("ui.dialogManager", {
			options: {
				startZ: 100,
				buffer: 40
			},
			_init: function() {
				this.dialogs = [];
				this.order = [];
				this.dragged = [];
				return this
			},
			getItem: function($id$$) {
				return this.dialogs[$id$$] ? this.dialogs[$id$$] : null
			},
			addItem: function($id$$, $dialog$$, $noCentering$$) {
				var $self$$ = this;
				$dialog$$.css("z-index", $self$$.options.startZ + $self$$.order.length);
				$self$$.order.push($dialog$$);
				$self$$.dialogs[$id$$] = $dialog$$;
				$self$$.dragged[$id$$] = !1;
				$noCentering$$ || ($$$$(window).bind("resize",
				function() {
					$self$$.positionItem($id$$)
				}),
				$self$$.positionItem($id$$, !0));
				return $self$$.dialogs[$id$$]
			},
			removeItem: function($id$$) {
				var $dialog$$ = this.dialogs[$id$$];
				if (null != $dialog$$) {
					for (var $itemIndex$$ = -1, $count$$ = 0, $i$$ = 0; $i$$ < this.order.length; $i$$++) this.order[$i$$] == $dialog$$ ? $itemIndex$$ = $i$$: ($$$$(this.order[$i$$]).css("z-index", this.options.startZ + $count$$), $count$$++);
					this.order.splice($itemIndex$$, 1);
					this.dialogs[$id$$] = null
				}
			},
			positionItem: function($id$$, $center$$) {
				var $dialog$$ = this.dialogs[$id$$];
				if ($dialog$$) if (this.sizeItem($id$$),
				$center$$) $dialog$$.css("position", "absolute"),
				$dialog$$.css("top", ($dialog$$.parent().height() - $dialog$$.outerHeight()) / 2 + "px"),
				$dialog$$.css("left", ($dialog$$.parent().width() - $dialog$$.outerWidth()) / 2 + 15 * this.order.length + "px");
				else {
					var $offset$$ = $dialog$$.offset(),
					$heightOverflow$$ = $offset$$.top + $dialog$$.outerHeight() - $$$$(window).height(),
					$widthOverflow$$ = $offset$$.left + $dialog$$.outerWidth() - $$$$(window).width(); (0 < $heightOverflow$$ || 0 < $widthOverflow$$) && $dialog$$.offset({
						top: Math.max(0, $offset$$.top -
						Math.max(0, $heightOverflow$$)),
						left: Math.max(0, $offset$$.left - Math.max(0, $widthOverflow$$))
					})
				}
			},
			sizeItem: function($id$$, $max$$) {
				var $dialog$$3_outerHeight$$ = this.dialogs[$id$$],
				$$scrollable$$ = $dialog$$3_outerHeight$$.find(".scrollable:visible"),
				$maxHeight$$ = Math.round($$$$(window).height() - 2 * this.options.buffer),
				$scrollableHeight$$;
				$max$$ && $max$$.height && ($maxHeight$$ = Math.min($maxHeight$$, $max$$.height));
				$max$$ && $max$$.width && $dialog$$3_outerHeight$$.width() > $max$$.width && $dialog$$3_outerHeight$$.css("max-width",
				$max$$.width);
				$$scrollable$$.length && ($$scrollable$$.first().css("height", "auto"), $dialog$$3_outerHeight$$ = $dialog$$3_outerHeight$$.outerHeight(), $scrollableHeight$$ = $$scrollable$$.first().outerHeight(), $$scrollable$$.first().height(Math.min($scrollableHeight$$, $scrollableHeight$$ - ($dialog$$3_outerHeight$$ - $maxHeight$$))))
			},
			bringToFront: function($dialog$$4_id$$) {
				if ($dialog$$4_id$$ = this.dialogs[$dialog$$4_id$$]) {
					for (var $itemIndex$$ = -1, $count$$ = 0, $i$$ = 0; $i$$ < this.order.length; $i$$++) this.order[$i$$] ==
					$dialog$$4_id$$ ? $itemIndex$$ = $i$$: ($$$$(this.order[$i$$]).css("z-index", this.options.startZ + $count$$), $count$$++);
					this.order.splice($itemIndex$$, 1);
					this.order.push($dialog$$4_id$$);
					$$$$($dialog$$4_id$$).css("z-index", this.options.startZ + this.order.length)
				}
			},
			setDragged: function($id$$, $dragged$$) {
				this.dragged[$id$$] = $dragged$$
			},
			getDragged: function($id$$) {
				return this.dragged[$id$$]
			}
		})
	})(jQuery); (function($$$$) {
		$$$$.widget("ui.graph", {
			options: {},
			_init: function() {
				var $self$$ = this;
				$self$$.randomId = Math.floor(1E5 + 899999 * Math.random());
				$self$$.graphContainer = $$$$("<div></div>").css("height", "100%").css("width", "100%");
				$self$$.element.append($self$$.graphContainer);
				$self$$.resizeTimeout = null;
				$self$$.toolTipTimeout = null;
				$self$$.toolTip = $$$$("div.graph-tool-tip");
				0 == $self$$.toolTip.length && ($self$$.toolTip = $$$$("<div></div>").addClass("graph-tool-tip").append($$$$("<div></div>").addClass("graph-tool-tip-content")),
				$$$$("body").append($self$$.toolTip));
				$self$$.modal = $$$$('<div class="loading-modal"><div class="working-indicator"></div></div>');
				$self$$.element.append($self$$.modal);
				$self$$.options.clickHandler && $self$$.graphContainer.bind("plotclick",
				function($event$$, $pos$$, $item$$) {
					$item$$ && $item$$.dataIndex >= 0 && $self$$.options.clickHandler.apply($self$$.options.context, [$event$$, $pos$$, $item$$])
				});
				$self$$.options.toolTipHandler && ($self$$.graphContainer.bind("plothover",
				function($event$$, $pos$$, $item$$) {
					$$$$(this).offset();
					var $left$$ = $pos$$.pageX + 20;
					$left$$ + $self$$.toolTip.width() > $$$$(window).width() - 5 && ($left$$ = $pos$$.pageX - $self$$.toolTip.width() - 20);
					$self$$.toolTip.css("top", $pos$$.pageY - $self$$.toolTip.height() / 2).css("left", $left$$);
					if (!$self$$.toolTipTimeout) $self$$.toolTipTimeout = setTimeout(function() {
						$self$$.updateToolTip($event$$, $pos$$, $item$$)
					},
					50)
				}), $self$$.element.bind("mouseout",
				function() {
					$self$$.toolTipTimeout = null;
					$self$$.toolTip.hide()
				}));
				this.refresh()
			},
			toggleModal: function($indicator_visible$$,
			$loadingIndicator$$, $message$$) {
				$indicator_visible$$ ? ($indicator_visible$$ = this.modal.find(".loading-indicator"), this.modal.show(), $loadingIndicator$$ ? $indicator_visible$$.find(".loading-image").show() : $indicator_visible$$.find(".loading-image").hide(), $message$$ && $indicator_visible$$.find(".loading-message").html($message$$), $indicator_visible$$.css("margin-left", Math.floor( - $indicator_visible$$.width() / 2)), $indicator_visible$$.css("margin-top", Math.floor( - $indicator_visible$$.height() / 2))) : this.modal.hide()
			},
			enable: function() {
				var $self$$ = this;
				$$$$(window).bind("resize.graph-" + $self$$.randomId,
				function($event$$) {
					$event$$.target === window && !$self$$.resizeTimeout && ($self$$.resizeTimeout = setTimeout(function() {
						$self$$.resize()
					},
					100))
				})
			},
			disable: function() {
				$$$$(window).unbind("resize.graph-" + this.randomId)
			},
			resize: function() {
				this.resizeTimeout = null;
				this.modal.css("width", this.element.width());
				this.modal.css("height", this.element.height());
				this.graph.resize();
				this.graph.setupGrid();
				this.graph.draw()
			},
			getGraph: function() {
				return this.graph
			},
			_drawGraph: function() {
				this.graphData ? (this.graph = $$$$.plot(this.graphContainer, this.graphData, this.graphOptions), this.options.graph = this.graph, this.toggleModal(!1)) : this.toggleModal(!0, !1, "Data not available.")
			},
			updateToolTip: function($event$$, $pos$$, $item$$) {
				this.toolTipTimeout ? (this.toolTipTimeout = null, ($event$$ = this.options.toolTipHandler.apply(this.options.context, [$event$$, $pos$$, $item$$])) ? ($event$$.addClass("graph-tool-tip-content"), this.toolTip.empty().append($event$$), this.toolTip.show()) :
				this.toolTip.hide()) : this.toolTip.hide()
			},
			refresh: function() {
				var $self$$ = this;
				$self$$.graphOptions = $$$$.isFunction($self$$.options.graphOptions) ? $self$$.options.graphOptions.apply($self$$.options.context) : $self$$.options.graphOptions;
				null == $self$$.graph && ($self$$.graph = $$$$.plot($self$$.graphContainer, [], $self$$.graphOptions), $self$$.options.graph = $self$$.graph);
				$self$$.dataQuery = $$$$.isFunction($self$$.options.dataQuery) ? $self$$.options.dataQuery.apply($self$$.options.context) : $self$$.options.dataQuery;
				if ($self$$.options.graphData) $self$$.graphData = $$$$.isFunction($self$$.options.graphData) ? $self$$.options.graphData.apply($self$$.options.context) : $self$$.options.graphData,
				$self$$._drawGraph();
				else {
					$self$$.toggleModal(!0, !0, "Collecting data...");
					var $params$$ = {},
					$params$$ = $$$$.isFunction($self$$.options.dataQuery) ? $self$$.options.dataQuery.apply($self$$.options.context) : $self$$.options.dataQuery,
					$path$$;
					$path$$ = $$$$.isFunction($self$$.options.dataPath) ? $self$$.options.dataPath.apply($self$$.options.context) :
					$self$$.options.dataPath;
					$$$$.ajax({
						type: "GET",
						url: $path$$,
						data: $params$$,
						success: function($data$$) {
							$$$$.log($self$$.options.dataPath, $self$$.dataQuery, $data$$);
							$self$$.graphData = $self$$.options.dataHandler.apply($self$$.options.context, [$data$$]);
							$self$$._drawGraph()
						}
					})
				}
			}
		})
	})(jQuery); (function($$$$) {
		$$$$.extend(!0, $$$$.ui.button.prototype, {
			showWorkingIndicator: function($iconPosition$$, $icon$$) {
				var $icons$$ = {};
				$icons$$[$iconPosition$$ || "primary"] = $icon$$ || "ui-icon-circle-spinner";
				this._prevIcons = {};
				$$$$.extend(this._prevIcons, this.options.icons);
				this.disable();
				this._setOption("icons", $$$$.extend(this.options.icons, $icons$$))
			},
			hideWorkingIndicator: function($tempIcons$$, $delay$$) {
				var $self$$ = this,
				$icons$$ = this._prevIcons,
				$delay$$ = $delay$$ || 3E3;
				if (typeof $tempIcons$$ !== "undefined") {
					$icons$$ =
					$tempIcons$$;
					setTimeout(function() {
						$self$$._setOption("icons", $self$$._prevIcons)
					},
					$delay$$)
				}
				this.enable();
				this._setOption("icons", $icons$$)
			}
		})
	})(jQuery); (function($$$$) {
		var $defaultOptions$$ = {
			className: "infotip"
		},
		$methods$$ = {
			init: function($options$$) {
				$options$$ = $$$$.extend($defaultOptions$$, $options$$);
				return this.each(function() {
					$$$$(this);
					$$$$(this).find("[data-infotip]").each(function() {
						var $$el$$ = $$$$(this),
						$message$$18_top$$ = $$el$$.data("infotip"),
						$$icon$$ = $$$$('<span class="ui-icon ui-icon-muted ui-icon-info"></span>'),
						$$messageContainer$$ = $$$$("<div></div>").html($message$$18_top$$).addClass($options$$.className);
						window.app.tooltip.addElement($$icon$$,
						function() {
							return $$messageContainer$$
						});
						var $$hidden_left$$ = 0,
						$message$$18_top$$ = 0;
						if (!$options$$.position || !$options$$.position.manual) if ($message$$18_top$$ = 1, $$el$$.is(":visible")) $$hidden_left$$ = $$el$$.outerWidth() + 4;
						else {
							$$el$$.addClass("infotiphide");
							var $$hidden_left$$ = $$el$$.closest(".hidden"),
							$$substitute$$ = $$hidden_left$$.clone().appendTo($$hidden_left$$.parent()).show();
							$clone = $$substitute$$.find(".infotiphide");
							$$hidden_left$$ = $clone.outerWidth() + 4;
							$$substitute$$.remove();
							$$el$$.removeClass("infotiphide")
						}
						$options$$.position &&
						($options$$.position.left && ($$hidden_left$$ += $options$$.position.left), $options$$.position.top && ($message$$18_top$$ += $options$$.position.top), $$el$$.next().hasClass("ui-icon") && ($$el$$.next().hasClass("ui-icon-muted") && $$el$$.next().hasClass("ui-icon-info")) && $$el$$.next().remove());
						$$el$$.after($$icon$$);
						$$icon$$.css("left", $$hidden_left$$).css("top", $message$$18_top$$)
					})
				})
			},
			position: function() {
				return this.each(function() {
					$$$$(this);
					$$$$(this).find("[data-infotip]").each(function() {
						var $$el$$2_left$$ =
						$$$$(this),
						$message$$ = $$el$$2_left$$.data("infotip"),
						$$icon$$ = $$$$('<span class="ui-icon ui-icon-muted ui-icon-info"></span>'),
						$$messageContainer$$ = $$$$("<div></div>").html($message$$).addClass($defaultOptions$$.className);
						window.app.tooltip.addElement($$icon$$,
						function() {
							return $$messageContainer$$
						});
						$$el$$2_left$$.next().hasClass("ui-icon") && ($$el$$2_left$$.next().hasClass("ui-icon-muted") && $$el$$2_left$$.next().hasClass("ui-icon-info")) && $$el$$2_left$$.next().remove();
						$$el$$2_left$$.after($$icon$$);
						$$el$$2_left$$ = $$el$$2_left$$.outerWidth() + 4;
						$$icon$$.css("left", $$el$$2_left$$).css("top", 1)
					})
				})
			}
		};
		$$$$.fn.infotip = function $$$$$$fn$infotip$($method$$) {
			if ($methods$$[$method$$]) return $methods$$[$method$$].apply(this, Array.prototype.slice.call(arguments, 1));
			if ("object" === typeof $method$$ || !$method$$) return $methods$$.init.apply(this, arguments);
			$$$$.error("Method " + $method$$ + " does not exist on jQuery.infotip")
		}
	})(jQuery); (function($window$$) {
		var $root$$ = this,
		$previousUBNT$$ = $root$$.UBNT,
		$UBNT$$;
		$UBNT$$ = $root$$.UBNT = {};
		$UBNT$$.VERSION = "0.0.1";
		$UBNT$$.noConflict = function $$UBNT$$$noConflict$() {
			$root$$.UBNT = $previousUBNT$$;
			return this
		};
		$UBNT$$.namespace = function $$UBNT$$$namespace$() {
			var $a$$ = arguments,
			$o$$ = $window$$,
			$i$$,
			$arg$$5_j$$,
			$d$$;
			for ($i$$ = 0; $i$$ < $a$$.length; $i$$++) if ($arg$$5_j$$ = $a$$[$i$$], $arg$$5_j$$.indexOf(".")) {
				$d$$ = $arg$$5_j$$.split(".");
				for ($arg$$5_j$$ = 0; $arg$$5_j$$ < $d$$.length; $arg$$5_j$$++) $o$$[$d$$[$arg$$5_j$$]] =
				$o$$[$d$$[$arg$$5_j$$]] || {},
				$o$$ = $o$$[$d$$[$arg$$5_j$$]]
			} else $o$$[$arg$$5_j$$] = $o$$[$arg$$5_j$$] || {};
			return $o$$
		}
	})(window);
	UBNT.namespace("UBNT.Logger");
	UBNT.Logger = {
		Interface: {
			trace: function $UBNT$Logger$Interface$trace$() {
				UBNT.Logger.log.apply(UBNT.Logger, [arguments, UBNT.Logger.TRACE, this.FULLY_QUALIFIED_NAME])
			},
			debug: function $UBNT$Logger$Interface$debug$() {
				UBNT.Logger.log.apply(UBNT.Logger, [arguments, UBNT.Logger.DEBUG, this.FULLY_QUALIFIED_NAME])
			},
			info: function $UBNT$Logger$Interface$info$() {
				UBNT.Logger.log.apply(UBNT.Logger, [arguments, UBNT.Logger.INFO, this.FULLY_QUALIFIED_NAME])
			},
			warn: function $UBNT$Logger$Interface$warn$() {
				UBNT.Logger.log.apply(UBNT.Logger, [arguments,
				UBNT.Logger.WARN, this.FULLY_QUALIFIED_NAME])
			},
			error: function $UBNT$Logger$Interface$error$() {
				UBNT.Logger.log.apply(UBNT.Logger, [arguments, UBNT.Logger.ERROR, this.FULLY_QUALIFIED_NAME])
			},
			fatal: function $UBNT$Logger$Interface$fatal$() {
				UBNT.Logger.log.apply(UBNT.Logger, [arguments, UBNT.Logger.FATAL, this.FULLY_QUALIFIED_NAME])
			},
			setLogLevel: function $UBNT$Logger$Interface$setLogLevel$($level$$) {
				this.FULLY_QUALIFIED_NAME && UBNT.Logger.setLevel(this.FULLY_QUALIFIED_NAME, $level$$)
			}
		},
		trace: function $UBNT$Logger$trace$() {
			this.log.apply(this,
			[arguments, UBNT.Logger.TRACE])
		},
		debug: function $UBNT$Logger$debug$() {
			this.log.apply(this, [arguments, UBNT.Logger.DEBUG])
		},
		info: function $UBNT$Logger$info$() {
			this.log.apply(this, [arguments, UBNT.Logger.INFO])
		},
		warn: function $UBNT$Logger$warn$() {
			this.log.apply(this, [arguments, UBNT.Logger.WARN])
		},
		error: function $UBNT$Logger$error$() {
			this.log.apply(this, [arguments, UBNT.Logger.ERROR])
		},
		fatal: function $UBNT$Logger$fatal$() {
			this.log.apply(this, [arguments, UBNT.Logger.FATAL])
		},
		log: function $UBNT$Logger$log$($log_msg$$,
		$levelInt$$, $className$$2_i$$) {
			if (UBNT.Logger.ENABLED && (null == $className$$2_i$$ && ($className$$2_i$$ = "global"), !($levelInt$$ < this.getLevel($className$$2_i$$)))) {
				var $level$$ = "UNKNOWN";
				switch ($levelInt$$) {
				case UBNT.Logger.TRACE:
					$level$$ = "TRACE";
					break;
				case UBNT.Logger.DEBUG:
					$level$$ = "DEBUG";
					break;
				case UBNT.Logger.INFO:
					$level$$ = "INFO ";
					break;
				case UBNT.Logger.WARN:
					$level$$ = "WARN ";
					break;
				case UBNT.Logger.ERROR:
					$level$$ = "ERROR";
					break;
				case UBNT.Logger.FATAL:
					$level$$ = "FATAL"
				}
				var $output$$ = [];
				$output$$.push($level$$);
				$className$$2_i$$ && $output$$.push("[" + $className$$2_i$$ + "]");
				for ($className$$2_i$$ = 0; $className$$2_i$$ < $log_msg$$.length; $className$$2_i$$++) $output$$.push($log_msg$$[$className$$2_i$$]);
				if (void 0 != window.console) if (console.error.apply && $levelInt$$ >= UBNT.Logger.ERROR) console.error.apply(console, $output$$);
				else if (console.warn.apply && $levelInt$$ >= UBNT.Logger.WARN) console.warn.apply(console, $output$$);
				else if (console.log.apply) console.log.apply(console, $output$$);
				else {
					$log_msg$$ = "";
					for ($className$$2_i$$ =
					0; $className$$2_i$$ < $output$$.length; $className$$2_i$$++) $log_msg$$ += " " + $output$$[$className$$2_i$$];
					console.log($log_msg$$)
				}
			}
		},
		getLevel: function $UBNT$Logger$getLevel$($className$$3_classes$$) {
			for (var $level$$ = UBNT.Logger.DEFAULT, $className$$3_classes$$ = $className$$3_classes$$.split("."), $currentClass$$ = this.rules, $i$$ = 0; $i$$ < $className$$3_classes$$.length && void 0 !== $currentClass$$[$className$$3_classes$$[$i$$]]; $i$$++) $currentClass$$ = $currentClass$$[$className$$3_classes$$[$i$$]],
			void 0 !== $currentClass$$._level &&
			($level$$ = parseInt($currentClass$$._level));
			return $level$$
		},
		setLevel: function $UBNT$Logger$setLevel$() { (2 == arguments.length && "number" != typeof arguments[1] || 1 == arguments.length && "number" != typeof arguments[0]) && alert("UBNT.Logger - setLevel: Must provide a level.");
			if (1 == arguments.length) UBNT.Logger.DEFAULT = arguments[0];
			else if (2 == arguments.length) for (var $classes$$ = arguments[0].split("."), $currentClass$$ = this.rules, $i$$ = 0; $i$$ < $classes$$.length; $i$$++) void 0 === $currentClass$$[$classes$$[$i$$]] && ($currentClass$$[$classes$$[$i$$]] =
			{}),
			$currentClass$$ = $currentClass$$[$classes$$[$i$$]],
			$i$$ == $classes$$.length - 1 && ($currentClass$$._level = arguments[1]);
			else alert("UBNT.Logger - setLevel: Argument count mismatch.")
		},
		enable: function $UBNT$Logger$enable$() {
			UBNT.Logger.ENABLED = !0
		},
		disable: function $UBNT$Logger$disable$() {
			UBNT.Logger.ENABLED = !1
		},
		rules: {},
		OFF: Number.MAX_VALUE,
		FATAL: 5E4,
		ERROR: 4E4,
		WARN: 3E4,
		INFO: 2E4,
		DEBUG: 1E4,
		TRACE: 5E3,
		ALL: Number.MIN_VALUE,
		DEFAULT: Number.MIN_VALUE,
		ENABLED: !0
	};
	_.extend(Backbone.View.prototype, UBNT.Logger.Interface);
	_.extend(Backbone.Model.prototype, UBNT.Logger.Interface);
	_.extend(Backbone.Collection.prototype, UBNT.Logger.Interface);
	_.extend(Backbone.Router.prototype, UBNT.Logger.Interface);
	UBNT.namespace("UBNT.Utils");
	UBNT.Utils.Cookies = {
		get: function $UBNT$Utils$Cookies$get$($name$$66_results$$) {
			return ($name$$66_results$$ = document.cookie.match("(^|;) ?" + $name$$66_results$$ + "=([^;]*)(;|$)")) ? unescape($name$$66_results$$[2]) : null
		},
		set: function $UBNT$Utils$Cookies$set$($name$$, $value$$, $days$$) {
			var $date$$ = "";
			$days$$ && ($date$$ = new Date, $date$$.setTime($date$$.getTime() + 864E5 * $days$$), $date$$ = "; expires=" + $date$$.toGMTString());
			document.cookie = $name$$ + "=" + $value$$ + $date$$ + "; path=/"
		},
		"delete": function $UBNT$Utils$Cookies$delete$($name$$) {
			this.set($name$$, "",
			-1)
		}
	};
	UBNT.extend = function $UBNT$extend$($protoProps$$, $classProps$$) {
		var $child$$ = UBNT.inherits(this, $protoProps$$, $classProps$$);
		$child$$.extend = this.extend;
		return $child$$
	};
	UBNT.ctor = function $UBNT$ctor$() {};
	UBNT.inherits = function $UBNT$inherits$($parent$$, $protoProps$$, $staticProps$$) {
		var $child$$;
		$child$$ = $protoProps$$ && $protoProps$$.hasOwnProperty("constructor") ? $protoProps$$.constructor: function() {
			return $parent$$.apply(this, arguments)
		};
		_.extend($child$$, $parent$$);
		UBNT.ctor.prototype = $parent$$.prototype;
		$child$$.prototype = new UBNT.ctor;
		$protoProps$$ && _.extend($child$$.prototype, $protoProps$$);
		$staticProps$$ && _.extend($child$$, $staticProps$$);
		$child$$.prototype.constructor = $child$$;
		$child$$.__super__ =
		$parent$$.prototype;
		return $child$$
	};
	UBNT.getScrollBarWidth = function $UBNT$getScrollBarWidth$() {
		var $inner$$1_w2$$ = document.createElement("p");
		$inner$$1_w2$$.style.width = "100%";
		$inner$$1_w2$$.style.height = "200px";
		var $outer$$ = document.createElement("div");
		$outer$$.style.position = "absolute";
		$outer$$.style.top = "0px";
		$outer$$.style.left = "0px";
		$outer$$.style.visibility = "hidden";
		$outer$$.style.width = "200px";
		$outer$$.style.height = "150px";
		$outer$$.style.overflow = "hidden";
		$outer$$.appendChild($inner$$1_w2$$);
		document.body.appendChild($outer$$);
		var $w1$$ = $inner$$1_w2$$.offsetWidth;
		$outer$$.style.overflow = "scroll";
		$inner$$1_w2$$ = $inner$$1_w2$$.offsetWidth;
		$w1$$ == $inner$$1_w2$$ && ($inner$$1_w2$$ = $outer$$.clientWidth);
		document.body.removeChild($outer$$);
		return $w1$$ - $inner$$1_w2$$
	};
	UBNT.toPeriodTime = function $UBNT$toPeriodTime$($date$$) {
		var $hour$$ = $date$$.getHours(),
		$date$$ = ("0" + $date$$.getMinutes()).slice( - 2),
		$period$$ = "",
		$period$$ = 12 > $hour$$ ? "AM": "PM";
		0 === $hour$$ && ($hour$$ = 12);
		12 < $hour$$ && ($hour$$ -= 12);
		return $hour$$ + ":" + $date$$ + " " + $period$$
	};
	UBNT.formatTime = function $UBNT$formatTime$($milliseconds$$, $isShort$$) {
		var $date$$ = new Date($milliseconds$$);
		return $isShort$$ ? ("0" + $date$$.getUTCMinutes()).slice( - 2) + ":" + ("0" + $date$$.getUTCSeconds()).slice( - 2) : ("0" + $date$$.getUTCHours()).slice( - 2) + ":" + ("0" + $date$$.getUTCMinutes()).slice( - 2) + ":" + ("0" + $date$$.getUTCSeconds()).slice( - 2)
	};
	String.prototype.toProperCase = function $String$$toProperCase$() {
		return this.replace(/\w\S*/g,
		function($txt$$) {
			return $txt$$.charAt(0).toUpperCase() + $txt$$.substr(1).toLowerCase()
		})
	};
	String.prototype.removeNumbers = function $String$$removeNumbers$() {
		return this.replace(/[0-9]+$/g, "")
	};
	String.prototype.startWith = function $String$$startWith$($s$$) {
		return 0 == this.indexOf($s$$)
	};
	UBNT.EventDispatcher = {
		bind: function $UBNT$EventDispatcher$bind$($ev$$, $callback$$, $context$$) {
			var $calls$$ = this._callbacks || (this._callbacks = {}); ($calls$$[$ev$$] || ($calls$$[$ev$$] = [])).push([$callback$$, $context$$]);
			return this
		},
		unbind: function $UBNT$EventDispatcher$unbind$($ev$$, $callback$$) {
			var $calls$$4_list$$;
			if ($ev$$) {
				if ($calls$$4_list$$ = this._callbacks) if ($callback$$) {
					$calls$$4_list$$ = $calls$$4_list$$[$ev$$];
					if (!$calls$$4_list$$) return this;
					for (var $i$$ = 0, $l$$ = $calls$$4_list$$.length; $i$$ < $l$$; $i$$++) if ($calls$$4_list$$[$i$$] &&
					$callback$$ === $calls$$4_list$$[$i$$][0]) {
						$calls$$4_list$$[$i$$] = null;
						break
					}
				} else $calls$$4_list$$[$ev$$] = []
			} else this._callbacks = {};
			return this
		},
		trigger: function $UBNT$EventDispatcher$trigger$($eventName$$) {
			var $ev$$2_list$$,
			$calls$$,
			$callback$$,
			$args$$,
			$both$$ = 2;
			if (! ($calls$$ = this._callbacks)) return this;
			for (; $both$$--;) if ($ev$$2_list$$ = $both$$ ? $eventName$$: "all", $ev$$2_list$$ = $calls$$[$ev$$2_list$$]) for (var $i$$ = 0, $l$$ = $ev$$2_list$$.length; $i$$ < $l$$; $i$$++)($callback$$ = $ev$$2_list$$[$i$$]) ? ($args$$ =
			$both$$ ? Array.prototype.slice.call(arguments, 1) : arguments, $callback$$[0].apply($callback$$[1] || this, $args$$)) : ($ev$$2_list$$.splice($i$$, 1), $i$$--, $l$$--);
			return this
		}
	};
	UBNT.Task = function $UBNT$Task$() {
		this._progress = 0
	};
	_.extend(UBNT.Task.prototype, UBNT.EventDispatcher, {
		getProgress: function() {
			return this._progress
		},
		setProgress: function($value$$) {
			this._progress = $value$$
		},
		getProgressive: function() {
			return this._progressive
		},
		setProgressive: function($value$$) {
			this._progressive = $value$$
		},
		getName: function() {
			return this._name
		},
		setName: function($value$$) {
			this._name = $value$$
		},
		start: function() {
			this.setProgress(0)
		},
		complete: function() {
			this.setProgress(1);
			this.trigger("complete", {
				target: this
			})
		}
	});
	UBNT.Task.extend = UBNT.extend;
	UBNT.TaskManager = UBNT.Task.extend({
		constructor: function() {
			this._progressiveTasks = [];
			this._createdTasks = [];
			this._tasks = [];
			UBNT.Task.call(this)
		},
		reset: function() {
			this._progressiveTasks = [];
			this._createdTasks = [];
			this._tasks = [];
			this._progress = 0
		},
		getTasks: function() {
			return this._tasks
		},
		setTasks: function($value$$) {
			var $i$$,
			$len$$;
			$i$$ = 0;
			for ($len$$ = this._tasks.length; $i$$ < $len$$; $i$$ += 1) this.removeTask(this._tasks[$i$$]);
			this._tasks = [];
			$i$$ = 0;
			for ($len$$ = $value$$.length; $i$$ < $len$$; $i$$ += 1) this.addTask($value$$[$i$$])
		},
		getProgress: function() {
			var $loadedProgress$$ = 0,
			$i$$,
			$len$$,
			$task$$;
			$i$$ = 0;
			for ($len$$ = this._progressiveTasks.length; $i$$ < $len$$; $i$$ += 1) $task$$ = this._progressiveTasks[$i$$],
			$loadedProgress$$ += $task$$.getProgress();
			return $loadedProgress$$ / Math.max(this._progressiveTasks.length, 1)
		},
		setProgress: function($value$$) {
			var $i$$,
			$len$$;
			$i$$ = 0;
			for ($len$$ = this._progressiveTasks.length; $i$$ < $len$$; $i$$ += 1) this._progressiveTasks[$i$$].setProgress($value$$)
		},
		addTask: function($task$$) {
			$task$$ && (this._tasks.push($task$$),
			$task$$.getProgressive() && this._progressiveTasks.push($task$$), this.setProgressive());
			return $task$$
		},
		addTaskAt: function($task$$, $index$$) {
			$task$$ && ($task$$.getProgressive() && (this._progressiveTasks.push($task$$), this.setProgressive(!0)), this._tasks.splice($index$$, 0, $task$$), this.setProgressive());
			return $task$$
		},
		contains: function($task$$) {
			return - 1 !== this._tasks.indexOf($task$$)
		},
		getTaskAt: function($index$$) {
			return this._tasks[$index$$]
		},
		getTaskByName: function($name$$) {
			var $taskFound$$,
			$i$$,
			$len$$,
			$task$$;
			$i$$ = 0;
			for ($len$$ = this.getTasks().length; $i$$ < $len$$; $i$$ += 1) if ($task$$ = this._tasks[$i$$], $task$$.getName() === $name$$) {
				$taskFound$$ = $task$$;
				break
			}
			return $taskFound$$
		},
		getTaskIndex: function($task$$) {
			if (!this.contains($task$$)) throw Error("The supplied task must be a child of the caller.");
			return this._tasks.indexOf($task$$)
		},
		removeTask: function($task$$) {
			if (!this.contains($task$$)) throw Error("The supplied task must be a child of the caller.");
			var $index$$ = this.getTaskIndex($task$$); - 1 !== $index$$ &&
			this.removeTaskAt($index$$);
			this.setProgressive();
			return $task$$
		},
		removeTaskAt: function($index$$) {
			var $task$$ = this.getTaskAt($index$$);
			this._tasks.splice($index$$, 1);
			$index$$ = this._progressiveTasks.indexOf($task$$); - 1 !== $index$$ && this._progressiveTasks.splice($index$$, 1);
			this.setProgressive();
			return $task$$
		},
		setTaskIndex: function($task$$, $index$$) {
			if (!this.contains($task$$)) throw Error("The supplied task must be a child of the caller.");
			var $taskIndex$$ = this.getTaskIndex($task$$);
			this._tasks.splice($index$$,
			0, this.tasks()[$taskIndex$$]);
			this._tasks.splice($taskIndex$$, 1)
		},
		swapTasksAt: function($index1$$, $index2$$) {
			var $temp$$ = this._tasks[$index1$$];
			this._tasks[$index1$$] = this._tasks[$index2$$];
			this._tasks[$index2$$] = $temp$$
		},
		setProgressive: function() {
			this._progressive = 0 < this._progressiveTasks.length
		}
	});
	UBNT.TaskManager.extend = UBNT.extend;
	UBNT.SequentialTask = UBNT.TaskManager.extend({
		constructor: function() {
			UBNT.TaskManager.call(this);
			0 < arguments.length && (this._tasks = arguments)
		},
		taskCompleteHandler: function($event$$32_task$$) {
			$event$$32_task$$ = $event$$32_task$$.target;
			$event$$32_task$$.unbind("complete", this.taskCompleteHandler);
			this._createdTasks.push($event$$32_task$$);
			this._createdTasks.length === this._tasks.length ? this.complete() : this.createTask()
		},
		start: function() {
			this._createdTasks = [];
			0 < this._tasks.length ? this.createTask() : this.complete()
		},
		createTask: function() {
			var $task$$ = this._tasks[this._createdTasks.length];
			$task$$.bind("complete", this.taskCompleteHandler, this);
			$task$$.start()
		}
	});
	UBNT.ParallelTask = UBNT.TaskManager.extend({
		constructor: function() {
			UBNT.TaskManager.call(this);
			0 < arguments.length && (this._tasks = arguments)
		},
		taskCompleteHandler: function($event$$33_task$$) {
			$event$$33_task$$ = $event$$33_task$$.target;
			$event$$33_task$$.unbind("complete", this.taskCompleteHandler);
			this._createdTasks.push($event$$33_task$$);
			this._createdTasks.length === this._tasks.length && this.complete()
		},
		start: function() {
			this._createdTasks = [];
			if (0 < this._tasks.length) {
				var $i$$,
				$len$$,
				$task$$;
				$i$$ = 0;
				for ($len$$ =
				this._tasks.length; $i$$ < $len$$; $i$$ += 1) $task$$ = this._tasks[$i$$],
				$task$$.bind("complete", this.taskCompleteHandler, this),
				$task$$.start()
			} else this.complete()
		}
	});
	UBNT.JQueryAjaxTask = UBNT.Task.extend({
		constructor: function($url$$, $settings$$) {
			_.bindAll(this);
			UBNT.Task.call(this);
			this._url = $url$$;
			this._settings = $settings$$;
			this._debug = !1;
			this._success = $settings$$.success;
			this._error = $settings$$.error;
			this.setName($settings$$.name)
		},
		getContent: function() {
			return this._content
		},
		getUrl: function() {
			return this._url
		},
		getSettings: function() {
			return this._settings
		},
		ajaxSuccessHandler: function($data$$, $textStatus$$, $jqXHR$$) {
			this._content = $data$$;
			this._success && this._success.apply(this,
			arguments);
			this.complete()
		},
		ajaxErrorHandler: function($jqXHR$$, $textStatus$$, $errorThrown$$) {
			this._debug && console.log(this.toString() + " Error: could not load this file. textStatus=" + $textStatus$$ + " errorThrown=" + $errorThrown$$);
			this._error && this._error.apply(arguments);
			this.complete()
		},
		ajaxComplete: function($jqXHR$$, $textStatus$$) {
			this._debug && console.log(this.toString() + " Complete: textStatus=" + $textStatus$$)
		},
		start: function() {
			this._settings.success = this.ajaxSuccessHandler;
			this._settings.error = this.ajaxErrorHandler;
			this._settings.complete = this.ajaxComplete;
			$.ajax(this._url, this._settings)
		},
		toString: function() {
			return "[ UBNT.JQueryAjaxTask ] url:" + this._url
		}
	});
	UBNT.FunctionTask = UBNT.Task.extend({
		constructor: function($context$$, $method$$) {
			UBNT.Task.call(this);
			this._method = $method$$;
			this._context = $context$$;
			this._args = [];
			var $i$$,
			$len$$;
			$i$$ = 2;
			for ($len$$ = arguments.length; $i$$ < $len$$; $i$$ += 1) this._args.push(arguments[$i$$])
		},
		start: function() {
			this._method.apply(this._context, this._args);
			this.complete()
		}
	});
	UBNT.Timer = function $UBNT$Timer$($delay$$, $repeatCount$$) {
		_.bindAll(this);
		this._delay = $delay$$;
		this._repeatCount = $repeatCount$$ || 0;
		this._interval = void 0;
		this._currentCount = 0;
		this._isRunning = !1
	};
	_.extend(UBNT.Timer.prototype, UBNT.EventDispatcher, {
		setRunning: function() {
			throw Error("running is read-only");
		},
		setCurrentCount: function() {
			throw Error("currentCount is read-only");
		},
		reset: function() {
			this.stop();
			this._currentCount = 0
		},
		start: function() { ! this._interval && !(this._repeatCount && this._currentCount >= this._repeatCount) && (this._interval = setTimeout(this.tick, this._delay))
		},
		stop: function() {
			this._interval && clearTimeout(this._interval);
			this._interval = void 0
		},
		tick: function() {
			this._currentCount += 1;
			this._repeatCount && this._currentCount >= this._repeatCount ? (this.trigger(UBNT.TimerEvent.TIMER_COMPLETE, {
				target: this
			}), this.reset()) : (this._interval = setTimeout(this.tick, this._delay), this.trigger(UBNT.TimerEvent.TIMER))
		}
	});
	UBNT.TimerEvent = {
		TIMER_COMPLETE: "timer complete",
		TIMER: "timer"
	};
	UBNT.namespace("UBNT.views.uicomponents");
	UBNT.views.uicomponents.Tooltip = Backbone.View.extend({
		tagName: "div",
		className: "tooltip",
		initialize: function() {
			_.bindAll(this);
			this.$el = $(this.el);
			this.$content = $("<div></div>").addClass("tooltip-content");
			this.$el.append(this.$content);
			this.observables = []
		},
		render: function() {
			return this.$el
		},
		addElement: function($el$$, $contentRenderer$$, $observable_options$$) {
			var $$el$$ = $($el$$),
			$observable_options$$ = $observable_options$$ || {};
			$$el$$.data("tooltipLeftOffset", $observable_options$$.leftOffset || 0);
			$$el$$.data("tooltipTopOffset",
			$observable_options$$.topOffset || 0);
			$$el$$.data("tooltipTopOffsetAbsolute", $observable_options$$.topOffsetAbsolute || !1); ($observable_options$$ = _.find(this.observables,
			function($observable$$) {
				return $observable$$.el === $el$$
			})) ? ($observable_options$$.el.unbind("mouseover"), $observable_options$$.el.unbind("mouseout")) : ($observable_options$$ = {},
			this.observables.push($observable_options$$));
			$observable_options$$.el = $$el$$;
			$observable_options$$.el.data("renderer", $contentRenderer$$);
			$observable_options$$.el.bind("mouseenter",
			this._mouseOverHandler);
			$observable_options$$.el.bind("mouseleave", this._mouseOutHandler)
		},
		_mouseOverHandler: function($$el$$4_event$$) {
			$$el$$4_event$$ = $($$el$$4_event$$.target);
			this.$content.empty().html($$el$$4_event$$.data("renderer")());
			this.$el.show();
			var $offset$$ = $$el$$4_event$$.offset(),
			$left$$ = $offset$$.left + 20;
			$left$$ + this.$el.width() > $(window).width() - 5 && ($left$$ = $offset$$.left - this.$el.width() - 20);
			$left$$ += $$el$$4_event$$.data("tooltipLeftOffset");
			this.$el.css("top", $offset$$.top - ($$el$$4_event$$.data("tooltipTopOffsetAbsolute") ?
			0: this.$el.height() / 2) + $$el$$4_event$$.data("tooltipTopOffset")).css("left", $left$$)
		},
		_mouseOutHandler: function() {
			this.$el.hide()
		}
	});
	window.Msg = function $window$Msg$() {};
	Msg.E_Runtime = "Runtime error";
	Msg.E_Render = "Render error";
	Msg.E_NoConfig = "Unable to load the router configuration";
	Msg.E_NoConnection = "Unable to connect to the router. Please check your network connection.";
	Msg.E_SessionTimeout = "Your session has timed out. Please log in again.";
	Msg.E_InvalidConfig = "Invalid configuration data";
	Msg.E_InvalidConfigGet = "Missing GET data";
	Msg.E_InvalidConfigInterfaces = "Missing interface data";
	Msg.E_InvalidConfigService = "Missing service data";
	Msg.E_InvalidConfigSystem = "Missing system data";
	Msg.E_InvalidToolboxData = "Invalid toolbox data";
	Msg.E_InvalidToolboxPingData = "Invalid ping data";
	Msg.E_InvalidToolboxTraceData = "Invalid traceroute data";
	Msg.E_InvalidToolboxPacketsData = "Invalid packet data";
	Msg.E_InvalidToolboxLogmonData = "Invalid log monitor data";
	Msg.E_InvalidFirewallRulesetData = "Invalid firewall ruleset data";
	Msg.E_InvalidFirewallRuleData = "Invalid firewall rule data";
	Msg.E_InvalidFirewallGroupData = "Invalid group data";
	Msg.E_InvalidInterfaceData = "Invalid interface data";
	Msg.E_InvalidInterface = "Invalid interface";
	Msg.E_InvalidUserData = "Invalid user data";
	Msg.E_InvalidServiceData = "Invalid service data";
	Msg.E_InvalidServiceDhcpData = "Invalid service DHCP data";
	Msg.E_InvalidDhcpSharedNetworkData = "Invalid DHCP shared network data";
	Msg.E_InvalidDhcpSubnetData = "Invalid DHCP subnet data";
	Msg.E_InvalidDhcpStaticMappingData = "Invalid DHCP static mapping data";
	Msg.E_InvalidNatRuleData = "Invalid NAT rule data";
	Msg.E_InvalidRouteData = "Invalid route data";
	Msg.E_InvalidOspfAreaData = "Invalid OSPF area data";
	Msg.E_InvalidDataData = "Invalid get data type";
	Msg.E_InvalidSaveUrl = "Invalid save URL";
	Msg.E_MissingConfigTemplate = "Missing config dialog template";
	Msg.E_MissingConfigId = "Missing config dialog ID";
	Msg.E_MissingConfigType = "Missing config dialog type";
	Msg.E_MissingConfigTitle = "Missing config dialog title";
	Msg.E_MissingDataMethod = "Missing data method extension";
	Msg.E_ConfigSaveFailed = "Unable to download the configuration.";
	Msg.E_SaveFailed = "The save failed";
	Msg.E_NoResponse = "No response from server";
	Msg.E_Timeout = "The management session has expired. Please log in again.";
	Msg.E_OperationRebootFailed = "The reboot operation failed.";
	Msg.E_OperationResetFailed = "The reset operation failed.";
	Msg.E_OperationShutdownFailed = "The shutdown operation failed.";
	Msg.E_DhcpRenewFailed = "The DHCP renewal failed.";
	Msg.E_DhcpReleaseFailed = "The DHCP release failed.";
	Msg.E_MissingWebsockets = "This application requires a browser that supports websockets or Flash >= 10.";
	Msg.E_SafariBadWebSocket = "Safari failed to establish WebSocket connection. Please restart the browser and ensure that the EdgeRouter SSL certificate is marked as trusted for this site.";
	Msg.E_TrafficAnalysisDataClearFailed = "Error: Unable to clear traffic analysis data";
	Msg.E_WizardMissingHtml = "Error: Missing form HTML";
	Msg.E_WizardLoadFailed = "Error: Unable to load the wizard";
	Msg.E_WizardApplyFailed = "Failed to apply the configuration";
	Msg.E_WizardTestFailed = "Unable to test the wizard";
	Msg.N_WizardApplySuccess = "The configuration has been applied successfully";
	Msg.N_WizardApplySuccessConnFailed = "The wizard configuration has been applied successfully, but Internet connectivity test failed. Please check the Internet connection type/settings. Note that it may also be necessary to power-cycle the cable/DSL modem, for example.";
	Msg.E_WizardDeleteFailed = "Failed to delete the configuration";
	Msg.N_WizardDeleteSuccess = "The configuration has been deleted successfully";
	Msg.N_WizardDeleteSuccessConnFailed = "The wizard configuration has been deleted successfully, but Internet connectivity test failed. Please check the Internet connection type/settings. Note that it may also be necessary to power-cycle the cable/DSL modem, for example.";
	Msg.N_WizardTestSuccess = "The wizard test configuration has been applied successfully";
	Msg.N_WizardExit = "Once you leave the setup wizard you cannot come back unless you reset the router to the default configuration.";
	Msg.E_WizardUploadFailed = "There was an error uploading the wizard files";
	Msg.E_WizardMissingFiles = "Missing the required wizard .tar file";
	Msg.N_WizardCreateSuccess = "The wizard was uploaded successfully";
	Msg.E_WizardCreateFailed = "Unable to create the new wizard";
	Msg.N_WizardDeleteSuccess = "The wizard was removed successfully";
	Msg.E_WizardDeleteFailed = "Unable to removed the new wizard";
	Msg.N_RouteDisabled = "The route was disabled successfully";
	Msg.N_RouteEnabled = "The route was enabled successfully";
	Msg.N_PptpVpnCli = "PPTP VPN was configured using the CLI or Config Tree on UI. Using this form to configure this will wipe out those changes. You must disable those changes before using this form.";
	Msg.N_PppoeCli = "PPPoE was configured using the CLI or Config Tree on UI. Using this form to configure this will wipe out those changes. You must disable those changes before using this form.";
	Msg.N_SystemLog = "System Log was configured using CLI or Config Tree on UI. Using this form to configure this will wipe out those changes. You must disable those changes before using this form.";
	Msg.N_ConfigChangeTitle = "Configuration change";
	Msg.N_ConfigChangeStarted = "The configuration has been changed and is in the process of being committed.";
	Msg.N_ConfigChangeEnded = "The configuration has been changed. Please refresh the page to prevent conflicts.";
	Msg.N_ConfigChangeFailed = "There was an error upgrading the configuration";
	Msg.N_ConfigChangeReboot = "Your configuration has been restored and a reboot is now required. Would you like to reboot now?";
	Msg.N_ConfigChangeReset = "Your configuration has been reset to the default and a reboot is now required. Would you like to reboot now?";
	Msg.N_SystemUpgradeStarted = "In order for the changes to take effect you will have to reboot your EdgeRouter.";
	Msg.N_SystemUpgradeFailed = "There was an error upgrading the system.";
	Msg.N_RebootRouter = "Your network will be temporarily unavailable while your router reboots.";
	Msg.N_ResetRouter = "Your network will be temporarily unavailable while your router resets to the default config.";
	Msg.N_ShutdownRouter = "Your network will be unavailable until you power cycle your router.";
	Msg.N_OperationRebootStarted = "The system is in the process of being rebooted.";
	Msg.N_OperationResetStarted = "The system is in the process of being reset to the default config.";
	Msg.N_OperationShutdownStarted = "The system is in the process of being shutdown.";
	Msg.N_DhcpRenewed = "The DHCP lease was renewed successfully.";
	Msg.N_DhcpReleased = "The DHCP lease was released successfully.";
	Msg.N_OverheatAlert = "The device temperature exceeds the normal operating range. Please check the operating environment and ensure that the fans are working properly.";
	Msg.V_UsernameRequired = "Please enter a username";
	Msg.V_UsernameLength = "Your username must consist of at least 2 characters";
	Msg.V_PasswordRequired = "Please enter a password";
	Msg.V_PasswordLength = "Your password must be at least 4 characters long";
	Msg.V_ConfirmRequired = "Please enter a password confirmation";
	Msg.V_ConfirmLength = "Your confirmation must be at least 4 characters long";
	Msg.V_ConfirmEquals = "Your confirmation must match your password";
	Msg.V_FwNameRequired = "Please enter a name for the firewall";
	Msg.V_FwNameMaxLength = "Firewall name must be less than 28 characters long";
	Msg.V_FwGroupNameRequired = "Please enter a name for the group";
	Msg.V_FwGroupNameMaxLength = "Firewall group name must be less than 32 characters long";
	Msg.V_ShellPunctuation = "Invalid use of shell punctuation in input";
	Msg.D_Months = {
		1: "January",
		2: "February",
		3: "March",
		4: "April",
		5: "May",
		6: "June",
		7: "July",
		8: "August",
		9: "September",
		10: "October",
		11: "November",
		12: "December"
	};
	$.fn.serializeObject = function $$$fn$serializeObject$() {
		var $o$$ = {},
		$a$$ = this.serializeArray();
		$.each($a$$,
		function() {
			void 0 !== $o$$[this.name] ? ($o$$[this.name].push || ($o$$[this.name] = [$o$$[this.name]]), $o$$[this.name].push(this.value || "")) : $o$$[this.name] = this.value || ""
		});
		return $o$$
	};
	window.EDGE = EDGE;
	EDGE.getObjProp = function $EDGE$getObjProp$($obj$$, $path$$) {
		if ($obj$$) {
			if (1 > $path$$.length) return null;
			var $i$$,
			$cur$$ = $obj$$;
			for ($i$$ = 0; $i$$ < $path$$.length - 1; $i$$++) {
				if ($i$$ == $path$$.length - 2 && $cur$$[$path$$[$i$$]] === $path$$[$i$$ + 1]) return $path$$[$i$$ + 1];
				if (void 0 === $cur$$[$path$$[$i$$]]) return;
				$cur$$ = $cur$$[$path$$[$i$$]]
			}
			return $cur$$[$path$$[$i$$]]
		}
	};
	EDGE.getNumWithUnit = function $EDGE$getNumWithUnit$($num$$, $unit$$) {
		var $rnum$$ = +$num$$,
		$u$$ = "";
		1E3 < $rnum$$ && ($u$$ = "K", $rnum$$ /= 1E3);
		1E3 < $rnum$$ && ($u$$ = "M", $rnum$$ /= 1E3);
		1E3 < $rnum$$ && ($u$$ = "G", $rnum$$ /= 1E3);
		1E3 < $rnum$$ && ($u$$ = "T", $rnum$$ /= 1E3);
		1E3 < $rnum$$ && ($u$$ = "P", $rnum$$ /= 1E3);
		return ("" == $u$$ ? $rnum$$: (new Number($rnum$$)).toFixed(2)) + ("" == $u$$ && "" == $unit$$ ? "": " ") + $u$$ + $unit$$
	};
	EDGE.sanitizeInput = function $EDGE$sanitizeInput$($input$$) {
		return $("<div />").text($input$$).html()
	};
	msg = "";
	function isIpv4($value$$) {
		return $value$$.match(/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/)
	}
	function isIpv4Net($value$$) {
		return $value$$.match(/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9])$/)
	}
	function isIpv4NetOrDefault($value$$) {
		return isIpv4Net($value$$) || "0.0.0.0/0" == $value$$
	}
	function isIpv6($value$$) {
		return $value$$.match(/^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?$/)
	}
	function isIpv4OrIpv6($value$$) {
		return isIpv4($value$$) || isIpv6($value$$) ? !0: !1
	}
	function isIpv6Net($value$$) {
		return $value$$.match(/^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\/(?:[1][0][0-9]|[1][1][0-9]|[1][2][0-8]|[9][0-9]|[8][0-9]|[7][0-9]|[6][0-9]|[5][0-9]|[4][0-9]|[3][0-9]|[2][0-9]|[1][0-9]|[0-9])$/)
	}
	$.validator.addMethod("ipv4",
	function($value$$) {
		return "" == $value$$ ? !0: isIpv4($value$$)
	},
	"Please enter a valid IPv4 address");
	$.validator.addMethod("ipv4net",
	function($value$$) {
		return "" == $value$$ ? !0: isIpv4Net($value$$)
	},
	"Please enter a valid IPv4 network");
	$.validator.addMethod("ipv4withMask",
	function($value$$) {
		return "" == $value$$ ? !0: isIpv4Net($value$$)
	},
	"Please enter a valid IPv4 Address with network mask");
	$.validator.addMethod("ipv4maskOrPfx",
	function($ipDec_len$$7_value$$) {
		if ("" == $ipDec_len$$7_value$$) return ! 0;
		if ($ipDec_len$$7_value$$.match(/^[0-9]+$/)) return $ipDec_len$$7_value$$ = +$ipDec_len$$7_value$$,
		0 < $ipDec_len$$7_value$$ && 32 > $ipDec_len$$7_value$$;
		if (!isIpv4($ipDec_len$$7_value$$)) return ! 1;
		for (var $ipDec_len$$7_value$$ = ipToDec($ipDec_len$$7_value$$), $one$$ = !1, $i$$ = 0; 32 > $i$$; $i$$++) {
			var $bit$$ = +$ipDec_len$$7_value$$ & 1;
			if ($one$$ && 0 == $bit$$) return ! 1;
			1 == $bit$$ && ($one$$ = !0);
			$ipDec_len$$7_value$$ =
			+$ipDec_len$$7_value$$ >>> 1
		}
		return ! 0
	},
	"Please enter a valid network mask or prefix length");
	$.validator.addMethod("ipv4net",
	function($value$$) {
		return "" == $value$$ ? !0: isIpv4Net($value$$)
	},
	"Please enter a valid IPv4 network");
	$.validator.addMethod("ipv4netOrDefault",
	function($value$$) {
		return isIpv4NetOrDefault($value$$) || "" == $value$$
	},
	"Please enter a valid IPv4 network or 0.0.0.0/0");
	$.validator.addMethod("ipv6net",
	function($value$$) {
		return "" == $value$$ ? !0: isIpv6Net($value$$)
	},
	"Please enter a valid IPv6 network");
	$.validator.addMethod("ipv6",
	function($value$$) {
		return "" == $value$$ ? !0: isIpv6($value$$)
	},
	"Please enter a valid IPv6 address");
	$.validator.addMethod("ipv4OrIpv6",
	function($value$$) {
		return "" == $value$$ ? !0: isIpv4OrIpv6($value$$)
	},
	"Please enter a valid IPv4 or IPv6 address");
	$.validator.addMethod("ipv4OrIpv6OrAny",
	function($value$$) {
		return "" == $value$$ ? !0: isIpv4OrIpv6($value$$) || "ANY" == $value$$.toUpperCase()
	},
	'Please enter a valid IPv4/IPv6 address or enter "any"');
	$.validator.addMethod("ipv4OrIpv6Multi",
	function($value$$) {
		var $valid$$ = !1;
		if ("" == $value$$) return ! 0;
		isIpv4OrIpv6($value$$) && ($valid$$ = !0);
		return $valid$$
	},
	"Please enter a valid IPv4 or IPv6 address");
	$.validator.addClassRules({
		"validate-ipv4OrIpv6Multi": {
			noWhiteSpace: !0,
			ipv4OrIpv6Multi: !0
		}
	});
	$.validator.addMethod("ipv4OrIpv6Net",
	function($value$$) {
		return "" == $value$$ || isIpv4Net($value$$) || isIpv6Net($value$$) ? !0: !1
	},
	"Please enter a valid IPv4 or IPv6 network");
	$.validator.addMethod("ipv4OrIpv6NetOrDefault",
	function($value$$) {
		return "" == $value$$ || isIpv4NetOrDefault($value$$) || isIpv6Net($value$$) ? !0: !1
	},
	"Please enter a valid IPv4 or IPv6 network");
	$.validator.addMethod("ipv4OrIpv4net",
	function($value$$) {
		if ("" == $value$$ || isIpv4Net($value$$) || isIpv4($value$$)) return ! 0
	},
	"Please enter a valid IPv4 or IPv4 network");
	$.validator.addMethod("ipv4OrIpv4netOrDefault",
	function($value$$) {
		if ("" == $value$$ || isIpv4NetOrDefault($value$$) || isIpv4($value$$)) return ! 0
	},
	"Please enter a valid IPv4 or IPv4 network");
	$.validator.addMethod("ipv6OrIpv6net",
	function($value$$) {
		if ("" == $value$$ || isIpv6Net($value$$) || isIpv6($value$$)) return ! 0
	},
	"Please enter a valid IPv6 or IPv6 network");
	function getIpv4NetBcast($net_value$$) {
		var $ipDec$$ = $net_value$$.match(/^\s*((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))\s*$/);
		if (!$ipDec$$) return $.validator.messages.ipv4NoNet = msg + "Please enter a valid IPv4 network",
		!1;
		var $net_value$$ = $ipDec$$[2],
		$ipDec$$ = ipToDec($ipDec$$[1]),
		$a$$ = 32 - +$net_value$$,
		$hostStart$$;
		$hostStart$$ = +( + ( + $ipDec$$ >>> +$a$$) << +$a$$) >>> 0;
		for (var $mask$$ = 0, $i$$ = 0; $i$$ < +$a$$; $i$$++) $mask$$ <<=
		1,
		$mask$$ |= 1;
		$a$$ = Array(4);
		$a$$[0] = $ipDec$$;
		$a$$[1] = $hostStart$$;
		$a$$[2] = +( + $hostStart$$ | +$mask$$) >>> 0;
		$a$$[3] = $net_value$$;
		return $a$$
	}
	$.validator.addMethod("ipv4NoNet",
	function($a$$44_value$$) {
		if (!isIpv4Net($a$$44_value$$)) return ! 0;
		$a$$44_value$$ = getIpv4NetBcast($a$$44_value$$);
		if (!$a$$44_value$$ || 4 != $a$$44_value$$.length) return ! 1;
		var $prefix$$ = $a$$44_value$$[3];
		return 31 == +$prefix$$ || 32 == +$prefix$$ ? !0: +$a$$44_value$$[0] == +$a$$44_value$$[1] ? !1: !0
	},
	"Can not assign IPv4 network address as an IPv4 interface address");
	$.validator.addMethod("ipv4NoBcast",
	function($a$$45_value$$) {
		if (!isIpv4Net($a$$45_value$$)) return ! 0;
		$a$$45_value$$ = getIpv4NetBcast($a$$45_value$$);
		if (!$a$$45_value$$ || 4 != $a$$45_value$$.length) return ! 1;
		var $prefix$$ = $a$$45_value$$[3];
		return 31 == +$prefix$$ || 32 == +$prefix$$ ? !0: +$a$$45_value$$[0] == +$a$$45_value$$[2] ? !1: !0
	},
	"Can not assign IPv4 broadcast address as an IPv4 interface address");
	$.validator.addClassRules({
		"ip-member": {
			ipv4OrIpv6Net: !0,
			ipv4NoBcast: !0,
			ipv4NoNet: !0
		}
	});
	$.validator.addMethod("mac",
	function($value$$) {
		return "" == $value$$ ? !0: $value$$.match(/^(?:[0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$/)
	},
	"Please enter a valid MAC address");
	var servicesHash = {
		"acr-nema": 1,
		afbackup: 1,
		afmbackup: 1,
		afpovertcp: 1,
		"afs3-bos": 1,
		"afs3-callback": 1,
		"afs3-errors": 1,
		"afs3-fileserver": 1,
		"afs3-kaserver": 1,
		"afs3-prserver": 1,
		"afs3-rmtsys": 1,
		"afs3-update": 1,
		"afs3-vlserver": 1,
		"afs3-volser": 1,
		amanda: 1,
		amandaidx: 1,
		amidxtape: 1,
		amqp: 1,
		aol: 1,
		asp: 1,
		"at-echo": 1,
		"at-nbp": 1,
		"at-rtmp": 1,
		"at-zis": 1,
		auth: 1,
		"bacula-dir": 1,
		"bacula-fd": 1,
		"bacula-sd": 1,
		bgp: 1,
		bgpd: 1,
		bgpsim: 1,
		biff: 1,
		binkp: 1,
		bootpc: 1,
		bootps: 1,
		bpcd: 1,
		bpdbm: 1,
		"bpjava-msvc": 1,
		bprd: 1,
		canna: 1,
		cfengine: 1,
		cfinger: 1,
		chargen: 1,
		"cisco-sccp": 1,
		"clc-build-daemon": 1,
		clearcase: 1,
		"cmip-agent": 1,
		"cmip-man": 1,
		codaauth2: 1,
		codasrv: 1,
		"codasrv-se": 1,
		conference: 1,
		courier: 1,
		"csnet-ns": 1,
		csync2: 1,
		customs: 1,
		cvspserver: 1,
		daap: 1,
		datametrics: 1,
		daytime: 1,
		dcap: 1,
		"dhcpv6-client": 1,
		"dhcpv6-server": 1,
		dict: 1,
		dircproxy: 1,
		discard: 1,
		distcc: 1,
		distmp3: 1,
		domain: 1,
		echo: 1,
		eklogin: 1,
		"enbd-cstatd": 1,
		"enbd-sstatd": 1,
		epmd: 1,
		exec: 1,
		fatserv: 1,
		fax: 1,
		fido: 1,
		finger: 1,
		"font-service": 1,
		freeciv: 1,
		fsp: 1,
		ftp: 1,
		"ftp-data": 1,
		ftps: 1,
		"ftps-data": 1,
		gdomap: 1,
		gds_db: 1,
		ggz: 1,
		git: 1,
		gnunet: 1,
		"gnutella-rtr": 1,
		"gnutella-svc": 1,
		gopher: 1,
		gpsd: 1,
		gris: 1,
		gsidcap: 1,
		gsiftp: 1,
		gsigatekeeper: 1,
		hkp: 1,
		"hmmp-ind": 1,
		hostmon: 1,
		hostnames: 1,
		"http-alt": 1,
		https: 1,
		http: 1,
		hylafax: 1,
		iax: 1,
		icpv2: 1,
		idfp: 1,
		imap2: 1,
		imap3: 1,
		imaps: 1,
		imsp: 1,
		ingreslock: 1,
		ipp: 1,
		iprop: 1,
		ipx: 1,
		irc: 1,
		ircd: 1,
		ircs: 1,
		isakmp: 1,
		isdnlog: 1,
		isisd: 1,
		"iso-tsap": 1,
		kamanda: 1,
		kazaa: 1,
		kerberos: 1,
		"kerberos-adm": 1,
		kerberos4: 1,
		kerberos_master: 1,
		kermit: 1,
		klogin: 1,
		knetd: 1,
		kpasswd: 1,
		kpop: 1,
		krb_prop: 1,
		krbupdate: 1,
		kshell: 1,
		kx: 1,
		l2f: 1,
		ldap: 1,
		ldaps: 1,
		link: 1,
		linuxconf: 1,
		"loc-srv": 1,
		"log-server": 1,
		login: 1,
		lotusnote: 1,
		mailq: 1,
		mandelspawn: 1,
		mdns: 1,
		"microsoft-ds": 1,
		mmcc: 1,
		moira_db: 1,
		moira_update: 1,
		moira_ureg: 1,
		mon: 1,
		mrtd: 1,
		"ms-sql-m": 1,
		"ms-sql-s": 1,
		msnp: 1,
		msp: 1,
		mtn: 1,
		mtp: 1,
		munin: 1,
		mysql: 1,
		"mysql-proxy": 1,
		nameserver: 1,
		nbd: 1,
		nessus: 1,
		"netbios-dgm": 1,
		"netbios-ns": 1,
		"netbios-ssn": 1,
		netnews: 1,
		netstat: 1,
		netwall: 1,
		nextstep: 1,
		nfs: 1,
		ninstall: 1,
		nntp: 1,
		nntps: 1,
		noclog: 1,
		"npmp-gui": 1,
		"npmp-local": 1,
		nqs: 1,
		nrpe: 1,
		nsca: 1,
		ntalk: 1,
		ntp: 1,
		nut: 1,
		omirr: 1,
		omniorb: 1,
		openvpn: 1,
		ospf6d: 1,
		ospfapi: 1,
		ospfd: 1,
		passwd_server: 1,
		pawserv: 1,
		pcrd: 1,
		pop2: 1,
		pop3: 1,
		pop3s: 1,
		poppassd: 1,
		postgresql: 1,
		predict: 1,
		printer: 1,
		proofd: 1,
		prospero: 1,
		"prospero-np": 1,
		pwdgen: 1,
		qmqp: 1,
		qmtp: 1,
		qotd: 1,
		radius: 1,
		"radius-acct": 1,
		"radmin-port": 1,
		"re-mail-ck": 1,
		remctl: 1,
		remotefs: 1,
		remoteping: 1,
		rfe: 1,
		ripd: 1,
		ripngd: 1,
		rje: 1,
		rlp: 1,
		rmiregistry: 1,
		rmtcfg: 1,
		rootd: 1,
		route: 1,
		rpc2portmap: 1,
		rplay: 1,
		rsync: 1,
		"rtcm-sc104": 1,
		rtelnet: 1,
		rtsp: 1,
		"sa-msg-port": 1,
		saft: 1,
		"sane-port": 1,
		search: 1,
		sftp: 1,
		sge_execd: 1,
		sge_qmaster: 1,
		"sgi-cad": 1,
		"sgi-cmsd": 1,
		"sgi-crsd": 1,
		"sgi-gcd": 1,
		shell: 1,
		sieve: 1,
		silc: 1,
		sip: 1,
		"sip-tls": 1,
		skkserv: 1,
		smsqp: 1,
		smtp: 1,
		smux: 1,
		snmp: 1,
		"snmp-trap": 1,
		snpp: 1,
		socks: 1,
		spamd: 1,
		ssh: 1,
		ssmtp: 1,
		smtps: 1,
		submission: 1,
		sunrpc: 1,
		supdup: 1,
		supfiledbg: 1,
		supfilesrv: 1,
		support: 1,
		suucp: 1,
		svn: 1,
		svrloc: 1,
		swat: 1,
		syslog: 1,
		sysrqd: 1,
		systat: 1,
		tacacs: 1,
		"tacacs-ds": 1,
		talk: 1,
		tcpmux: 1,
		telnet: 1,
		telnets: 1,
		tempo: 1,
		tfido: 1,
		tftp: 1,
		time: 1,
		timed: 1,
		tinc: 1,
		tproxy: 1,
		ulistserv: 1,
		"unix-status": 1,
		uucp: 1,
		"uucp-path": 1,
		vboxd: 1,
		venus: 1,
		"venus-se": 1,
		vnetd: 1,
		vopied: 1,
		webmin: 1,
		webster: 1,
		who: 1,
		whois: 1,
		wipld: 1,
		wnn6: 1,
		www: 1,
		x11: 1,
		"x11-1": 1,
		"x11-2": 1,
		"x11-3": 1,
		"x11-4": 1,
		"x11-5": 1,
		"x11-6": 1,
		"x11-7": 1,
		xdmcp: 1,
		xinetd: 1,
		xmms2: 1,
		"xmpp-client": 1,
		"xmpp-server": 1,
		xpilot: 1,
		xtel: 1,
		xtell: 1,
		xtelw: 1,
		z3950: 1,
		"zabbix-agent": 1,
		"zabbix-trapper": 1,
		zebra: 1,
		zebrasrv: 1,
		"zephyr-clt": 1,
		"zephyr-hm": 1,
		"zephyr-srv": 1,
		zope: 1,
		"zope-ftp": 1,
		zserv: 1
	};
	function validPort($val$$) {
		return ! (1 <= +$val$$ && 65535 >= +$val$$) ? (msg = "Error: port must be between 1 - 65535<br />", !1) : !0
	}
	function validPortRange($a$$, $b$$) {
		if ( + $b$$ <= +$a$$) msg = "Error: port " + EDGE.sanitizeInput($a$$) + " must be less than " + EDGE.sanitizeInput($b$$) + "<br />";
		else if (validPort($a$$) && validPort($b$$)) return ! 0;
		return ! 1
	}
	function validPortElem($elem$$) {
		var $range$$ = $elem$$.match(/^(\d+)-(\d+)$/);
		if ($range$$) {
			if (validPortRange($range$$[1], $range$$[2])) return 2
		} else if ($elem$$.match(/^\d+$/)) {
			if (validPort($elem$$)) return 1
		} else {
			if (1 == servicesHash[$elem$$]) return 1;
			msg = 'Error: "' + EDGE.sanitizeInput($elem$$) + '" is not a valid port name<br />'
		}
		return 0
	}
	function validMultiPorts($value$$) {
		if ("" == $value$$) return ! 0;
		var $numPorts$$ = 0,
		$valid$$ = !0;
		$value$$.split(",").forEach(function($e$$109_elem$$) {
			$valid$$ && ($e$$109_elem$$ = validPortElem($e$$109_elem$$), 1 > $e$$109_elem$$ ? $valid$$ = !1: $numPorts$$ += $e$$109_elem$$)
		});
		15 < $numPorts$$ && (msg = "Error: Too many ports <br />", $valid$$ = !1);
		return ! $valid$$ ? ($.validator.messages.iptablesPort = msg + "Please enter a valid port number, name, or range", $.validator.messages.validMultiPorts = msg + "Please enter a valid port number, name, or range",
		$valid$$) : !0
	}
	$.validator.addMethod("validPort",
	function($value$$) {
		return "" == $value$$ ? !0: 1 > validPortElem($value$$) ? !1: !0
	},
	"Please enter a valid port name, a port number, or a range of port numbers");
	$.validator.addMethod("validMultiPorts",
	function($value$$) {
		return validMultiPorts($value$$)
	},
	"Invalid Port");
	$.validator.addMethod("iptablesPort",
	function($value$$) {
		var $negate$$ = $value$$.match(/^\!(.*)$/);
		$negate$$ && ($value$$ = $negate$$[1]);
		return validMultiPorts($value$$)
	},
	"Invalid Port");
	$.validator.addMethod("natAddress",
	function($range$$7_value$$) {
		if ("" == $range$$7_value$$ || isIpv4($range$$7_value$$) || isIpv4Net($range$$7_value$$)) return ! 0;
		var $ipRe$$ = /^\s*((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\s*$/,
		$valid$$ = !0;
		if ($range$$7_value$$ = $range$$7_value$$.match(/^\s*(\d+\.\d+\.\d+\.\d+)\-(\d+\.\d+\.\d+\.\d+)\s*$/)) {
			var $b$$ = $range$$7_value$$[2];
			if (!$range$$7_value$$[1].match($ipRe$$) || !$b$$.match($ipRe$$)) $valid$$ = !1
		} else $valid$$ = !1;
		return $valid$$
	},
	"Please enter a valid translation address, address range, or subnet");
	$.validator.addMethod("natPort",
	function($value$$) {
		return "" == $value$$ ? !0: 1 > validPortElem($value$$) ? ($.validator.messages.natPort = msg + "Please enter a valid port number, name, or range", !1) : !0
	},
	"Invalid translation Port");
	var iptablesTargetHash = {
		ACCEPT: 1,
		DROP: 1,
		RETURN: 1,
		QUEUE: 1,
		AUDIT: 1,
		CHECKSUM: 1,
		CLASSIFY: 1,
		CLUSTERIP: 1,
		CONNMARK: 1,
		CONNSECMARK: 1,
		CT: 1,
		DNAT: 1,
		DSCP: 1,
		ECN: 1,
		IDLETIMER: 1,
		LOG: 1,
		MARK: 1,
		MASQUERADE: 1,
		MIRROR: 1,
		NETMAP: 1,
		NFLOG: 1,
		NFQUEUE: 1,
		NOTRACK: 1,
		RATEEST: 1,
		REDIRECT: 1,
		REJECT: 1,
		SAME: 1,
		SECMARK: 1,
		SET: 1,
		SNAT: 1,
		TCPMSS: 1,
		TCPOPTSTRIP: 1,
		TEE: 1,
		TOS: 1,
		TPROXY: 1,
		TRACE: 1,
		TTL: 1,
		ULOG: 1
	};
	$.validator.addMethod("noIptablesReserved",
	function($value$$) {
		return "" == $value$$ ? !0: 1 == iptablesTargetHash[$value$$] ? !1: !0
	},
	"Invalid Ruleset name - reserved keyword");
	function checkNetBoundary($net$$) {
		if ("0.0.0.0/0" == $net$$) return ! 0;
		var $ipnet$$ = $net$$.match(/^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))$/);
		if ($ipnet$$) {
			var $ip$$2_o$$ = $ipnet$$[1],
			$net$$ = $ipnet$$[2];
			if (32 == +$net$$) return ! 0;
			$ip$$2_o$$ = $ip$$2_o$$.split(".");
			hosts = 256 * (256 * (256 * +$ip$$2_o$$[0] + +$ip$$2_o$$[1]) + +$ip$$2_o$$[2]) + +$ip$$2_o$$[3] << $net$$;
			if (0 != hosts) msg = "Error: network " + EDGE.sanitizeInput($ipnet$$[0]) +
			" is not on a network boundary<br />";
			else return ! 0
		}
		return ! 1
	}
	$.validator.addMethod("firewallGroupMembers",
	function($value$$0$$, $element$$) {
		function $checkOverlap$$($hash$$, $value$$) {
			for (var $hashValue$$, $i$$ = 0, $length$$ = $hash$$.length; $i$$ < $length$$; $i$$++) if ($hashValue$$ = $hash$$[$i$$], -1 !== $hashValue$$.indexOf("-")) {
				var $b$$26_octet3Value_range$$ = $hashValue$$.match("address" === $type$$ ? $ipRangeRe$$: $portRangeRe$$);
				if ($b$$26_octet3Value_range$$) {
					var $a$$ = $b$$26_octet3Value_range$$[1],
					$b$$26_octet3Value_range$$ = $b$$26_octet3Value_range$$[2];
					if ($value$$.match($ipRe$$)) {
						var $addrA_octet4A$$ =
						$a$$.match($ipThreeOct$$),
						$addrB_octet4B$$ = $b$$26_octet3Value_range$$.match($ipThreeOct$$),
						$addrValue_octet4Value$$ = $value$$.match($ipThreeOct$$),
						$a$$ = $addrA_octet4A$$[1],
						$b$$26_octet3Value_range$$ = $addrValue_octet4Value$$[1],
						$addrA_octet4A$$ = parseInt($addrA_octet4A$$[2]),
						$addrB_octet4B$$ = parseInt($addrB_octet4B$$[2]),
						$addrValue_octet4Value$$ = parseInt($addrValue_octet4Value$$[2]);
						if ($a$$ == $b$$26_octet3Value_range$$ && $addrValue_octet4Value$$ >= $addrA_octet4A$$ && $addrValue_octet4Value$$ <= $addrB_octet4B$$) return $msg$$ =
						"Error: overlap detected for " + EDGE.sanitizeInput($value$$) + " and " + EDGE.sanitizeInput($hashValue$$) + "<br />",
						!1
					} else if (parseInt($value$$) >= parseInt($a$$) && $value$$ <= parseInt($b$$26_octet3Value_range$$)) return $msg$$ = "Error: overlap detected for " + EDGE.sanitizeInput($value$$) + "<br />",
					!1
				}
			} else if ($value$$ == $hashValue$$) return $msg$$ = "Error: overlap detected for " + EDGE.sanitizeInput($value$$) + "<br />",
			!1;
			return ! 0
		}
		var $$form$$1_valid$$ = $($element$$).parents("form"),
		$type$$ = $$form$$1_valid$$.find("input[name=memberkey]").val(),
		$$members_a$$48_i$$194_ipnet$$ = $$form$$1_valid$$.find("input.group-member"),
		$$form$$1_valid$$ = !0,
		$msg$$ = "",
		$ipRangeRe$$ = /^\s*(\d+\.\d+\.\d+\.\d+)\-(\d+\.\d+\.\d+\.\d+)\s*$/,
		$ipRe$$ = /^\s*((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\s*$/,
		$ipThreeOct$$ = /^(\d+\.\d+\.\d+)\.(\d+)$/,
		$ipNetRe$$ = /^\s*((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))\s*$/,
		$portRangeRe$$ = /^\s*(\d+)\-(\d+)\s*$/,
		$b$$25_portRe_range$$ = /^\s*(\d+)\s*$/,
		$hash$$0$$ = [];
		if (!$$form$$1_valid$$) return $$form$$1_valid$$;
		if ("" == $value$$0$$) return ! 0;
		$$members_a$$48_i$$194_ipnet$$.each(function() {
			var $$this$$4_ipnet$$ = $(this),
			$id$$ = $$this$$4_ipnet$$.attr("id"),
			$value$$ = $$this$$4_ipnet$$.val();
			if (! ($id$$ === $($element$$).attr("id") || $$this$$4_ipnet$$.hasClass("error"))) {
				if ("network" === $type$$ && ($$this$$4_ipnet$$ = $value$$.match($ipNetRe$$))) {
					$hash$$0$$.push($$this$$4_ipnet$$[1]);
					return
				}
				$hash$$0$$.push($value$$)
			}
		});
		switch ($type$$) {
		case "address":
			$$form$$1_valid$$ =
			!1;
			if ( - 1 != $value$$0$$.indexOf("-")) if ($b$$25_portRe_range$$ = $value$$0$$.match($ipRangeRe$$)) if ($$members_a$$48_i$$194_ipnet$$ = $b$$25_portRe_range$$[1], $b$$25_portRe_range$$ = $b$$25_portRe_range$$[2], $$members_a$$48_i$$194_ipnet$$.match($ipRe$$) && $b$$25_portRe_range$$.match($ipRe$$)) {
				var $addr1$$ = $$members_a$$48_i$$194_ipnet$$.match($ipThreeOct$$),
				$addr2$$ = $b$$25_portRe_range$$.match($ipThreeOct$$);
				if ($addr1$$[1] == $addr2$$[1]) if ( + $addr1$$[2] > +$addr2$$[2]) $msg$$ = "Error: address " + EDGE.sanitizeInput($$members_a$$48_i$$194_ipnet$$) +
				" must be less than " + EDGE.sanitizeInput($b$$25_portRe_range$$) + "<br />";
				else for ($$members_a$$48_i$$194_ipnet$$ = +$addr1$$[2]; $$members_a$$48_i$$194_ipnet$$ <= +$addr2$$[2] && ($$form$$1_valid$$ = $checkOverlap$$($hash$$0$$, $addr1$$[1] + "." + $$members_a$$48_i$$194_ipnet$$)); $$members_a$$48_i$$194_ipnet$$++);
				else $msg$$ = "Error: address range only valid on last octet<br />"
			} else $msg$$ = "Error: invalid range<br />";
			else $msg$$ = "Error: invalid range<br />";
			else if (address = $value$$0$$.match($ipRe$$)) $$form$$1_valid$$ =
			$checkOverlap$$($hash$$0$$, address[1]);
			$$form$$1_valid$$ || ($$members_a$$48_i$$194_ipnet$$ = $value$$0$$.match($ipNetRe$$)) && checkNetBoundary($$members_a$$48_i$$194_ipnet$$[0]) && ($$form$$1_valid$$ = $checkOverlap$$($hash$$0$$, $$members_a$$48_i$$194_ipnet$$[1]));
			if (!$$form$$1_valid$$) {
				$.validator.messages.firewallGroupMembers = $msg$$ + "Please enter a valid IPv4 address or range or network";
				break
			}
			break;
		case "network":
			$$form$$1_valid$$ = !1; ($$members_a$$48_i$$194_ipnet$$ = $value$$0$$.match($ipNetRe$$)) && checkNetBoundary($$members_a$$48_i$$194_ipnet$$[0]) &&
			($$form$$1_valid$$ = $checkOverlap$$($hash$$0$$, $$members_a$$48_i$$194_ipnet$$[1]));
			if (!$$form$$1_valid$$) {
				$.validator.messages.firewallGroupMembers = $msg$$ + "Please enter a valid IPv4 network";
				break
			}
			break;
		case "port":
			$$form$$1_valid$$ = !1;
			if ( - 1 != $value$$0$$.indexOf("-")) if ($b$$25_portRe_range$$ = $value$$0$$.match($portRangeRe$$)) {
				if ($$members_a$$48_i$$194_ipnet$$ = $b$$25_portRe_range$$[1], $b$$25_portRe_range$$ = $b$$25_portRe_range$$[2], validPortRange($$members_a$$48_i$$194_ipnet$$, $b$$25_portRe_range$$)) for ($$members_a$$48_i$$194_ipnet$$ =
				+$$members_a$$48_i$$194_ipnet$$; $$members_a$$48_i$$194_ipnet$$ <= +$b$$25_portRe_range$$ && ($$form$$1_valid$$ = $checkOverlap$$($hash$$0$$, $$members_a$$48_i$$194_ipnet$$)); $$members_a$$48_i$$194_ipnet$$++);
			} else $msg$$ = "Error: invalid range<br />";
			else if ($$members_a$$48_i$$194_ipnet$$ = $value$$0$$.match($b$$25_portRe_range$$)) {
				if ($$form$$1_valid$$ = validPort($$members_a$$48_i$$194_ipnet$$[1])) $$form$$1_valid$$ = $checkOverlap$$($hash$$0$$, $$members_a$$48_i$$194_ipnet$$[1])
			} else($$form$$1_valid$$ = 1 == servicesHash[$value$$0$$]) ?
			$$form$$1_valid$$ = $checkOverlap$$($hash$$0$$, $value$$0$$) : $msg$$ = 'Error: "' + EDGE.sanitizeInput($value$$0$$) + '" is not a valid port name<br />';
			$$form$$1_valid$$ || ($.validator.messages.firewallGroupMembers = $msg$$ + "Please enter a valid port number, name, or range")
		}
		return $$form$$1_valid$$
	},
	"Please enter a valid value");
	$.validator.addClassRules({
		"group-member": {
			firewallGroupMembers: !0
		}
	});
	$.validator.addMethod("noshellpunctuation",
	function($value$$) {
		return - 1 == $value$$.search(/[!|;\,\\&$<>()*]/) ? !0: !1
	},
	"Invalid input (special characters not allowed)");
	$.validator.addMethod("novzone",
	function($value$$) {
		return $value$$.match(/^VZONE/) ? !1: !0
	},
	"Firewall name can not begin with VZONE");
	$.validator.addMethod("iptablesAddress",
	function($range$$10_value$$) {
		if ("" == $range$$10_value$$) return ! 0;
		var $ipRe$$2_negate$$ = $range$$10_value$$.match(/^\!(.*)$/);
		$ipRe$$2_negate$$ && ($range$$10_value$$ = $ipRe$$2_negate$$[1]);
		var $b$$27_ipRangeRe$$ = /^\s*(\d+\.\d+\.\d+\.\d+)\-(\d+\.\d+\.\d+\.\d+)\s*$/,
		$ipRe$$2_negate$$ = /^\s*((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\s*$/,
		$ipNetRe$$ = /^\s*((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))\s*$/,
		$valid$$ = !0;
		if (!$range$$10_value$$.match($ipRe$$2_negate$$) && !$range$$10_value$$.match($ipNetRe$$) && !("0.0.0.0/0" == $range$$10_value$$ || "0.0.0.0" == $range$$10_value$$)) if ($range$$10_value$$ = $range$$10_value$$.match($b$$27_ipRangeRe$$)) {
			if ($b$$27_ipRangeRe$$ = $range$$10_value$$[2], !$range$$10_value$$[1].match($ipRe$$2_negate$$) || !$b$$27_ipRangeRe$$.match($ipRe$$2_negate$$)) $valid$$ = !1
		} else $valid$$ = !1;
		return $valid$$
	},
	"Please enter a valid address, address range or network");
	$.validator.addMethod("dhcpServerName",
	function($value$$) {
		return $value$$.match(/(?:[^-_\.a-zA-Z0-9]+)/) ? !1: !0
	},
	"Please enter a valid dhcp server name");
	$.validator.addMethod("ipv4NetBoundary",
	function($valid$$5_value$$) {
		if ("" == $valid$$5_value$$) return ! 0; ($valid$$5_value$$ = checkNetBoundary($valid$$5_value$$)) || ($.validator.messages.ipv4NetBoundary = msg + "Please enter a valid IPv4 network");
		return $valid$$5_value$$
	},
	"Please enter a valid IPv4 network");
	$.validator.addMethod("ospfv4Area",
	function($value$$) {
		return "" == $value$$ || $value$$.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/) ? !0: $value$$.match(/^\d+$/) ? 0 <= +$value$$ && 4294967295 >= +$value$$ ? !0: !1: !1
	},
	"Please enter a valid OSPF Area");
	$.validator.addMethod("iptablesMonthDays",
	function($value$$) {
		if ("" == $value$$) return ! 0;
		var $msg$$,
		$negate$$ = $value$$.match(/^\!(.*)$/);
		$negate$$ && ($value$$ = $negate$$[1]);
		var $valid$$ = !0;
		$value$$.split(",").forEach(function($elem$$) {
			if ($valid$$) if ($elem$$.match(/^\d+$/)) {
				if (0 > +$elem$$ || 31 < +$elem$$) $msg$$ = "Day must be between 1 and 31<br />",
				$valid$$ = !1
			} else $msg$$ = "Day must be between 1 and 31<br />",
			$valid$$ = !1
		});
		return ! $valid$$ ? ($.validator.messages.iptablesMonthDays = $msg$$ + "Please enter a day of the month or comma separated group of days",
		$valid$$) : !0
	},
	"Invalid day of month");
	$.validator.addMethod("iptablesWeekDays",
	function($value$$) {
		if ("" == $value$$) return ! 0;
		var $daysHash$$ = {
			Mon: 1,
			Tue: 1,
			Wed: 1,
			Thu: 1,
			Fri: 1,
			Sat: 1,
			Sun: 1
		},
		$msg$$,
		$negate$$ = $value$$.match(/^\!(.*)$/);
		$negate$$ && ($value$$ = $negate$$[1]);
		var $valid$$ = !0;
		$value$$.split(",").forEach(function($elem$$) {
			$valid$$ && 1 != $daysHash$$[$elem$$] && ($valid$$ = !1, $msg$$ = "Day must be Sun,Mon,Tue,Wed,Thu,Fri, or Sat<br />")
		});
		return ! $valid$$ ? ($.validator.messages.iptablesWeekDays = $msg$$ + "Please enter a day of the week or comma separated group of days", $valid$$) :
		!0
	},
	"Invalid day of week");
	$.validator.addMethod("iptablesDate",
	function($value$$) {
		if ("" == $value$$) return ! 0;
		var $msg$$,
		$valid$$ = !0,
		$date$$;
		if ($date$$ = $value$$.match(/^\s*(\d{4})-(\d{2})-(\d{2})\s*$/)) {
			var $value$$ = $date$$[1],
			$mm$$ = $date$$[2];
			$date$$ = $date$$[3];
			1970 > $value$$ || 2038 < $value$$ ? ($valid$$ = !1, $msg$$ = "year must be between 1970 and 2038<br />") : 12 < $mm$$ ? ($valid$$ = !1, $msg$$ = "month must be between 1 and 12<br />") : 31 < $date$$ && ($valid$$ = !1, $msg$$ = "day must be between 1 and 31<br />");
			2038 == $value$$ && (1 < $mm$$ ? ($valid$$ =
			!1, $msg$$ = "last valid date is 2038-01-18<br />") : 18 < $date$$ && ($valid$$ = !1, $msg$$ = "last valid date is 2038-01-18<br />"))
		} else $valid$$ = !1,
		$msg$$ = "Invalid date format<br >";
		return ! $valid$$ ? ($.validator.messages.iptablesDate = $msg$$ + "Please enter a date YYYY-MM-DD", $valid$$) : !0
	},
	"Invalid date");
	$.validator.addMethod("iptablesTime",
	function($hh_value$$) {
		if ("" == $hh_value$$) return ! 0;
		var $valid$$ = !0,
		$msg$$,
		$ss_time$$;
		if ($ss_time$$ = $hh_value$$.match(/^\s*(\d{2}):(\d{2}):(\d{2})\s*$/)) {
			var $hh_value$$ = $ss_time$$[1],
			$mm$$ = $ss_time$$[2];
			$ss_time$$ = $ss_time$$[3];
			if (0 > $hh_value$$ || 23 < $hh_value$$) $valid$$ = !1,
			$msg$$ = "hour must be between 0 and 23<br />";
			else if (0 > $mm$$ || 59 < $mm$$) $valid$$ = !1,
			$msg$$ = "minute must be between 0 and 59<br />";
			else if (0 > $ss_time$$ || 59 < $ss_time$$) $valid$$ = !1,
			$msg$$ = "second must be between 0 and 59<br />"
		} else $valid$$ =
		!1,
		$msg$$ = "Invalid time format<br >";
		return ! $valid$$ ? ($.validator.messages.iptablesTime = $msg$$ + "Please enter time in 24 hour notation HH:MM:SS", $valid$$) : !0
	},
	"Invalid time");
	$.validator.addMethod("noWhiteSpace",
	function($value$$) {
		return "" == $value$$ ? !0: $value$$.match(/^[^\s]+$/)
	},
	"Please remove white-space from name");
	$.validator.addMethod("validUserId",
	function($value$$) {
		return "" == $value$$ ? !0: !$value$$.match(/^\w[^\t\n\r\v\f:\/\'\"\;]*$/) ? ($.validator.messages.validUserId = msg + "Username contains illegal characters", !1) : !0
	},
	"Please remove illegal characters from username");
	function ipToDec($ip$$5_o$$) {
		$ip$$5_o$$ = $ip$$5_o$$.split(".");
		return 256 * (256 * (256 * +$ip$$5_o$$[0] + +$ip$$5_o$$[1]) + +$ip$$5_o$$[2]) + +$ip$$5_o$$[3]
	}
	$.validator.addMethod("dhcpInSubnet2",
	function($value$$, $element$$, $subnet$$) {
		if ("" == $value$$) return ! 0;
		var $element$$ = ipToDec($value$$),
		$hostStart$$1_ipDec$$6_ipnet$$ = $subnet$$.match(/^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))$/);
		if (!$hostStart$$1_ipDec$$6_ipnet$$) return $.validator.messages.dhcpInSubnet2 = msg + "Invalid Subnet",
		!1;
		for (var $hostBits$$1_net$$ = $hostStart$$1_ipDec$$6_ipnet$$[2], $hostStart$$1_ipDec$$6_ipnet$$ =
		ipToDec($hostStart$$1_ipDec$$6_ipnet$$[1]), $hostBits$$1_net$$ = 32 - +$hostBits$$1_net$$, $hostStart$$1_ipDec$$6_ipnet$$ = +( + ( + $hostStart$$1_ipDec$$6_ipnet$$ >>> +$hostBits$$1_net$$) << +$hostBits$$1_net$$) >>> 0, $mask$$ = 0, $i$$ = 0; $i$$ < +$hostBits$$1_net$$; $i$$++) $mask$$ <<= 1,
		$mask$$ |= 1;
		return + $element$$ < +$hostStart$$1_ipDec$$6_ipnet$$ || +$element$$ > +( + ( + $hostStart$$1_ipDec$$6_ipnet$$ | +$mask$$) >>> 0) ? ($.validator.messages.dhcpInSubnet2 = EDGE.sanitizeInput($value$$) + " must be within subnet " + EDGE.sanitizeInput($subnet$$),
		!1) : !0
	},
	"");
	$.validator.addMethod("dhcpInSubnet",
	function($value$$, $element$$) {
		if ("" == $value$$) return ! 0;
		var $ip$$7_subnet$$ = $($element$$).parents("form").find("input[name=subnet]").val(),
		$valueDec$$ = ipToDec($value$$),
		$hostBits$$2_ipnet$$5_net$$ = $ip$$7_subnet$$.match(/^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))$/);
		if (!$hostBits$$2_ipnet$$5_net$$) return $.validator.messages.dhcpInSubnet = msg + "Invalid Subnet",
		!1;
		for (var $ip$$7_subnet$$ =
		$hostBits$$2_ipnet$$5_net$$[1], $hostBits$$2_ipnet$$5_net$$ = $hostBits$$2_ipnet$$5_net$$[2], $hostStart$$2_ipDec$$ = ipToDec($ip$$7_subnet$$), $hostBits$$2_ipnet$$5_net$$ = 32 - +$hostBits$$2_ipnet$$5_net$$, $hostStart$$2_ipDec$$ = +( + ( + $hostStart$$2_ipDec$$ >>> +$hostBits$$2_ipnet$$5_net$$) << +$hostBits$$2_ipnet$$5_net$$) >>> 0, $mask$$ = 0, $i$$ = 0; $i$$ < +$hostBits$$2_ipnet$$5_net$$; $i$$++) $mask$$ <<= 1,
		$mask$$ |= 1;
		return + $valueDec$$ < +$hostStart$$2_ipDec$$ || +$valueDec$$ > +( + ( + $hostStart$$2_ipDec$$ | +$mask$$) >>> 0) ? ($.validator.messages.dhcpInSubnet =
		EDGE.sanitizeInput($value$$) + " must be within the same subnet as " + EDGE.sanitizeInput($ip$$7_subnet$$), !1) : !0
	},
	"");
	$.validator.addMethod("sameSubet",
	function($value$$, $element$$9_subnet$$, $param$$3_valueDec$$) {
		if ("" == $value$$) return ! 0;
		var $element$$9_subnet$$ = $($param$$3_valueDec$$).val(),
		$param$$3_valueDec$$ = ipToDec($value$$),
		$hostStart$$3_ipDec$$8_ipnet$$ = $element$$9_subnet$$.match(/^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))$/);
		if (!$hostStart$$3_ipDec$$8_ipnet$$) return $.validator.messages.sameSubet = msg + "Invalid Subnet",
		!1;
		for (var $hostBits$$3_net$$ = $hostStart$$3_ipDec$$8_ipnet$$[2], $hostStart$$3_ipDec$$8_ipnet$$ = ipToDec($hostStart$$3_ipDec$$8_ipnet$$[1]), $hostBits$$3_net$$ = 32 - +$hostBits$$3_net$$, $hostStart$$3_ipDec$$8_ipnet$$ = +( + ( + $hostStart$$3_ipDec$$8_ipnet$$ >>> +$hostBits$$3_net$$) << +$hostBits$$3_net$$) >>> 0, $mask$$ = 0, $i$$ = 0; $i$$ < +$hostBits$$3_net$$; $i$$++) $mask$$ <<= 1,
		$mask$$ |= 1;
		return + $param$$3_valueDec$$ < +$hostStart$$3_ipDec$$8_ipnet$$ || +$param$$3_valueDec$$ > +( + ( + $hostStart$$3_ipDec$$8_ipnet$$ | +$mask$$) >>> 0) ?
		($.validator.messages.sameSubet = EDGE.sanitizeInput($value$$) + " must be within subnet " + EDGE.sanitizeInput($element$$9_subnet$$), !1) : !0
	},
	"");
	$.validator.addMethod("differentSubnet",
	function($value$$, $element$$10_subnet$$, $hostBits$$4_ipnet$$7_param$$) {
		if ("" == $value$$) return ! 0;
		var $element$$10_subnet$$ = $($hostBits$$4_ipnet$$7_param$$).val(),
		$hostStart$$4_ipNetRe$$7_net$$ = /^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))$/,
		$hostBits$$4_ipnet$$7_param$$ = $element$$10_subnet$$.match($hostStart$$4_ipNetRe$$7_net$$),
		$hostValStart_val_net_valnet$$ = $value$$.match($hostStart$$4_ipNetRe$$7_net$$);
		if (!$hostBits$$4_ipnet$$7_param$$ || !$hostValStart_val_net_valnet$$) return $.validator.messages.differentSubnet = msg + "Invalid Subnet",
		!1;
		for (var $hostStart$$4_ipNetRe$$7_net$$ = $hostBits$$4_ipnet$$7_param$$[2], $hostValBits_val_ip$$ = $hostValStart_val_net_valnet$$[1], $hostValStart_val_net_valnet$$ = $hostValStart_val_net_valnet$$[2], $ipDec$$9_mask$$ = ipToDec($hostBits$$4_ipnet$$7_param$$[1]), $hostBits$$4_ipnet$$7_param$$ = 32 - +$hostStart$$4_ipNetRe$$7_net$$, $hostStart$$4_ipNetRe$$7_net$$ = +( + ( + $ipDec$$9_mask$$ >>>
		+$hostBits$$4_ipnet$$7_param$$) << +$hostBits$$4_ipnet$$7_param$$) >>> 0, $ipDec$$9_mask$$ = ipToDec($hostValBits_val_ip$$), $hostValBits_val_ip$$ = 32 - +$hostValStart_val_net_valnet$$, $hostValStart_val_net_valnet$$ = +( + ( + $ipDec$$9_mask$$ >>> +$hostValBits_val_ip$$) << +$hostValBits_val_ip$$) >>> 0, $i$$ = $ipDec$$9_mask$$ = 0; $i$$ < +$hostBits$$4_ipnet$$7_param$$; $i$$++) $ipDec$$9_mask$$ <<= 1,
		$ipDec$$9_mask$$ |= 1;
		for ($i$$ = $ipDec$$9_mask$$ = 0; $i$$ < +$hostValBits_val_ip$$; $i$$++) $ipDec$$9_mask$$ <<= 1,
		$ipDec$$9_mask$$ |= 1;
		if ( + ( + ( + $hostValStart_val_net_valnet$$ |
		+$ipDec$$9_mask$$) >>> 0) < +$hostStart$$4_ipNetRe$$7_net$$ || +$hostValStart_val_net_valnet$$ > +( + ( + $hostStart$$4_ipNetRe$$7_net$$ | +$ipDec$$9_mask$$) >>> 0)) return ! 0;
		$.validator.messages.differentSubnet = EDGE.sanitizeInput($value$$) + " must be in different subnet from " + EDGE.sanitizeInput($element$$10_subnet$$);
		return ! 1
	},
	"");
	$.validator.addMethod("notSameIp",
	function($value$$, $element$$11_subnet$$, $ipnet$$8_param$$) {
		if ("" == $value$$) return ! 0;
		$element$$11_subnet$$ = $($ipnet$$8_param$$).val();
		$ipnet$$8_param$$ = $element$$11_subnet$$.match(/^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))$/);
		return ! $ipnet$$8_param$$ ? ($.validator.messages.notSameIp = msg + "Invalid Subnet", !1) : $ipnet$$8_param$$[1] === $value$$ ? ($.validator.messages.notSameIp = "IPv4 address cannot be the same as " +
		$element$$11_subnet$$, !1) : !0
	},
	"");
	$.validator.addMethod("dhcpStartStop",
	function($value$$, $element$$) {
		if ("" == $value$$) return ! 0;
		var $start$$ = $($element$$).parents("form").find("input[name=range-start]").val(),
		$startDec$$ = ipToDec($start$$),
		$stopDec$$ = ipToDec($value$$);
		return + $startDec$$ > +$stopDec$$ && +$startDec$$ != +$stopDec$$ ? ($.validator.messages.dhcpStartStop = "range-stop must greater than or equal to " + EDGE.sanitizeInput($start$$), !1) : !0
	},
	"");
	$.validator.addMethod("hostname",
	function($value$$) {
		return "" == $value$$ ? !0: $value$$.match(/^\-/) || $value$$.match(/\-$/) ? ($.validator.messages.hostname = "host name can not start or stop with a hypen", !1) : $value$$.match(/[^a-zA-Z0-9\-]+/) ? ($.validator.messages.hostname = "host may only contain alphanumberic and hypen", !1) : !0
	},
	"");
	$.validator.addMethod("domain",
	function($elems_value$$) {
		if ("" == $elems_value$$) return ! 0;
		for (var $elems_value$$ = $elems_value$$.split("."), $i$$ = 0; $i$$ < $elems_value$$.length; $i$$++) {
			var $e$$ = $elems_value$$[$i$$];
			if (0 == $e$$.length) return $.validator.messages.domain = "no domain element can be empty",
			!1;
			if (63 < $e$$.length) return $.validator.messages.domain = "no domain element be longer than 63 characters",
			!1;
			if ($e$$.match(/^\-/) || $e$$.match(/\-$/)) return $.validator.messages.domain = "domain element can not start or stop with a hypen",
			!1;
			if ($e$$.match(/[^a-zA-Z0-9\-]+/)) return $.validator.messages.domain = "domain element may only contain alphanumberic and hypen",
			!1
		}
		return ! 0
	},
	"");
	$.validator.addMethod("snmpComm",
	function($value$$) {
		return "" == $value$$ ? !0: $value$$.match(/^[^%]+$/)
	},
	"SNMP community may not contain '%'");
	$.validator.addMethod("noQuotes",
	function($value$$) {
		return "" == $value$$ ? !0: $value$$.match(/^[^'"]+$/)
	},
	"String can not contain single or double quotes");
	$.validator.addMethod("interfaceName",
	function($value$$) {
		return "" == $value$$ ? !0: $value$$.match(/^[a-z]+[0-9]+(\.[0-9]+)?$/)
	},
	"Invalid interface name");
	$.validator.addClassRules("interface-other", {
		required: !0,
		interfaceName: 1
	});
	$.validator.addMethod("nonStartWithZero",
	function($value$$) {
		return "" == $value$$ ? !0: !($value$$.startWith(0) && 1 < $value$$.length)
	},
	"Number cannot start with 0");
	$.validator.addMethod("enumeration",
	function($value$$, $element$$, $params$$) {
		if ("" == $value$$) return ! 0;
		$.validator.messages.enumeration = "input must be one of the following values: " + $params$$.join(", ");
		return - 1 != $params$$.indexOf($value$$) ? !0: !1
	},
	"");
	$.validator.addMethod("rangeWithUnit",
	function($value$$, $$element_element$$, $params$$) {
		function $actualValue$$($ret$$2_v$$, $u$$, $flag$$) {
			$ret$$2_v$$ = Number($ret$$2_v$$);
			"K" == $u$$ ? $ret$$2_v$$ *= 1E3: "M" == $u$$ ? $ret$$2_v$$ = 1 == $flag$$ ? 1E6 * $ret$$2_v$$: 1E - 6 * $ret$$2_v$$: "G" == $u$$ ? $ret$$2_v$$ *= 1E9: "U" == $u$$ && ($ret$$2_v$$ *= 1E - 9);
			return $ret$$2_v$$
		}
		if ("" == $value$$) return ! 0;
		var $unit$$ = $params$$[2];
		matches1 = $params$$[0].match(/(\d+)(\D*)/);
		min = matches1[1];
		minu = matches1[2].toUpperCase();
		matches2 = $params$$[1].match(/(\d+)(\D*)/);
		max = matches2[1];
		maxu = matches2[2].toUpperCase();
		flag = $params$$[3];
		$$element_element$$ = $($$element_element$$);
		$$element_element$$ = ($$element_element$$.next() && $$element_element$$.next().is(".suffix") ? $$element_element$$.next() : $$element_element$$.parent().next().children(".suffix")).val().toUpperCase().charAt(0);
		$.validator.messages.rangeWithUnit = "value must be betwween " + min + minu.toLowerCase() + $unit$$ + " and " + max + maxu.toLowerCase() + $unit$$;
		min = $actualValue$$(min, minu, flag);
		max = $actualValue$$(max, maxu,
		flag);
		$value$$ = $actualValue$$($value$$, $$element_element$$, flag);
		return $value$$ < min || $value$$ > max ? !1: !0
	},
	"");
	$.validator.addMethod("notAmong",
	function($value$$, $element$$, $params$$) {
		$.validator.messages.notAmong = "value " + $value$$ + " is already taken. Please choose a different one.";
		return ! _.contains($params$$, $value$$)
	},
	"");
	$.validator.addMethod("validCategory",
	function($value$$) {
		if ("" === $value$$) return ! 0;
		var $regex$$ = /^[^-]/;
		if (!$value$$.match($regex$$)) return $.validator.messages.validCategory = 'Custom category name cannot start with "-"',
		!1;
		$regex$$ = /^[^!|;&$<>()*]*$/;
		return ! $value$$.match($regex$$) ? ($.validator.messages.validCategory = "Custom category name cannot contain shell punctuation", !1) : !0
	},
	"");
	$.validator.addMethod("notEqualTo",
	function($value$$, $element$$, $param$$) {
		$.validator.messages.notEqualTo = "Value cannot be equal to " + $($param$$).val();
		return this.optional($element$$) || $value$$ != $($param$$).val()
	},
	"");
	$.validator.addMethod("secondaryTo",
	function($hasEmpty_value$$, $element$$, $param$$) {
		$hasEmpty_value$$ = !1;
		if (Array.isArray($param$$)) for (var $i$$ = 0; $i$$ < $param$$.length; $i$$++) {
			if ("" === $($param$$[$i$$]).val().trim()) {
				$hasEmpty_value$$ = !0;
				$.validator.messages.secondaryTo = "field " + $($param$$[$i$$]).attr("name") + " is empty.";
				break
			}
		} else "" === $($param$$).val().trim() && ($hasEmpty_value$$ = !0, $.validator.messages.secondaryTo = "field " + $($param$$).attr("name") + " is empty.");
		return this.optional($element$$) ||
		!$hasEmpty_value$$
	},
	"");
	var sys_tz_toplevels = "Africa;Americas;Antarctica;Arctic Ocean;Asia;Atlantic Ocean;Australia;Europe;Indian Ocean;Pacific Ocean".split(";"),
	sys_tz_countries = {
		Europe: "Andorra;Albania;Austria;Aaland Islands;Bosnia & Herzegovina;Belgium;Bulgaria;Belarus;Switzerland;Czech Republic;Germany;Denmark;Estonia;Spain;Finland;France;Britain (UK);Guernsey;Gibraltar;Greece;Croatia;Hungary;Ireland;Isle of Man;Italy;Jersey;Liechtenstein;Lithuania;Luxembourg;Latvia;Monaco;Moldova;Montenegro;Macedonia;Malta;Netherlands;Norway;Poland;Portugal;Romania;Serbia;Russia;Sweden;Slovenia;Slovakia;San Marino;Turkey;Ukraine;Vatican City".split(";"),
		"Atlantic Ocean": "Bermuda;Cape Verde;Spain;Falkland Islands;Faroe Islands;South Georgia & the South Sandwich Islands;Iceland;Portugal;St Helena".split(";"),
		"Pacific Ocean": "Samoa (American);Cook Islands;Chile;Ecuador;Fiji;Micronesia;Guam;Kiribati;Marshall Islands;Northern Mariana Islands;New Caledonia;Norfolk Island;Nauru;Niue;New Zealand;French Polynesia;Papua New Guinea;Pitcairn;Palau;Solomon Islands;Tokelau;Tonga;Tuvalu;US minor outlying islands;United States;Vanuatu;Wallis & Futuna;Samoa (western)".split(";"),
		Australia: ["Australia"],
		Africa: "Angola;Burkina Faso;Burundi;Benin;Botswana;Congo (Dem. Rep.);Central African Rep.;Congo (Rep.);Cote d'Ivoire;Cameroon;Djibouti;Algeria;Egypt;Western Sahara;Eritrea;Spain;Ethiopia;Gabon;Ghana;Gambia;Guinea;Equatorial Guinea;Guinea-Bissau;Kenya;Liberia;Lesotho;Libya;Morocco;Mali;Mauritania;Malawi;Mozambique;Namibia;Niger;Nigeria;Rwanda;Sudan;Sierra Leone;Senegal;Somalia;South Sudan;Sao Tome & Principe;Swaziland;Chad;Togo;Tunisia;Tanzania;Uganda;South Africa;Zambia;Zimbabwe".split(";"),
		"Arctic Ocean": ["Svalbard & Jan Mayen"],
		Asia: "United Arab Emirates;Afghanistan;Armenia;Azerbaijan;Bangladesh;Bahrain;Brunei;Bhutan;China;Cyprus;Georgia;Hong Kong;Indonesia;Israel;India;Iraq;Iran;Jordan;Japan;Kyrgyzstan;Cambodia;Korea (North);Korea (South);Kuwait;Kazakhstan;Laos;Lebanon;Sri Lanka;Myanmar (Burma);Mongolia;Macau;Malaysia;Nepal;Oman;Philippines;Pakistan;Palestine;Qatar;Russia;Saudi Arabia;Singapore;Syria;Thailand;Tajikistan;East Timor;Turkmenistan;Taiwan;Uzbekistan;Vietnam;Yemen".split(";"),
		Americas: "Antigua & Barbuda;Anguilla;Argentina;Aruba;Barbados;St Barthelemy;Bolivia;Bonaire Sint Eustatius & Saba;Brazil;Bahamas;Belize;Canada;Chile;Colombia;Costa Rica;Cuba;Curacao;Dominica;Dominican Republic;Ecuador;Grenada;French Guiana;Greenland;Guadeloupe;Guatemala;Guyana;Honduras;Haiti;Jamaica;St Kitts & Nevis;Cayman Islands;St Lucia;St Martin (French part);Martinique;Montserrat;Mexico;Nicaragua;Panama;Peru;St Pierre & Miquelon;Puerto Rico;Paraguay;Suriname;El Salvador;Sint Maarten;Turks & Caicos Is;Trinidad & Tobago;United States;Uruguay;St Vincent;Venezuela;Virgin Islands (UK);Virgin Islands (US)".split(";"),
		Antarctica: ["Antarctica"],
		"Indian Ocean": "Cocos (Keeling) Islands;Christmas Island;British Indian Ocean Territory;Comoros;Madagascar;Mauritius;Maldives;Reunion;Seychelles;French Southern & Antarctic Lands;Mayotte".split(";")
	},
	sys_tz_timezones = {
		Bangladesh: [[null, "Asia/Dhaka"]],
		Belgium: [[null, "Europe/Brussels"]],
		"Burkina Faso": [[null, "Africa/Ouagadougou"]],
		Bulgaria: [[null, "Europe/Sofia"]],
		"Bosnia & Herzegovina": [[null, "Europe/Sarajevo"]],
		Barbados: [[null, "America/Barbados"]],
		"Wallis & Futuna": [[null,
		"Pacific/Wallis"]],
		"St Barthelemy": [[null, "America/St_Barthelemy"]],
		Bermuda: [[null, "Atlantic/Bermuda"]],
		Brunei: [[null, "Asia/Brunei"]],
		Bolivia: [[null, "America/La_Paz"]],
		Bahrain: [[null, "Asia/Bahrain"]],
		Burundi: [[null, "Africa/Bujumbura"]],
		Benin: [[null, "Africa/Porto-Novo"]],
		Bhutan: [[null, "Asia/Thimphu"]],
		Jamaica: [[null, "America/Jamaica"]],
		"Bouvet Island": [],
		Botswana: [[null, "Africa/Gaborone"]],
		"Samoa (western)": [[null, "Pacific/Apia"]],
		"Bonaire Sint Eustatius & Saba": [[null, "America/Kralendijk"]],
		Brazil: [["Atlantic islands",
		"America/Noronha"], ["Amapa, E Para", "America/Belem"], ["NE Brazil (MA, PI, CE, RN, PB)", "America/Fortaleza"], ["Pernambuco", "America/Recife"], ["Tocantins", "America/Araguaina"], ["Alagoas, Sergipe", "America/Maceio"], ["Bahia", "America/Bahia"], ["S & SE Brazil (GO, DF, MG, ES, RJ, SP, PR, SC, RS)", "America/Sao_Paulo"], ["Mato Grosso do Sul", "America/Campo_Grande"], ["Mato Grosso", "America/Cuiaba"], ["W Para", "America/Santarem"], ["Rondonia", "America/Porto_Velho"], ["Roraima", "America/Boa_Vista"], ["E Amazonas",
		"America/Manaus"], ["W Amazonas", "America/Eirunepe"], ["Acre", "America/Rio_Branco"]],
		Bahamas: [[null, "America/Nassau"]],
		Jersey: [[null, "Europe/Jersey"]],
		Belarus: [[null, "Europe/Minsk"]],
		Belize: [[null, "America/Belize"]],
		Russia: [["Moscow-01 - Kaliningrad", "Europe/Kaliningrad"], ["Moscow+00 - west Russia", "Europe/Moscow"], ["Moscow+00 - Caspian Sea", "Europe/Volgograd"], ["Moscow+00 - Samara, Udmurtia", "Europe/Samara"], ["Moscow+02 - Urals", "Asia/Yekaterinburg"], ["Moscow+03 - west Siberia", "Asia/Omsk"], ["Moscow+03 - Novosibirsk",
		"Asia/Novosibirsk"], ["Moscow+03 - Novokuznetsk", "Asia/Novokuznetsk"], ["Moscow+04 - Yenisei River", "Asia/Krasnoyarsk"], ["Moscow+05 - Lake Baikal", "Asia/Irkutsk"], ["Moscow+06 - Lena River", "Asia/Yakutsk"], ["Moscow+07 - Amur River", "Asia/Vladivostok"], ["Moscow+07 - Sakhalin Island", "Asia/Sakhalin"], ["Moscow+08 - Magadan", "Asia/Magadan"], ["Moscow+08 - Kamchatka", "Asia/Kamchatka"], ["Moscow+08 - Bering Sea", "Asia/Anadyr"]],
		Rwanda: [[null, "Africa/Kigali"]],
		Serbia: [[null, "Europe/Belgrade"]],
		"East Timor": [[null,
		"Asia/Dili"]],
		Reunion: [[null, "Indian/Reunion"]],
		Turkmenistan: [[null, "Asia/Ashgabat"]],
		Tajikistan: [[null, "Asia/Dushanbe"]],
		Romania: [[null, "Europe/Bucharest"]],
		Tokelau: [[null, "Pacific/Fakaofo"]],
		"Guinea-Bissau": [[null, "Africa/Bissau"]],
		Guam: [[null, "Pacific/Guam"]],
		Guatemala: [[null, "America/Guatemala"]],
		"South Georgia & the South Sandwich Islands": [[null, "Atlantic/South_Georgia"]],
		Greece: [[null, "Europe/Athens"]],
		"Equatorial Guinea": [[null, "Africa/Malabo"]],
		Guadeloupe: [[null, "America/Guadeloupe"]],
		Japan: [[null,
		"Asia/Tokyo"]],
		Guyana: [[null, "America/Guyana"]],
		Guernsey: [[null, "Europe/Guernsey"]],
		"French Guiana": [[null, "America/Cayenne"]],
		Georgia: [[null, "Asia/Tbilisi"]],
		Grenada: [[null, "America/Grenada"]],
		"Britain (UK)": [[null, "Europe/London"]],
		Gabon: [[null, "Africa/Libreville"]],
		"El Salvador": [[null, "America/El_Salvador"]],
		Guinea: [[null, "Africa/Conakry"]],
		Gambia: [[null, "Africa/Banjul"]],
		Greenland: [["most locations", "America/Godthab"], ["east coast, north of Scoresbysund", "America/Danmarkshavn"], ["Scoresbysund / Ittoqqortoormiit",
		"America/Scoresbysund"], ["Thule / Pituffik", "America/Thule"]],
		Gibraltar: [[null, "Europe/Gibraltar"]],
		Ghana: [[null, "Africa/Accra"]],
		Oman: [[null, "Asia/Muscat"]],
		Tunisia: [[null, "Africa/Tunis"]],
		Jordan: [[null, "Asia/Amman"]],
		Croatia: [[null, "Europe/Zagreb"]],
		Haiti: [[null, "America/Port-au-Prince"]],
		Hungary: [[null, "Europe/Budapest"]],
		"Hong Kong": [[null, "Asia/Hong_Kong"]],
		Honduras: [[null, "America/Tegucigalpa"]],
		"Heard Island & McDonald Islands": [],
		Venezuela: [[null, "America/Caracas"]],
		"Puerto Rico": [[null, "America/Puerto_Rico"]],
		Palestine: [["Gaza Strip", "Asia/Gaza"], ["West Bank", "Asia/Hebron"]],
		Palau: [[null, "Pacific/Palau"]],
		Portugal: [["mainland", "Europe/Lisbon"], ["Madeira Islands", "Atlantic/Madeira"], ["Azores", "Atlantic/Azores"]],
		"Svalbard & Jan Mayen": [[null, "Arctic/Longyearbyen"]],
		Paraguay: [[null, "America/Asuncion"]],
		Iraq: [[null, "Asia/Baghdad"]],
		Panama: [[null, "America/Panama"]],
		"French Polynesia": [["Society Islands", "Pacific/Tahiti"], ["Marquesas Islands", "Pacific/Marquesas"], ["Gambier Islands", "Pacific/Gambier"]],
		"Papua New Guinea": [[null,
		"Pacific/Port_Moresby"]],
		Peru: [[null, "America/Lima"]],
		Pakistan: [[null, "Asia/Karachi"]],
		Philippines: [[null, "Asia/Manila"]],
		Pitcairn: [[null, "Pacific/Pitcairn"]],
		Poland: [[null, "Europe/Warsaw"]],
		"St Pierre & Miquelon": [[null, "America/Miquelon"]],
		Zambia: [[null, "Africa/Lusaka"]],
		"Western Sahara": [[null, "Africa/El_Aaiun"]],
		Estonia: [[null, "Europe/Tallinn"]],
		Egypt: [[null, "Africa/Cairo"]],
		"South Africa": [[null, "Africa/Johannesburg"]],
		Ecuador: [["mainland", "America/Guayaquil"], ["Galapagos Islands", "Pacific/Galapagos"]],
		Italy: [[null, "Europe/Rome"]],
		Vietnam: [[null, "Asia/Ho_Chi_Minh"]],
		"Solomon Islands": [[null, "Pacific/Guadalcanal"]],
		Ethiopia: [[null, "Africa/Addis_Ababa"]],
		Somalia: [[null, "Africa/Mogadishu"]],
		Zimbabwe: [[null, "Africa/Harare"]],
		"Saudi Arabia": [[null, "Asia/Riyadh"]],
		Spain: [["mainland", "Europe/Madrid"], ["Ceuta & Melilla", "Africa/Ceuta"], ["Canary Islands", "Atlantic/Canary"]],
		Eritrea: [[null, "Africa/Asmara"]],
		Montenegro: [[null, "Europe/Podgorica"]],
		Moldova: [[null, "Europe/Chisinau"]],
		Madagascar: [[null, "Indian/Antananarivo"]],
		"St Martin (French part)": [[null, "America/Marigot"]],
		Morocco: [[null, "Africa/Casablanca"]],
		Monaco: [[null, "Europe/Monaco"]],
		Uzbekistan: [["west Uzbekistan", "Asia/Samarkand"], ["east Uzbekistan", "Asia/Tashkent"]],
		"Myanmar (Burma)": [[null, "Asia/Rangoon"]],
		Mali: [[null, "Africa/Bamako"]],
		Macau: [[null, "Asia/Macau"]],
		Mongolia: [["most locations", "Asia/Ulaanbaatar"], ["Bayan-Olgiy, Govi-Altai, Hovd, Uvs, Zavkhan", "Asia/Hovd"], ["Dornod, Sukhbaatar", "Asia/Choibalsan"]],
		"Marshall Islands": [["most locations", "Pacific/Majuro"],
		["Kwajalein", "Pacific/Kwajalein"]],
		Macedonia: [[null, "Europe/Skopje"]],
		Mauritius: [[null, "Indian/Mauritius"]],
		Malta: [[null, "Europe/Malta"]],
		Malawi: [[null, "Africa/Blantyre"]],
		Maldives: [[null, "Indian/Maldives"]],
		Martinique: [[null, "America/Martinique"]],
		"Northern Mariana Islands": [[null, "Pacific/Saipan"]],
		Montserrat: [[null, "America/Montserrat"]],
		Mauritania: [[null, "Africa/Nouakchott"]],
		"Isle of Man": [[null, "Europe/Isle_of_Man"]],
		Uganda: [[null, "Africa/Kampala"]],
		Tanzania: [[null, "Africa/Dar_es_Salaam"]],
		Malaysia: [["peninsular Malaysia", "Asia/Kuala_Lumpur"], ["Sabah & Sarawak", "Asia/Kuching"]],
		Mexico: [["Central Time - most locations", "America/Mexico_City"], ["Central Time - Quintana Roo", "America/Cancun"], ["Central Time - Campeche, Yucatan", "America/Merida"], ["Mexican Central Time - Coahuila, Durango, Nuevo Leon, Tamaulipas away from US border", "America/Monterrey"], ["US Central Time - Coahuila, Durango, Nuevo Leon, Tamaulipas near US border", "America/Matamoros"], ["Mountain Time - S Baja, Nayarit, Sinaloa",
		"America/Mazatlan"], ["Mexican Mountain Time - Chihuahua away from US border", "America/Chihuahua"], ["US Mountain Time - Chihuahua near US border", "America/Ojinaga"], ["Mountain Standard Time - Sonora", "America/Hermosillo"], ["US Pacific Time - Baja California near US border", "America/Tijuana"], ["Mexican Pacific Time - Baja California away from US border", "America/Santa_Isabel"], ["Mexican Central Time - Bahia de Banderas", "America/Bahia_Banderas"]],
		Israel: [[null, "Asia/Jerusalem"]],
		France: [[null, "Europe/Paris"]],
		"British Indian Ocean Territory": [[null, "Indian/Chagos"]],
		"St Helena": [[null, "Atlantic/St_Helena"]],
		Finland: [[null, "Europe/Helsinki"]],
		Fiji: [[null, "Pacific/Fiji"]],
		"Falkland Islands": [[null, "Atlantic/Stanley"]],
		Micronesia: [["Chuuk (Truk) and Yap", "Pacific/Chuuk"], ["Pohnpei (Ponape)", "Pacific/Pohnpei"], ["Kosrae", "Pacific/Kosrae"]],
		"Faroe Islands": [[null, "Atlantic/Faroe"]],
		Nicaragua: [[null, "America/Managua"]],
		Netherlands: [[null, "Europe/Amsterdam"]],
		Norway: [[null, "Europe/Oslo"]],
		Namibia: [[null, "Africa/Windhoek"]],
		Vanuatu: [[null, "Pacific/Efate"]],
		"New Caledonia": [[null, "Pacific/Noumea"]],
		Niger: [[null, "Africa/Niamey"]],
		"Norfolk Island": [[null, "Pacific/Norfolk"]],
		Nigeria: [[null, "Africa/Lagos"]],
		"New Zealand": [["most locations", "Pacific/Auckland"], ["Chatham Islands", "Pacific/Chatham"]],
		Nepal: [[null, "Asia/Kathmandu"]],
		Nauru: [[null, "Pacific/Nauru"]],
		Niue: [[null, "Pacific/Niue"]],
		"Cook Islands": [[null, "Pacific/Rarotonga"]],
		"Cote d'Ivoire": [[null, "Africa/Abidjan"]],
		Switzerland: [[null, "Europe/Zurich"]],
		Colombia: [[null,
		"America/Bogota"]],
		China: [["east China - Beijing, Guangdong, Shanghai, etc.", "Asia/Shanghai"], ["Heilongjiang (except Mohe), Jilin", "Asia/Harbin"], ["central China - Sichuan, Yunnan, Guangxi, Shaanxi, Guizhou, etc.", "Asia/Chongqing"], ["most of Tibet & Xinjiang", "Asia/Urumqi"], ["west Tibet & Xinjiang", "Asia/Kashgar"]],
		Cameroon: [[null, "Africa/Douala"]],
		Chile: [["most locations", "America/Santiago"], ["Easter Island & Sala y Gomez", "Pacific/Easter"]],
		"Cocos (Keeling) Islands": [[null, "Indian/Cocos"]],
		Canada: [["Newfoundland Time, including SE Labrador",
		"America/St_Johns"], ["Atlantic Time - Nova Scotia (most places), PEI", "America/Halifax"], ["Atlantic Time - Nova Scotia - places that did not observe DST 1966-1971", "America/Glace_Bay"], ["Atlantic Time - New Brunswick", "America/Moncton"], ["Atlantic Time - Labrador - most locations", "America/Goose_Bay"], ["Atlantic Standard Time - Quebec - Lower North Shore", "America/Blanc-Sablon"], ["Eastern Time - Quebec - most locations", "America/Montreal"], ["Eastern Time - Ontario - most locations", "America/Toronto"],
		["Eastern Time - Ontario & Quebec - places that did not observe DST 1967-1973", "America/Nipigon"], ["Eastern Time - Thunder Bay, Ontario", "America/Thunder_Bay"], ["Eastern Time - east Nunavut - most locations", "America/Iqaluit"], ["Eastern Time - Pangnirtung, Nunavut", "America/Pangnirtung"], ["Central Standard Time - Resolute, Nunavut", "America/Resolute"], ["Eastern Standard Time - Atikokan, Ontario and Southampton I, Nunavut", "America/Atikokan"], ["Central Time - central Nunavut", "America/Rankin_Inlet"],
		["Central Time - Manitoba & west Ontario", "America/Winnipeg"], ["Central Time - Rainy River & Fort Frances, Ontario", "America/Rainy_River"], ["Central Standard Time - Saskatchewan - most locations", "America/Regina"], ["Central Standard Time - Saskatchewan - midwest", "America/Swift_Current"], ["Mountain Time - Alberta, east British Columbia & west Saskatchewan", "America/Edmonton"], ["Mountain Time - west Nunavut", "America/Cambridge_Bay"], ["Mountain Time - central Northwest Territories", "America/Yellowknife"],
		["Mountain Time - west Northwest Territories", "America/Inuvik"], ["Mountain Standard Time - Creston, British Columbia", "America/Creston"], ["Mountain Standard Time - Dawson Creek & Fort Saint John, British Columbia", "America/Dawson_Creek"], ["Pacific Time - west British Columbia", "America/Vancouver"], ["Pacific Time - south Yukon", "America/Whitehorse"], ["Pacific Time - north Yukon", "America/Dawson"]],
		"Congo (Rep.)": [[null, "Africa/Brazzaville"]],
		"Central African Rep.": [[null, "Africa/Bangui"]],
		"Congo (Dem. Rep.)": [["west Dem. Rep. of Congo",
		"Africa/Kinshasa"], ["east Dem. Rep. of Congo", "Africa/Lubumbashi"]],
		"Czech Republic": [[null, "Europe/Prague"]],
		Cyprus: [[null, "Asia/Nicosia"]],
		"Christmas Island": [[null, "Indian/Christmas"]],
		"Costa Rica": [[null, "America/Costa_Rica"]],
		Curacao: [[null, "America/Curacao"]],
		"Cape Verde": [[null, "Atlantic/Cape_Verde"]],
		Cuba: [[null, "America/Havana"]],
		Swaziland: [[null, "Africa/Mbabane"]],
		Syria: [[null, "Asia/Damascus"]],
		"Sint Maarten": [[null, "America/Lower_Princes"]],
		Kyrgyzstan: [[null, "Asia/Bishkek"]],
		Kenya: [[null,
		"Africa/Nairobi"]],
		"South Sudan": [[null, "Africa/Juba"]],
		Suriname: [[null, "America/Paramaribo"]],
		Kiribati: [["Gilbert Islands", "Pacific/Tarawa"], ["Phoenix Islands", "Pacific/Enderbury"], ["Line Islands", "Pacific/Kiritimati"]],
		Cambodia: [[null, "Asia/Phnom_Penh"]],
		"St Kitts & Nevis": [[null, "America/St_Kitts"]],
		Comoros: [[null, "Indian/Comoro"]],
		"Sao Tome & Principe": [[null, "Africa/Sao_Tome"]],
		Slovakia: [[null, "Europe/Bratislava"]],
		"Korea (South)": [[null, "Asia/Seoul"]],
		Slovenia: [[null, "Europe/Ljubljana"]],
		"Korea (North)": [[null,
		"Asia/Pyongyang"]],
		Kuwait: [[null, "Asia/Kuwait"]],
		Senegal: [[null, "Africa/Dakar"]],
		"San Marino": [[null, "Europe/San_Marino"]],
		"Sierra Leone": [[null, "Africa/Freetown"]],
		Seychelles: [[null, "Indian/Mahe"]],
		Kazakhstan: [["most locations", "Asia/Almaty"], ["Qyzylorda (Kyzylorda, Kzyl-Orda)", "Asia/Qyzylorda"], ["Aqtobe (Aktobe)", "Asia/Aqtobe"], ["Atyrau (Atirau, Gur'yev), Mangghystau (Mankistau)", "Asia/Aqtau"], ["West Kazakhstan", "Asia/Oral"]],
		"Cayman Islands": [[null, "America/Cayman"]],
		Singapore: [[null, "Asia/Singapore"]],
		Sweden: [[null, "Europe/Stockholm"]],
		Sudan: [[null, "Africa/Khartoum"]],
		"Dominican Republic": [[null, "America/Santo_Domingo"]],
		Dominica: [[null, "America/Dominica"]],
		Djibouti: [[null, "Africa/Djibouti"]],
		Denmark: [[null, "Europe/Copenhagen"]],
		"Virgin Islands (UK)": [[null, "America/Tortola"]],
		Germany: [[null, "Europe/Berlin"]],
		Yemen: [[null, "Asia/Aden"]],
		Algeria: [[null, "Africa/Algiers"]],
		"United States": [["Eastern Time", "America/New_York"], ["Eastern Time - Michigan - most locations", "America/Detroit"], ["Eastern Time - Kentucky - Louisville area",
		"America/Kentucky/Louisville"], ["Eastern Time - Kentucky - Wayne County", "America/Kentucky/Monticello"], ["Eastern Time - Indiana - most locations", "America/Indiana/Indianapolis"], ["Eastern Time - Indiana - Daviess, Dubois, Knox & Martin Counties", "America/Indiana/Vincennes"], ["Eastern Time - Indiana - Pulaski County", "America/Indiana/Winamac"], ["Eastern Time - Indiana - Crawford County", "America/Indiana/Marengo"], ["Eastern Time - Indiana - Pike County", "America/Indiana/Petersburg"], ["Eastern Time - Indiana - Switzerland County",
		"America/Indiana/Vevay"], ["Central Time", "America/Chicago"], ["Central Time - Indiana - Perry County", "America/Indiana/Tell_City"], ["Central Time - Indiana - Starke County", "America/Indiana/Knox"], ["Central Time - Michigan - Dickinson, Gogebic, Iron & Menominee Counties", "America/Menominee"], ["Central Time - North Dakota - Oliver County", "America/North_Dakota/Center"], ["Central Time - North Dakota - Morton County (except Mandan area)", "America/North_Dakota/New_Salem"], ["Central Time - North Dakota - Mercer County",
		"America/North_Dakota/Beulah"], ["Mountain Time", "America/Denver"], ["Mountain Time - south Idaho & east Oregon", "America/Boise"], ["Mountain Time - Navajo", "America/Shiprock"], ["Mountain Standard Time - Arizona", "America/Phoenix"], ["Pacific Time", "America/Los_Angeles"], ["Alaska Time", "America/Anchorage"], ["Alaska Time - Alaska panhandle", "America/Juneau"], ["Alaska Time - southeast Alaska panhandle", "America/Sitka"], ["Alaska Time - Alaska panhandle neck", "America/Yakutat"], ["Alaska Time - west Alaska",
		"America/Nome"], ["Aleutian Islands", "America/Adak"], ["Metlakatla Time - Annette Island", "America/Metlakatla"], ["Hawaii", "Pacific/Honolulu"]],
		Uruguay: [[null, "America/Montevideo"]],
		Mayotte: [[null, "Indian/Mayotte"]],
		"US minor outlying islands": [["Johnston Atoll", "Pacific/Johnston"], ["Midway Islands", "Pacific/Midway"], ["Wake Island", "Pacific/Wake"]],
		Lebanon: [[null, "Asia/Beirut"]],
		"St Lucia": [[null, "America/St_Lucia"]],
		Laos: [[null, "Asia/Vientiane"]],
		Tuvalu: [[null, "Pacific/Funafuti"]],
		Taiwan: [[null, "Asia/Taipei"]],
		"Trinidad & Tobago": [[null, "America/Port_of_Spain"]],
		Turkey: [[null, "Europe/Istanbul"]],
		"Sri Lanka": [[null, "Asia/Colombo"]],
		Liechtenstein: [[null, "Europe/Vaduz"]],
		Latvia: [[null, "Europe/Riga"]],
		Tonga: [[null, "Pacific/Tongatapu"]],
		Lithuania: [[null, "Europe/Vilnius"]],
		Luxembourg: [[null, "Europe/Luxembourg"]],
		Liberia: [[null, "Africa/Monrovia"]],
		Lesotho: [[null, "Africa/Maseru"]],
		Thailand: [[null, "Asia/Bangkok"]],
		"French Southern & Antarctic Lands": [[null, "Indian/Kerguelen"]],
		Togo: [[null, "Africa/Lome"]],
		Chad: [[null,
		"Africa/Ndjamena"]],
		"Turks & Caicos Is": [[null, "America/Grand_Turk"]],
		Libya: [[null, "Africa/Tripoli"]],
		"Vatican City": [[null, "Europe/Vatican"]],
		"St Vincent": [[null, "America/St_Vincent"]],
		"United Arab Emirates": [[null, "Asia/Dubai"]],
		Andorra: [[null, "Europe/Andorra"]],
		"Antigua & Barbuda": [[null, "America/Antigua"]],
		Afghanistan: [[null, "Asia/Kabul"]],
		Anguilla: [[null, "America/Anguilla"]],
		"Virgin Islands (US)": [[null, "America/St_Thomas"]],
		Iceland: [[null, "Atlantic/Reykjavik"]],
		Iran: [[null, "Asia/Tehran"]],
		Armenia: [[null,
		"Asia/Yerevan"]],
		Albania: [[null, "Europe/Tirane"]],
		Angola: [[null, "Africa/Luanda"]],
		Antarctica: [["McMurdo Station, Ross Island", "Antarctica/McMurdo"], ["Amundsen-Scott Station, South Pole", "Antarctica/South_Pole"], ["Rothera Station, Adelaide Island", "Antarctica/Rothera"], ["Palmer Station, Anvers Island", "Antarctica/Palmer"], ["Mawson Station, Holme Bay", "Antarctica/Mawson"], ["Davis Station, Vestfold Hills", "Antarctica/Davis"], ["Casey Station, Bailey Peninsula", "Antarctica/Casey"], ["Vostok Station, Lake Vostok",
		"Antarctica/Vostok"], ["Dumont-d'Urville Station, Terre Adelie", "Antarctica/DumontDUrville"], ["Syowa Station, E Ongul I", "Antarctica/Syowa"], ["Macquarie Island Station, Macquarie Island", "Antarctica/Macquarie"]],
		"Samoa (American)": [[null, "Pacific/Pago_Pago"]],
		Argentina: [["Buenos Aires (BA, CF)", "America/Argentina/Buenos_Aires"], ["most locations (CB, CC, CN, ER, FM, MN, SE, SF)", "America/Argentina/Cordoba"], ["(SA, LP, NQ, RN)", "America/Argentina/Salta"], ["Jujuy (JY)", "America/Argentina/Jujuy"], ["Tucuman (TM)",
		"America/Argentina/Tucuman"], ["Catamarca (CT), Chubut (CH)", "America/Argentina/Catamarca"], ["La Rioja (LR)", "America/Argentina/La_Rioja"], ["San Juan (SJ)", "America/Argentina/San_Juan"], ["Mendoza (MZ)", "America/Argentina/Mendoza"], ["San Luis (SL)", "America/Argentina/San_Luis"], ["Santa Cruz (SC)", "America/Argentina/Rio_Gallegos"], ["Tierra del Fuego (TF)", "America/Argentina/Ushuaia"]],
		Australia: [["Lord Howe Island", "Australia/Lord_Howe"], ["Tasmania - most locations", "Australia/Hobart"], ["Tasmania - King Island",
		"Australia/Currie"], ["Victoria", "Australia/Melbourne"], ["New South Wales - most locations", "Australia/Sydney"], ["New South Wales - Yancowinna", "Australia/Broken_Hill"], ["Queensland - most locations", "Australia/Brisbane"], ["Queensland - Holiday Islands", "Australia/Lindeman"], ["South Australia", "Australia/Adelaide"], ["Northern Territory", "Australia/Darwin"], ["Western Australia - most locations", "Australia/Perth"], ["Western Australia - Eucla area", "Australia/Eucla"]],
		Austria: [[null, "Europe/Vienna"]],
		Aruba: [[null, "America/Aruba"]],
		India: [[null, "Asia/Kolkata"]],
		"Aaland Islands": [[null, "Europe/Mariehamn"]],
		Azerbaijan: [[null, "Asia/Baku"]],
		Ireland: [[null, "Europe/Dublin"]],
		Indonesia: [["Java & Sumatra", "Asia/Jakarta"], ["west & central Borneo", "Asia/Pontianak"], ["east & south Borneo, Sulawesi (Celebes), Bali, Nusa Tengarra, west Timor", "Asia/Makassar"], ["west New Guinea (Irian Jaya) & Malukus (Moluccas)", "Asia/Jayapura"]],
		Ukraine: [["most locations", "Europe/Kiev"], ["Ruthenia", "Europe/Uzhgorod"], ["Zaporozh'ye, E Lugansk / Zaporizhia, E Luhansk",
		"Europe/Zaporozhye"], ["central Crimea", "Europe/Simferopol"]],
		Qatar: [[null, "Asia/Qatar"]],
		Mozambique: [[null, "Africa/Maputo"]]
	},
	sys_tz_tzmap = {
		"Atlantic/Canary": ["Atlantic Ocean", "Spain"],
		"Australia/Melbourne": ["Australia", "Australia"],
		"Europe/Minsk": ["Europe", "Belarus"],
		"America/Nipigon": ["Americas", "Canada"],
		"America/Miquelon": ["Americas", "St Pierre & Miquelon"],
		"Pacific/Wallis": ["Pacific Ocean", "Wallis & Futuna"],
		"Antarctica/Davis": ["Antarctica", "Antarctica"],
		"Asia/Dhaka": ["Asia", "Bangladesh"],
		"America/St_Lucia": ["Americas",
		"St Lucia"],
		"Asia/Kashgar": ["Asia", "China"],
		"America/Phoenix": ["Americas", "United States"],
		"Asia/Kuwait": ["Asia", "Kuwait"],
		"Asia/Hong_Kong": ["Asia", "Hong Kong"],
		"Arctic/Longyearbyen": ["Arctic Ocean", "Svalbard & Jan Mayen"],
		"Europe/Guernsey": ["Europe", "Guernsey"],
		"Europe/Paris": ["Europe", "France"],
		"Europe/Stockholm": ["Europe", "Sweden"],
		"Pacific/Fiji": ["Pacific Ocean", "Fiji"],
		"Pacific/Apia": ["Pacific Ocean", "Samoa (western)"],
		"Pacific/Pago_Pago": ["Pacific Ocean", "Samoa (American)"],
		"Asia/Rangoon": ["Asia",
		"Myanmar (Burma)"],
		"America/Mexico_City": ["Americas", "Mexico"],
		"America/Puerto_Rico": ["Americas", "Puerto Rico"],
		"Indian/Mauritius": ["Indian Ocean", "Mauritius"],
		"Europe/Berlin": ["Europe", "Germany"],
		"Europe/Zurich": ["Europe", "Switzerland"],
		"America/Belem": ["Americas", "Brazil"],
		"Antarctica/Macquarie": ["Antarctica", "Antarctica"],
		"Asia/Krasnoyarsk": ["Asia", "Russia"],
		"Atlantic/Bermuda": ["Atlantic Ocean", "Bermuda"],
		"Australia/Currie": ["Australia", "Australia"],
		"Asia/Tehran": ["Asia", "Iran"],
		"Asia/Baku": ["Asia",
		"Azerbaijan"],
		"America/St_Barthelemy": ["Americas", "St Barthelemy"],
		"America/Santarem": ["Americas", "Brazil"],
		"America/Danmarkshavn": ["Americas", "Greenland"],
		"America/Scoresbysund": ["Americas", "Greenland"],
		"America/Eirunepe": ["Americas", "Brazil"],
		"America/Caracas": ["Americas", "Venezuela"],
		"Asia/Baghdad": ["Asia", "Iraq"],
		"Africa/Monrovia": ["Africa", "Liberia"],
		"America/St_Vincent": ["Americas", "St Vincent"],
		"America/Vancouver": ["Americas", "Canada"],
		"Asia/Ho_Chi_Minh": ["Asia", "Vietnam"],
		"Asia/Thimphu": ["Asia",
		"Bhutan"],
		"Africa/Accra": ["Africa", "Ghana"],
		"America/Belize": ["Americas", "Belize"],
		"America/Edmonton": ["Americas", "Canada"],
		"Asia/Tashkent": ["Asia", "Uzbekistan"],
		"Asia/Tokyo": ["Asia", "Japan"],
		"Pacific/Kiritimati": ["Pacific Ocean", "Kiribati"],
		"Australia/Sydney": ["Australia", "Australia"],
		"Europe/Riga": ["Europe", "Latvia"],
		"Asia/Dili": ["Asia", "East Timor"],
		"Africa/Mbabane": ["Africa", "Swaziland"],
		"Asia/Oral": ["Asia", "Kazakhstan"],
		"Asia/Aden": ["Asia", "Yemen"],
		"Europe/Isle_of_Man": ["Europe", "Isle of Man"],
		"Europe/Istanbul": ["Europe", "Turkey"],
		"Asia/Magadan": ["Asia", "Russia"],
		"Australia/Lindeman": ["Australia", "Australia"],
		"Pacific/Galapagos": ["Pacific Ocean", "Ecuador"],
		"America/Bogota": ["Americas", "Colombia"],
		"Africa/Asmara": ["Africa", "Eritrea"],
		"America/Chicago": ["Americas", "United States"],
		"Pacific/Kwajalein": ["Pacific Ocean", "Marshall Islands"],
		"Australia/Broken_Hill": ["Australia", "Australia"],
		"America/Cuiaba": ["Americas", "Brazil"],
		"Indian/Christmas": ["Indian Ocean", "Christmas Island"],
		"Asia/Jayapura": ["Asia",
		"Indonesia"],
		"Europe/Brussels": ["Europe", "Belgium"],
		"Europe/Lisbon": ["Europe", "Portugal"],
		"Asia/Chongqing": ["Asia", "China"],
		"America/Argentina/Cordoba": ["Americas", "Argentina"],
		"America/Noronha": ["Americas", "Brazil"],
		"Europe/Podgorica": ["Europe", "Montenegro"],
		"Africa/Algiers": ["Africa", "Algeria"],
		"Africa/Harare": ["Africa", "Zimbabwe"],
		"Africa/Ndjamena": ["Africa", "Chad"],
		"America/Costa_Rica": ["Americas", "Costa Rica"],
		"Europe/Ljubljana": ["Europe", "Slovenia"],
		"Indian/Mayotte": ["Indian Ocean", "Mayotte"],
		"Asia/Phnom_Penh": ["Asia", "Cambodia"],
		"America/Managua": ["Americas", "Nicaragua"],
		"Asia/Brunei": ["Asia", "Brunei"],
		"America/Tijuana": ["Americas", "Mexico"],
		"Pacific/Fakaofo": ["Pacific Ocean", "Tokelau"],
		"America/Martinique": ["Americas", "Martinique"],
		"America/Antigua": ["Americas", "Antigua & Barbuda"],
		"America/Indiana/Indianapolis": ["Americas", "United States"],
		"America/Argentina/La_Rioja": ["Americas", "Argentina"],
		"Pacific/Tahiti": ["Pacific Ocean", "French Polynesia"],
		"America/Pangnirtung": ["Americas", "Canada"],
		"Europe/Zagreb": ["Europe", "Croatia"],
		"America/Asuncion": ["Americas", "Paraguay"],
		"Europe/Vienna": ["Europe", "Austria"],
		"Australia/Hobart": ["Australia", "Australia"],
		"America/Juneau": ["Americas", "United States"],
		"America/Inuvik": ["Americas", "Canada"],
		"America/Ojinaga": ["Americas", "Mexico"],
		"America/Montreal": ["Americas", "Canada"],
		"Asia/Seoul": ["Asia", "Korea (South)"],
		"Indian/Comoro": ["Indian Ocean", "Comoros"],
		"Antarctica/Rothera": ["Antarctica", "Antarctica"],
		"Europe/Tallinn": ["Europe", "Estonia"],
		"Indian/Mahe": ["Indian Ocean",
		"Seychelles"],
		"America/Argentina/Jujuy": ["Americas", "Argentina"],
		"America/Creston": ["Americas", "Canada"],
		"America/Adak": ["Americas", "United States"],
		"Asia/Singapore": ["Asia", "Singapore"],
		"Africa/Nairobi": ["Africa", "Kenya"],
		"America/Maceio": ["Americas", "Brazil"],
		"Asia/Urumqi": ["Asia", "China"],
		"Europe/Moscow": ["Europe", "Russia"],
		"Asia/Pyongyang": ["Asia", "Korea (North)"],
		"Asia/Ulaanbaatar": ["Asia", "Mongolia"],
		"America/Rainy_River": ["Americas", "Canada"],
		"Indian/Maldives": ["Indian Ocean", "Maldives"],
		"Asia/Colombo": ["Asia",
		"Sri Lanka"],
		"Australia/Adelaide": ["Australia", "Australia"],
		"America/Cambridge_Bay": ["Americas", "Canada"],
		"Africa/Luanda": ["Africa", "Angola"],
		"Pacific/Chatham": ["Pacific Ocean", "New Zealand"],
		"America/Indiana/Winamac": ["Americas", "United States"],
		"Asia/Tbilisi": ["Asia", "Georgia"],
		"Europe/Gibraltar": ["Europe", "Gibraltar"],
		"Asia/Karachi": ["Asia", "Pakistan"],
		"Asia/Harbin": ["Asia", "China"],
		"Australia/Lord_Howe": ["Australia", "Australia"],
		"America/Bahia_Banderas": ["Americas", "Mexico"],
		"America/Boa_Vista": ["Americas",
		"Brazil"],
		"Africa/Tripoli": ["Africa", "Libya"],
		"Indian/Reunion": ["Indian Ocean", "Reunion"],
		"Atlantic/Stanley": ["Atlantic Ocean", "Falkland Islands"],
		"America/Blanc-Sablon": ["Americas", "Canada"],
		"Antarctica/Syowa": ["Antarctica", "Antarctica"],
		"America/Jamaica": ["Americas", "Jamaica"],
		"Europe/Kiev": ["Europe", "Ukraine"],
		"Europe/Budapest": ["Europe", "Hungary"],
		"Pacific/Midway": ["Pacific Ocean", "US minor outlying islands"],
		"America/Goose_Bay": ["Americas", "Canada"],
		"Asia/Amman": ["Asia", "Jordan"],
		"Asia/Sakhalin": ["Asia",
		"Russia"],
		"Africa/Windhoek": ["Africa", "Namibia"],
		"America/Sitka": ["Americas", "United States"],
		"America/Guyana": ["Americas", "Guyana"],
		"Pacific/Pohnpei": ["Pacific Ocean", "Micronesia"],
		"America/Sao_Paulo": ["Americas", "Brazil"],
		"America/Lower_Princes": ["Americas", "Sint Maarten"],
		"Australia/Perth": ["Australia", "Australia"],
		"Africa/Djibouti": ["Africa", "Djibouti"],
		"Asia/Jakarta": ["Asia", "Indonesia"],
		"Antarctica/Palmer": ["Antarctica", "Antarctica"],
		"Africa/Johannesburg": ["Africa", "South Africa"],
		"Asia/Irkutsk": ["Asia",
		"Russia"],
		"Africa/Niamey": ["Africa", "Niger"],
		"Africa/Casablanca": ["Africa", "Morocco"],
		"America/Indiana/Marengo": ["Americas", "United States"],
		"Africa/Nouakchott": ["Africa", "Mauritania"],
		"Europe/Vilnius": ["Europe", "Lithuania"],
		"America/Cayenne": ["Americas", "French Guiana"],
		"Africa/Mogadishu": ["Africa", "Somalia"],
		"America/Kentucky/Monticello": ["Americas", "United States"],
		"America/Rio_Branco": ["Americas", "Brazil"],
		"America/Cancun": ["Americas", "Mexico"],
		"America/Havana": ["Americas", "Cuba"],
		"Pacific/Guam": ["Pacific Ocean",
		"Guam"],
		"Pacific/Kosrae": ["Pacific Ocean", "Micronesia"],
		"Atlantic/Azores": ["Atlantic Ocean", "Portugal"],
		"Australia/Eucla": ["Australia", "Australia"],
		"Asia/Shanghai": ["Asia", "China"],
		"America/Rankin_Inlet": ["Americas", "Canada"],
		"Asia/Beirut": ["Asia", "Lebanon"],
		"Africa/Maputo": ["Africa", "Mozambique"],
		"Asia/Bahrain": ["Asia", "Bahrain"],
		"Asia/Ashgabat": ["Asia", "Turkmenistan"],
		"Asia/Riyadh": ["Asia", "Saudi Arabia"],
		"Europe/London": ["Europe", "Britain (UK)"],
		"America/Monterrey": ["Americas", "Mexico"],
		"America/Anguilla": ["Americas",
		"Anguilla"],
		"Asia/Damascus": ["Asia", "Syria"],
		"America/North_Dakota/Center": ["Americas", "United States"],
		"America/Indiana/Vevay": ["Americas", "United States"],
		"Atlantic/St_Helena": ["Atlantic Ocean", "St Helena"],
		"America/Barbados": ["Americas", "Barbados"],
		"Europe/Vatican": ["Europe", "Vatican City"],
		"Atlantic/Faroe": ["Atlantic Ocean", "Faroe Islands"],
		"Asia/Almaty": ["Asia", "Kazakhstan"],
		"America/Santo_Domingo": ["Americas", "Dominican Republic"],
		"Africa/Brazzaville": ["Africa", "Congo (Rep.)"],
		"America/Nome": ["Americas",
		"United States"],
		"Europe/Dublin": ["Europe", "Ireland"],
		"America/Yakutat": ["Americas", "United States"],
		"America/Argentina/Mendoza": ["Americas", "Argentina"],
		"America/Araguaina": ["Americas", "Brazil"],
		"Europe/Vaduz": ["Europe", "Liechtenstein"],
		"Antarctica/Mawson": ["Antarctica", "Antarctica"],
		"Asia/Kolkata": ["Asia", "India"],
		"Africa/Maseru": ["Africa", "Lesotho"],
		"America/Atikokan": ["Americas", "Canada"],
		"America/Santa_Isabel": ["Americas", "Mexico"],
		"Asia/Kuching": ["Asia", "Malaysia"],
		"Africa/Libreville": ["Africa",
		"Gabon"],
		"Africa/Freetown": ["Africa", "Sierra Leone"],
		"Africa/Bissau": ["Africa", "Guinea-Bissau"],
		"Europe/Samara": ["Europe", "Russia"],
		"Europe/Amsterdam": ["Europe", "Netherlands"],
		"Europe/Tirane": ["Europe", "Albania"],
		"Pacific/Saipan": ["Pacific Ocean", "Northern Mariana Islands"],
		"Africa/Abidjan": ["Africa", "Cote d'Ivoire"],
		"Europe/Zaporozhye": ["Europe", "Ukraine"],
		"America/El_Salvador": ["Americas", "El Salvador"],
		"Europe/Madrid": ["Europe", "Spain"],
		"Africa/Juba": ["Africa", "South Sudan"],
		"America/Santiago": ["Americas",
		"Chile"],
		"America/Argentina/Buenos_Aires": ["Americas", "Argentina"],
		"America/Argentina/San_Luis": ["Americas", "Argentina"],
		"Europe/Skopje": ["Europe", "Macedonia"],
		"America/Aruba": ["Americas", "Aruba"],
		"America/Regina": ["Americas", "Canada"],
		"Pacific/Chuuk": ["Pacific Ocean", "Micronesia"],
		"Pacific/Funafuti": ["Pacific Ocean", "Tuvalu"],
		"America/Merida": ["Americas", "Mexico"],
		"America/Guatemala": ["Americas", "Guatemala"],
		"Africa/Lome": ["Africa", "Togo"],
		"Africa/Sao_Tome": ["Africa", "Sao Tome & Principe"],
		"Asia/Makassar": ["Asia",
		"Indonesia"],
		"Africa/Bujumbura": ["Africa", "Burundi"],
		"Europe/Chisinau": ["Europe", "Moldova"],
		"Europe/Warsaw": ["Europe", "Poland"],
		"Asia/Yekaterinburg": ["Asia", "Russia"],
		"Antarctica/Casey": ["Antarctica", "Antarctica"],
		"America/Halifax": ["Americas", "Canada"],
		"America/Thule": ["Americas", "Greenland"],
		"America/St_Johns": ["Americas", "Canada"],
		"America/Moncton": ["Americas", "Canada"],
		"Europe/Helsinki": ["Europe", "Finland"],
		"Atlantic/Cape_Verde": ["Atlantic Ocean", "Cape Verde"],
		"America/Tegucigalpa": ["Americas",
		"Honduras"],
		"Indian/Cocos": ["Indian Ocean", "Cocos (Keeling) Islands"],
		"America/Boise": ["Americas", "United States"],
		"America/Guadeloupe": ["Americas", "Guadeloupe"],
		"America/Nassau": ["Americas", "Bahamas"],
		"Europe/Prague": ["Europe", "Czech Republic"],
		"Pacific/Enderbury": ["Pacific Ocean", "Kiribati"],
		"Asia/Hovd": ["Asia", "Mongolia"],
		"America/Manaus": ["Americas", "Brazil"],
		"America/Godthab": ["Americas", "Greenland"],
		"America/North_Dakota/Beulah": ["Americas", "United States"],
		"America/Chihuahua": ["Americas", "Mexico"],
		"America/Iqaluit": ["Americas", "Canada"],
		"America/Argentina/Rio_Gallegos": ["Americas", "Argentina"],
		"Pacific/Gambier": ["Pacific Ocean", "French Polynesia"],
		"Europe/Volgograd": ["Europe", "Russia"],
		"Africa/Bamako": ["Africa", "Mali"],
		"Asia/Novokuznetsk": ["Asia", "Russia"],
		"Europe/Uzhgorod": ["Europe", "Ukraine"],
		"Africa/Banjul": ["Africa", "Gambia"],
		"Asia/Aqtau": ["Asia", "Kazakhstan"],
		"Africa/Malabo": ["Africa", "Equatorial Guinea"],
		"Atlantic/Madeira": ["Atlantic Ocean", "Portugal"],
		"Pacific/Noumea": ["Pacific Ocean",
		"New Caledonia"],
		"Africa/Kinshasa": ["Africa", "Congo (Dem. Rep.)"],
		"Europe/Malta": ["Europe", "Malta"],
		"America/Argentina/Ushuaia": ["Americas", "Argentina"],
		"Asia/Bangkok": ["Asia", "Thailand"],
		"Pacific/Niue": ["Pacific Ocean", "Niue"],
		"Australia/Brisbane": ["Australia", "Australia"],
		"America/Recife": ["Americas", "Brazil"],
		"Asia/Yerevan": ["Asia", "Armenia"],
		"America/La_Paz": ["Americas", "Bolivia"],
		"Africa/Cairo": ["Africa", "Egypt"],
		"Africa/Lusaka": ["Africa", "Zambia"],
		"Pacific/Guadalcanal": ["Pacific Ocean", "Solomon Islands"],
		"America/Yellowknife": ["Americas", "Canada"],
		"Asia/Vientiane": ["Asia", "Laos"],
		"Europe/Kaliningrad": ["Europe", "Russia"],
		"Africa/Conakry": ["Africa", "Guinea"],
		"America/Argentina/Tucuman": ["Americas", "Argentina"],
		"Asia/Hebron": ["Asia", "Palestine"],
		"Europe/Oslo": ["Europe", "Norway"],
		"America/St_Kitts": ["Americas", "St Kitts & Nevis"],
		"America/Panama": ["Americas", "Panama"],
		"Africa/Gaborone": ["Africa", "Botswana"],
		"Pacific/Palau": ["Pacific Ocean", "Palau"],
		"America/Guayaquil": ["Americas", "Ecuador"],
		"Asia/Kuala_Lumpur": ["Asia",
		"Malaysia"],
		"America/Menominee": ["Americas", "United States"],
		"Asia/Kamchatka": ["Asia", "Russia"],
		"Asia/Vladivostok": ["Asia", "Russia"],
		"America/Matamoros": ["Americas", "Mexico"],
		"Asia/Qatar": ["Asia", "Qatar"],
		"Asia/Dubai": ["Asia", "United Arab Emirates"],
		"Asia/Yakutsk": ["Asia", "Russia"],
		"Asia/Omsk": ["Asia", "Russia"],
		"Africa/Bangui": ["Africa", "Central African Rep."],
		"America/Paramaribo": ["Americas", "Suriname"],
		"Africa/Lubumbashi": ["Africa", "Congo (Dem. Rep.)"],
		"Pacific/Marquesas": ["Pacific Ocean", "French Polynesia"],
		"Europe/Bratislava": ["Europe", "Slovakia"],
		"Asia/Anadyr": ["Asia", "Russia"],
		"America/New_York": ["Americas", "United States"],
		"Pacific/Norfolk": ["Pacific Ocean", "Norfolk Island"],
		"Pacific/Rarotonga": ["Pacific Ocean", "Cook Islands"],
		"America/Dominica": ["Americas", "Dominica"],
		"Africa/Porto-Novo": ["Africa", "Benin"],
		"Asia/Samarkand": ["Asia", "Uzbekistan"],
		"Asia/Dushanbe": ["Asia", "Tajikistan"],
		"America/Kentucky/Louisville": ["Americas", "United States"],
		"America/Toronto": ["Americas", "Canada"],
		"America/Bahia": ["Americas",
		"Brazil"],
		"Africa/Kampala": ["Africa", "Uganda"],
		"Africa/Ouagadougou": ["Africa", "Burkina Faso"],
		"Antarctica/South_Pole": ["Antarctica", "Antarctica"],
		"Asia/Muscat": ["Asia", "Oman"],
		"America/Port_of_Spain": ["Americas", "Trinidad & Tobago"],
		"Pacific/Wake": ["Pacific Ocean", "US minor outlying islands"],
		"America/Indiana/Tell_City": ["Americas", "United States"],
		"Australia/Darwin": ["Australia", "Australia"],
		"America/Whitehorse": ["Americas", "Canada"],
		"America/Swift_Current": ["Americas", "Canada"],
		"Europe/Copenhagen": ["Europe",
		"Denmark"],
		"America/Argentina/Salta": ["Americas", "Argentina"],
		"America/Montserrat": ["Americas", "Montserrat"],
		"Europe/Simferopol": ["Europe", "Ukraine"],
		"Africa/Blantyre": ["Africa", "Malawi"],
		"America/Detroit": ["Americas", "United States"],
		"America/Shiprock": ["Americas", "United States"],
		"America/Grenada": ["Americas", "Grenada"],
		"America/Indiana/Vincennes": ["Americas", "United States"],
		"America/Indiana/Petersburg": ["Americas", "United States"],
		"Asia/Kathmandu": ["Asia", "Nepal"],
		"Asia/Pontianak": ["Asia", "Indonesia"],
		"Africa/Dar_es_Salaam": ["Africa", "Tanzania"],
		"America/Port-au-Prince": ["Americas", "Haiti"],
		"America/Cayman": ["Americas", "Cayman Islands"],
		"Europe/Athens": ["Europe", "Greece"],
		"America/Curacao": ["Americas", "Curacao"],
		"Indian/Kerguelen": ["Indian Ocean", "French Southern & Antarctic Lands"],
		"Africa/Khartoum": ["Africa", "Sudan"],
		"Asia/Manila": ["Asia", "Philippines"],
		"Europe/Sarajevo": ["Europe", "Bosnia & Herzegovina"],
		"Africa/Douala": ["Africa", "Cameroon"],
		"Europe/Rome": ["Europe", "Italy"],
		"America/Argentina/San_Juan": ["Americas",
		"Argentina"],
		"America/North_Dakota/New_Salem": ["Americas", "United States"],
		"America/Kralendijk": ["Americas", "Bonaire Sint Eustatius & Saba"],
		"Pacific/Port_Moresby": ["Pacific Ocean", "Papua New Guinea"],
		"Europe/Jersey": ["Europe", "Jersey"],
		"Europe/Andorra": ["Europe", "Andorra"],
		"Europe/Luxembourg": ["Europe", "Luxembourg"],
		"Pacific/Honolulu": ["Pacific Ocean", "United States"],
		"America/St_Thomas": ["Americas", "Virgin Islands (US)"],
		"Pacific/Majuro": ["Pacific Ocean", "Marshall Islands"],
		"America/Mazatlan": ["Americas",
		"Mexico"],
		"Asia/Macau": ["Asia", "Macau"],
		"Europe/Belgrade": ["Europe", "Serbia"],
		"Asia/Choibalsan": ["Asia", "Mongolia"],
		"Europe/Mariehamn": ["Europe", "Aaland Islands"],
		"Antarctica/McMurdo": ["Antarctica", "Antarctica"],
		"America/Thunder_Bay": ["Americas", "Canada"],
		"America/Los_Angeles": ["Americas", "United States"],
		"Asia/Kabul": ["Asia", "Afghanistan"],
		"Indian/Antananarivo": ["Indian Ocean", "Madagascar"],
		"Atlantic/Reykjavik": ["Atlantic Ocean", "Iceland"],
		"Asia/Nicosia": ["Asia", "Cyprus"],
		"Pacific/Tongatapu": ["Pacific Ocean",
		"Tonga"],
		"America/Marigot": ["Americas", "St Martin (French part)"],
		"Pacific/Pitcairn": ["Pacific Ocean", "Pitcairn"],
		"Pacific/Easter": ["Pacific Ocean", "Chile"],
		"Atlantic/South_Georgia": ["Atlantic Ocean", "South Georgia & the South Sandwich Islands"],
		"Africa/El_Aaiun": ["Africa", "Western Sahara"],
		"America/Campo_Grande": ["Americas", "Brazil"],
		"America/Dawson_Creek": ["Americas", "Canada"],
		"Antarctica/Vostok": ["Antarctica", "Antarctica"],
		"Europe/Bucharest": ["Europe", "Romania"],
		"America/Porto_Velho": ["Americas",
		"Brazil"],
		"Europe/Monaco": ["Europe", "Monaco"],
		"Asia/Bishkek": ["Asia", "Kyrgyzstan"],
		"Africa/Ceuta": ["Africa", "Spain"],
		"America/Winnipeg": ["Americas", "Canada"],
		"Asia/Aqtobe": ["Asia", "Kazakhstan"],
		"Africa/Dakar": ["Africa", "Senegal"],
		"America/Fortaleza": ["Americas", "Brazil"],
		"Pacific/Tarawa": ["Pacific Ocean", "Kiribati"],
		"America/Dawson": ["Americas", "Canada"],
		"Africa/Addis_Ababa": ["Africa", "Ethiopia"],
		"Pacific/Efate": ["Pacific Ocean", "Vanuatu"],
		"Pacific/Johnston": ["Pacific Ocean", "US minor outlying islands"],
		"Asia/Qyzylorda": ["Asia", "Kazakhstan"],
		"Europe/San_Marino": ["Europe", "San Marino"],
		"Asia/Jerusalem": ["Asia", "Israel"],
		"Pacific/Auckland": ["Pacific Ocean", "New Zealand"],
		"America/Metlakatla": ["Americas", "United States"],
		"America/Tortola": ["Americas", "Virgin Islands (UK)"],
		"America/Denver": ["Americas", "United States"],
		"Indian/Chagos": ["Indian Ocean", "British Indian Ocean Territory"],
		"America/Glace_Bay": ["Americas", "Canada"],
		"America/Hermosillo": ["Americas", "Mexico"],
		"Africa/Tunis": ["Africa", "Tunisia"],
		"America/Montevideo": ["Americas", "Uruguay"],
		"America/Resolute": ["Americas", "Canada"],
		"Asia/Gaza": ["Asia", "Palestine"],
		"Asia/Taipei": ["Asia", "Taiwan"],
		"Antarctica/DumontDUrville": ["Antarctica", "Antarctica"],
		"America/Argentina/Catamarca": ["Americas", "Argentina"],
		"America/Indiana/Knox": ["Americas", "United States"],
		"Asia/Novosibirsk": ["Asia", "Russia"],
		"Africa/Kigali": ["Africa", "Rwanda"],
		"America/Grand_Turk": ["Americas", "Turks & Caicos Is"],
		"Africa/Lagos": ["Africa", "Nigeria"],
		"Europe/Sofia": ["Europe",
		"Bulgaria"],
		"America/Lima": ["Americas", "Peru"],
		"America/Anchorage": ["Americas", "United States"],
		"Pacific/Nauru": ["Pacific Ocean", "Nauru"]
	};
	EDGE.Routers.Global = Backbone.Router.extend({
		changeSection: function() {
			var $section$$ = this.FULLY_QUALIFIED_NAME.split(".")[2];
			$("div.main-section").hide().filter($("#" + $section$$)).show();
			$("#Navigation li").removeClass("ui-tabs-selected ui-state-active").filter("#Nav" + $section$$).addClass("ui-tabs-selected ui-state-active")
		},
		forward: function() {
			var $index$$ = this.FULLY_QUALIFIED_NAME.replace(/\w*\.Routers\./, "");
			this.navigate($index$$, {
				trigger: !0,
				replace: !1
			})
		},
		reset: function() {
			this.debug("resetting " +
			this.FULLY_QUALIFIED_NAME);
			_.each(this.views,
			function($view$$) {
				$view$$.reset && $view$$.reset()
			});
			this.views = {}
		},
		catchall: function($actions$$) {
			this.debug("routed " + this.FULLY_QUALIFIED_NAME + ": " + $actions$$)
		}
	});
	EDGE.Views.Global = EDGE.Views.Global || {};
	EDGE.Views.Global.Reboot = function $EDGE$Views$Global$Reboot$() {
		UBNT.Logger.debug("rebooting");
		$.ajax({
			type: "POST",
			url: EDGE.Config.Api.base + "edge/operation/reboot.json",
			success: function($data$$) {
				$data$$ = $data$$.OPERATION || {};
				$data$$.success ? new EDGE.Views.Global.Takeover({
					title: "Rebooting",
					content: Msg.N_OperationRebootStarted,
					blocking: !1
				}) : $(window).trigger("notify", new EDGE.Models.Notice({
					type: "error",
					notice: Msg.E_OperationRebootFailed + " (" + ($data$$.errors ? $data$$.errors.join("\n") : "Unspecified error") +
					")"
				}))
			},
			error: function() {
				$(window).trigger("notify", new EDGE.Models.Notice({
					type: "error",
					notice: Msg.E_OperationRebootFailed
				}))
			}
		})
	};
	EDGE.Views.Global.Reset = function $EDGE$Views$Global$Reset$() {
		UBNT.Logger.debug("resetting");
		$.ajax({
			type: "POST",
			url: EDGE.Config.Api.base + "edge/operation/reset-default-config.json",
			success: function($data$$) {
				$data$$ = $data$$.OPERATION || {};
				$data$$.success ? new EDGE.Views.Global.Takeover({
					title: "Resetting",
					content: Msg.N_OperationResetStarted,
					blocking: !1
				}) : $(window).trigger("notify", new EDGE.Models.Notice({
					type: "error",
					notice: Msg.E_OperationResetFailed + " (" + ($data$$.errors ? $data$$.errors.join("\n") : "Unspecified error") +
					")"
				}))
			},
			error: function() {
				$(window).trigger("notify", new EDGE.Models.Notice({
					type: "error",
					notice: Msg.E_OperationResetFailed
				}))
			}
		})
	};
	EDGE.Views.Global.Shutdown = function $EDGE$Views$Global$Shutdown$() {
		UBNT.Logger.debug("shutdown");
		$.ajax({
			url: EDGE.Config.Api.base + "edge/operation/shutdown.json",
			success: function($data$$) {
				$data$$ = $data$$.OPERATION || {};
				$data$$.success ? new EDGE.Views.Global.Takeover({
					title: "Shutting Down",
					content: Msg.N_OperationShutdownStarted,
					blocking: !0
				}) : $(window).trigger("notify", new EDGE.Models.Notice({
					type: "error",
					notice: Msg.E_OperationShutdownFailed + " (" + ($data$$.errors ? $data$$.errors.join("\n") : "Unspecified error") +
					")"
				}))
			},
			error: function() {
				$(window).trigger("notify", new EDGE.Models.Notice({
					type: "error",
					notice: Msg.E_OperationShutdownFailed
				}))
			}
		})
	};
	EDGE.Views.Global.QuickInfo = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.QuickInfo",
		initialize: function() {
			this.interfaces = this.options.interfaces;
			this.system = this.options.system;
			this.setElement($("#QuickInfoPanel"));
			this.template = _.template($("#QuickInfoTemplate").html());
			this.views = {};
			EDGE.poe = !1;
			app.defer.sysinfo.done(_.bind(function($sysinfo$$) {
				$("#PageHeader .model .version").html($sysinfo$$.version)
			},
			this));
			this.render()
		},
		render: function() {
			if (this.template) {
				this.$el.html(this.template({
					configured: this.interfaces.length,
					running: this.interfaces.filterByConnected().length,
					hostname: this.system.get("host-name")
				}));
				this.views.diagram = new EDGE.Views.Global.RouterDiagram({
					el: this.$(".diagram"),
					collection: this.interfaces
				});
				this.views.status = new EDGE.Views.Global.QuickInfoStatus({
					el: this.$(".status"),
					model: this.system.get("stats")
				});
				var $self$$ = this;
				EDGE.Config.Features.poe && this.$("ul.panel-tab li").mouseover(function() {
					$this = $(this);
					$this.hasClass("current") || ($this.addClass("current"), $self$$.$(".diagram ol li").removeClass("down up-10 up-100 up-gigabit"),
					$self$$.$(".diagram ol li").removeClass("poe-off poe-24v poe-48v"), $this.siblings().removeClass("current"), EDGE.poe = $this.data("poe") ? !0: !1)
				})
			}
			return this
		},
		reset: function() {
			UBNT.Logger.debug("resetting quickinfo")
		}
	});
	EDGE.Views.Global.RouterDiagram = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.RouterDiagram",
		initialize: function() {
			_.bindAll(this);
			var $self$$ = this;
			this.interfaces = [];
			this.$interfaces = this.$("li").each(function($index$$, $$interface$$) {
				var $iface$$ = new EDGE.Views.Global.RouterInterface({
					el: $$interface$$
				});
				$self$$.interfaces.push($iface$$)
			});
			this.collection.on("change", this.update, this);
			this.update()
		},
		update: function() {
			var $view$$,
			$self$$ = this;
			this.collection.filterByType("ethernet").each(function($iface$$) { ($view$$ =
				$self$$.interfaces[parseInt($iface$$.get("id").substr(3), 10)]) && $view$$.setModel($iface$$)
			})
		}
	});
	EDGE.Views.Global.RouterInterface = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.RouterInterface",
		initialize: function() {
			this.debug("initialize()");
			_.bindAll(this);
			this.template = _.template($("#QuickInfoInterfaceTooltipTemplate").html());
			window.app.tooltip.addElement(this.$el.find(".port"), this.renderTooltipContent, {
				topOffset: 20,
				topOffsetAbsolute: !0,
				leftOffset: -50
			})
		},
		renderTooltipContent: function() {
			this.debug("renderTooltipContent()");
			var $sfp_stats$$ = this.model.get("stats"),
			$data$$ =
			$sfp_stats$$.get("speed") + "/" + $sfp_stats$$.get("duplex"),
			$link_poe$$ = $sfp_stats$$.get("l1up"),
			$en$$ = $sfp_stats$$.get("up"),
			$sfp_stats$$ = $sfp_stats$$.get("sfp"),
			$data$$ = {
				className: "with-status with-standard" + (this.isSfp ? " with-sfp": ""),
				portNumber: this.model.get("id").match(/\d+/i)[0],
				link: $link_poe$$ ? "up": "down",
				speed: $link_poe$$ ? $data$$: "n/a",
				admin: $en$$ ? "Enabled": "Disabled",
				vendor: $sfp_stats$$.present ? $sfp_stats$$.vendor: "N/A",
				part: $sfp_stats$$.present ? $sfp_stats$$.part: "N/A"
			};
			EDGE.Config.Features.poe &&
			(0 < EDGE.Config.Features.poe_cap[this.model.get("id")] ? ($link_poe$$ = this.model.get("poe"), $data$$.poe = $link_poe$$.output ? $link_poe$$.output: "off") : $data$$.poe = "not supported");
			return $(this.template($data$$))
		},
		setModel: function($model$$19_stats$$) {
			this.model = $model$$19_stats$$;
			$model$$19_stats$$ = this.model.get("stats");
			this.isSfp = $model$$19_stats$$.get("combo") && $model$$19_stats$$.get("sfp").present || $model$$19_stats$$.get("is_sfp");
			this.update()
		},
		update: function() {
			var $$sfp_stats$$ = this.model.get("stats"),
			$poe$$ = this.model.get("poe");
			this.$el.removeClass("down up-10 up-100 up-gigabit");
			this.$el.removeClass("poe-off poe-24v poe-48v");
			EDGE.poe ? $poe$$ && this.$el.addClass("poe-" + $poe$$.output) : this.$el.addClass($$sfp_stats$$.get("speedDetail"));
			$$sfp_stats$$ = this.$el.find(".note");
			this.isSfp && !$$sfp_stats$$.length ? this.$el.addClass("sfp").append($('<span class="note">SFP</span>')) : !this.isSfp && $$sfp_stats$$.length && (this.$el.removeClass("sfp"), $$sfp_stats$$.remove())
		}
	});
	EDGE.Views.Global.QuickInfoStatus = Backbone.View.extend({
		initialize: function() {
			_.bindAll(this);
			this.$cpuProgressBar = this.$(".cpu-progress-bar").progressbar({
				value: 0
			}).width(130);
			this.$cpuProgressBarBar = $("div", this.$cpuProgressBar);
			this.$cpuProgressLabel = this.$(".cpu-progress-label");
			this.$cpuTempLabel = this.$(".cpu-temp-label");
			this.$ramProgressBar = this.$(".ram-progress-bar").progressbar({
				value: 0
			}).width(130);
			this.$ramProgressBarBar = $("div", this.$ramProgressBar);
			this.$ramProgressLabel = this.$(".ram-progress-label");
			this.$uptime = this.$(".uptime");
			this.model.bind("change:cpu", this.updateCPU);
			this.model.bind("change:mem", this.updateRAM);
			this.model.bind("change:uptime", this.updateUptime);
			this.model.bind("change:temps", this.updateTemps);
			this.updateCPU();
			this.updateRAM();
			this.updateUptime();
			this.updateTemps()
		},
		updateCPU: function() {
			if ("undefined" !== typeof this.model.get("cpu")) {
				var $value$$ = +this.model.get("cpu");
				this.$cpuProgressBarBar.stop(!0);
				this.$cpuProgressBarBar.show();
				this.$cpuProgressBarBar.animate({
					width: $value$$ +
					"%"
				});
				this.$cpuProgressLabel.text($value$$ + "%")
			}
		},
		updateRAM: function() {
			if ("undefined" !== typeof this.model.get("mem")) {
				var $value$$ = +this.model.get("mem");
				this.$ramProgressBarBar.stop(!0);
				this.$ramProgressBarBar.show();
				this.$ramProgressBarBar.animate({
					width: $value$$ + "%"
				});
				this.$ramProgressLabel.text($value$$ + "%")
			}
		},
		updateUptime: function() {
			if ("undefined" !== typeof this.model.get("uptime") && null !== this.model.get("uptime")) {
				for (var $ms$$2_str$$ = 1E3 * +this.model.get("uptime"), $date$$7_minutes$$ = new Date($ms$$2_str$$),
				$ms$$2_str$$ = "", $words_years$$ = $date$$7_minutes$$.getUTCFullYear() - 1970, $i$$ = $date$$7_minutes$$.getUTCMonth(), $weeks$$ = ~~ (($date$$7_minutes$$.getUTCDate() - 1) / 7), $days$$ = ($date$$7_minutes$$.getUTCDate() - 1) % 7, $hours$$ = $date$$7_minutes$$.getUTCHours(), $date$$7_minutes$$ = $date$$7_minutes$$.getUTCMinutes(), $ms$$2_str$$ = $ms$$2_str$$ + this.checkDateValue($words_years$$, "year"), $ms$$2_str$$ = $ms$$2_str$$ + this.checkDateValue($i$$, "month"), $ms$$2_str$$ = $ms$$2_str$$ + this.checkDateValue($weeks$$, "week"), $ms$$2_str$$ =
				$ms$$2_str$$ + this.checkDateValue($days$$, "day"), $ms$$2_str$$ = $ms$$2_str$$ + this.checkDateValue($hours$$, "hour"), $ms$$2_str$$ = $ms$$2_str$$ + this.checkDateValue($date$$7_minutes$$, "minute"), $words_years$$ = $ms$$2_str$$.match(/\S+/g), $ms$$2_str$$ = "", $i$$ = 0; 6 > $i$$; $i$$++) $words_years$$[$i$$] && ($ms$$2_str$$ += $words_years$$[$i$$], $ms$$2_str$$ += $i$$ % 2 ? ", ": " ");
				$ms$$2_str$$ = $ms$$2_str$$.substr(0, $ms$$2_str$$.length - 2);
				this.$uptime.text($ms$$2_str$$)
			}
		},
		updateTemps: function() {
			"undefined" !== typeof this.model.get("temps") &&
			(65 < this.model.get("temps")["Board (CPU)"] ? $("#OverheatAlert").length || $("#PageHeader").append($('<div id="OverheatAlert" title="' + Msg.N_OverheatAlert + '"></div>')) : $("#OverheatAlert").remove())
		},
		checkDateValue: function($value$$, $label$$) {
			return 0 < $value$$ ? $value$$ + " " + $label$$ + (1 < $value$$ ? "s": "") + " ": ""
		}
	});
	EDGE.Views.Global.Welcome = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.Welcome",
		initialize: function($args$$) {
			this.system = $args$$.system;
			this.system.bind("change:host-name", this.setHostname, this);
			this.readonly = "admin" != EDGE.Config.User.level;
			this.$fullName = this.$(".full-name").html(this.model.get("full-name") || this.model.get("username"));
			this.setHostname();
			this.$logoutButton = $(".WelcomeLogoutButton").button().click(function() {
				window.location = "/logout";
				return ! 1
			})
		},
		setHostname: function() {
			this.$("#HostName .host-name").html(this.system.get("host-name"))
		},
		reset: function() {
			UBNT.Logger.debug("resetting welcome")
		}
	});
	EDGE.Views.Global.Settings = Backbone.View.extend({
		events: {
			"submit form": "save",
			"click button.cancel": "remove"
		},
		initialize: function() {
			this.id = "settings";
			this.template = _.template($("#SettingsTemplate").html());
			var $self$$ = this;
			$("a#SettingsButton").bind("click",
			function() {
				$self$$.show();
				return ! 1
			})
		},
		render: function() {
			this.dialog = $(_.template($("#DialogTemplate").html(), {
				dialog: "config",
				action: "settings",
				type: "global",
				title: "Preferences"
			}));
			$("#PageContent").append(this.dialog);
			this.setElement(this.dialog.find("div.dialog-content"));
			var $id$$ = this.id;
			$("body").dialogManager("addItem", $id$$, this.dialog.dialoglite({
				view: this,
				draggable: {
					start: function() {
						$("body").dialogManager("bringToFront", $id$$);
						$("body").dialogManager("setDragged", $id$$, !0)
					}
				}
			}));
			this.$el.html(this.template());
			this.$("button").button();
			var $self$$ = this;
			this.dialog.dialoglite("tabify", {
				changed: function() {
					$self$$.show()
				}
			});
			this.delegateEvents();
			this.update();
			return this
		},
		update: function() {
			this.$("form").find("input[type=radio][name=keepalive][value=" + (!0 == this.model.get("keepalive") ?
			1: 0) + "]").attr("checked", !0)
		},
		show: function() {
			this.dialog ? $("body").dialogManager("bringToFront", this.id) : this.render();
			var $dragged$$ = $("body").dialogManager("getDragged", this.id);
			$("body").dialogManager("positionItem", this.id, !$dragged$$)
		},
		remove: function() {
			$("body").dialogManager("removeItem", this.id);
			this.dialog.remove();
			this.dialog = this.el = null
		},
		save: function($e$$) {
			$e$$.preventDefault();
			this.dialog.removeClass("saved success");
			this.model.set(this.$("form").serializeObject());
			this.dialog.addClass("saved success")
		},
		reset: function() {
			UBNT.Logger.debug("resetting settings")
		}
	});
	EDGE.Views.Global.Takeover = Backbone.View.extend({
		initialize: function($args$$) {
			this.args = $args$$;
			this.$parent = $("body");
			this.template = _.template($("#TakeoverTemplate").html());
			this.render();
			this.$parent.data("takeover", (this.$parent.data("takeover") || 0) + 1)
		},
		render: function() {
			this.setElement($(this.template(this.args)));
			this.$el.appendTo(this.$parent);
			this.args.type && this.$el.addClass(this.args.type);
			this.args.options && this.args.options.style && _.each(this.args.options.style,
			function($v$$, $k$$) {
				this.$el.children(":nth-child(2)").css($k$$,
				$v$$)
			},
			this);
			if (this.args.buttons) {
				var $$parent$$ = this.$(".section-actions");
				_.each(this.args.buttons,
				function($button$$) {
					$$parent$$.append(this.button($button$$))
				},
				this);
				$$parent$$.show()
			} else this.args.blocking && this.blocking(this.args.reload);
			return this
		},
		reset: function($args$$) {
			this.args = $args$$;
			this.$el.remove();
			this.render()
		},
		button: function($button$$, $plain$$) {
			var $self$$ = this,
			$$button$$ = $plain$$ ? $("<span>" + $button$$.title + "</span>") : $("<button>" + $button$$.title + "</button>").button();
			$button$$.bindings &&
			_.each($button$$.bindings,
			function($binding$$, $trigger$$) {
				if ($binding$$.confirm) $$button$$.one($trigger$$, $self$$.confirm($binding$$.confirm));
				else $binding$$.close && $$button$$.bind($trigger$$,
				function() {
					$self$$.remove()
				}),
				$binding$$.action && $$button$$.bind($trigger$$, $binding$$.action),
				$binding$$.disable && $$button$$.bind($trigger$$,
				function() {
					$$button$$.button("option", "disabled", !0)
				})
			});
			$button$$.icons && $$button$$.button("option", "icons", $button$$.icons);
			return $$button$$
		},
		confirm: function($config$$) {
			var $self$$ =
			this,
			$$parent$$ = this.$(".section-confirm"),
			$$content$$ = this.$(".content");
			return function() {
				$config$$.title ? $$parent$$.find(".title").show().html($config$$.title) : $$parent$$.find(".title").hide();
				$config$$.body ? $$parent$$.find(".body").show().html($config$$.body) : $$parent$$.find(".body").hide();
				$config$$.accept ? $$parent$$.find(".actions .accept").empty().show().append($self$$.button($config$$.accept)) : $$parent$$.find(".actions .accept").empty().hide();
				$config$$.reject ? $$parent$$.find(".actions .reject").empty().show().append($self$$.button($config$$.reject,
				!0)) : $$parent$$.find(".actions .reject").empty().hide();
				$$parent$$.show();
				$self$$.args.options && $self$$.args.options.top && $$content$$.scrollTop($$content$$[0].scrollHeight)
			}
		},
		blocking: function($action$$, $button$$) {
			var $self$$ = this;
			this.$(".section-actions").show().append($("<button>" + ($button$$ || "Refresh") + "</button>").button().bind("click",
			function() {
				$action$$ && "function" == typeof $action$$ ? ($action$$(), $self$$.remove()) : window.location.reload()
			}))
		},
		remove: function() {
			this.$parent.data("takeover",
			this.$parent.data("takeover") - 1);
			this.$el.remove()
		}
	});
	EDGE.Views.Global.WizardBase = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Wizard.WizardBase",
		events: {
			"click button.apply": "preSave",
			"submit form": "save",
			"click button.test": "save",
			"click button.delete": "delete",
			"click button.cancel": "cancel"
		},
		initialize: function() {
			_.bindAll(this);
			this.collection = new EDGE.Collections.Wizards;
			this["default"] = new EDGE.Models.Data({
				type: "default_config"
			});
			this.templates = {
				buttons: _.template($("#WizardButtonsTemplate").html())
			};
			this.subscribed = !1;
			this.addLabel =
			"Add"
		},
		removeLoading: function() {
			this.$el.find(".loading").hide()
		},
		loadCollection: function() {
			$.when(this.collection.fetch({
				async: !1
			}), this["default"].fetch({
				async: !1
			})).then($.proxy(function() {
				this.trigger("loaded")
			},
			this))
		},
		setContent: function() {},
		render: function() {
			if (this.$el.data("rendered")) this["default"].fetch({
				silent: !0,
				success: function($model$$) {
					$model$$.trigger("change")
				}
			});
			else {
				this.setContent();
				this.$form && (this.validator = this.$form.validate({
					debug: !0,
					onfocusout: !1,
					focusInvalid: !1,
					ignore: ":hidden",
					errorElement: "span",
					errorClass: "error",
					errorPlacement: function($error$$, $element$$) {
						$error$$.css("max-width", $element$$.parent().width() - 12);
						$error$$.css("margin-top", "5px");
						var $$next$$ = $element$$.next();
						$$next$$.hasClass("ui-icon-info") ? $error$$.insertAfter($$next$$) : $element$$.is(":checkbox") ? $element$$.parent().append($error$$) : $element$$.is(":radio") ? ($error$$.wrap("<label></label>"), $error$$.css("margin-left", "0px"), $element$$.closest(".group").append($error$$.parent())) : $error$$.insertAfter($element$$)
					},
					invalidHandler: $.proxy(function($event$$, $validator$$) {
						$validator$$.numberOfInvalids();
						var $$fieldsets$$ = this.$form.find("fieldset");
						_.delay(function() {
							$$fieldsets$$.has(".error").trigger("expand", !0)
						},
						100)
					},
					this)
				}));
				var $wizard$$ = this;
				$(document).on("change", "select.has-other",
				function() {
					var $$this$$ = $(this);
					if ($$this$$.val() == "other") {
						$$this$$.addClass("using-other");
						$$this$$.next("input.select-other").remove();
						$$this$$.after($('<input type="text" name="other_' + $$this$$.attr("name") + '" />').addClass("select-other"))
					} else {
						$$this$$.removeClass("using-other");
						$$this$$.next("input.select-other").remove();
						$$this$$.next("span.error").remove()
					}
					$wizard$$.model && $wizard$$.validate()
				});
				this.onChange();
				this.reset(!0)
			}
		},
		showPassword: function() {
			if (this.$form) {
				var $self$$ = this;
				this.$form.find('input:checkbox[name="show-password"]').on("change",
				function() {
					var $$this$$ = $(this);
					$self$$.$form.find("input:not(:checkbox)[data-group=" + $$this$$.data("group") + "]")[0].type = $$this$$.is(":checked") ? "text": "password"
				})
			}
		},
		onChange: function() {},
		doChange: function() {},
		clickRemove: function() {},
		validate: function() {
			if (this.validator) {
				_.each(this.validator.settings.rules,
				function($rule$$, $field$$) {
					var $$field$$ = this.$form.find('[name^="' + $field$$ + '"]');
					$$field$$.length && $$field$$.rules("remove")
				},
				this);
				var $validator$$ = this.model.get("validator");
				if ($validator$$ && $validator$$.rules) {
					_.each($validator$$.rules,
					function($rule$$, $field$$) {
						var $$field$$ = this.$form.find("[name=" + $field$$ + "]");
						this.$form.find("[name=other_" + $field$$ + "]").length && ($$field$$ = this.$form.find("[name=other_" + $field$$ +
						"]"), $$field$$.length && $$field$$.rules("add", {
							required: !0
						}));
						$$field$$.length && $$field$$.rules("add", $rule$$)
					},
					this);
					var $counter$$ = (new Date).getTime();
					_.each(this.$form.find(".addable").find("input,select"),
					function($elem$$) { - 1 < $($elem$$).attr("name").search(/[0-9]+$/) && $($elem$$).attr("name", $($elem$$).attr("name").removeNumbers());
						$($elem$$).attr("name", $($elem$$).attr("name") + $counter$$);
						$counter$$ += 1
					},
					this);
					_.each($validator$$.rules,
					function($rule$$, $field$$) {
						var $$field$$ = this.$form.find("[name^=" +
						$field$$ + "]"),
						$$field$$ = this.$form.find("[name^=" + $field$$ + "]").filter(function() {
							var $rg$$ = RegExp("^" + $field$$ + "\\d+$");
							return $(this).attr("name").match($rg$$)
						});
						$$field$$.length && _.each($$field$$,
						function($f$$) {
							var $$f$$ = $($f$$);
							$($f$$).hasClass("using-other") && ($$f$$ = $$f$$.next(), $$f$$.rules("add", {
								required: !0
							}));
							$$f$$.rules("add", $rule$$)
						},
						this)
					},
					this)
				}
			}
		},
		update: function() {
			if (this.model) if (this.destroy(), this.notify = null, void 0 !== this.model.get("html") && !this.model.get("updated")) {
				if (!1 === this.model.get("html")) this.$form.html('<div class="fatal error">' +
				Msg.E_WizardMissingHtml + "</div>");
				else {
					this.$form.html(this.model.get("html") + this.templates.buttons());
					this.$form.prepend($('<div class="loading"></div>'));
					this.delegateEvents();
					$("body").hasClass("port5") || $("body").hasClass("port5A") || $("body").hasClass("port6") || $("body").hasClass("port6A") ? this.$form.find(".blacklist").remove() : this.$form.find(".whitelist").remove();
					this.addButtons();
					this.showPassword();
					this.$form.find(".radio-toggles").each(function() {
						var $$parent$$ = $(this),
						$$radios$$ = $$parent$$.find("input[type=radio]"),
						$$toggle$$ = $$parent$$.find(".toggled");
						$$radios$$.on("change",
						function() {
							$$toggle$$.addClass("hidden");
							$(this).parent().next(".toggled").removeClass("hidden")
						});
						$$toggle$$.removeClass("hidden");
						$$radios$$.filter(":checked").trigger("change")
					});
					this.$form.find(".checkbox-toggle").each(function() {
						$checkbox = $(this).find("input[type=checkbox]")
					});
					var $self$$ = this;
					this.$form.find(".checkbox-toggle").each(function() {
						var $$parent$$ = $(this),
						$$checkbox$$ = $$parent$$.children().first().find("input[type=checkbox]"),
						$$toggle$$ = $$parent$$.find(".toggled");
						$$checkbox$$.on("change",
						function() {
							$(this).is(":checked") ? ($$toggle$$.removeClass("hidden"), $$toggle$$.hasClass("default") && ($self$$.setDefault($$toggle$$), $$toggle$$.removeClass("default"))) : $$toggle$$.addClass("hidden");
							$$toggle$$.removeClass("default")
						})
					});
					var $$all_model$$ = this.$form.find(":checkbox.all"),
					$$rest$$ = this.$form.find(":checkbox.rest");
					$$all_model$$.on("change",
					function() {
						$(this).is(":checked") ? ($$rest$$.prop("disabled", !0), $$rest$$.prop("checked",
						!1)) : $$rest$$.prop("disabled", !1)
					}).trigger("change");
					this.collapse();
					$$all_model$$ = this.getWizardModel({
						scenario: this.model.get("key"),
						action: "load"
					});
					$$all_model$$.fetch({
						async: !1,
						cache: !1,
						error: $.proxy(function($model$$, $xhr$$) {
							var $resp$$ = JSON.parse($xhr$$.responseText);
							$resp$$ && $resp$$.errors && this.destroy('<div class="fatal error">' + $resp$$.errors.join("<br />") + "</div>")
						},
						this)
					});
					var $loaded$$ = $$all_model$$.response();
					$$all_model$$.get("errors");
					$loaded$$ && $loaded$$.deletable ? this.$form.find("button.delete").show() :
					this.$form.find("button.delete").hide();
					$loaded$$ && $loaded$$.definition && this.populateSelects($loaded$$.definition);
					var $wizard$$ = this;
					"admin" == EDGE.Config.User.level && _.delay(function() {
						$wizard$$.infotip($wizard$$.$form)
					},
					30);
					_.each(this.$form.find("div.addable"),
					function($addable$$) {
						var $$addable$$ = $($addable$$); ($$addable$$.data("level") && 0 == $$addable$$.data("level") || !$$addable$$.data("level")) && this.renderAddables($($addable$$), 0)
					},
					this);
					$loaded$$ && $loaded$$.data && this.populateForm($loaded$$.data);
					this.populateHtml();
					this.$form.find("div.loading").remove();
					this.removeLoading();
					"admin" == EDGE.Config.User.level ? (this.$form.find("fieldset.actions button.apply").button({
						icons: {
							primary: "ui-icon-disk"
						}
					}), this.$form.find("fieldset.actions button.cancel").button({
						icons: {
							primary: "ui-icon-cancel"
						}
					}), this.$form.find("fieldset.actions button.delete").button({
						icons: {
							primary: "ui-icon-close"
						}
					}), this.$form.find("fieldset.primary button.test").button({
						icons: {
							primary: "ui-icon-disk"
						}
					}), this.loadAdditionalButtons()) :
					(this.$form.find("button").hide(), this.$form.find("fieldset.actions button").hide(), this.renderReadonly())
				}
				this.updateLocked()
			} else this.model.source().then($.proxy(function() {
				this.model.unset("updated");
				this.update()
			},
			this), $.proxy(function($xhr$$, $status$$, $error$$) {
				this.$form.html('<div class="fatal error">' + Msg.E_WizardLoadFailed + " (" + $error$$ + ")</div>")
			},
			this))
		},
		loadAdditionalButtons: function() {},
		infotip: function($elem$$) {
			$elem$$.infotip()
		},
		cloneTrigger: function($$clone$$) {
			var $$advance$$ = $$clone$$.closest("fieldset.primary").find(":checkbox.show-advance");
			0 < $$advance$$.length && ($$advance$$.is(":checked") ? $$clone$$.find("div.advance-container").removeClass("hidden") : $$clone$$.find("div.advance-container").addClass("hidden"))
		},
		addFunction: function() {},
		renderAddables: function($$addable$$0$$, $level$$) {
			if ($$addable$$0$$.find("div[data-level=" + ($level$$ + 1) + "].addable").length) var $children$$ = $$addable$$0$$.find("div[data-level=" + ($level$$ + 1) + "].addable");
			var $$template$$ = $$addable$$0$$.children(".addable-template").remove(),
			$$container_i$$ = $$addable$$0$$.children(".addable-container"),
			$$add$$ = $$addable$$0$$.children("button.addable-add"),
			$min$$ = parseInt($$addable$$0$$.data("min"), 10) || 0,
			$max$$ = parseInt($$addable$$0$$.data("max"), 10) || null,
			$wizard$$ = this;
			$$add$$.on("click",
			function($event$$, $trigger$$) {
				var $$addable$$ = $(this),
				$$clone$$ = $$template$$.clone(!0),
				$$button$$ = "undefined" !== typeof $$clone$$.data("level") ? $$clone$$.find("button[data-level=" + $$clone$$.data("level") + "].addable-remove") : $$clone$$.find("button.addable-remove"),
				$$container$$ = $$addable$$.parent().children(".addable-container");
				$wizard$$.addFunction($$addable$$, $trigger$$);
				$$clone$$.find("button.addable-add").length && $$clone$$.find("button.addable-add").button({
					icons: {
						primary: "ui-icon-plus"
					},
					label: $wizard$$.addLabel
				});
				$$clone$$.find(".ui-icon-info").length && $$clone$$.find(".ui-icon-info").remove();
				$$button$$.button({
					icons: {
						primary: "ui-icon-minus"
					}
				});
				var $numOfTemplates$$ = 0;
				$$container$$.is("table") ? ($$clone$$.children().each(function() {
					$(this).wrap("<td></td>")
				}), $$clone$$.children().wrapAll('<tr class="addable-template"></tr>'),
				$numOfTemplates$$ = $$clone$$.children().length, $$clone$$ = $$clone$$.children(), $numOfTemplates$$ = $$container$$.find("tr.addable-template:first").parent().children().length) : $numOfTemplates$$ = $$container$$.children(".addable-template").length;
				if ($numOfTemplates$$ < $min$$) $$button$$.css("visibility", "hidden");
				else $$button$$.on("click",
				function() {
					$$clone$$.remove();
					$$addable$$.trigger("max");
					$wizard$$.clickRemove($$addable$$)
				});
				$$container$$.append($$clone$$);
				"admin" == EDGE.Config.User.level && _.delay(function() {
					$wizard$$.infotip($$clone$$)
				},
				10);
				$wizard$$.cloneTrigger($$clone$$);
				$wizard$$.addButtonsToAddables($$clone$$);
				$$addable$$.trigger("max")
			}).button({
				icons: {
					primary: "ui-icon-plus"
				}
			}).bind("max",
			function() {
				var $$addable$$ = $(this),
				$$container$$2_size$$ = $$addable$$.parent().children(".addable-container"),
				$$container$$2_size$$ = "undefined" !== typeof $$container$$2_size$$.data("level") ? $$container$$2_size$$.find("[data-level=" + $$container$$2_size$$.data("level") + "].addable-template").size() : $$container$$2_size$$.find(".addable-template").size();
				$max$$ && $$container$$2_size$$ >= $max$$ ? $$addable$$.prop("disabled", !0).addClass("ui-state-disabled") : $$addable$$.prop("disabled", !1).removeClass("ui-state-disabled")
			});
			if ($$container_i$$.children(".addable-template").size() < $min$$) for ($$container_i$$ = $$container_i$$.children(".addable-template").size(); $$container_i$$ < $min$$; $$container_i$$++) $$add$$.trigger("click", [!0]);
			"undefined" !== typeof $children$$ && _.each($children$$,
			function($$child_child$$) {
				$$child_child$$ = $($$child_child$$);
				$$child_child$$.data("level") ==
				$level$$ + 1 && this.renderAddables($$child_child$$, $level$$ + 1)
			},
			this)
		},
		addButtonsToAddables: function() {},
		renderReadonly: function() {
			this.$form.find("input[type=text], input[type=password]").each(function() {
				$this = $(this);
				$this.hide().after($('<span class="readonly text"></span>'));
				$this.next().html($this.val());
				if ($this.hasClass("password") || "password" == $this.attr("type")) $this.next().html("******"),
				$this.remove()
			});
			this.$form.find("input[type=radio], input[type=checkbox]").filter(":not(.show-advance)").each(function() {
				$this =
				$(this);
				$this.hide().after($('<span class="readonly checkbox"></span>'));
				$this.is(":checked") ? $this.next().html("Yes") : $this.next().html("No")
			});
			this.$form.find("select").each(function() {
				$this = $(this);
				$this.hide().after($('<span class="readonly select"></span>'));
				$this.next().html($this.val())
			})
		},
		collapse: function() {},
		setDefault: function($$scope$$) {
			$$scope$$ && $$scope$$.find(":input").each(function() {
				$this = $(this);
				var $def$$ = $this.data("default");
				"undefined" !== $def$$ ? $this.is(":checkbox") ? $this.prop("checked",
				$def$$) : $this.val($def$$) : $this.is(":checkbox") ? $this.prop("checked", !1) : $this.val("");
				$this.trigger("change")
			})
		},
		updateLocked: function() {},
		flagActive: function() {},
		preSave: function() {
			this.validate()
		},
		processForm: function() {
			this.$form.find("input,select").each(function() { - 1 < $(this).attr("name").search(/[0-9]/) && $(this).attr("name", $(this).attr("name").removeNumbers())
			})
		},
		processResult: function($result$$, $action$$) {
			this.$form.find("div.addable").each(function() {
				var $$this$$ = $(this),
				$objname$$ = $$this$$.data("object");
				$objname$$ && 1 == $$this$$.data("objectify") && ($result$$[$action$$][$objname$$] = $result$$[$action$$][$objname$$] || [], $$this$$.data("name") ? $$this$$.find("[data-parent=" + $$this$$.data("name") + "].addable-template").each(function() {
					$result$$[$action$$][$objname$$].push($(this).find(":input").serializeObject())
				}) : $$this$$.find(".addable-template").each(function() {
					$result$$[$action$$][$objname$$].push($(this).find(":input").serializeObject())
				}), $result$$[$action$$][$objname$$] && _.each($result$$[$action$$][$objname$$],
				function($elem$$) {
					_.each($elem$$,
					function($val$$, $key$$) {
						delete $result$$[$action$$][$key$$];
						delete $result$$[$action$$]["other_" + $key$$];
						"other" == $val$$ && ($elem$$[$key$$] = $elem$$["other_" + $key$$], delete $elem$$["other_" + $key$$]);
						if (_.isArray($val$$)) {
							for (var $j$$ = 0, $i$$ = 0; $i$$ < $val$$.length; $i$$++)"other" == $val$$[$i$$] && (_.isArray($elem$$["other_" + $key$$]) ? ($val$$[$i$$] = $elem$$["other_" + $key$$][$j$$], $j$$++) : $val$$[$i$$] = $elem$$["other_" + $key$$]);
							delete $elem$$["other_" + $key$$]
						}
					})
				}), _.each($result$$[$action$$][$objname$$],
				function($elem$$) {
					_.each($elem$$,
					function() {})
				}))
			});
			_.each($result$$[$action$$],
			function($val$$, $key$$) {
				0 == $key$$.indexOf("other_") && _.each($result$$[$action$$],
				function($v$$, $k$$) {
					$key$$ == "other_" + $k$$ && ($result$$[$action$$][$k$$] = $val$$, delete $result$$[$action$$][$key$$])
				},
				this)
			},
			this)
		},
		processDefault: function() {
			this.$form.find("div.hidden").each(function() {
				var $$parent$$ = $(this);
				$(this).find(":input").each(function() {
					$(this).attr("data-default") && $$parent$$.addClass("default")
				})
			})
		},
		validate2: function() {
			return ! 0
		},
		save: function($event$$) {
			this.validate2() && this.save2($event$$)
		},
		save2: function($event$$) {
			this.$reset_manual = this.$form.find("div.reset-manual");
			var $self$$ = this;
			$self$$.$reset_manual.length ? $self$$.notify = new EDGE.Views.Global.Takeover({
				title: "Are you sure you want to replace the configuration?",
				content: $self$$.$reset_manual.html(),
				options: {
					style: {
						width: "500px",
						"margin-left": "-250px"
					}
				},
				buttons: [{
					title: "Apply Changes",
					icons: {
						secondary: "ui-icon-check"
					},
					bindings: {
						click: {
							action: function() {
								$this = $(this);
								$this.attr("disabled", "disabled").addClass("ui-state-disabled");
								$this.button("showWorkingIndicator", "primary", "ui-icon-spinner");
								$self$$.applyResult($event$$)
							}
						}
					}
				},
				{
					title: "Not Now",
					icons: {
						secondary: "ui-icon-close"
					},
					bindings: {
						click: {
							close: !0
						}
					}
				}]
			}) : this.applyResult($event$$)
		},
		applyResult: function($$target_event$$) {
			$$target_event$$.preventDefault();
			this.processForm();
			var $$target_event$$ = $($$target_event$$.target),
			$action$$ = $$target_event$$.is("form") ? "apply": "test",
			$result$$ = this.setResult($action$$);
			this.$form.find(":disabled:not(button)").prop("disabled", !1);
			this.processResult($result$$, "apply");
			"test" == $action$$ && ($result$$.target = $$target_event$$.data("type"));
			this.disableButtons($action$$);
			this.syncModel($result$$)
		},
		getWizardModel: function($attrs$$) {
			switch (this.model.get("type")) {
			case "setup":
				return new EDGE.Models.WizardSetup($attrs$$);
			case "feature":
				return new EDGE.Models.WizardFeature($attrs$$)
			}
		},
		populateAddable: function($$addable$$, $data$$) {
			var $$add$$ = $$addable$$.children("button.addable-add"),
			$$container$$ = $$addable$$.children(".addable-container"),
			$size$$ = $data$$.length;
			$$container$$.is("table") ? $$container$$.remove(".addable-template") : $$container$$.empty();
			for (var $i$$ = 0; $i$$ < $size$$; $i$$++) $$add$$.trigger("click", !0);
			$$container$$.is("table") ? _.each($$container$$.find(".addable-template"),
			function($item$$, $num$$) {
				this.populateForm(_.isObject($data$$[$num$$]) ? $data$$[$num$$] : [$data$$[$num$$]], $($item$$))
			},
			this) : _.each($$container$$.children(".addable-template"),
			function($item$$, $num$$) {
				this.populateForm(_.isObject($data$$[$num$$]) ?
				$data$$[$num$$] : [$data$$[$num$$]], $($item$$))
			},
			this)
		},
		populateForm: function($data$$, $$form$$) {
			$data$$ && _.each($data$$,
			function($value$$, $field$$) {
				if ($.isArray($value$$)) if ($$form$$) {
					var $$addable$$6_$input$$ = $$form$$.find("div.addable[data-object=" + $field$$ + "]");
					this.populateAddable($$addable$$6_$input$$, $value$$)
				} else $$addable$$6_$input$$ = this.$form.find("div.addable[data-object=" + $field$$ + "]"),
				("0" == $$addable$$6_$input$$.data("level") || "undefined" == typeof $$addable$$6_$input$$.data("level")) &&
				this.populateAddable($$addable$$6_$input$$, $value$$);
				else if ($$form$$ = $$form$$ || this.$form, $$addable$$6_$input$$ = _.isNumber($field$$) ? $$form$$.find(":input").first() : $$form$$.find("[name^=" + $field$$ + "]"), $$addable$$6_$input$$.is(":radio")) $$addable$$6_$input$$.filter('[value="' + $value$$ + '"]').prop("checked", !0).trigger("change");
				else if ($$addable$$6_$input$$.is(":checkbox")) if (1 < $$addable$$6_$input$$.length) {
					var $values$$ = $value$$.split(",");
					$$addable$$6_$input$$.each(function() { - 1 != $values$$.indexOf($(this).val()) &&
						$(this).prop("checked", !0).trigger("change")
					})
				} else $$addable$$6_$input$$.prop("checked", 0 != $value$$).trigger("change");
				else $$addable$$6_$input$$.is("select") ? $$addable$$6_$input$$.find('option[value="' + $value$$ + '"]').length ? $$addable$$6_$input$$.val($value$$).trigger("change") : ($$addable$$6_$input$$.val("other").trigger("change"), $$addable$$6_$input$$.next("input.select-other").val($value$$)) : $$addable$$6_$input$$.val($value$$).trigger("change")
			},
			this)
		},
		populateSelects: function($data$$) {
			$data$$ &&
			_.each($data$$,
			function($values$$, $field$$) {
				var $$select$$ = this.$form.find("select[name=" + $field$$ + "]");
				$$select$$.empty();
				$values$$.options.sort();
				_.each($values$$.options,
				function($option$$) {
					"dummy0" != $option$$ && $$select$$.append('<option value="' + $option$$ + '">' + $option$$ + "</option>")
				});
				$values$$.other && "true" === $values$$.other && ($$select$$.addClass("has-other"), $$select$$.append('<option value="other">other</option>'));
				$$select$$.prepend('<option value="" selected>-</option>')
			},
			this)
		},
		populateHtml: function($data$$) {
			var $$populate$$ =
			this.$form.find(".populate");
			$$populate$$.hide().find(".value").empty();
			$data$$ && _.each($data$$,
			function($value$$, $field$$) {
				$$populate$$.filter("." + $field$$).show().find(".value").text($value$$)
			},
			this)
		},
		stopRouting: function() {},
		startRouting: function() {},
		notifyRouting: function($event$$) {
			if ("A" == $event$$.target.nodeName) {
				$event$$.preventDefault();
				$event$$.stopPropagation();
				var $trigger$$ = $event$$.data.trigger,
				$url$$ = $event$$.data.url || $($event$$.target).attr("href"); ! 0 === this._alertLocked ? new EDGE.Views.Global.Takeover({
					title: "Are you sure you want to exit the wizard?",
					content: Msg.N_WizardExit,
					buttons: [{
						title: "Yes, Exit",
						icons: {
							secondary: "ui-icon-check"
						},
						bindings: {
							click: {
								close: !0,
								action: $.proxy(function() {
									this.startRouting();
									$trigger$$ && $($event$$.target).trigger("click");
									window.app.reload($url$$)
								},
								this)
							}
						}
					},
					{
						title: "Not Now",
						icons: {
							secondary: "ui-icon-close"
						},
						bindings: {
							click: {
								close: !0
							}
						}
					}]
				}) : (this.startRouting(), $trigger$$ && $($event$$.target).trigger("click"), window.app.reload($url$$))
			}
		},
		notifyStatus: function($msg$$9_status$$, $success$$, $connected$$) {
			var $$parent$$ =
			this.$form.find("fieldset.actions");
			$$parent$$.find(".status").remove();
			if ($msg$$9_status$$) {
				var $type$$ = ["status"]; ! 0 == $success$$ ? $type$$.push("ok") : !1 == $success$$ && $type$$.push("failed"); ! 1 == $connected$$ && $type$$.push("pending");
				$msg$$9_status$$ = '<span class="' + $type$$.join(" ") + '">' + $msg$$9_status$$ + "</span>";
				$$parent$$.append($msg$$9_status$$);
				this.notify && (this.$reset_manual.data("reboot") && !0 == $success$$ ? this.notify.reset({
					title: "Reboot with the new configuration?",
					content: this.$reset_manual.html() +
					$msg$$9_status$$,
					options: {
						style: {
							width: "500px",
							"margin-left": "-250px"
						},
						top: !0
					},
					buttons: [{
						title: "Reboot",
						icons: {
							secondary: "ui-icon-refresh"
						},
						bindings: {
							click: {
								confirm: {
									title: "Are you sure?",
									body: "Your network will be temporarily unavailable while your router reboots.",
									accept: {
										title: "Yes, I'm sure",
										icons: {
											secondary: "ui-icon-check"
										},
										bindings: {
											click: {
												action: EDGE.Views.Global.Reboot,
												close: !0,
												disable: !0
											}
										}
									},
									reject: {
										title: "No, I'll reboot later",
										icons: {
											secondary: "ui-icon-close"
										},
										bindings: {
											click: {
												close: !0
											}
										}
									}
								}
							}
						}
					},
					{
						title: "Not Now",
						icons: {
							secondary: "ui-icon-close"
						},
						bindings: {
							click: {
								close: !0
							}
						}
					}]
				}) : this.notify.reset({
					title: "Failed to generate new configuration",
					content: this.$reset_manual.html() + $msg$$9_status$$,
					options: {
						style: {
							width: "500px",
							"margin-left": "-250px"
						}
					},
					buttons: [{
						title: "Close",
						icons: {
							secondary: "ui-icon-close"
						},
						bindings: {
							click: {
								close: !0
							}
						}
					}]
				}), this.notify = null)
			}
		},
		destroy: function($replace$$) {
			this.undelegateEvents();
			this.$form.find("input[type=radio]").off();
			this.$form.find("fieldset").off();
			this.$form.find("legend").off();
			this.$form.find(".addable").off();
			this.$form.find(".addable-add").off();
			this.$form.find(".addable-remove").off();
			this.$form.html($replace$$ ? $replace$$: $('<div class="loading"></div>'));
			this.flagActive()
		},
		cancel: function() {},
		setResult: function($action$$) {
			var $result$$ = {};
			$result$$.scenario = this.model.get("key");
			$result$$.action = $action$$;
			switch ($action$$) {
			case "apply":
				$result$$[$action$$] = this.$form.serializeObject();
				break;
			case "delete":
				$result$$[$action$$] = {};
				break;
			case "test":
				$result$$[$action$$] =
				this.$form.serializeObject();
				break;
			default:
				$result$$.action = "apply",
				$result$$.apply = this.$form.serializeObject(),
				$result$$.apply.mode = $action$$
			}
			return $result$$
		},
		deleteWizard: function() {
			var $result$$ = this.setResult("delete");
			this.$form.find(":disabled:not(button)").prop("disabled", !1);
			this.disableButtons("delete");
			this.syncModel($result$$)
		},
		disableButtons: function($action$$) {
			this.$form.find("button").attr("disabled", "disabled").addClass("ui-state-disabled");
			this.$form.find("button." + $action$$).button("showWorkingIndicator",
			"primary", "ui-icon-spinner");
			this.stopRouting("setup" == this.model.get("type"));
			this.notifyStatus()
		},
		enableButtons: function($action$$) {
			this.$form.find("button").removeAttr("disabled").removeClass("ui-state-disabled");
			this.$form.find("button." + $action$$).button("hideWorkingIndicator")
		},
		addButtons: function() {
			if (this.$form.find("div.extra-buttons").length) {
				var $$buttons$$ = this.$form.find("fieldset.actions div"),
				$self$$ = this;
				this.$form.find("div.extra-buttons").find("button").each(function() {
					$this = $(this);
					var $action$$ = $this.attr("class");
					$this.appendTo($$buttons$$).button({
						icons: {
							primary: "ui-icon-" + $this.data("icon")
						}
					}).on("click",
					function() {
						event.preventDefault();
						$self$$.processForm();
						var $result$$ = $self$$.setResult($action$$);
						$self$$.$form.find(":disabled:not(button)").prop("disabled", !1);
						$self$$.processResult($result$$, "apply");
						$self$$.disableButtons($action$$);
						$self$$.syncModel($result$$)
					})
				})
			}
		},
		subscribe: function() {},
		unsubscribe: function() {},
		syncModel: function($result$$) {
			var $model$$ = this.getWizardModel($result$$),
			$action$$ = $result$$.action;
			this.unsubscribe();
			$model$$.save().then($.proxy(function($_msg_data$$49_resp$$) {
				$result$$[$action$$] && $result$$[$action$$].mode ? this.enableButtons($result$$[$action$$].mode) : this.enableButtons($action$$);
				var $response$$ = $model$$.response();
				this.populateHtml($response$$.data);
				$_msg_data$$49_resp$$ && $_msg_data$$49_resp$$.success && $response$$ && 1 == $response$$.success ? ("delete" == $action$$ && (this.update(), this.setDefault(this.$form)), $_msg_data$$49_resp$$ = Msg["N_Wizard" + $action$$.toProperCase() +
				"Success" + ($response$$["connect-failure"] ? "ConnFailed": "")], this.notifyStatus($_msg_data$$49_resp$$, !0, 1 != $response$$["connect-failure"]), this.subscribe(), this.processDefault(), this.doChange()) : ($_msg_data$$49_resp$$ = ($_msg_data$$49_resp$$ = new EDGE.Models.Response($_msg_data$$49_resp$$, ["FEATURE"])) && $_msg_data$$49_resp$$.notices ? Msg["E_Wizard" + $action$$.toProperCase() + "Failed"] + " (" + $_msg_data$$49_resp$$.notices.pluck("notice").join(" ") + ")": Msg["E_Wizard" + $action$$.toProperCase() + "Failed"] + ($response$$ ?
				" (" + $response$$.error + ")": ""), this.notifyStatus($_msg_data$$49_resp$$, !1));
				this.$disabled && this.$disabled.prop("disabled", !0)
			},
			this), $.proxy(function() {
				$result$$[$action$$] && $result$$[$action$$].mode ? this.enableButtons($result$$[$action$$].mode) : this.enableButtons($action$$);
				var $_msg$$ = Msg["E_Wizard" + $action$$.toProperCase() + "Failed"];
				this.notifyStatus($_msg$$, !1);
				this.$disabled && this.$disabled.prop("disabled", !0)
			},
			this))
		},
		"delete": function() {
			var $self$$ = this;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to DELETE all configurations for this wizard?",
				confirm: function() {
					$self$$.deleteWizard()
				}
			})
		},
		filter: function($type$$, $key$$) {
			this.collection.length ? $type$$ && $key$$ ? (this.model = this.collection.filterByTypeAndKey($type$$, $key$$), this.update()) : this.model && this.reset(!0) : this.bind("loaded", $.proxy(function() {
				this.filter($type$$, $key$$)
			},
			this))
		},
		reset: function() {}
	});
	EDGE.Views.Global.Abstract = {};
	EDGE.Views.Global.Abstract.Form = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.updatable = this.flaggable = !0;
			this.readonly = $args$$.readonly;
			this.render()
		},
		renderAddables: function() {},
		renderView: function() {
			var $$form$$ = this.$("form");
			$$form$$.find("button").hide();
			$$form$$.find("input[type=text], input[type=password]").each(function() {
				$(this).hide().after($('<span class="readonly text"></span>'))
			});
			$$form$$.find("input[type=radio], input[type=checkbox]").each(function() {
				$(this).hide().after($('<span class="readonly checkbox"></span>'))
			});
			$$form$$.find("select").each(function() {
				$(this).hide().after($('<span class="readonly select"></span>'))
			})
		},
		templateVars: function() {
			return {}
		},
		validation: function() {
			return null
		},
		save: function($e$$) {
			$e$$.preventDefault()
		},
		flagErrors: function() {
			this.updatable = !1;
			this.update();
			this.updatable = !0
		},
		update: function() {},
		updateTextbox: function($$input$$, $value$$, $$flag$$) {
			var $self$$ = this;
			this.readonly ? $$input$$.next().html($value$$) : $$input$$.val(function($index$$, $current$$) { ! $$flag$$ || $self$$.flaggable &&
				$$flag$$[$current$$ == $value$$ || null == $value$$ && "" == $current$$ ? "removeClass": "addClass"]("updated");
				return $self$$.updatable ? $value$$: $current$$
			})
		},
		updateCheckbox: function($$input$$, $checked$$, $$flag$$) {
			var $self$$ = this;
			this.readonly ? $$input$$.next().html($checked$$ ? "Yes": "No") : ($checked$$ = !!$checked$$, $$input$$.attr("checked",
			function($index$$, $current$$) {
				"undefined" == typeof $current$$ ? $current$$ = !1: "checked" == $current$$ && ($current$$ = !0); ! $$flag$$ || $self$$.flaggable && $$flag$$[$current$$ == $checked$$ ?
				"removeClass": "addClass"]("updated");
				return $self$$.updatable && $checked$$ || !$self$$.updatable && $current$$ ? "checked": !1
			}))
		},
		updateRadio: function($$inputs$$, $$checked$$, $$flag$$) {
			var $self$$ = this;
			this.readonly ? $$inputs$$.each(function() {
				var $$this$$ = $(this);
				$$this$$.hide();
				if ($$this$$.val() != $$checked$$.val()) {
					var $$parent$$ = $$this$$.parents("li");
					if ($$parent$$.length) return $$parent$$.hide();
					$$parent$$ = $$this$$.parents("label");
					if ($$parent$$.length) return $$parent$$.hide()
				}
			}) : $$checked$$.attr("checked",
			function() { ! $$flag$$ || $self$$.flaggable && $$flag$$[$(this).val() == $$inputs$$.filter(":checked").val() ? "removeClass": "addClass"]("updated");
				return $self$$.updatable ? "checked": $(this).is(":checked")
			})
		},
		updateSelect: function($$input$$, $fstr_value$$, $$flag$$) {
			var $self$$ = this,
			$fstr_value$$ = 'option[value="' + $fstr_value$$ + '"]';
			this.readonly ? $$input$$.next().html($$input$$.find($fstr_value$$).val()) : $$input$$.find($fstr_value$$).attr("selected",
			function($index$$, $value$$) { ! $$flag$$ || $self$$.flaggable && $$flag$$["selected" ==
				$value$$ ? "removeClass": "addClass"]("updated");
				return $self$$.updatable ? "selected": $(this).is(":selected")
			})
		},
		setDisable: function($disabled$$, $models$$, $changed$$, $smodel$$) {
			var $action$$,
			$changed$$ = {};
			if ((!$smodel$$ || "undefined" === typeof $smodel$$.get("disable")) && $disabled$$ || $smodel$$ && null === $smodel$$.get("disable") && !$disabled$$) $action$$ = $disabled$$ ? "set": "delete";
			$action$$ && $models$$[$action$$] && ("set" == $action$$ ? ($models$$[$action$$].set("disable", null), UBNT_DISCOVER_DISABLE = !0) : UBNT_DISCOVER_DISABLE =
			!1, $changed$$["''"] = !0, $models$$[$action$$].set($changed$$, {
				silent: !0
			}))
		},
		setEnable: function($enabled$$, $models$$, $changed$$3_deleteValue$$, $smodel$$) {
			var $action$$,
			$changed$$3_deleteValue$$ = {};
			if ($smodel$$ && !$enabled$$ || !$smodel$$ && $enabled$$) $action$$ = $enabled$$ ? "set": "delete";
			$action$$ && $models$$[$action$$] && ($changed$$3_deleteValue$$["''"] = !0, $models$$[$action$$].set($changed$$3_deleteValue$$, {
				silent: !0
			}))
		},
		setProperty: function($property$$, $value$$, $models$$, $deleteValue$$) {
			this.setProperty_m($property$$,
			$value$$, $models$$, $deleteValue$$, this.model)
		},
		setProperty_m: function($parent$$6_property$$, $value$$, $models$$, $child$$16_deleteValue$$, $current$$5_smodel$$) {
			var $changed$$ = {};
			if (_.isArray($parent$$6_property$$)) for (var $properties$$ = _.clone($parent$$6_property$$), $current$$5_smodel$$ = $current$$5_smodel$$ ? $current$$5_smodel$$.get($properties$$.shift()) : null; $current$$5_smodel$$ && $properties$$.length;) $current$$5_smodel$$ = "object" == typeof $current$$5_smodel$$ ? $current$$5_smodel$$[$properties$$.shift()] :
			null;
			else $current$$5_smodel$$ = $current$$5_smodel$$ ? $current$$5_smodel$$.get($parent$$6_property$$) : null;
			var $action$$;
			if ($current$$5_smodel$$ != $value$$) {
				if (_.isArray($value$$)) {
					if ($current$$5_smodel$$ = $current$$5_smodel$$ || [], $current$$5_smodel$$.length != $value$$.length || _.intersection($value$$ || [], $current$$5_smodel$$ || []).length != $value$$.length) $value$$.length ? $action$$ = "set": ($action$$ = "delete", $value$$ = $child$$16_deleteValue$$ ? $child$$16_deleteValue$$: null)
				} else $value$$ ? $action$$ = "set": null ==
				$current$$5_smodel$$ && "" == $value$$ || ($action$$ = "delete", $value$$ = $child$$16_deleteValue$$ ? $child$$16_deleteValue$$: null);
				if ($action$$) {
					if (_.isArray($parent$$6_property$$)) {
						$properties$$ = _.clone($parent$$6_property$$);
						$parent$$6_property$$ = $properties$$.shift();
						$changed$$[$parent$$6_property$$] = $models$$[$action$$].get($parent$$6_property$$) || {};
						for ($child$$16_deleteValue$$ = $changed$$; $properties$$.length;) $child$$16_deleteValue$$ = $child$$16_deleteValue$$[$parent$$6_property$$],
						$parent$$6_property$$ =
						$properties$$.shift(),
						$child$$16_deleteValue$$[$parent$$6_property$$] || ($child$$16_deleteValue$$[$parent$$6_property$$] = {});
						$child$$16_deleteValue$$[$parent$$6_property$$] = $value$$
					} else $changed$$[$parent$$6_property$$] = $value$$;
					$models$$[$action$$] && $models$$[$action$$].set($changed$$, {
						silent: !0
					})
				}
			}
		}
	});
	EDGE.Views.Global.Abstract.Config = EDGE.Views.Global.Abstract.Form.extend({
		events: {
			"submit form": "save",
			"click button.cancel": "remove"
		},
		initialize: function($args$$) {
			this.template || $(window).trigger("fatal", Msg.E_MissingConfigTemplate);
			this.id || $(window).trigger("fatal", Msg.E_MissingConfigId);
			this.type || $(window).trigger("fatal", Msg.E_MissingConfigType);
			this.title || $(window).trigger("fatal", Msg.E_MissingConfigTitle);
			this.action = this.action || "config";
			this.notify = !1;
			EDGE.Views.Global.Abstract.Form.prototype.initialize.call(this,
			$args$$)
		},
		render: function($extended$$) {
			this.dialog = $(_.template($("#DialogTemplate").html(), {
				dialog: "config",
				action: this.action,
				type: this.type,
				title: this.title
			}));
			$("#PageContent").append(this.dialog);
			this.setElement(this.dialog.find("div.dialog-content"));
			var $id$$ = this.id;
			$("body").dialogManager("addItem", this.id, this.dialog.dialoglite({
				view: this,
				draggable: {
					start: function() {
						$("body").dialogManager("bringToFront", $id$$);
						$("body").dialogManager("setDragged", $id$$, !0)
					}
				}
			}));
			this.$el.html(this.template(_.extend({
				id: this.id
			},
			this.templateVars())));
			var $self$$ = this,
			$$form$$ = this.$("form");
			this.readonly ? ($$form$$.form({
				render: function() {
					$self$$.show()
				}
			}), this.renderView(), this.renderAddables()) : (this.renderAddables(), $$form$$.form({
				validation: _.extend(this.validation() || {},
				{
					errorElement: "span"
				}),
				render: function() {
					$self$$.show()
				}
			}), this.$el.find("li fieldset.nested").parent("li").bind("render",
			function() {
				var $$fieldset$$ = $(this).find("fieldset.nested");
				$$fieldset$$.is(":visible") && "admin" == EDGE.Config.User.level && ($$fieldset$$.find("span.ui-icon-info").remove(),
				$$fieldset$$.infotip("position"))
			}), "admin" == EDGE.Config.User.level && _.delay(function() {
				0 == $$form$$.find("span.ui-icon-info").length && $$form$$.infotip()
			},
			300));
			this.$("button:not(.plaintext)").button();
			this.$("button[type=submit]").button({
				icons: {
					primary: "ui-icon-disk"
				}
			});
			this.$("button.cancel").button({
				icons: {
					primary: "ui-icon-closethick"
				}
			});
			this.dialog.dialoglite("tabify", {
				changed: function() {
					$self$$.show();
					if ($self$$.$el.find(".tab-content").length) {
						var $$tab$$ = $self$$.$el.find(".tab-content");
						if ($$tab$$.is(":visible") &&
						EDGE.Config.User.level == "admin") {
							$$tab$$.find("span.ui-icon-info").remove();
							$$tab$$.infotip("position")
						}
					}
				}
			});
			$extended$$ || (this.delegateEvents(), this.flaggable = !1, this.model ? this.update() : this.show(), this.flaggable = !0);
			return this
		},
		tabs: function() {
			var $$element$$ = this.$el,
			$self$$ = this;
			this.$("div.dialog-tabs").tabslite({
				preventDefault: !0,
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$2_anchor$$) {
						$$anchor$$2_anchor$$ = $($$anchor$$2_anchor$$);
						$$anchor$$2_anchor$$.data("content", $$element$$.find("div.tab-content." +
						$$anchor$$2_anchor$$.attr("href").substr(1))).bind("show",
						function($event$$, $silent$$) {
							$(this).data("content").show();
							$silent$$ || $self$$.show()
						}).bind("hide",
						function($event$$, $silent$$) {
							$(this).data("content").hide();
							$silent$$ || $self$$.show()
						}).trigger("hide", !0)
					});
					$($anchors$$[0]).trigger("show")
				}
			})
		},
		show: function() {
			this.dialog ? $("body").dialogManager("bringToFront", this.id) : this.render();
			var $dragged$$ = $("body").dialogManager("getDragged", this.id);
			$("body").dialogManager("positionItem", this.id,
			!$dragged$$);
			return this
		},
		remove: function() {
			$("body").dialogManager("removeItem", this.id);
			this.dialog && this.dialog.remove();
			this.dialog = this.el = null
		},
		response: function($resp$$, $nodes$$) {
			var $response$$ = new EDGE.Models.Response($resp$$, $nodes$$);
			$response$$.notices.filterByError();
			var $notify$$ = this.notify;
			this.dialog && ($response$$.success ? this.dialog.addClass("saved success") : this.dialog.addClass("saved error"));
			$response$$.notices.each(function($notice$$, $key$$) {
				$(window).trigger("notify", [$notice$$,
				$notify$$ && $key$$ == $response$$.notices.length - 1])
			});
			return $response$$
		}
	});
	EDGE.Views.Global.Abstract.Row = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.Abstract.Row",
		tagName: "tr",
		initialize: function($args$$) {
			_.bindAll(this);
			this.dataTable = $args$$.dataTable;
			this.index = this.dataTable.fnAddData(this.data(), $args$$.draw)[0];
			this.setElement($(this.dataTable.fnGetNodes(this.index)));
			this.dialogs = {};
			this.specialColumns = [];
			this.model.bind("change", this.update, this);
			this.render()
		},
		data: function() {
			$(window).trigger("fatal", Msg.E_MissingDataMethod)
		},
		render: function() {
			return this
		},
		renderDisabled: function($disabled$$) {
			$disabled$$ ? this.$el.addClass("disabled") : this.$el.removeClass("disabled")
		},
		update: function($force$$) {
			var $specialColumns$$ = this.specialColumns;
			this.index = this.dataTable.fnGetPosition(this.el);
			if ($force$$ || this.$el.is(":visible")) _.each(this.data(),
			function($value$$, $key$$) {
				_.include($specialColumns$$, $key$$) || this.dataTable.fnGetData(this.index, $key$$) != $value$$ && this.dataTable.fnUpdate($value$$, this.index, $key$$, !1)
			},
			this),
			this.redrawOnUpdate && this.dataTable.fnDraw(!1),
			this.render()
		},
		reset: function() {
			this.model.unbind("change");
			this.$(".buttons").remove("button");
			_.each(this.dialogs,
			function($dialog$$) {
				$dialog$$.remove()
			},
			this)
		}
	});
	EDGE.Views.Global.Abstract.DropDownButton = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.Abstract.DropDownButton",
		className: "drop-down-button",
		initialize: function() {
			_.bindAll(this);
			this.render()
		},
		render: function() {
			var $$button$$ = this.$el.find("button");
			$$button$$.button({
				icons: {
					secondary: "ui-icon-triangle-1-s"
				}
			});
			var $$actionList$$ = this.$el.children(".action-list");
			$$button$$.click(function() {
				if ($$actionList$$.is(":visible")) $(".drop-down-button .action-list:visible").hide();
				else {
					$(".drop-down-button .action-list:visible").hide();
					var $buttonPosition$$ = $$button$$.offset();
					0 != $$button$$.closest("#SecurityNatSource").length ? $$button$$.closest("tr").is(":last-child") ? $$actionList$$.css("top", $buttonPosition$$.top - $$actionList$$.height()) : $$actionList$$.css("top", $buttonPosition$$.top + $$button$$.height()) : $buttonPosition$$.top + $$button$$.height() + $$actionList$$.height() + $("#FooterPanel").height() > $(window).height() ? $$actionList$$.css("top", $buttonPosition$$.top - $$actionList$$.height()) : $$actionList$$.css("top", $buttonPosition$$.top +
					$$button$$.height());
					$$actionList$$.show()
				}
			});
			this.$el.hover(function() {
				var $timeOut$$ = $$actionList$$.data("timeOut");
				window.clearTimeout($timeOut$$)
			},
			function() {
				timeOut = window.setTimeout(function() {
					$$actionList$$.is(":visible") && $$actionList$$.hide()
				},
				400);
				$$actionList$$.data("timeOut", timeOut)
			});
			$$actionList$$.find("a").click(function() {
				if ($(this).hasClass("disabled")) return ! 1;
				$$actionList$$.hide()
			});
			return this
		},
		disableAction: function($action$$) {
			this.$el.find("a.action-" + $action$$).addClass("disabled")
		},
		enableAction: function($action$$) {
			this.$el.find("a.action-" + $action$$).removeClass("disabled")
		},
		disableAllActions: function() {
			this.$el.find("a").each(function() {
				$(this).addClass("disabled")
			})
		},
		enableAllActions: function() {
			this.$el.find("a").each(function() {
				$(this).removeClass("disabled")
			})
		}
	});
	EDGE.Views.Global.Footer = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.setElement($("#FooterPanel"));
			this.panels = $("#FooterPanels");
			this.views = {};
			this.stats = $args$$.stats;
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.views.system.model = this.model.get("system"),
			this.views.system.serv_models = this.model.get("services"),
			this.views.system.render();
			else {
				var $self$$ = this;
				this.panelToggle =
				this.$(".panel-toggle").button({
					icons: {
						primary: "ui-icon-carat-1-n"
					}
				}).bind("click",
				function() {
					if ($self$$.$el.hasClass("closed")) {
						var $active$$ = $self$$.$el.tabslite("active");
						$active$$ ? $($active$$).trigger("show") : $($self$$.$el.tabslite("tabs")[0]).trigger("click");
						$self$$.show()
					} else $self$$.hide()
				});
				this.$el.tabslite({
					preventDefault: !0,
					toggleable: !0,
					init: function($anchors$$) {
						_.each($anchors$$,
						function($anchor$$) {
							$($anchor$$).bind("show",
							function() {
								$self$$.show()
							}).bind("hide",
							function($event$$, $toggled$$) {
								$toggled$$ &&
								$self$$.hide()
							})
						})
					},
					content: function($$anchor$$) {
						return $("#" + $$anchor$$.attr("href").substr(1) + "Panel")
					}
				});
				this.views.alerts = new EDGE.Views.Global.Footers.Alerts({
					footer: this,
					show: function() {
						$self$$.$el.find("#NavAlerts a").trigger("show")
					},
					hide: function() {
						$self$$.$el.find("#NavAlerts a").trigger("hide", !0)
					}
				});
				this.views.system = new EDGE.Views.Global.Footers.System({
					footer: this,
					model: this.model.get("system"),
					serv_models: this.model.get("services"),
					readonly: "admin" != EDGE.Config.User.level,
					stats: this.stats
				});
				this.$el.data("rendered", !0)
			}
		},
		show: function() {
			this.$el.hasClass("closed") && (this.panels.height(0), this.$el.removeClass("closed"), this.panelToggle.find("span.ui-icon").removeClass("ui-icon-carat-1-n"), this.panelToggle.find("span.ui-icon").addClass("ui-icon-carat-1-s"));
			this.resize()
		},
		hide: function() {
			if (!this.$el.hasClass("closed")) {
				var $self$$ = this;
				this.panels.animate({
					height: 0
				},
				function() {
					$self$$.$el.addClass("closed");
					$self$$.panels.find("div.panel:visible").hide()
				});
				this.panelToggle.find("span.ui-icon").removeClass("ui-icon-carat-1-s");
				this.panelToggle.find("span.ui-icon").addClass("ui-icon-carat-1-n")
			}
		},
		resize: function() {
			if (this.panels) {
				var $$panel$$ = this.panels.find("div.panel:visible");
				$$panel$$ && !this.$el.hasClass("closed") && (this.panels.find("div.panel").removeClass("active"), this.panels.animate({
					height: Math.min($$panel$$.height(), this.maxHeight())
				},
				{
					complete: function() {
						$$panel$$.trigger("resized")
					}
				}), $$panel$$.addClass("active"))
			}
		},
		reset: function() {
			UBNT.Logger.debug("resetting footer");
			this.views.system && this.views.system.reset();
			this.views.alerts && this.views.alerts.reset()
		},
		maxHeight: function() {
			return Math.round(0.7 * $(window).height())
		}
	});
	EDGE.Views.Global.Footers = {};
	EDGE.Views.Global.Footers.Alerts = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.setElement($("#AlertsPanel"));
			this.footer = $args$$.footer;
			this.show = $args$$.show;
			this.hide = $args$$.hide;
			var $self$$ = this;
			$(window).bind("notify",
			function($e$$, $notice$$, $show$$) {
				$self$$.notify($notice$$, $show$$)
			});
			this.render()
		},
		render: function() {
			this.$table = this.$("table");
			this.$tbody = this.$table.find("tbody");
			this.dataTable = this.$table.dataTable(_.extend({
				oLanguage: {
					sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
					sEmptyTable: "No alerts.",
					sInfoEmpty: ""
				},
				aoColumns: [{
					sClass: "time",
					bVisible: !1
				},
				{
					sClass: "status",
					bSortable: !1
				},
				{
					sClass: "notice",
					bSortable: !1
				},
				{
					sClass: "field",
					bSortable: !1
				},
				{
					sClass: "actions",
					bSortable: !1
				}],
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				bFilter: !1,
				bPaginate: !1,
				sDom: 't<"F"ip<"empty">>',
				fnDrawCallback: function() {
					var $$this$$ = $(this);
					$$this$$.find(".dataTables_empty").length ? ($$this$$.parents(".dataTables_wrapper").addClass("dataTables_wrapper_empty"), $("#NavAlerts .alert-box").html("0").hide()) :
					($$this$$.parents(".dataTables_wrapper").removeClass("dataTables_wrapper_empty"), $("#NavAlerts .alert-box").html($$this$$.find("tbody tr").length).show())
				}
			},
			this.options.options || {}));
			var $self$$ = this;
			this.$("div.empty").append($('<button type="button">Clear All</button>').button({
				icons: {
					primary: "ui-icon-close"
				}
			}).bind("click",
			function() {
				$self$$.empty()
			}));
			$("#NotificationsButton").bind("click",
			function() {
				$self$$.show()
			});
			return this
		},
		notify: function($notice$$, $show$$) {
			var $self$$ = this,
			$index$$ = $self$$.dataTable.fnAddData([$notice$$.get("datetime").getTime(),
			'<div class="icon"></div>', $.xss($notice$$.get("notice")), $notice$$.get("field") ? $.xss($notice$$.get("field").join(" ")) : "", ""])[0];
			$($self$$.dataTable.fnGetNodes($index$$)).addClass($notice$$.get("type")).find("td.actions").append($('<button type="button">Remove</button>').button({
				icons: {
					primary: "ui-icon-close"
				}
			}).bind("click",
			function() {
				$self$$.dataTable.fnDeleteRow($(this).parents("tr").get(0));
				0 == $self$$.dataTable.fnGetData().length ? $self$$.hide() : $self$$.show()
			}));
			$show$$ || this.flash($notice$$);
			 ($show$$ || this.$el.is(":visible")) && this.show()
		},
		flash: function($notice$$) {
			var $$flashbar$$ = $("#FlashBar");
			this.unflash || (this.unflash = _.debounce(function() {
				$$flashbar$$.fadeOut()
			},
			4E3));
			$$flashbar$$.removeClass("success error notice").addClass($notice$$.get("type")).html($.xss($notice$$.get("notice"))).show();
			$notice$$.get("permanent") || this.unflash()
		},
		empty: function() {
			this.reset();
			this.hide()
		},
		reset: function() {
			this.dataTable.fnClearTable();
			$("#FlashBar").hide()
		}
	});
	EDGE.Views.Global.Footers.System = EDGE.Views.Global.Abstract.Form.extend({
		events: {
			"submit form": "save",
			"click button.cancel": "cancel"
		},
		initialize: function($args$$) {
			this.setElement($("#SystemPanel"));
			this.footer = $args$$.footer;
			this.serv_models = $args$$.serv_models;
			this.ssh_mod = $args$$.serv_models.filterByType("ssh", !0);
			this.tel_mod = $args$$.serv_models.filterByType("telnet", !0);
			this.snmp_mod = $args$$.serv_models.filterByType("snmp", !0);
			this.discovery_mod = $args$$.serv_models.filterByType("ubnt-discover",
			!0);
			this.stats = $args$$.stats;
			this.$restartButton = $("#RestartButton");
			this.$resetButton = $("#ResetButton");
			this.$shutDownButton = $("#ShutDownButton");
			EDGE.Views.Global.Abstract.Form.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form_valid$$) {
					var $$form$$ = $($form_valid$$),
					$form_valid$$ = !0,
					$hd_host$$ = $$form$$.find("input[name=host-name]").val(),
					$domain$$ = $$form$$.find("input[name=domain]").val(),
					$hd_host$$ = $hd_host$$ + "." + $domain$$;
					if (253 <
					$hd_host$$.length) var $msg$$ = "host-name + domain must be less than 253 characters",
					$form_valid$$ = !1;
					127 < $hd_host$$.split(".").length && ($msg$$ = "host-name + domain must be less than 127 levels", $form_valid$$ = !1);
					$hd_host$$ = $$form$$.find("input[name=snmp-enabled]:checked").val();
					$$form$$ = $$form$$.find("input[name=snmp-comm]").val();
					$hd_host$$ && "" == $$form$$ && ($msg$$ = "Must define an SNMP community when SNMP is enabled", $form_valid$$ = !1);
					$form_valid$$ ? $self$$.save() : $(window).trigger("dialog", [$msg$$, "Validation error"])
				},
				rules: {
					gateway: {
						noWhiteSpace: !0,
						ipv4: !0
					},
					"ssh-port": {
						noWhiteSpace: !0,
						range: [1, 65535]
					},
					"tel-port": {
						noWhiteSpace: !0,
						range: [1, 65535]
					},
					"log-server": {
						noshellpunctuation: !0,
						noQuotes: !0,
						noWhiteSpace: !0
					},
					domain: {
						noWhiteSpace: !0,
						noQuotes: !0,
						domain: !0
					},
					"host-name": {
						noWhiteSpace: !0,
						noQuotes: !0,
						maxlength: 63,
						hostname: !0
					},
					"snmp-comm": {
						noWhiteSpace: !0,
						noQuotes: !0,
						snmpComm: !0
					},
					"snmp-cont": {
						noQuotes: !0
					},
					"snmp-loc": {
						noQuotes: !0
					}
				}
			}
		},
		render: function() {
			var $self$$ = this;
			if (!this.$el.data("rendered")) {
				this.$el.data("rendered",
				!0);
				this.renderTimezones();
				$("#tz_top").trigger("populate");
				var $$form$$ = this.$("form");
				this.readonly ? ($$form$$.form({
					render: function() {
						$self$$.show()
					}
				}), this.$restartButton.closest("fieldset").hide(), this.$shutDownButton.closest("fieldset").hide(), this.renderView()) : ($$form$$.find("button:not(.plaintext)").button(), this.$saveButton = $$form$$.find("button[type=submit]").button("option", "icons", {
					primary: "ui-icon-disk"
				}), this.$cancelButton = $$form$$.find("button.cancel").button("option", "icons", {
					primary: "ui-icon-cancel"
				}),
				$$form$$.form({
					validation: _.extend(this.validation() || {},
					{
						errorElement: "span"
					})
				}), $$form$$.find("input[name=log-server]").on("keyup",
				function() {
					var $$this$$ = $(this),
					$$level$$ = $$form$$.find("select[name=log-level]");
					"" == $$this$$.val() ? $$level$$.prop("disabled", !0) : $$level$$.prop("disabled", !1)
				}).trigger("keyup"), qq.UploadHandlerXhr.isSupported = function $qq$UploadHandlerXhr$isSupported$() {
					return ! 1
				},
				this.uploader = {
					upgrade: new qq.FileUploader({
						element: document.getElementById("system-upgrade"),
						action: "/api/edge/upgrade.json",
						params: {
							header: "text/html",
							noraw: 1
						},
						debug: !0,
						onSubmit: function() {
							window.app.heartbeat && window.app.heartbeat.interfere(1)
						},
						onCancel: function() {
							window.app.heartbeat && window.app.heartbeat.interfere( - 1)
						},
						onError: function($errors$$3_id$$, $fileName$$, $xhr$$) {
							$errors$$3_id$$ = JSON.parse($xhr$$.response);
							$errors$$3_id$$ = $errors$$3_id$$.errors ? "<br />" + $errors$$3_id$$.errors.join("<br />") : "";
							$(window).trigger("dialog", [Msg.N_SystemUpgradeFailed + $errors$$3_id$$, "System Upgrade Failed"])
						},
						onComplete: function($id$$,
						$fileName$$, $responseJSON$$) {
							window.app.heartbeat && window.app.heartbeat.interfere( - 1);
							1 == $responseJSON$$.success && new EDGE.Views.Global.Takeover({
								title: "Upgrade Complete",
								content: Msg.N_SystemUpgradeStarted,
								buttons: [{
									title: "Reboot",
									icons: {
										secondary: "ui-icon-refresh"
									},
									bindings: {
										click: {
											confirm: {
												title: "Are you sure?",
												body: "Your network will be temporarily unavailable while your router reboots.",
												accept: {
													title: "Yes, I'm sure",
													icons: {
														secondary: "ui-icon-check"
													},
													bindings: {
														click: {
															action: EDGE.Views.Global.Reboot,
															close: !0,
															disable: !0
														}
													}
												},
												reject: {
													title: "No, I'll reboot later",
													icons: {
														secondary: "ui-icon-close"
													},
													bindings: {
														click: {
															close: !0
														}
													}
												}
											}
										}
									}
								},
								{
									title: "Not Now",
									icons: {
										secondary: "ui-icon-close"
									},
									bindings: {
										click: {
											close: !0
										}
									}
								}]
							})
						}
					}),
					config: new qq.FileUploader({
						element: document.getElementById("system-config"),
						action: "/api/edge/config/restore.json",
						params: {
							header: "text/html",
							noraw: 1
						},
						debug: !0,
						onSubmit: function() {
							window.app.heartbeat && window.app.heartbeat.interfere(1)
						},
						onCancel: function() {
							window.app.heartbeat && window.app.heartbeat.interfere( - 1)
						},
						onComplete: function($errors$$4_id$$, $fileName$$, $responseJSON$$) {
							window.app.heartbeat && window.app.heartbeat.interfere( - 1);
							1 == $responseJSON$$.success ? new EDGE.Views.Global.Takeover({
								title: "Restoring Config",
								content: Msg.N_ConfigChangeReboot,
								buttons: [{
									title: "Reboot",
									icons: {
										secondary: "ui-icon-refresh"
									},
									bindings: {
										click: {
											confirm: {
												title: "Are you sure?",
												body: "Your network will be temporarily unavailable while your router reboots.",
												accept: {
													title: "Yes, I'm sure",
													icons: {
														secondary: "ui-icon-check"
													},
													bindings: {
														click: {
															action: EDGE.Views.Global.Reboot,
															close: !0,
															disable: !0
														}
													}
												},
												reject: {
													title: "No, I'll reboot later",
													icons: {
														secondary: "ui-icon-close"
													},
													bindings: {
														click: {
															close: !0
														}
													}
												}
											}
										}
									}
								},
								{
									title: "Not Now",
									icons: {
										secondary: "ui-icon-close"
									},
									bindings: {
										click: {
											close: !0
										}
									}
								}]
							}) : ($errors$$4_id$$ = $responseJSON$$.errors ? "<br />" + $responseJSON$$.errors.join("<br />") : "", $(window).trigger("dialog", [Msg.N_ConfigChangeFailed + $errors$$4_id$$, "Config Update Failed"]))
						}
					})
				},
				$("#save-config").find("button").bind("click",
				function() {
					var $$fieldset$$ = $(this).parents("fieldset");
					$$fieldset$$.addClass("saving");
					$.ajax({
						url: EDGE.Config.Api.base + "edge/config/save.json",
						success: function($data$$) {
							$data$$ = $data$$.CONFIG || {};
							$data$$.success && $data$$.path ? window.location.replace("/files/config/") : $(window).trigger("notify", new EDGE.Models.Notice({
								type: "error",
								notice: Msg.E_ConfigSaveFailed + " (" + ($data$$.errors ? $data$$.errors.join("\n") : "Unspecified error") + ")"
							}))
						},
						error: function() {
							$(window).trigger("notify", new EDGE.Models.Notice({
								type: "error",
								notice: Msg.E_ConfigSaveFailed
							}))
						},
						complete: function() {
							$$fieldset$$.removeClass("saving")
						}
					})
				}),
				this.$restartButton.click(function() {
					new EDGE.Views.Global.Takeover({
						title: "Restart Router",
						content: Msg.N_RebootRouter,
						buttons: [{
							title: "Restart",
							icons: {
								secondary: "ui-icon-refresh"
							},
							bindings: {
								click: {
									confirm: {
										title: "Are you sure?",
										accept: {
											title: "Yes, I'm sure",
											icons: {
												secondary: "ui-icon-check"
											},
											bindings: {
												click: {
													action: EDGE.Views.Global.Reboot,
													close: !0,
													disable: !0
												}
											}
										},
										reject: {
											title: "No, I'll restart later",
											icons: {
												secondary: "ui-icon-close"
											},
											bindings: {
												click: {
													close: !0
												}
											}
										}
									}
								}
							}
						},
						{
							title: "Not Now",
							icons: {
								secondary: "ui-icon-close"
							},
							bindings: {
								click: {
									close: !0
								}
							}
						}]
					});
					return ! 1
				}), this.$resetButton.click(function() {
					new EDGE.Views.Global.Takeover({
						title: "Reset Router",
						content: Msg.N_ResetRouter,
						buttons: [{
							title: "Reset to Default",
							icons: {
								secondary: "ui-icon-disk"
							},
							bindings: {
								click: {
									confirm: {
										title: "Are you sure?",
										accept: {
											title: "Yes, I'm sure",
											icons: {
												secondary: "ui-icon-check"
											},
											bindings: {
												click: {
													action: EDGE.Views.Global.Reset,
													close: !0,
													disable: !0
												}
											}
										},
										reject: {
											title: "No, keep the current configuration",
											icons: {
												secondary: "ui-icon-close"
											},
											bindings: {
												click: {
													close: !0
												}
											}
										}
									}
								}
							}
						},
						{
							title: "Not Now",
							icons: {
								secondary: "ui-icon-close"
							},
							bindings: {
								click: {
									close: !0
								}
							}
						}]
					});
					return ! 1
				}), this.$shutDownButton.click(function() {
					new EDGE.Views.Global.Takeover({
						title: "Shut Down Router",
						content: Msg.N_ShutdownRouter,
						buttons: [{
							title: "Shut Down",
							icons: {
								secondary: "ui-icon-power"
							},
							bindings: {
								click: {
									confirm: {
										title: "Are you sure?",
										accept: {
											title: "Yes, I'm sure",
											icons: {
												secondary: "ui-icon-check"
											},
											bindings: {
												click: {
													action: EDGE.Views.Global.Shutdown,
													close: !0,
													disable: !0
												}
											}
										},
										reject: {
											title: "No, I'll shut down later",
											icons: {
												secondary: "ui-icon-close"
											},
											bindings: {
												click: {
													close: !0
												}
											}
										}
									}
								}
							}
						},
						{
							title: "Not Now",
							icons: {
								secondary: "ui-icon-close"
							},
							bindings: {
								click: {
									close: !0
								}
							}
						}]
					});
					return ! 1
				}));
				this.renderAddables();
				this.delegateEvents()
			}
			this.flaggable = !1;
			this.update();
			this.flaggable = !0;
			return this
		},
		renderTimezones: function() {
			$("#tz_utc").bind("change",
			function() {
				$("#tz_top").attr("disabled", "disabled");
				$("#tz_co").attr("disabled", "disabled");
				$("#tz_tz").attr("disabled", "disabled")
			});
			$("#tz_set").bind("change",
			function() {
				$("#tz_top").removeAttr("disabled");
				$("#tz_co").removeAttr("disabled");
				$("#tz_tz").removeAttr("disabled")
			});
			$("#tz_top").bind("populate",
			function() {
				var $$this$$ = $(this);
				$$this$$.empty().append($('<option value="0">Select continent/ocean</option>'));
				_.each(sys_tz_toplevels,
				function($val$$) {
					$$this$$.append($('<option value="' + $val$$ + '">' + $val$$ + "</option>"))
				});
				$$this$$[1 < $$this$$.find("option").length ? "show": "hide"]();
				$$this$$.trigger("change")
			}).bind("change",
			function() {
				$("#tz_co").trigger("populate", $(this).find("option:selected").val())
			});
			$("#tz_co").bind("populate",
			function($e$$, $toplevel$$) {
				var $$this$$ = $(this);
				$$this$$.empty().append($('<option value="0">Select country/region</option>'));
				sys_tz_countries[$toplevel$$] && _.each(sys_tz_countries[$toplevel$$],
				function($val$$) {
					$$this$$.append($('<option value="' + $val$$ + '">' + $val$$ + "</option>"))
				});
				$$this$$[1 < $$this$$.find("option").length ? "show": "hide"]();
				$$this$$.trigger("change")
			}).bind("change",
			function() {
				$("#tz_tz").trigger("populate", $(this).find("option:selected").val())
			});
			$("#tz_tz").bind("populate",
			function($e$$, $toplevel$$) {
				var $$this$$ = $(this);
				$$this$$.empty().append($('<option value="0">Select timezone</option>'));
				sys_tz_timezones[$toplevel$$] && _.each(sys_tz_timezones[$toplevel$$],
				function($val$$) {
					$$this$$.append($('<option value="' + $val$$[1] + '">' + ($val$$[0] || "All") + "</option>"))
				});
				$$this$$[1 < $$this$$.find("option").length ? "show": "hide"]()
			})
		},
		renderAddables: function() {
			function $addUniqueIdAndName$$($$el$$) {
				var $suffix$$ = (new Date).getTime();
				$$el$$.attr("id", "Member" + $suffix$$).attr("name",
				"member" + $suffix$$)
			}
			var $$nameserver$$ = this.$("fieldset.nameserver ul");
			$$nameserver$$.find(".nameserver-member").each(function() {
				$addUniqueIdAndName$$($(this))
			});
			$$nameserver$$.addable({
				template: $$nameserver$$.find("li").clone(),
				add: this.readonly ? null: $('<li class="addable"><div>Add New</div></li>').find("div").button({
					icons: {
						primary: "ui-icon-plus"
					}
				}).end(),
				added: function() {
					"admin" == EDGE.Config.User.level && this.inserted.infotip();
					$addUniqueIdAndName$$(this.inserted.find("input"))
				}
			})
		},
		update: function() {
			var $$form$$ =
			this.$("form"),
			$tel_mod$$ = this.serv_models.filterByType("telnet", !0);
			this.updateTextbox($$form$$.find("#host-name"), this.model.get("host-name"), $$form$$.find("label[for=host-name]"));
			this.updateTextbox($$form$$.find("#gateway"), this.model.get("gateway-address"), $$form$$.find("label[for=gateway]"));
			this.updateTextbox($$form$$.find("#domain"), this.model.get("domain-name"), $$form$$.find("label[for=domain]"));
			var $discovery_mod_ls_ns_snmp_mod_tz$$ = this.model.get("time-zone");
			if ("UTC" === $discovery_mod_ls_ns_snmp_mod_tz$$) this.updateRadio($$form$$.find("input[type=radio][name=tz_radio]"),
			$$form$$.find("input[name=tz_radio][value=utc]"), $$form$$.find("label[for=tz_utc]")),
			$("#tz_top").attr("disabled", "disabled"),
			$("#tz_co").attr("disabled", "disabled"),
			$("#tz_tz").attr("disabled", "disabled");
			else if (!$discovery_mod_ls_ns_snmp_mod_tz$$ || !sys_tz_tzmap[$discovery_mod_ls_ns_snmp_mod_tz$$]) $("#tz_top").removeAttr("disabled"),
			$("#tz_co").removeAttr("disabled"),
			$("#tz_tz").removeAttr("disabled"),
			this.updateSelect($$form$$.find("select[name=tz_top]"), "0", $$form$$.find("label[for=timezone]"));
			else {
				$("#tz_top").removeAttr("disabled");
				$("#tz_co").removeAttr("disabled");
				$("#tz_tz").removeAttr("disabled");
				this.updateRadio($$form$$.find("input[type=radio][name=tz_radio]"), $$form$$.find("input[name=tz_radio][value=set]"), $$form$$.find("label[for=tz_set]"));
				var $$select$$1_co$$ = $("#tz_top");
				this.updateSelect($$select$$1_co$$, sys_tz_tzmap[$discovery_mod_ls_ns_snmp_mod_tz$$][0], $$form$$.find("label[for=timezone]"));
				this.updatable && $$select$$1_co$$.trigger("change");
				$$select$$1_co$$ = $("#tz_co");
				this.updateSelect($$select$$1_co$$, sys_tz_tzmap[$discovery_mod_ls_ns_snmp_mod_tz$$][1], $$form$$.find("label[for=timezone]"));
				this.updatable && $$select$$1_co$$.trigger("change");
				$$select$$1_co$$ = $("#tz_tz");
				this.updateSelect($$select$$1_co$$, $discovery_mod_ls_ns_snmp_mod_tz$$, $$form$$.find("label[for=timezone]"));
				this.updatable && $$select$$1_co$$.trigger("change")
			}
			var $discovery_mod_ls_ns_snmp_mod_tz$$ = this.model.get("name-server"),
			$$nse$$ = $$form$$.find("fieldset.nameserver ul");
			$$nse$$.find("li:not(.addable)").remove();
			$discovery_mod_ls_ns_snmp_mod_tz$$ && $discovery_mod_ls_ns_snmp_mod_tz$$.length ? ($$nse$$ = $$form$$.find("fieldset.nameserver ul"), $$nse$$.find("li:not(.addable)").remove(), _.each($discovery_mod_ls_ns_snmp_mod_tz$$,
			function($value$$) {
				this.readonly ? $$nse$$.addable("add").addable("last").find("input").next("span.readonly").html($value$$) : $$nse$$.addable("add").addable("last").find("input").val($value$$)
			},
			this)) : $$nse$$.prepend($$nse$$.addable("template").clone());
			$discovery_mod_ls_ns_snmp_mod_tz$$ = ($discovery_mod_ls_ns_snmp_mod_tz$$ =
			this.model.get("syslog")) ? $discovery_mod_ls_ns_snmp_mod_tz$$.host: null;
			this.log_server = {};
			if ($discovery_mod_ls_ns_snmp_mod_tz$$) {
				var $$select$$1_co$$ = [],
				$k$$;
				for ($k$$ in $discovery_mod_ls_ns_snmp_mod_tz$$) $$select$$1_co$$.push($k$$);
				$$select$$1_co$$.sort();
				this.log_server.host = $$select$$1_co$$[0];
				_.has($discovery_mod_ls_ns_snmp_mod_tz$$[$$select$$1_co$$[0]].facility, "all") ? (this.log_server.level = $discovery_mod_ls_ns_snmp_mod_tz$$[$$select$$1_co$$[0]].facility.all.level, $$form$$.find("#log-level").attr("disabled",
				!1), $$form$$.find("#log-server").attr("disabled", !1), $$form$$.find("#log-notice").remove()) : ($$form$$.find("#log-level").attr("disabled", !0), $$form$$.find("#log-server").attr("disabled", !0), $$form$$.find("#log-notice").remove(), $$form$$.find("#log-server").parent().after($('<div id="log-notice" class="notice">' + Msg.N_SystemLog + "</div>")))
			} else this.log_server.host = "",
			this.log_server.level = "err";
			this.updateTextbox($$form$$.find("#log-server"), this.log_server.host, $$form$$.find("label[for=log-server]"));
			this.updateSelect($$form$$.find("#log-level"), this.log_server.level, $$form$$.find("label[for=log-level]"));
			$discovery_mod_ls_ns_snmp_mod_tz$$ = this.serv_models.filterByType("ubnt-discover", !0);
			$$select$$1_co$$ = !0;
			$discovery_mod_ls_ns_snmp_mod_tz$$ && null === $discovery_mod_ls_ns_snmp_mod_tz$$.get("disable") && ($$select$$1_co$$ = !1);
			this.updateCheckbox($$form$$.find("input[name=discovery-enabled]"), $$select$$1_co$$, $$form$$.find("label[for=discovery-enabled]"));
			$discovery_mod_ls_ns_snmp_mod_tz$$ = this.serv_models.filterByType("snmp",
			!0);
			this.updateCheckbox($$form$$.find("input[name=snmp-enabled]"), $discovery_mod_ls_ns_snmp_mod_tz$$, $$form$$.find("label[for=snmp-enabled]"));
			if ($discovery_mod_ls_ns_snmp_mod_tz$$) {
				if ($$select$$1_co$$ = $discovery_mod_ls_ns_snmp_mod_tz$$.get("community")) {
					var $cos$$ = [];
					for ($k$$ in $$select$$1_co$$) $cos$$.push($k$$);
					$cos$$.sort();
					this.snmp_comm = $cos$$[0]
				} else this.snmp_comm = "";
				this.updateTextbox($$form$$.find("#snmp-comm"), this.snmp_comm, $$form$$.find("label[for=snmp-comm]"));
				this.updateTextbox($$form$$.find("#snmp-cont"),
				$discovery_mod_ls_ns_snmp_mod_tz$$.get("contact"), $$form$$.find("label[for=snmp-cont]"));
				this.updateTextbox($$form$$.find("#snmp-loc"), $discovery_mod_ls_ns_snmp_mod_tz$$.get("location"), $$form$$.find("label[for=snmp-loc]"))
			} else this.snmp_comm = "",
			this.updateTextbox($$form$$.find("#snmp-comm"), "", $$form$$.find("label[for=snmp-comm]")),
			this.updateTextbox($$form$$.find("#snmp-cont"), "", $$form$$.find("label[for=snmp-cont]")),
			this.updateTextbox($$form$$.find("#snmp-loc"), "", $$form$$.find("label[for=snmp-loc]"));
			$k$$ = ($k$$ = this.model.get("ntp")) ? $k$$.server: null;
			this.updateCheckbox($$form$$.find("input[name=ntp-enabled]"), $k$$, $$form$$.find("label[for=ntp-enabled]"));
			$k$$ = this.serv_models.filterByType("ssh", !0);
			this.updateCheckbox($$form$$.find("input[name=ssh-enabled]"), $k$$, $$form$$.find("label[for=ssh-enabled]"));
			$k$$ ? this.updateTextbox($$form$$.find("#ssh-port"), $k$$.get("port"), $$form$$.find("label[for=ssh-port]")) : this.updateTextbox($$form$$.find("#ssh-port"), "", $$form$$.find("label[for=ssh-port]"));
			this.updateCheckbox($$form$$.find("input[name=tel-enabled]"), $tel_mod$$, $$form$$.find("label[for=tel-enabled]"));
			$tel_mod$$ ? this.updateTextbox($$form$$.find("#tel-port"), $tel_mod$$.get("port"), $$form$$.find("label[for=tel-port]")) : this.updateTextbox($$form$$.find("#tel-port"), "", $$form$$.find("label[for=tel-port]"));
			app.defer.sysinfo.done(_.bind(function($sysinfo$$) {
				this.$("#SystemVersion span").html($sysinfo$$.version).parent().removeClass("hidden")
			},
			this))
		},
		prepareSave: function($batch$$) {
			var $system$$ =
			{},
			$ssh$$ = {},
			$tel$$ = {},
			$snmp$$ = {},
			$discv$$ = {};
			_.each(["set", "delete"],
			function($type$$) {
				$system$$[$type$$] = $batch$$.get($type$$).get("system");
				$ssh$$[$type$$] = $batch$$.get($type$$).get("services").filterByType("ssh");
				$tel$$[$type$$] = $batch$$.get($type$$).get("services").filterByType("telnet");
				$snmp$$[$type$$] = $batch$$.get($type$$).get("services").filterByType("snmp");
				$discv$$[$type$$] = $batch$$.get($type$$).get("services").filterByType("ubnt-discover")
			},
			this);
			this.setProperty("host-name", this.$("input[name=host-name]").val(),
			$system$$);
			this.setProperty("gateway-address", this.$("input[name=gateway]").val(), $system$$);
			this.setProperty("domain-name", this.$("input[name=domain]").val(), $system$$);
			var $changed$$5_discv_dis_ls$$ = this.$("input[name=tz_radio]:checked").val(),
			$co$$2_lss$$ = this.$("select[name=tz_tz] option:selected");
			"utc" === $changed$$5_discv_dis_ls$$ ? this.setProperty("time-zone", "UTC", $system$$) : "set" === $changed$$5_discv_dis_ls$$ && 0 < $co$$2_lss$$.index() && this.setProperty("time-zone", $co$$2_lss$$.val(), $system$$);
			var $nameserver$$ = [];
			this.$("input.nameserver-member").each(function() {
				var $n$$ = $(this).val();
				$n$$ && $nameserver$$.push($n$$)
			});
			if (_.difference($nameserver$$, this.model.get("name-server")).length || _.difference(this.model.get("name-server"), $nameserver$$).length) $system$$["delete"].set({
				"name-server": null
			},
			{
				silent: !0
			}),
			$nameserver$$.length && $system$$.set.set({
				"name-server": $nameserver$$
			},
			{
				silent: !0
			});
			$changed$$5_discv_dis_ls$$ = this.$("input[name=log-server]").val();
			lsl = this.$("select[name=log-level]").val();
			if ((this.log_server.host != $changed$$5_discv_dis_ls$$ || this.log_server.level != lsl) && !this.$("input[name=log-server]").attr("disabled")) if (this.log_server && $system$$["delete"].set({
				syslog: {
					host: null
				}
			},
			{
				silent: !0
			}), $changed$$5_discv_dis_ls$$) {
				var $co$$2_lss$$ = {},
				$al$$ = this.$("select[name=log-level]").val();
				$co$$2_lss$$[$changed$$5_discv_dis_ls$$] = {
					facility: {
						all: {
							level: $al$$
						}
					}
				};
				$system$$.set.set({
					syslog: {
						host: $co$$2_lss$$
					}
				},
				{
					silent: !0
				})
			}
			$co$$2_lss$$ = this.$("input[name=snmp-enabled]").is(":checked");
			$changed$$5_discv_dis_ls$$ =
			this.$("input[name=snmp-comm]").val();
			if (this.snmp_mod && !$co$$2_lss$$) this.setEnable(!1, $snmp$$, !0, this.snmp_mod);
			else if (this.snmp_mod || $co$$2_lss$$) this.snmp_comm != $changed$$5_discv_dis_ls$$ && (this.snmp_comm && $snmp$$["delete"].set({
				community: null
			},
			{
				silent: !0
			}), $changed$$5_discv_dis_ls$$ && ($co$$2_lss$$ = {},
			$co$$2_lss$$[$changed$$5_discv_dis_ls$$] = null, $snmp$$.set.set({
				community: $co$$2_lss$$
			},
			{
				silent: !0
			}))),
			this.setProperty_m("contact", this.$("input[name=snmp-cont]").val(), $snmp$$, !0, this.snmp_mod),
			this.setProperty_m("location", this.$("input[name=snmp-loc]").val(), $snmp$$, !0, this.snmp_mod);
			$changed$$5_discv_dis_ls$$ = this.$("input[name=ntp-enabled]").is(":checked"); ($co$$2_lss$$ = ($co$$2_lss$$ = this.model.get("ntp")) ? $co$$2_lss$$.server: null) && !$changed$$5_discv_dis_ls$$ ? $system$$["delete"].set({
				ntp: null
			},
			{
				silent: !0
			}) : !$co$$2_lss$$ && $changed$$5_discv_dis_ls$$ && $system$$.set.set({
				ntp: {
					server: {
						"0.ubnt.pool.ntp.org": null,
						"1.ubnt.pool.ntp.org": null,
						"2.ubnt.pool.ntp.org": null,
						"3.ubnt.pool.ntp.org": null
					}
				}
			},
			{
				silent: !0
			});
			$changed$$5_discv_dis_ls$$ = this.$("input[name=ssh-enabled]").is(":checked");
			this.setEnable($changed$$5_discv_dis_ls$$, $ssh$$, !0, this.ssh_mod);
			$changed$$5_discv_dis_ls$$ && this.setProperty_m("port", this.$("input[name=ssh-port]").val(), $ssh$$, !0, this.ssh_mod);
			$changed$$5_discv_dis_ls$$ = !this.$("input[name=discovery-enabled]").is(":checked");
			this.setDisable($changed$$5_discv_dis_ls$$, $discv$$, !0, this.discovery_mod);
			$changed$$5_discv_dis_ls$$ = this.$("input[name=tel-enabled]").is(":checked");
			this.setEnable($changed$$5_discv_dis_ls$$, $tel$$, !0, this.tel_mod);
			$changed$$5_discv_dis_ls$$ && this.setProperty_m("port", this.$("input[name=tel-port]").val(), $tel$$, !0, this.tel_mod);
			$changed$$5_discv_dis_ls$$ = !1;
			$system$$.set.hasChanged() || $ssh$$.set && $ssh$$.set.hasChanged() || $discv$$.set && $discv$$.set.hasChanged() || $tel$$.set && $tel$$.set.hasChanged() || $snmp$$.set && $snmp$$.set.hasChanged() ? $changed$$5_discv_dis_ls$$ = !0: $batch$$.unset("set");
			$system$$["delete"].hasChanged() || $ssh$$["delete"] && $ssh$$["delete"].hasChanged() ||
			$discv$$["delete"] && $discv$$["delete"].hasChanged() || $tel$$["delete"] && $tel$$["delete"].hasChanged() || $snmp$$["delete"] && $snmp$$["delete"].hasChanged() ? $changed$$5_discv_dis_ls$$ = !0: $batch$$.unset("delete");
			$changed$$5_discv_dis_ls$$ ? ($batch$$.get("get").clear(), $batch$$.get("get").set({
				system: null,
				services: null
			})) : $batch$$.unset("get")
		},
		save: function($batch$$1_e$$) {
			$batch$$1_e$$ && $batch$$1_e$$.preventDefault();
			this.$el.removeClass("saved success error");
			this.$saveButton.button("showWorkingIndicator");
			$batch$$1_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$1_e$$);
			var $self$$ = this;
			$batch$$1_e$$.has("set") || $batch$$1_e$$.has("delete") ? ($self$$.$el.addClass("saving"), $self$$.$el.find("button").prop("disabled", !0).addClass("ui-state-disabled"), $self$$.$el.find("input[type=file]").prop("disabled", !0), $batch$$1_e$$.save(["system", "services"], {
				success: function($model$$, $resp$$) {
					$self$$.$saveButton.button("hideWorkingIndicator", {
						primary: "ui-icon-check"
					});
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$self$$.$saveButton.button("hideWorkingIndicator", {
						primary: "ui-icon-notice"
					});
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.$el.removeClass("saving");
					$self$$.$el.find("button").prop("disabled", !1).removeClass("ui-state-disabled");
					$self$$.$el.find("input[type=file]").prop("disabled", !1)
				}
			})) : this.$saveButton.button("hideWorkingIndicator")
		},
		cancel: function() {
			this.update()
		},
		response: function($resp$$) {
			var $response$$ =
			EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$response$$.success ? this.$el.addClass("saved success") : this.$el.addClass("saved error");
			$resp$$ && $resp$$.GET && ($resp$$.GET.system || $resp$$.GET.service) ? ($resp$$.GET.system && (this.model.clear(), this.model.set(this.model.parse($resp$$.GET.system))), $resp$$.GET.service && (this.serv_models["import"]($resp$$.GET.service), $resp$$.GET.service.ssh || (this.ssh_mod || (this.ssh_mod = this.serv_models.filterByType("ssh")), this.ssh_mod.set({
				disabled: !0
			})),
			this.ssh_mod = this.serv_models.filterByType("ssh", !0), $resp$$.GET.service.telnet || (this.tel_mod || (this.tel_mod = this.serv_models.filterByType("telnet")), this.tel_mod.set({
				disabled: !0
			})), this.tel_mod = this.serv_models.filterByType("telnet", !0), $resp$$.GET.service.snmp || (this.snmp_mod || (this.snmp_mod = this.serv_models.filterByType("snmp")), this.snmp_mod.set({
				disabled: !0
			})), this.snmp_mod = this.serv_models.filterByType("snmp", !0), $resp$$.GET.service["ubnt-discover"] || (this.discovery_mod || (this.discovery_mod =
			this.serv_models.filterByType("ubnt-discover")), this.discovery_mod.set({
				disabled: !0
			})), this.discovery_mod = this.serv_models.filterByType("ubnt-discover", !0)), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		reset: function() {
			this.$("form").form("validator").resetForm();
			this.update()
		}
	});
	EDGE.Routers.Dashboard = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Dashboard",
		routes: {
			Dashboard: "index",
			"Dashboard/filter/:filter": "index",
			"Dashboard*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize dashboard router");
			if ("object" != typeof EDGE.Views.Dashboard) throw "Missing dashboard views";
			this.app = $data$$.app;
			this.views = {}
		},
		index: function($filter$$) {
			this.views.index ? this.views.index.render() : this.views.index = new EDGE.Views.Dashboard.Default ({
				model: this.app.data.view
			});
			this.views.index.views.interfaces && this.views.index.views.interfaces.filter($filter$$ ? $filter$$: "all")
		}
	});
	EDGE.Views.Dashboard = EDGE.Views.Dashboard || {};
	EDGE.Views.Dashboard.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Dashboard.Default",
		initialize: function() {
			this.debug("initialize()");
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.setElement($("#Dashboard .section-container"));
			this.template = _.template($("#DashboardDefaultTemplate").html());
			$("#Dashboard").show();
			this.layouts = {};
			this.views = {};
			this.render()
		},
		render: function() {
			this.debug("render()");
			this.$el.data("rendered") ?
			(_.each(this.views,
			function($view$$) {
				$view$$.update()
			}), this.lazyResize()) : (this.$el.html(this.template).data("rendered", !0), $(window).trigger("resize"), this.layouts.outer = this.$el.layout({
				scrollToBookmarkOnLoad: !1,
				west: {
					size: 270,
					maxSize: 270,
					spacing_open: 5,
					spacing_closed: 5,
					resizeWithWindow: !1,
					onresize: this.resizeOuter,
					onopen: this.resizeOuter,
					onclose: this.resizeOuter
				}
			}), this.layouts.inner = this.$("#DashboardInner").layout({
				scrollToBookmarkOnLoad: !1,
				north: {
					size: 250,
					maxSize: 500,
					minSize: 200,
					spacing_open: 5,
					spacing_closed: 5,
					onresize: this.resizeInner,
					onclose: this.resizeInner,
					onopen: this.resizeInner
				}
			}), this.views.graphs = new EDGE.Views.Dashboard.GraphsD3({
				el: this.$("#DashboardGraphs"),
				collection: this.model.get("interfaces"),
				layout: this.layouts.inner
			}), this.views.stats = new EDGE.Views.Dashboard.Stats({
				el: this.$("#DashboardStats"),
				model: this.model
			}), this.views.interfaces = new EDGE.Views.Interfaces.Default ({
				el: this.$("#DashboardInterfaces"),
				collection: this.model.get("interfaces"),
				section: "Dashboard",
				graph: this.views.graphs
			}),
			this.resizeInterfaces());
			return this
		},
		resize: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && _.each(this.layouts,
			function($layout$$) {
				$layout$$.resizeAll()
			},
			this)
		},
		resizeOuter: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && (_.defer(this.layouts.inner.resizeAll), this.views.graphs.lazyResize())
		},
		resizeInner: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && (this.views.interfaces.lazyResize(), this.views.graphs.lazyResize())
		},
		resizeInterfaces: function() {
			this.$el.data("rendered") &&
			this.$el.is(":visible") && this.views.interfaces.lazyResize()
		},
		reset: function() {
			this.debug("reset()");
			this.$el.data("rendered", !1);
			_.each(this.views,
			function($view$$) {
				$view$$.reset()
			});
			this.layouts.inner.removePane("north", !0, !0, !0);
			this.layouts.outer.removePane("west", !0, !0, !0);
			this.layouts.outer.destroy();
			delete this.layouts.outer;
			delete this.layouts.inner;
			this.$el.empty()
		}
	});
	EDGE.Views.Dashboard.Stats = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Dashboard.Stats",
		initialize: function() {
			this.debug("initialize()");
			_.bindAll(this);
			this.views = {};
			this.template = _.template($("#DashboardStatsTemplate").html());
			this.render()
		},
		render: function() {
			this.$el.data("rendered") || (this.$el.html(this.template).data("rendered", !0), this.views.services = new EDGE.Views.Dashboard.Services({
				el: this.$("#DashboardServices"),
				model: this.model
			}), $("body").hasClass("port8A") && (this.views.harware =
			new EDGE.Views.Dashboard.Hardware({
				el: this.$("#DashboardHardware"),
				model: this.model
			})));
			return this
		},
		update: function() {},
		reset: function() {}
	});
	EDGE.Views.Dashboard.Hardware = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Dashboard.Hardware",
		initialize: function() {
			this.debug("initialize()");
			_.bindAll(this);
			this.system = this.model.get("system");
			this.template = _.template($("#DashboardHardwareTemplate").html());
			this.render();
			setInterval(this.render, 3E3)
		},
		render: function() {
			if (this.$el.is(":visible")) {
				var $temperature$$ = this.system.get("stats").get("temps");
				if ($temperature$$) {
					var $indicator$$ = "normal";
					65 < $temperature$$["Board (CPU)"] && ($indicator$$ =
					"overheat")
				}
				var $power$$ = this.system.get("stats").get("power"),
				$power_v$$ = {};
				_.each($power$$,
				function($v$$, $k$$) {
					var $key$$ = EDGE.PowerMapping[$k$$.trim()],
					$value$$ = $v$$.trim();
					$power_v$$[$key$$] = $power_v$$[$key$$] ? "POE-IN ETH8 current" == $k$$.trim() ? $power_v$$[$key$$] + ("/" + $value$$) : $value$$ + "/" + $power_v$$[$key$$] : $value$$
				});
				this.$el.html(this.template({
					temperature: $temperature$$ ? $indicator$$: "n/a",
					power: $power_v$$
				}))
			}
			return this
		}
	});
	EDGE.Views.Dashboard.Services = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Dashboard.Services",
		initialize: function() {
			this.debug("initialize()");
			_.bindAll(this);
			this.interfaces = this.model.get("interfaces");
			this.system = this.model.get("system");
			this.firewall = this.model.get("firewall");
			this.template = _.template($("#DashboardServicesTemplate").html());
			this.render();
			setInterval(this.render, 3E3)
		},
		render: function() {
			if (this.$el.is(":visible")) {
				var $ospfCfg_rsets$$ = this.firewall.get("rulesets"),
				$num_rsets$$ =
				$ospfCfg_rsets$$.length,
				$firewallRules$$ = 0;
				_.each($ospfCfg_rsets$$.models,
				function($ruleset$$) {
					$firewallRules$$ += $ruleset$$.get("rules").length
				},
				this);
				var $ospfCfg_rsets$$ = this.model.get("routes").filterByRouteType("ospf-cfg").first(),
				$ospfEnabled$$ = !$ospfCfg_rsets$$.get("disabled"),
				$dhcpActiveServers$$ = 0,
				$dhcpInactiveServers$$ = 0;
				this.model.get("services").filterByType("dhcp-server").get("networks").each(function($network$$) {
					void 0 === $network$$.get("disable") ? $dhcpActiveServers$$++:$dhcpInactiveServers$$++
				});
				var $nat_natDis$$ = this.model.get("services").filterByType("nat"),
				$natCfg_natRules_nr$$ = $nat_natDis$$.get("rules"),
				$natCfg_natRules_nr$$ = $natCfg_natRules_nr$$ && 0 < $natCfg_natRules_nr$$.length,
				$nat_natDis$$ = $nat_natDis$$.get("disabled") || !$natCfg_natRules_nr$$,
				$natCfg_natRules_nr$$ = this.system.get("stats").get("num_routes"),
				$r_conn$$,
				$r_stat$$,
				$r_rip$$,
				$r_ospf$$,
				$r_ebgp$$,
				$r_ibgp$$,
				$r_tot$$;
				$natCfg_natRules_nr$$ && ($r_conn$$ = $natCfg_natRules_nr$$.connected, $r_stat$$ = $natCfg_natRules_nr$$["static"], $r_rip$$ =
				$natCfg_natRules_nr$$.rip, $r_ospf$$ = $natCfg_natRules_nr$$.ospf, $r_ebgp$$ = $natCfg_natRules_nr$$.ebgp, $r_ibgp$$ = $natCfg_natRules_nr$$.ibgp, $r_tot$$ = $natCfg_natRules_nr$$.total);
				this.$el.html(this.template({
					ospfStatus: $ospfEnabled$$ ? "enabled": "disabled",
					ospfRouterId: $ospfEnabled$$ && $ospfCfg_rsets$$.get("parameters") && $ospfCfg_rsets$$.get("parameters")["router-id"] ? $ospfCfg_rsets$$.get("parameters")["router-id"] : "",
					ospfAreas: $ospfEnabled$$ ? $ospfCfg_rsets$$.get("areas").size() : "n/a",
					natStatus: $nat_natDis$$ ?
					"disabled": "enabled",
					firewallStatus: 0 < $num_rsets$$ ? "enabled": "disabled",
					firewallRulesets: $num_rsets$$,
					firewallRules: $firewallRules$$,
					routesConnected: $r_conn$$ ? $r_conn$$: 0,
					routesStatic: $r_stat$$ ? $r_stat$$: 0,
					routesRip: $r_rip$$ ? $r_rip$$: 0,
					routesOspf: $r_ospf$$ ? $r_ospf$$: 0,
					routesEBGP: $r_ebgp$$ ? $r_ebgp$$: 0,
					routesIBGP: $r_ibgp$$ ? $r_ibgp$$: 0,
					routesTotal: $r_tot$$ ? $r_tot$$: 0,
					natRules: this.model.get("services").filterByType("nat").get("rules").length || 0,
					dhcpStatus: 0 < $dhcpActiveServers$$ ? "enabled": "disabled",
					dhcpActiveServers: $dhcpActiveServers$$,
					dhcpInactiveServers: $dhcpInactiveServers$$
				}))
			}
			return this
		},
		update: function() {},
		reset: function() {}
	});
	EDGE.Views.Dashboard.RateGraph = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Dashboard.RateGraph",
		initialize: function($args$$) {
			this.config = $args$$.config;
			this.components = {};
			this.collection.on("change", this.update, this);
			this.template = _.template($("#DashboardGraphsD3OverlayTemplate").html());
			this.generateDimensions();
			this.render()
		},
		render: function() {
			var $config$$ = this.config;
			this.rendered || (this.renderGraph(), $config$$.overlays.databox && (this.renderOverlay(), this.hideOverlay(!0)), this.rendered =
			!0);
			this.update(!0)
		},
		renderGraph: function() {
			var $config$$ = this.config,
			$components$$ = this.components;
			$components$$.xScale = d3.scale.ordinal().rangeRoundBands([0, $config$$.graph.width]);
			$components$$.yScale = d3.scale.linear().range([0, $config$$.graph.height]);
			$components$$.yScaleInverse = d3.scale.linear().range([$config$$.graph.height, 0]);
			$components$$.yAxis = d3.svg.axis().scale($components$$.yScaleInverse).orient("left").ticks(6).tickSubdivide(!0).tickSize(4, 4, 0).tickPadding(3);
			$components$$.container =
			d3.select(this.$el[0]).append("svg").attr("width", $config$$.width).attr("height", $config$$.height);
			$components$$.graph = $components$$.container.append("g").attr("class", "graph").attr("transform", "translate(" + $config$$.margin.left + "," + $config$$.margin.top + ")");
			$components$$.graph.append("g").attr("class", "y axis").attr("transform", "translate(0,0)");
			$components$$.datasets = $components$$.graph.append("g").attr("class", "datasets").attr("transform", "translate(0," + $config$$.graph.height + ")");
			$components$$.title =
			$components$$.container.append("g").attr("class", "title").attr("transform", "translate(" + ($config$$.margin.left + 20) + "," + ($config$$.margin.top + 5) + ")");
			$components$$.title.append("rect").attr("width", 85).attr("height", 25);
			$components$$.title.append("text").attr("transform", "translate(8, 15)");
			this.renderTitle()
		},
		renderTitle: function($units$$) {
			this.components.title.select("text").text(this.config.title + ($units$$ ? " (" + $units$$ + ")": ""))
		},
		renderOverlay: function() {
			var $$datasets$$ = $(this.components.datasets.node());
			this.$overlay = $('<div class="dashboard-overlay"></div>');
			this.$overlayBackground = $('<div class="overlay-background"></div>');
			this.$overlayMarker = $('<div class="overlay-marker top"></div>');
			this.$overlayContent = $('<div class="overlay-content"></div>');
			this.$overlay.append(this.$overlayBackground);
			this.$overlay.append(this.$overlayMarker);
			this.$overlay.append(this.$overlayContent);
			$("body").append(this.$overlay);
			this.resizeOverlay();
			this.$el.on("mousemove", $.proxy(function($e$$) {
				var $xoffset$$ = $$datasets$$.offset().left,
				$yoffset$$ = $$datasets$$.offset().top,
				$xpos$$ = $e$$.pageX - $xoffset$$,
				$ypos$$ = $e$$.pageY - $yoffset$$;
				try {
					var $$yaxis$$ = $(this.components.graph.select(".y.axis").node());
					$$yaxis$$[0].getBBox && ($xoffset$$ = $$yaxis$$[0].getBBox().width + $$yaxis$$.offset().left, $xpos$$ = $e$$.pageX - $xoffset$$)
				} catch($e$$0$$) {}
				this.coords = {
					xoffset: $xoffset$$,
					yoffset: $yoffset$$,
					xpos: $xpos$$,
					ypos: $ypos$$
				};
				this.showOverlay();
				this.updateOverlay()
			},
			this));
			this.$el.add(this.$overlay).mouseleave($.proxy(function() {
				this.hideTimeout = setTimeout($.proxy(this.hideOverlay,
				this), 10)
			},
			this)).mouseenter($.proxy(function() {
				clearTimeout(this.hideTimeout)
			},
			this))
		},
		update: function() {
			var $components$$ = this.components;
			this.rendered && this.collection.length && (this.generateData(), $components$$.xScale.domain(this.data[0].map(function($d$$) {
				return $d$$.x
			})), $components$$.yScale.domain([0, d3.max(this.data[this.data.length - 1],
			function($d$$) {
				return $d$$.y0 + $d$$.y
			})]), $components$$.yScaleInverse.domain([0, d3.max(this.data[this.data.length - 1],
			function($d$$) {
				return $d$$.y0 + $d$$.y
			})]),
			$components$$.datasets.selectAll("g.column").remove(), this.updateGraph(), this.$overlay && this.updateOverlay())
		},
		updateGraph: function() {
			var $config$$ = this.config,
			$data$$ = this.data,
			$components$$ = this.components;
			$components$$.graph.select(".y.axis").call($components$$.yAxis).selectAll("g").filter(function($value$$) {
				return ! $value$$
			}).classed("zero", !0);
			$components$$.datasets.selectAll("g.column").data($data$$).enter().append("g").attr("class", "column").style("fill",
			function($d$$, $i$$) {
				return $config$$.colors($i$$)
			}).style("stroke",
			"#fff").selectAll("rect").data(Object).enter().append("rect").attr("x",
			function($d$$) {
				return $components$$.xScale($d$$.x)
			}).attr("y",
			function($d$$) {
				return - $components$$.yScale($d$$.y0) - $components$$.yScale($d$$.y)
			}).attr("height",
			function($d$$) {
				return $components$$.yScale($d$$.y)
			}).attr("width", $components$$.xScale.rangeBand())
		},
		updateOverlay: function() {
			if (this.$overlay.is(":visible") && this.coords) {
				var $update$$ = !1;
				_.each(this.components.datasets.select("g.column").selectAll("rect"),
				function($dataset_midpoint$$) {
					var $closest$$,
					$total$$ = _.size($dataset_midpoint$$);
					_.each($dataset_midpoint$$,
					function($rect$$, $num$$) {
						if (!$closest$$) {
							var $rect$$ = d3.select($rect$$),
							$start$$ = +$rect$$.attr("x"),
							$end$$ = $start$$ + +$rect$$.attr("width"),
							$xpos$$ = this.coords.xpos;
							if ($xpos$$ >= $start$$ && $xpos$$ <= $end$$ || 0 === $num$$ && this.coords.xpos < $start$$ || $num$$ + 1 === $total$$) $closest$$ = {
								num: $num$$,
								rect: $rect$$
							}
						}
					},
					this);
					if ($closest$$ && (!this.focused || this.focused.num != $closest$$.num)) this.focused = $closest$$,
					$dataset_midpoint$$ = Math.ceil(parseInt($closest$$.rect.attr("x"),
					10) + $closest$$.rect.attr("width") / 2),
					this.$overlayMarker.css({
						left: $dataset_midpoint$$
					}),
					$update$$ = !0
				},
				this);
				if ($update$$) {
					var $ifaces$$ = [];
					this.collection.each(function($iface$$, $num$$) {
						var $item$$ = {
							id: $iface$$.get("id"),
							color: this.config.colors($num$$),
							active: !0,
							rate: {
								amount: EDGE.getNumWithUnit($iface$$.get("rates")[this.focused.num], "bps"),
								pct: ""
							},
							total: {
								amount: EDGE.getNumWithUnit($iface$$.get("total"), "B"),
								pct: ""
							}
						};
						$ifaces$$.push($item$$)
					},
					this);
					this.$overlayContent.empty();
					this.$overlayContent.html(this.template({
						ifaces: $ifaces$$
					}))
				}
			}
		},
		hideOverlay: function($immediate$$) {
			$immediate$$ ? this.$overlay.hide() : this.$overlay.fadeOut()
		},
		showOverlay: function() {
			this.$overlay.show()
		},
		resize: function() {
			this.generateDimensions();
			var $config$$ = this.config;
			this.components.xScale.rangeRoundBands([0, $config$$.graph.width]);
			this.components.yScale.range([0, $config$$.graph.height]);
			this.components.yScaleInverse.range([$config$$.graph.height, 0]);
			this.components.container.attr("width", $config$$.width).attr("height", $config$$.height);
			this.components.datasets.attr("transform",
			"translate(0," + $config$$.graph.height + ")");
			this.resizeOverlay();
			this.update()
		},
		resizeOverlay: function() {
			var $config$$ = this.config,
			$translate_widthDiff$$ = d3.transform(this.components.graph.attr("transform")).translate;
			this.$overlay.width($config$$.width - $config$$.margin.left).height($config$$.height - $config$$.overlays.databox.heightDiff).css({
				top: this.$el.offset().top + $config$$.overlays.databox.top,
				left: this.$el.offset().left,
				"margin-top": $translate_widthDiff$$[1],
				"margin-left": $translate_widthDiff$$[0]
			});
			$config$$ = this.$overlayMarker.width();
			$translate_widthDiff$$ = this.$overlayBackground.outerWidth() - this.$overlayBackground.width();
			this.$overlayBackground.add(this.$overlayContent).width(this.$overlay.width() + $config$$ - $translate_widthDiff$$).css({
				"margin-left": -($config$$ / 4)
			})
		},
		generateData: function() {
			var $remapped$$ = [],
			$max$$ = 0,
			$divider$$,
			$units$$;
			this.collection.each(function($iface$$) {
				$remapped$$.push(_.map($iface$$.get("rates"),
				function($rate$$, $num$$) {
					$max$$ = Math.max($rate$$, $max$$);
					return {
						x: $num$$,
						y: $rate$$
					}
				}))
			},
			this);
			$units$$ = $max$$ > ($divider$$ = Math.pow(1024, 3)) ? "Gbps": $max$$ > ($divider$$ = Math.pow(1024, 2)) ? "Mbps": $max$$ > ($divider$$ = 1024) ? "Kbps": "bps";
			$divider$$ && _.each($remapped$$,
			function($rates$$, $num$$) {
				$remapped$$[$num$$] = _.map($rates$$,
				function($coords$$) {
					return {
						x: $coords$$.x,
						y: $coords$$.y / $divider$$
					}
				})
			});
			$units$$ != this.units && (this.renderTitle($units$$), this.units = $units$$);
			$remapped$$ && (this.data = d3.layout.stack()($remapped$$))
		},
		generateDimensions: function() {
			var $config$$ = this.config;
			$config$$.graph = {
				width: $config$$.width - $config$$.margin.left - $config$$.margin.right,
				height: $config$$.height - $config$$.margin.top - $config$$.margin.bottom
			}
		}
	});
	EDGE.Views.Dashboard.GraphsD3 = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Dashboard.GraphsD3",
		initialize: function($args$$) {
			_.bindAll(this);
			this.colorstay = !0;
			this.floatup = !1;
			this.autoremove = !0;
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.lazyData = _.debounce(this.data, 10);
			this.collection.bind("reset", this.lazyData);
			this.collection.each(function($iface$$) {
				$iface$$.get("rates").on("add", this.lazyData)
			},
			this);
			this.lazyUpdate = _.debounce(this.update,
			10);
			this.autoremove && this.collection.each(function($iface$$) {
				$iface$$.get("stats").on("change:status", $.proxy(function($model$$, $status$$) {
					if ("disconnected" == $status$$) {
						var $pos$$ = $.inArray($iface$$.get("id"), this.interfaces); - 1 != $pos$$ && this.interfaces.splice($pos$$, 1)
					}
					this.lazyUpdate()
				},
				this))
			},
			this);
			this.model = new Backbone.Model({
				tx: new Backbone.Collection,
				rx: new Backbone.Collection
			});
			this.types = null;
			var $cookie$$ = UBNT.Utils.Cookies.get("dashboard");
			this.interfaces = $cookie$$ ? JSON.parse($cookie$$) :
			this.collection.filterByType("ethernet").pluck("id");
			this.graphs = {};
			this.layouts = {};
			this.layouts.parent = $args$$.layout;
			this.template = _.template($("#DashboardGraphsD3Template").html());
			this.render()
		},
		render: function() {
			if (!this.$el.data("rendered")) {
				this.$el.html(this.template);
				this.$title = this.$el.find(".section-title");
				this.$content = this.$el.find(".section-container");
				this.$key = this.$el.find("#DashboardGraphKey");
				this.$title.append($("<div>Hide Distribution</div>").bind("click", $.proxy(function() {
					this.layouts.parent.toggle("north")
				},
				this)).css({
					cursor: "pointer"
				}));
				this.$key.bind("click", ".block", $.proxy(function($e$$124_id$$) {
					if ($e$$124_id$$ = $($e$$124_id$$.target).parent().data("id")) {
						var $pos$$ = $.inArray($e$$124_id$$, this.interfaces); - 1 == $pos$$ ? this.interfaces.push($e$$124_id$$) : this.interfaces.splice($pos$$, 1);
						UBNT.Utils.Cookies.set("dashboard", JSON.stringify(this.interfaces), 365);
						this.update()
					}
				},
				this), this);
				var $params$$ = {
					west: {
						size: 160,
						spacing_open: 0,
						spacing_closed: 0,
						resizeWithWindow: !0,
						resizable: !1,
						onopen: this.resize,
						onclose: this.resize
					}
				};
				960 < $(window).width() || ($params$$.west.initClosed = !0);
				this.resize();
				this.layouts.self = this.$content.layout($params$$);
				this.$el.find("#DashboardInterfacesTitle").bind("click", $.proxy(function() {
					this.layouts.self.toggle("west")
				},
				this));
				this.graph("tx", "Tx Rate", this.$el.find("#DashboardGraphTx"));
				this.graph("rx", "Rx Rate", this.$el.find("#DashboardGraphRx"));
				this.list();
				this.$el.data("rendered", !0)
			}
			this.lazyResize();
			return this
		},
		config: function() {
			return {
				widthDiff: 0,
				heightDiff: 10,
				margin: {
					top: 20,
					right: 0,
					bottom: 0,
					left: 40
				},
				points: 40,
				overlays: {
					databox: {
						heightDiff: 55,
						top: 10
					}
				},
				colors: this.colors()
			}
		},
		colors: function($reset_total$$) {
			if (!this._colors || $reset_total$$) {
				var $reset_total$$ = this.collection.size(),
				$batch$$2_initial$$ = [["#BD1550", "#E97F02"], ["#E97F02", "#FFCC00"], ["#FFCC00", "#B0C135"], ["#B0C135", "#1693A7"], ["#1693A7", "#7930AA"], ["#7930AA", "#A3A3A3"]],
				$steps$$ = Math.min(Math.ceil($reset_total$$ / $batch$$2_initial$$.length), 2),
				$result$$ = [];
				90 < $reset_total$$ && $batch$$2_initial$$.push(["#A3A3A3", "#A37434"]);
				_.each($batch$$2_initial$$,
				function($colors_scale$$) {
					for (var $colors_scale$$ = d3.scale.linear().domain([0, $steps$$]).range($colors_scale$$), $i$$ = 0; $i$$ < $steps$$; $i$$++) $result$$.push($colors_scale$$($i$$))
				},
				this);
				$result$$.push($batch$$2_initial$$[$batch$$2_initial$$.length - 1][1]);
				if ($result$$.length < $reset_total$$) for (var $batch$$2_initial$$ = $result$$.slice(0), $pcts$$ = [ - 20, 20, -35, 35, -15, 15], $shade$$ = function $$shade$$$($color$$, $percent$$) {
					var $B$$2_num$$ = parseInt($color$$.slice(1), 16),
					$amt$$ = Math.round(2.55 *
					$percent$$),
					$R$$ = ($B$$2_num$$ >> 16) + $amt$$,
					$G$$ = ($B$$2_num$$ >> 8 & 255) + $amt$$,
					$B$$2_num$$ = ($B$$2_num$$ & 255) + $amt$$;
					return "#" + (16777216 + 65536 * (255 > $R$$ ? 1 > $R$$ ? 0: $R$$: 255) + 256 * (255 > $G$$ ? 1 > $G$$ ? 0: $G$$: 255) + (255 > $B$$2_num$$ ? 1 > $B$$2_num$$ ? 0: $B$$2_num$$: 255)).toString(16).slice(1)
				}; $result$$.length < $reset_total$$ && (pct = $pcts$$.shift());) _.each($batch$$2_initial$$,
				function($color$$) {
					$result$$.push($shade$$($color$$, pct))
				});
				this._colors = function $this$_colors$($num$$) {
					for (; $num$$ >= $result$$.length;) $num$$ -=
					$result$$.length;
					return $result$$[$num$$]
				}
			}
			return this._colors
		},
		list: function() {
			this.$key.find(".active, .inactive").empty();
			var $colors$$ = this.colors(),
			$colorstay$$ = [];
			this.filter(!1).each(function($iface$$, $num$$) {
				var $$item$$2_id$$ = $iface$$.get("id"),
				$background$$ = "transparent",
				$$parent$$ = this.$key.find(".active"); - 1 != $.inArray($iface$$.get("id"), this.interfaces) ? ($background$$ = $colors$$(this.colorstay ? $num$$: active), $colorstay$$.push($background$$)) : this.floatup && ($$parent$$ = this.$key.find(".inactive"));
				$$item$$2_id$$ = $('<div data-id="' + $$item$$2_id$$ + '"><div class="block" style="background:' + $background$$ + '"></div><div class="key">' + $$item$$2_id$$ + "</div></div>");
				$iface$$.get("description") && $$item$$2_id$$.attr("title", $iface$$.get("description"));
				$$parent$$.append($$item$$2_id$$)
			},
			this);
			this.colorstay && _.each(this.graphs,
			function($graph$$) {
				$graph$$.config.colors = function $$graph$$$config$colors$($i$$) {
					return $colorstay$$[$i$$]
				};
				$graph$$.update()
			},
			this)
		},
		graph: function($type$$, $title$$, $$parent$$) {
			this.graphs[$type$$] =
			new EDGE.Views.Dashboard.RateGraph({
				el: $$parent$$,
				collection: this.model.get($type$$),
				config: _.extend(this.config(), {
					type: $type$$,
					title: $title$$,
					width: $$parent$$.width(),
					height: $$parent$$.height() - 10
				})
			})
		},
		filter: function($active$$) {
			return $active$$ ? this.collection.filterByIds(this.interfaces) : this.types ? this.collection.filterByTypes(this.types) : this.collection
		},
		data: function() {
			var $points$$ = this.config().points,
			$tx$$ = this.model.get("tx"),
			$rx$$ = this.model.get("rx");
			$tx$$.reset(null, {
				silent: !0
			});
			$rx$$.reset(null,
			{
				silent: !0
			});
			this.filter(!0).each(function($iface$$) {
				$tx$$.add({
					id: $iface$$.get("id"),
					rates: $iface$$.get("rates").getTx($points$$, $points$$),
					total: $iface$$.get("stats").get("tx").bytes
				},
				{
					silent: !0
				});
				$rx$$.add({
					id: $iface$$.get("id"),
					rates: $iface$$.get("rates").getRx($points$$, $points$$),
					total: $iface$$.get("stats").get("rx").bytes
				},
				{
					silent: !0
				})
			},
			this);
			$tx$$.trigger("change");
			$rx$$.trigger("change");
			this.$content.removeClass("inactive")
		},
		update: function() {
			this.data();
			this.list()
		},
		resize: function() {
			this.$content.height(this.$el.height() -
			this.$title.height());
			this.$el.data("rendered") && this.$el.is(":visible") && (this.layouts.self.resizeAll(), _.each(this.graphs,
			function($graph$$) {
				$graph$$.config.width = $graph$$.$el.width() - $graph$$.config.widthDiff;
				$graph$$.config.height = $graph$$.$el.height() - $graph$$.config.heightDiff;
				$graph$$.resize()
			},
			this))
		},
		reset: function() {
			this.layouts.self.removePane("west", !0, !0, !0);
			this.layouts.self.destroy();
			delete this.layouts.self;
			this.$el.empty()
		}
	});
	EDGE.Routers.Interfaces = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Interfaces",
		routes: {
			Interfaces: "index",
			"Interfaces/filter/:filter": "index",
			"Interfaces*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize interfaces router");
			if ("object" != typeof EDGE.Views.Interfaces) throw "Missing interfaces views";
			this.app = $data$$.app;
			this.views = {}
		},
		showTab: function() {
			var $$tab$$ = $("li#NavInterfaces");
			$$tab$$.hasClass("ui-state-active") || $$tab$$.find("a").trigger("click")
		},
		index: function($filter$$) {
			this.showTab();
			this.views.index ? this.views.index.render() : this.views.index = new EDGE.Views.Interfaces.Default ({
				collection: this.app.data.view.get("interfaces")
			});
			this.views.index && this.views.index.filter($filter$$ || "all")
		}
	});
	EDGE.Views.Interfaces = EDGE.Views.Interfaces || {};
	EDGE.Views.Interfaces.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Interfaces.Default",
		initialize: function($args$$) {
			this.debug("initialize");
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.creates = [];
			this.section = $args$$.section || "Interfaces";
			this.setElement($args$$.el || $("#Interfaces .section-container"));
			this.template = _.template($("#InterfacesDefaultTemplate").html());
			this.graph = $args$$.graph;
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				var $config$$ = {
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No interfaces available.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "description"
					},
					{
						sClass: "id",
						sWidth: "8em",
						sType: "interface"
					},
					{
						sClass: "type",
						sWidth: "4em"
					},
					{
						sClass: "poe",
						sWidth: "4em",
						bVisible: EDGE.Config.Features.poe
					},
					{
						sClass: "ip",
						sType: "ipv4-address"
					},
					{
						sClass: "mtu"
					},
					{
						sClass: "tx",
						bSortable: !1,
						sWidth: "7em"
					},
					{
						sClass: "rx",
						bSortable: !1,
						sWidth: "7em"
					},
					{
						sClass: "status"
					},
					{
						sClass: "buttons",
						bSortable: !1,
						sWidth: "100px"
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					bPaginate: !0,
					bScrollCollapse: !0,
					sScrollY: 1,
					aaSorting: [[1, "asc"], [7, "asc"], [2, "asc"]],
					sDom: '<"H"fr>t<"F"ip>'
				};
				this.$el.html(this.template({
					section: this.section
				})).data("rendered", !0);
				this.$filters = this.$("#InterfaceFilters").tabslite();
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend($config$$, this.options.options || {}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				"admin" == EDGE.Config.User.level && ($self$$ = this, this.$adds && this.$adds.remove(), this.$adds = new EDGE.Views.Interfaces.AddDropDownButton({
					container: this.$(".add"),
					table: this
				}));
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			return this
		},
		filter: function($filter$$) {
			this.$filters.find("li." + $filter$$ + " a").trigger("show");
			this.dataTable.fnFilter("all" == $filter$$ ? "": $filter$$, 2)
		},
		add: function($iface$$) {
			this.rows[$iface$$.get("id")] = new EDGE.Views.Interfaces.Row({
				model: $iface$$,
				interfaces: this.collection,
				intfs_obj: this,
				dataTable: this.dataTable
			});
			var $self$$ = this;
			this.rows[$iface$$.get("id")].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			});
			this.graph.list()
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.$table.fnDraw();
				$settings$$.oScroll.sY =
				this.$table.parents(".ui-layout-pane").height() - this.$table.parents(".table-container").height();
				this.$table.fnDraw()
			}
		},
		reset: function($soft$$) {
			this.debug("resetting interfaces");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		delete_intf: function($imod$$, $complete$$) {
			var $t$$ = $imod$$.get("type"),
			$p$$12_v$$ = $imod$$.get("parent");
			$imod$$.get("vif");
			$imod$$.get("pppoe");
			var $s$$;
			if ("vlan" == $t$$) $s$$ = $imod$$.get("vif");
			else if ("pppoe" == $t$$) $s$$ = $imod$$.get("pppoe");
			else return;
			var $pp$$ = this.collection.filterById($p$$12_v$$),
			$batch$$ = $pp$$.get("type"),
			$ppp$$;
			"vlan" == $batch$$ && ($ppp$$ = this.collection.filterById($pp$$.get("parent")), $batch$$ = $ppp$$.get("type"));
			if (! ("vlan" !== $t$$ && "pppoe" !== $t$$ || !$pp$$ || null === $s$$ || void 0 === $s$$)) {
				this.disableActions();
				$batch$$ = new EDGE.Models.Batch({
					generic: !0
				});
				$batch$$.get("gget").put("interfaces", null);
				switch ($t$$) {
				case "vlan":
					$t$$ = "vif";
					break
				}
				$p$$12_v$$ = $ppp$$ ? ["interfaces", $ppp$$.get("type"), $ppp$$.id, "vif", $pp$$.get("vif"), $t$$] : ["interfaces", $pp$$.get("type"), $p$$12_v$$, $t$$];
				$ppp$$ && $batch$$.get("gdelete").put("interfaces", $ppp$$.get("type"), $ppp$$.id, "vif", "__FORCE_ASSOC", !0);
				$batch$$.get("gdelete").put($p$$12_v$$, $s$$, null);
				$batch$$.get("gdelete").put($p$$12_v$$, "__FORCE_ASSOC", !0);
				var $self$$ = this;
				$batch$$.save(["interfaces"], {
					success: function($model$$,
					$resp$$) {
						if ($resp$$.DELETE && ($resp$$.DELETE.success && !($resp$$.COMMIT && $resp$$.COMMIT.failure == 1)) && $imod$$) {
							delete($pp$$.get("vif") || $pp$$.get("pppoe"))[$s$$];
							$self$$.collection.remove($imod$$)
						} else $self$$.response($resp$$)
					},
					error: function() {
						$(window).trigger("notify", new EDGE.Models.Notice({
							type: "error",
							notice: Msg.E_SaveFailed
						}))
					},
					complete: function() {
						$self$$.enableActions();
						$complete$$ && $complete$$()
					}
				})
			}
		},
		remove: function($iface$$11_row$$) {
			if (this.dataTable) {
				var $id$$ = $iface$$11_row$$.get("id");
				if ($iface$$11_row$$ = this.rows[$id$$]) {
					$iface$$11_row$$.reset();
					this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($iface$$11_row$$.el));
					delete this.rows[$id$$];
					var $self$$ = this;
					_.each($self$$.rows,
					function($row$$) {
						$row$$.model.get("parent") == $id$$ && ($row$$.reset(), $self$$.dataTable.fnDeleteRow($self$$.dataTable.fnGetPosition($row$$.el)), delete $self$$.rows[$id$$])
					});
					this.lazyResize()
				}
			}
			this.graph.list()
		},
		response: function($intfs_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this,
			$intfs_resp$$); ($intfs_resp$$ = EDGE.getObjProp($intfs_resp$$, ["GET", "interfaces"])) ? (this.reset(!0), this.collection["import"]($intfs_resp$$), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		create: function($type$$) {
			var $eifs$$ = this.collection.filterByType("ethernet").toArray(),
			$sifs$$ = this.collection.filterByType("switch").toArray(),
			$bifs$$ = this.collection.filterByType("bridge").toArray();
			this.collection.filterByType("bonding").toArray();
			var $vifs$$ = this.collection.filterVlanByParentTypes(["ethernet", "bridge", "switch"]),
			$config$$ = {
				id: this.creates.length,
				collection: this.collection,
				intfs_obj: this,
				interfaces: _($eifs$$.concat($sifs$$, $bifs$$))
			};
			"vlan" == $type$$ && this.creates.push(new EDGE.Views.Interfaces.Creates.Vlan($config$$));
			"pppoe" == $type$$ && ($config$$.interfaces = _($eifs$$.concat($sifs$$, $bifs$$, $vifs$$)), this.creates.push(new EDGE.Views.Interfaces.Creates.Pppoe($config$$)))
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$table.data("open-dialog-counter") ?
			0: this.$table.data("open-dialog-counter") - 1;
			this.$table.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && (this.$actions.enableAction("delete"), this.$actions.enableAction("status"))
			})
		},
		enableRestrictions: function() {
			var $counter$$ = this.$table.data("open-dialog-counter") ? this.$table.data("open-dialog-counter") + 1: 1;
			this.$table.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && (this.$actions.disableAction("delete"),
				this.$actions.disableAction("status"))
			})
		},
		enableActions: function() {
			$("#InterfaceList .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".interface-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = $("#InterfaceAdd button");
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$("#InterfaceList .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".interface-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$ = $("#InterfaceAdd button"); ! 1 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Interfaces.Dialog = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.intfs_obj = $args$$.intfs_obj;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validateAddrs: function($form$$) {
			var $ips$$ = [],
			$ipv4$$ = !1;
			$form = $($form$$);
			$form.find("select[name^=address]").each(function() {
				var $$ip_val$$ = $(this).val();
				"ip" == $$ip_val$$ ? ($$ip_val$$ = $(this).siblings(".ip-section").find("input.ip-member"), $$ip_val$$.length && (isIpv4Net($$ip_val$$.val()) && ($ipv4$$ =
				!0), isIpv6Net($$ip_val$$.val()), $ips$$.push($$ip_val$$.val()))) : $$ip_val$$ && $ips$$.push($$ip_val$$)
			});
			return _.contains($ips$$, "dhcp") && $ipv4$$ ? [!1, "Cannot configure static IPv4 address and DHCP on the same interface."] : _.uniq($ips$$).length != $ips$$.length ? [!1, "Cannot configure duplicate addresses on the same interface."] : [!0]
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$self$$.save()
				},
				rules: {
					"interface": {
						required: !0
					},
					description: {
						maxlength: 100,
						noQuotes: !0
					},
					mtu: {
						range: [68, 9E3]
					},
					vif: {
						required: !0,
						range: [0, 4094]
					}
				}
			}
		},
		render: function($extended$$) {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.intfs_obj.enableRestrictions();
			$extended$$ || (this.delegateEvents(), this.flaggable = !1, this.update(), this.flaggable = !0);
			this.$("select[name^=address]").on("change", this._change).trigger("change");
			return this
		},
		_change: function($$this$$14_event$$) {
			var $$this$$14_event$$ = $($$this$$14_event$$.target),
			$$ip$$ = $$this$$14_event$$.siblings(".ip-section"),
			$$buttons$$ = $$this$$14_event$$.siblings(".dhcp");
			"ip" == $$this$$14_event$$.val() ? ($$ip$$.find("span.ui-icon-info").remove(), $$ip$$.show(), $$ip$$.infotip(), $$buttons$$.hide()) : "dhcp" == $$this$$14_event$$.val() ? (this.model && $$buttons$$.hasClass("available") && $$buttons$$.show(), $$ip$$.hide()) : ($$ip$$.hide(), $$buttons$$.hide())
		},
		renderAddables: function() {
			function $addUniqueIdAndName$$($$el$$, $n$$) {
				var $suffix$$ = (new Date).getTime();
				$$el$$.attr("id", $n$$ + $suffix$$).attr("name", $n$$ + $suffix$$)
			}
			var $self$$ =
			this;
			this.$("fieldset.ips");
			var $$addresses$$ = this.$(".addresses");
			$$addresses$$.find("input.ip-member").each(function() {
				$addUniqueIdAndName$$($(this), "member")
			});
			$$addresses$$.find("select[name=address]").each(function() {
				$addUniqueIdAndName$$($(this), "address")
			});
			$$addresses$$.addable({
				template: $$addresses$$.find(".address").clone(),
				add: this.readonly ? null: $('<span class="addable">Add IP</span>').button({
					icons: {
						primary: "ui-icon-plus"
					}
				}),
				added: function() {
					this.inserted.find("select").on("change", $self$$._change).trigger("change");
					this.inserted.find("button.release").hide();
					this.inserted.find(".dhcp").hide();
					this.inserted.find("button").button();
					$addUniqueIdAndName$$(this.inserted.find("input"), "member");
					$addUniqueIdAndName$$(this.inserted.find("select"), "address");
					$self$$.show()
				}
			})
		},
		show: function() {
			EDGE.Views.Global.Abstract.Config.prototype.show.call(this)
		},
		prepareSave: function($batch$$) {
			var $interfaces$$ = {};
			_.each(["set", "delete"],
			function($type$$) {
				var $collection$$ = $batch$$.get($type$$).get("interfaces");
				$collection$$.add({
					id: this.model.get("id"),
					type: this.model.get("type")
				},
				{
					silent: !0
				});
				$interfaces$$[$type$$] = $collection$$.last().clear()
			},
			this);
			this.setProperty("description", this.$("input[name=description]").val(), $interfaces$$);
			this.setProperty("disable", !this.$("input[name=enabled]").is(":checked"), $interfaces$$, !0);
			return $interfaces$$
		},
		prepareSaveAddress: function($interfaces$$) {
			var $current$$ = [],
			$addresses$$ = [];
			this.$("fieldset.addresses .address").each(function() {
				var $$ip$$2_$this$$ = $(this),
				$$select$$ = $$ip$$2_$this$$.find("select");
				"dhcp" == $$select$$.val() || "dhcpv6" == $$select$$.val() ? $addresses$$.push($$select$$.val()) : "ip" == $$select$$.val() && ($$ip$$2_$this$$ = $$ip$$2_$this$$.find("input"), $$ip$$2_$this$$.length && "" != $$ip$$2_$this$$.val().trim() && $addresses$$.push($$ip$$2_$this$$.val()))
			});
			this.model && this.model.get("address") && ($current$$ = this.model.get("address"));
			_.isEqual($addresses$$, $current$$) || ($interfaces$$["delete"] && $interfaces$$["delete"].set({
				address: null
			},
			{
				silent: !0
			}), $addresses$$.length && $interfaces$$.set.set({
				address: $addresses$$
			},
			{
				silent: !0
			}))
		},
		save: function($batch$$5_e$$) {
			$batch$$5_e$$ && $batch$$5_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$5_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$5_e$$);
			$batch$$5_e$$.get("set") && $batch$$5_e$$.get("set").get("interfaces").hasChanged() || $batch$$5_e$$.unset("set");
			$batch$$5_e$$.get("delete") && $batch$$5_e$$.get("delete").get("interfaces").hasChanged() || $batch$$5_e$$.unset("delete");
			$batch$$5_e$$.unset("get");
			var $self$$ = this;
			if ($batch$$5_e$$.has("set") ||
			$batch$$5_e$$.has("delete")) this.dialog.addClass("saving"),
			this.intfs_obj.disableActions(),
			$batch$$5_e$$.save(["interfaces"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.flagErrors();
					$self$$.remove()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.intfs_obj.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		remove: function() {
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this);
			this.intfs_obj.disableRestrictions()
		}
	});
	EDGE.Views.Interfaces.Creates = {};
	EDGE.Views.Interfaces.Creates.Pppoe = EDGE.Views.Interfaces.Dialog.extend({
		initialize: function($args$$) {
			this.template = _.template($("#InterfacesCreatePppoeTemplate").html());
			this.id = "createpppoe" + $args$$.id;
			this.type = "interface";
			this.action = "create";
			this.title = "Create New PPPoE";
			this.interfaces = $args$$.interfaces;
			this.intfs_obj = $args$$.intfs_obj;
			EDGE.Views.Interfaces.Dialog.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					var $valid$$ = !0,
					$msg$$,
					$parent$$ = $form.find("select[name=interface]").val(),
					$newpppoe$$ = $form.find("input[name=pppoe]").val(),
					$newMtu$$ = $form.find("input[name=mtu]").val(),
					$pppoes$$ = [];
					$self$$.collection.each(function($interfaces$$) {
						$valid$$ && _.each($interfaces$$,
						function($iface$$) {
							if ($iface$$.id == $parent$$) {
								var $p$$ = $iface$$.mtu;
								$p$$ || ($p$$ = 1508);
								if ($newMtu$$ && +$newMtu$$ > +$p$$ - 8) {
									$msg$$ = "Error: pppoe" + $newpppoe$$ + " mtu  must be less than or equal to " + ( + $p$$ - 8) + " (" + $parent$$ + " mtu of " + $p$$ + " - 8)";
									$valid$$ = !1;
									return
								}
							}
							$p$$ = $iface$$.pppoe;
							if ($iface$$.parent && !$iface$$.vif && ("number" == typeof $p$$ || "string" == typeof $p$$))"number" == typeof $p$$ && ($p$$ = $p$$.toString()),
							$p$$.startWith("0") && 1 < $p$$.length || $pppoes$$.push($p$$)
						})
					});
					_.contains($pppoes$$, $newpppoe$$) && ($msg$$ = "Error: pppoe" + $newpppoe$$ + " already exists.", $valid$$ = !1);
					$valid$$ || $(window).trigger("dialog", [$msg$$, "Validation error"]);
					$valid$$ && $self$$.save()
				},
				rules: {
					"interface": {
						required: !0
					},
					mtu: {
						range: [0, 1500]
					},
					"user-id": {
						required: !0
					},
					password: {
						required: !0
					},
					pppoe: {
						required: !0,
						range: [0, 15],
						nonStartWithZero: 1
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Interfaces.Dialog.prototype.render.call(this);
			var $$form$$ = this.$("form");
			this.$("form").find("div.createvlanmtu");
			var $$parent$$ = this.$("form").find("select[name=interface]");
			$$parent$$.empty().append('<option value="">- select -</option>');
			this.interfaces.each(function($iface$$) {
				$$parent$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
			});
			$$form$$.find(":checkbox[name=showpw]").click(function() {
				$this =
				$(this);
				$prev = $this.siblings("input[name=password]");
				$this.is(":checked") ? $prev.prop("type", "text") : $prev.prop("type", "password")
			});
			this.delegateEvents();
			this.show();
			return this
		},
		prepareSave: function($batch$$6_collection$$) {
			var $model$$31_parent$$ = this.$("select[name=interface] option:selected").val(),
			$mtu_pppoe$$ = this.$("input[name=pppoe]").val();
			$batch$$6_collection$$.get("gget").put("interfaces", null);
			$batch$$6_collection$$ = $batch$$6_collection$$.get("set").get("interfaces");
			$batch$$6_collection$$.add({
				type: "pppoe",
				id: "pppoe" + $mtu_pppoe$$,
				parent: $model$$31_parent$$,
				pppoe: $mtu_pppoe$$
			});
			$model$$31_parent$$ = $batch$$6_collection$$.last();
			$model$$31_parent$$.clear({
				silent: !0
			}); ($mtu_pppoe$$ = this.$("input[name=mtu]").val()) && $model$$31_parent$$.set({
				mtu: $mtu_pppoe$$
			},
			{
				silent: !0
			}); ($mtu_pppoe$$ = this.$("input[name=user]").val()) && $model$$31_parent$$.set({
				"user-id": $mtu_pppoe$$
			},
			{
				silent: !0
			}); ($mtu_pppoe$$ = this.$("input[name=password]").val()) && $model$$31_parent$$.set({
				password: $mtu_pppoe$$
			},
			{
				silent: !0
			});
			return {
				set: $model$$31_parent$$
			}
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Interfaces.Dialog.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.interfaces ? (this.intfs_obj.collection["import"]($resp$$.GET.interfaces), this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			this.intfs_obj.disableRestrictions();
			EDGE.Views.Interfaces.Dialog.prototype.remove.call(this)
		},
		flagErrors: function() {}
	});
	EDGE.Views.Interfaces.Creates.Vlan = EDGE.Views.Interfaces.Dialog.extend({
		initialize: function($args$$) {
			this.template = _.template($("#InterfacesCreateVlanTemplate").html());
			this.id = "createvlan" + $args$$.id;
			this.type = "interface";
			this.action = "create";
			this.title = "Create New VLAN";
			this.interfaces = $args$$.interfaces;
			this.intfs_obj = $args$$.intfs_obj;
			EDGE.Views.Interfaces.Dialog.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$form$$ = $self$$.validateAddrs($form$$);
					if ($form$$[0]) {
						var $valid$$ = !0,
						$msg$$,
						$parent$$ = $form.find("select[name=interface]").val(),
						$newVif$$ = $form.find("input[name=vif]").val(),
						$newVifMtu$$ = $form.find("input[name=mtu]").val();
						$self$$.collection.each(function($interfaces$$) {
							$valid$$ && _.each($interfaces$$,
							function($iface$$14_vifs$$) {
								if ($iface$$14_vifs$$.id == $parent$$) {
									var $parentMtu$$ = $iface$$14_vifs$$.mtu;
									$parentMtu$$ || ($parentMtu$$ = "switch" == $iface$$14_vifs$$.type ? 9E3: 1500);
									$newVifMtu$$ && +$newVifMtu$$ >
									+$parentMtu$$ ? ($msg$$ = "Error: vlan " + $newVif$$ + " mtu must be less than or equal to " + $parent$$ + " mtu of " + $parentMtu$$, $valid$$ = !1) : ($iface$$14_vifs$$ = $iface$$14_vifs$$.vif) && _.each($iface$$14_vifs$$,
									function($ovif$$, $vif$$) {
										$vif$$ == $newVif$$ && ($msg$$ = "Error: vlan " + $newVif$$ + " already exists for " + $parent$$, $valid$$ = !1)
									})
								}
							})
						});
						$valid$$ || $(window).trigger("dialog", [$msg$$, "Validation error"]);
						$valid$$ && $self$$.save()
					} else $(window).trigger("dialog", [$form$$[1], "Validation error"])
				},
				rules: {
					"interface": {
						required: !0
					},
					description: {
						maxlength: 100,
						noQuotes: !0
					},
					ips: {
						ipv4OrIpv6Net: !0
					},
					mtu: {
						range: [68, 9E3]
					},
					vif: {
						required: !0,
						range: [0, 4094],
						nonStartWithZero: 1
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Interfaces.Dialog.prototype.render.call(this);
			this.$("form").find('input[name=address][value=""]').attr("checked", !0).trigger("change");
			var $$mtu$$ = this.$("form").find("div.createvlanmtu"),
			$$parent$$ = this.$("form").find("select[name=interface]");
			$$parent$$.empty().append('<option value="">- select -</option>');
			this.interfaces.each(function($iface$$) {
				$$parent$$.append('<option value="' +
				$iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
			});
			$$parent$$.on("change",
			function() {
				$(this).val().match(/(br)[0-9]+/) ? $$mtu$$.hide() : $$mtu$$.show()
			});
			this.delegateEvents();
			this.show();
			return this
		},
		prepareSave: function($batch$$7_collection$$) {
			var $interfaces$$6_parent$$ = this.$("select[name=interface] option:selected").val(),
			$model$$32_vif$$ = this.$("input[name=vif]").val();
			$batch$$7_collection$$.get("gget").put("interfaces", null);
			$batch$$7_collection$$ = $batch$$7_collection$$.get("set").get("interfaces");
			$batch$$7_collection$$.add({
				type: "vlan",
				id: $interfaces$$6_parent$$ + "." + $model$$32_vif$$,
				parent: $interfaces$$6_parent$$,
				vif: $model$$32_vif$$
			});
			$model$$32_vif$$ = $batch$$7_collection$$.last();
			$model$$32_vif$$.clear({
				silent: !0
			});
			var $desc_inputMtu_pintf$$ = this.$("input[name=description]").val();
			$desc_inputMtu_pintf$$ && $model$$32_vif$$.set({
				description: $desc_inputMtu_pintf$$
			},
			{
				silent: !0
			});
			var $desc_inputMtu_pintf$$ = this.$("input[name=mtu]").val(),
			$br$$ = $interfaces$$6_parent$$.match(/(br)[0-9]+/);
			$desc_inputMtu_pintf$$ &&
			!$br$$ && $model$$32_vif$$.set({
				mtu: $desc_inputMtu_pintf$$
			},
			{
				silent: !0
			});
			$desc_inputMtu_pintf$$ = this.collection.filterById($interfaces$$6_parent$$);
			$batch$$7_collection$$.add({
				id: $interfaces$$6_parent$$,
				type: $desc_inputMtu_pintf$$.get("type")
			},
			{
				silent: !0
			});
			$batch$$7_collection$$.last().clear({
				silent: !0
			});
			$interfaces$$6_parent$$ = {
				set: $model$$32_vif$$
			};
			this.prepareSaveAddress($interfaces$$6_parent$$);
			return $interfaces$$6_parent$$
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Interfaces.Dialog.prototype.response.call(this,
			$resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.interfaces ? (this.intfs_obj.collection["import"]($resp$$.GET.interfaces), this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			this.intfs_obj.disableRestrictions();
			EDGE.Views.Interfaces.Dialog.prototype.remove.call(this)
		},
		flagErrors: function() {}
	});
	EDGE.Views.Interfaces.Config = EDGE.Views.Interfaces.Dialog.extend({
		initialize: function($args$$) {
			this.template || (this.template = _.template($("#InterfacesConfigInvalidTemplate").html()));
			this.interfaces = $args$$.interfaces;
			this.id = this.model.get("id").replace(/[^a-z0-9_-]/ig, "_");
			this.type = "interface";
			this.action = "edit";
			this.title = "Interface Configuration for " + this.model.get("id");
			this.model.bind("change:dhcp", this.updateDhcp, this);
			EDGE.Views.Interfaces.Dialog.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Interfaces.Dialog.prototype.render.call(this);
			var $$renew$$ = this.$("button.renew"),
			$$release$$ = this.$("button.release");
			$$renew$$.length && $$renew$$.bind("click", this.dhcpRenew);
			$$release$$.length && $$release$$.bind("click", this.dhcpRelease);
			$$release$$.hide()
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$("fieldset.delete").remove()
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=description]"),
			this.model.get("description"), $$form$$.find("label[for=" + $$form$$.find("input[name=description]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=enabled]"), !this.model.get("disable"), $$form$$.find("label[for=" + $$form$$.find("input[name=enabled]").attr("id") + "]"));
			this.show()
		},
		updateAddress: function() {
			var $$form$$ = this.$("form");
			$$form$$.find("input[name=address]:checked").val();
			updated = !1;
			this.updateDhcp();
			var $ips$$ = this.model.get("address"),
			$$ips$$ = $$form$$.find("fieldset.addresses");
			$ips$$ && $ips$$.length ? ($$ips$$.find("div.address").remove(), _.each($ips$$,
			function($ip$$) {
				var $$added$$ = $$ips$$.addable("add").addable("last"),
				$$select$$ = $$added$$.find("select"),
				$$input$$ = $$added$$.find("input");
				this.readonly ? $$added$$.find("span.readonly").html($ip$$) : ("dhcp" == $ip$$ ? ($$select$$.val($ip$$), $$added$$.find(".dhcp").show(), $$added$$.find(".dhcp").addClass("available")) : "dhcpv6" == $ip$$ ? $$select$$.val($ip$$) : ($$select$$.val("ip"), $$input$$.val($ip$$)), $$select$$.trigger("change"))
			},
			this)) :
			$$ips$$.find(".dhcp").hide();
			$$form$$.find("legend[data-field=address]")[!updated ? "removeClass": "addClass"]("updated");
			this.readonly && this.$("input[type=radio][name=address]").each(function() {
				var $$this$$0$$ = $(this);
				if ($$this$$0$$.is(":checked")) switch ($$this$$0$$.val()) {
				case "dhcpv6":
					$$this$$0$$.parents("li").find("li label.inline").each(function() {
						var $$this$$ = $(this);
						$$this$$.find("input").is(":checked") || $$this$$.hide()
					})
				} else $$this$$0$$.parents("li").hide()
			})
		},
		updateDhcp: function() {
			this.model.get("dhcp") ?
			this.$("form").find("fieldset.nested.dhcp").removeClass("disabled") : this.$("form").find("fieldset.nested.dhcp").addClass("disabled")
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.interfaces ? (this.model.collection["import"]($resp$$.GET.interfaces), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		dhcpRenew: function() {
			var $$button$$ =
			this.$("button.renew");
			$$button$$.button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$.ajax({
				url: EDGE.Config.Api.base + "edge/operation/renew-dhcp.json",
				type: "POST",
				data: {
					"interface": this.model.get("id")
				},
				success: function($data$$) {
					$data$$ = $data$$.OPERATION || {};
					$data$$.success || $(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_DhcpRenewFailed + " (" + ($data$$.errors ? $data$$.errors.join("\n") : "Unspecified error") + ")"
					}))
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_DhcpRenewFailed
					}))
				},
				complete: function() {
					$$button$$.button("hideWorkingIndicator", {
						secondary: "ui-icon-check"
					})
				}
			})
		},
		dhcpRelease: function() {
			var $$button$$ = this.$("button.release");
			$$button$$.attr("disabled", "disabled").addClass("ui-state-disabled");
			$$button$$.button("option", "icons", {
				secondary: "ui-icon-spinner"
			});
			$.ajax({
				url: EDGE.Config.Api.base + "edge/operation/release-dhcp.json",
				type: "POST",
				data: {
					"interface": this.model.get("id")
				},
				success: function($data$$) {
					$data$$ = $data$$.OPERATION || {};
					$data$$.success || $(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_DhcpReleaseFailed + " (" + ($data$$.errors ? $data$$.errors.join("\n") : "Unspecified error") + ")"
					}))
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_DhcpReleaseFailed
					}))
				},
				complete: function() {
					$$button$$.removeAttr("disabled").removeClass("ui-state-disabled");
					$$button$$.button("option", "icons", {
						secondary: null
					})
				}
			})
		}
	});
	EDGE.Views.Interfaces.Configs = {};
	EDGE.Views.Interfaces.Configs.Ethernet = EDGE.Views.Interfaces.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#InterfacesConfigEthernetTemplate").html());
			EDGE.Views.Interfaces.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$5_intfs$$1_res$$1_status$$) {
					$form = $($form$$5_intfs$$1_res$$1_status$$);
					$form$$5_intfs$$1_res$$1_status$$ = $self$$.validateAddrs($form$$5_intfs$$1_res$$1_status$$);
					if ($form$$5_intfs$$1_res$$1_status$$[0]) {
						var $valid$$ =
						!0,
						$msg$$,
						$id$$ = $self$$.model.get("id"),
						$newMtu$$ = $form.find("input[name=mtu]").val();
						$newMtu$$ || ($newMtu$$ = 1500);
						$self$$.intfs_obj && ($form$$5_intfs$$1_res$$1_status$$ = $self$$.intfs_obj.collection.filterByTypes(["vlan", "pppoe"])) && $form$$5_intfs$$1_res$$1_status$$.each(function($vlan$$) {
							if ($valid$$) {
								var $parent$$ = $vlan$$.get("parent");
								if ($id$$ == $parent$$) {
									var $parent$$ = $vlan$$.get("id"),
									$pppoeMtu_vMtu$$ = $vlan$$.get("mtu"),
									$vifMtu$$ = $pppoeMtu_vMtu$$ ? $pppoeMtu_vMtu$$: 1500,
									$pppoeMtu_vMtu$$ = $pppoeMtu_vMtu$$ ?
									$pppoeMtu_vMtu$$: 1492;
									"vlan" == $vlan$$.get("type") && +$newMtu$$ < +$vifMtu$$ ? ($msg$$ = "Error: " + $id$$ + " mtu must be greater than or equal to " + $parent$$ + " mtu of " + $vifMtu$$, $valid$$ = !1) : "pppoe" == $vlan$$.get("type") && +$newMtu$$ < +$pppoeMtu_vMtu$$ + 8 && ($msg$$ = "Error: " + $id$$ + " mtu must be greater than or equal to " + ( + $pppoeMtu_vMtu$$ + 8) + " (" + $parent$$ + " mtu + 8)", $valid$$ = !1)
								}
							}
						});
						var $form$$5_intfs$$1_res$$1_status$$ = $self$$.model.get("stats").get("status"),
						$oldPoe_oldPoeOutput$$ = $self$$.model.get("poe"),
						$oldPoe_oldPoeOutput$$ = !_.isUndefined($oldPoe_oldPoeOutput$$) && $oldPoe_oldPoeOutput$$.output ? $oldPoe_oldPoeOutput$$.output: "",
						$poeOutput$$ = $form.find("select[name=poe-output]").val();
						$form$$5_intfs$$1_res$$1_status$$ && "connected" == $form$$5_intfs$$1_res$$1_status$$ && ($poeOutput$$ && "off" != $poeOutput$$ && $oldPoe_oldPoeOutput$$ && "off" == $oldPoe_oldPoeOutput$$) && ($msg$$ = "Error: carrier detected while trying to enable " + $poeOutput$$, $valid$$ = !1);
						$form.find("input[name=poe-enable-watchdog]:checked").val() &&
						"off" == $poeOutput$$ && ($msg$$ = "Error: PoE watchdog can not be enabled when PoE output is off", $valid$$ = !1);
						$valid$$ || $(window).trigger("dialog", [$msg$$, "Validation error"]);
						$valid$$ && $self$$.save()
					} else $(window).trigger("dialog", [$form$$5_intfs$$1_res$$1_status$$[1], "Validation error"])
				},
				rules: {
					description: {
						maxlength: 100,
						noQuotes: !0
					},
					ips: {
						ipv4OrIpv6Net: !0
					},
					mtu: {
						range: [68, 9E3]
					},
					"poe-address": {
						ipv4OrIpv6: !0
					},
					"poe-interval": {
						range: [1, 65535]
					},
					"poe-start-delay": {
						range: [1, 65535]
					},
					"poe-failure-count": {
						range: [1,
						65535]
					},
					"poe-off-delay": {
						range: [1, 60]
					}
				}
			}
		},
		restorePoe: function($elem$$) {
			$elem$$.val(this.currentPoeOut ? this.currentPoeOut: "off")
		},
		render: function() {
			EDGE.Views.Interfaces.Config.prototype.render.call(this, !0);
			if (EDGE.Config.Features.poe) {
				var $$form$$ = this.$("form"),
				$self$$ = this,
				$$poetab_cap$$ = EDGE.Config.Features.poe_cap[this.model.get("id")],
				$$poeout$$ = $$form$$.find("select[name=poe-output]"),
				$volts$$ = "off 24v 48v 24v-4pair 54v-4pair pthru".split(" ");
				0 == $$poetab_cap$$ ? ($$poetab_cap$$ = $$form$$.find("div.poe"),
				$$poetab_cap$$.children("fieldset").hide(), $$poetab_cap$$.append('<span class="nopoe">PoE is not supported for ' + this.model.get("id") + "</span>")) : (1 == ($$poetab_cap$$ & 1) && ($volts$$ = _.without($volts$$, "off")), 4 == ($$poetab_cap$$ & 4) && ($volts$$ = _.without($volts$$, "24v")), 2 == ($$poetab_cap$$ & 2) && ($volts$$ = _.without($volts$$, "48v")), 32 == ($$poetab_cap$$ & 32) && ($volts$$ = _.without($volts$$, "24v-4pair")), 8 == ($$poetab_cap$$ & 8) && ($volts$$ = _.without($volts$$, "54v-4pair")), 16 == ($$poetab_cap$$ & 16) && ($volts$$ = _.without($volts$$,
				"pthru")), _.each($volts$$,
				function($v$$) {
					$$poeout$$.children("option[value=" + $v$$ + "]").remove()
				}), $$poeout$$.bind("change",
				function() {
					if ("off" != $$poeout$$.val()) {
						var $v$$ = $$poeout$$.val(),
						$v$$ = $v$$.toUpperCase(),
						$ev$$ = "<emph>" + $v$$ + "</emph>",
						$intf$$ = $self$$.model.get("id"),
						$eintf$$ = "<emph>" + $intf$$ + "</emph>";
						window.app.dialogs.confirmationDialog.open({
							title: "WARNING: " + $v$$ + " PoE output on port " + $intf$$,
							message: $("<p>You have selected " + $ev$$ + " for PoE output on port " + $eintf$$ + ". The device plugged into port " +
							$eintf$$ + " MUST support " + $ev$$ + " input voltage; otherwise it may be damaged.</p><p>Are you sure you want to continue?</p>"),
							context: $(this),
							deny: function() {
								$self$$.restorePoe(this)
							}
						})
					}
				}), $$form$$.find("input[name=poe-enable-watchdog]").bind("change",
				function() {
					$options = $$form$$.find("div.watchdog-options");
					$(this).is(":checked") ? ($options.find("span.ui-icon-info").remove(), $options.show(), _.delay(function() {
						$options.infotip()
					},
					30)) : $options.hide();
					$self$$.show()
				}).trigger("change"))
			}
		},
		update: function() {
			var $$form$$ =
			this.$("form");
			this.updateTextbox($$form$$.find("input[name=mtu]"), this.model.get("mtu") ? this.model.get("mtu") : "1500", $$form$$.find("label[for=" + $$form$$.find("input[name=mtu]").attr("id") + "]"));
			this.updateSelect($$form$$.find("select[name=speed]"), this.model.get("speed") + "-" + this.model.get("duplex"), $$form$$.find("label[for=" + $$form$$.find("select[name=speed]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=enable-proxy-arp]"), this.model.get("ip") && this.model.get("ip")["enable-proxy-arp"],
			$$form$$.find("label[for=" + $$form$$.find("input[name=enable-proxy-arp]").attr("id") + "]"));
			this.updateAddress();
			if (this.model.get("poe")) {
				var $poeOutput$$ = this.model.get("poe").output,
				$poeWatchdog$$ = this.model.get("poe").watchdog || {};
				this.currentPoeOut = $poeOutput$$;
				this.updateSelect($$form$$.find("select[name=poe-output]"), $poeOutput$$, $$form$$.find("label[for=" + $$form$$.find("select[name=poe-output]").attr("id") + "]"));
				this.updateCheckbox($$form$$.find("input[name=poe-enable-watchdog]"), !$poeWatchdog$$.disable,
				$$form$$.find("label[for=" + $$form$$.find("input[name=poe-enable-watchdog]").attr("id") + "]"));
				this.updateTextbox($$form$$.find("input[name=poe-address]"), $poeWatchdog$$.address, $$form$$.find("label[for=" + $$form$$.find("input[name=poe-address]").attr("id") + "]"));
				this.updateTextbox($$form$$.find("input[name=poe-interval]"), $poeWatchdog$$.interval, $$form$$.find("label[for=" + $$form$$.find("input[name=poe-interval]").attr("id") + "]"));
				this.updateTextbox($$form$$.find("input[name=poe-start-delay]"), $poeWatchdog$$["start-delay"],
				$$form$$.find("label[for=" + $$form$$.find("input[name=poe-start-delay]").attr("id") + "]"));
				this.updateTextbox($$form$$.find("input[name=poe-failure-count]"), $poeWatchdog$$["failure-count"], $$form$$.find("label[for=" + $$form$$.find("input[name=poe-failure-count]").attr("id") + "]"));
				this.updateTextbox($$form$$.find("input[name=poe-off-delay]"), $poeWatchdog$$["off-delay"], $$form$$.find("label[for=" + $$form$$.find("input[name=poe-off-delay]").attr("id") + "]"))
			}
			EDGE.Views.Interfaces.Config.prototype.update.call(this)
		},
		prepareSave: function($batch$$) {
			var $interfaces$$ = EDGE.Views.Interfaces.Config.prototype.prepareSave.call(this, $batch$$);
			this.prepareSaveAddress($interfaces$$);
			var $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$ = this.$("select[name=speed] option:selected").val().split("-");
			this.setProperty("speed", $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$[0], $interfaces$$);
			this.setProperty("duplex", $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$[1], $interfaces$$); ($id$$36_inputMtu$$1_ip$$12_poeFields_speed$$ = this.$("input[name=mtu]").val()) &&
			1500 != $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$ ? this.setProperty("mtu", $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$, $interfaces$$) : $interfaces$$["delete"].set({
				mtu: null
			},
			{
				silent: !0
			});
			var $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$ = this.model.get("ip") || {},
			$setIp$$ = $interfaces$$.set.get("ip") || {},
			$deleteIp$$ = $interfaces$$["delete"].get("ip") || {},
			$enableProxyArp$$ = this.$("input[name=enable-proxy-arp]").is(":checked");
			$enableProxyArp$$ && ("undefined" == typeof $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$["enable-proxy-arp"] ||
			!$id$$36_inputMtu$$1_ip$$12_poeFields_speed$$["enable-proxy-arp"]) ? ($setIp$$["enable-proxy-arp"] = !0, $interfaces$$.set.set({
				ip: $setIp$$
			},
			{
				silent: !0
			})) : !$enableProxyArp$$ && ("undefined" != typeof $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$["enable-proxy-arp"] && $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$["enable-proxy-arp"]) && ($deleteIp$$["enable-proxy-arp"] = !0, $interfaces$$["delete"].set({
				ip: $deleteIp$$
			},
			{
				silent: !0
			}));
			if (EDGE.Config.Features.poe && 0 < EDGE.Config.Features.poe_cap[this.model.get("id")]) if (this.setProperty(["poe",
			"output"], this.$("select[name=poe-output] option:selected").val(), $interfaces$$), $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$ = ["address", "failure-count", "interval", "off-delay", "start-delay"], this.$("input[name=poe-enable-watchdog]").is(":checked")) _.each($id$$36_inputMtu$$1_ip$$12_poeFields_speed$$,
			function($field$$) {
				this.setProperty(["poe", "watchdog", $field$$], this.$("input[name=poe-" + $field$$ + "]").val(), $interfaces$$)
			},
			this),
			this.setProperty(["poe", "watchdog", "disable"], !1, $interfaces$$, !0);
			else {
				var $noWatchdog$$ =
				!0;
				_.each($id$$36_inputMtu$$1_ip$$12_poeFields_speed$$,
				function($field$$) {
					this.$("input[name=poe-" + $field$$ + "]").val().length && ($noWatchdog$$ = false)
				},
				this);
				$noWatchdog$$ ? $interfaces$$["delete"].set({
					poe: {
						watchdog: null
					}
				},
				{
					silent: !0
				}) : this.setProperty(["poe", "watchdog", "disable"], !0, $interfaces$$, !0)
			}
			$id$$36_inputMtu$$1_ip$$12_poeFields_speed$$ = this.model.get("id");
			$batch$$.get("gget").put("interfaces", "ethernet", $id$$36_inputMtu$$1_ip$$12_poeFields_speed$$, null);
			return $interfaces$$
		}
	});
	EDGE.Views.Interfaces.Configs.Switch = EDGE.Views.Interfaces.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#InterfacesConfigSwitchTemplate").html());
			EDGE.Views.Interfaces.Config.prototype.initialize.call(this, $args$$)
		},
		update: function() {
			var $$form$$ = this.$("form");
			try {
				var $currentSwitchPorts$$ = this.model.get("switch-port")["interface"]
			} catch($e$$) {
				$currentSwitchPorts$$ = []
			}
			var $self$$ = this;
			$$form$$.find("input[name=switch-ports]").each(function() {
				var $$this$$ = $(this);
				$self$$.updateCheckbox($$this$$,
				-1 != $.inArray($$this$$.val(), $currentSwitchPorts$$), $$form$$.find("fieldset.switch-ports legend"))
			});
			this.updateCheckbox($$form$$.find("input[name=enable-proxy-arp]"), this.model.get("ip") && this.model.get("ip")["enable-proxy-arp"], $$form$$.find("label[for=" + $$form$$.find("input[name=enable-proxy-arp]").attr("id") + "]"));
			this.updateAddress();
			EDGE.Views.Interfaces.Config.prototype.update.call(this)
		},
		prepareSave: function($batch$$9_interfaces$$) {
			$batch$$9_interfaces$$ = EDGE.Views.Interfaces.Config.prototype.prepareSave.call(this,
			$batch$$9_interfaces$$);
			this.prepareSaveAddress($batch$$9_interfaces$$);
			var $ip$$ = this.model.get("ip") || {},
			$setIp$$ = $batch$$9_interfaces$$.set.get("ip") || {},
			$deleteIp$$ = $batch$$9_interfaces$$["delete"].get("ip") || {},
			$enableProxyArp$$ = this.$("input[name=enable-proxy-arp]").is(":checked"),
			$newSwitchPorts$$ = [];
			this.$("input[name=switch-ports]").each(function() {
				var $$this$$ = $(this);
				$$this$$.is(":checked") && $newSwitchPorts$$.push($$this$$.val())
			});
			try {
				var $currentSwitchPorts$$ = this.model.get("switch-port")["interface"]
			} catch($e$$) {
				$currentSwitchPorts$$ =
				[]
			}
			if (_.difference($newSwitchPorts$$, $currentSwitchPorts$$).length || _.difference($currentSwitchPorts$$, $newSwitchPorts$$).length) $batch$$9_interfaces$$["delete"].set({
				"switch-port": null
			},
			{
				silent: !0
			}),
			0 < $newSwitchPorts$$.length && $batch$$9_interfaces$$.set.set({
				"switch-port": {
					"interface": $newSwitchPorts$$
				}
			},
			{
				silent: !0
			});
			$enableProxyArp$$ && ("undefined" == typeof $ip$$["enable-proxy-arp"] || !$ip$$["enable-proxy-arp"]) ? ($setIp$$["enable-proxy-arp"] = !0, $batch$$9_interfaces$$.set.set({
				ip: $setIp$$
			},
			{
				silent: !0
			})) :
			!$enableProxyArp$$ && ("undefined" != typeof $ip$$["enable-proxy-arp"] && $ip$$["enable-proxy-arp"]) && ($deleteIp$$["enable-proxy-arp"] = !0, $batch$$9_interfaces$$["delete"].set({
				ip: $deleteIp$$
			},
			{
				silent: !0
			}));
			return $batch$$9_interfaces$$
		}
	});
	EDGE.Views.Interfaces.Configs.Bridge = EDGE.Views.Interfaces.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#InterfacesConfigBridgeTemplate").html());
			EDGE.Views.Interfaces.Config.prototype.initialize.call(this, $args$$)
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=priority]"), this.model.get("priority"), $$form$$.find("label[for=" + $$form$$.find("input[name=priority]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=forwarding-delay]"),
			this.model.get("forwarding-delay"), $$form$$.find("label[for=" + $$form$$.find("input[name=forwarding-delay]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=hello-time]"), this.model.get("hello-time"), $$form$$.find("label[for=" + $$form$$.find("input[name=hello-time]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=max-age]"), this.model.get("max-age"), $$form$$.find("label[for=" + $$form$$.find("input[name=max-age]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=stp]"),
			this.model.get("stp"), $$form$$.find("label[for=" + $$form$$.find("input[name=stp]").attr("id") + "]"));
			var $$bridged$$ = $$form$$.find("ul.bridged.template");
			if ($$bridged$$.length) {
				$$bridged$$.empty();
				var $id$$ = this.model.get("id"),
				$interfaces$$ = this.interfaces,
				$readonly$$ = this.readonly;
				$interfaces$$ && _.each(["ethernet", "switch"],
				function($itype$$) {
					var $s$$ = EDGE.Config.Features["switch"];
					$interfaces$$.filterByType($itype$$).each(function($bridge_group_iface$$) {
						var $$checkbox$$ = $bridge_group_iface$$.get("id");
						"ethernet" == $itype$$ && ($s$$ && $s$$.ports) && 0 <= _.indexOf($s$$.ports, $$checkbox$$) || ($readonly$$ ? ($bridge_group_iface$$ = $bridge_group_iface$$.get("bridge-group")) && ("undefined" != typeof $bridge_group_iface$$.bridge && $bridge_group_iface$$.bridge == $id$$) && $$bridged$$.append($("<li>" + $$checkbox$$ + "</li>")) : ($$checkbox$$ = $((new EDGE.Views.Interfaces.InlineCheckbox).html("bridged", $$checkbox$$)), $bridge_group_iface$$ = ($bridge_group_iface$$ = $bridge_group_iface$$.get("bridge-group")) && "undefined" != typeof $bridge_group_iface$$.bridge ?
						$bridge_group_iface$$.bridge: null, $$checkbox$$.find("input[type=checkbox]").attr("checked", $bridge_group_iface$$ && $bridge_group_iface$$ == $id$$), $$bridged$$.append($$checkbox$$)))
					})
				})
			}
			this.updateAddress();
			EDGE.Views.Interfaces.Config.prototype.update.call(this)
		},
		prepareSave: function($batch$$) {
			var $interfaces$$ = EDGE.Views.Interfaces.Config.prototype.prepareSave.call(this, $batch$$);
			this.prepareSaveAddress($interfaces$$);
			var $self$$ = this;
			if (this.$("input:checkbox[name=delete]").prop("checked")) return $batch$$.unset("set"),
			$batch$$.unset("delete"),
			$batch$$.get("gdelete").put("interfaces", "bridge", $self$$.model.get("id"), null),
			this.dialog.addClass("saving"),
			this.intfs_obj.disableActions(),
			$batch$$.save(["interfaces"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.flagErrors();
					$self$$.remove();
					$resp$$.DELETE && ($resp$$.DELETE.success && !($resp$$.COMMIT && 1 == $resp$$.COMMIT.failure)) && $self$$.intfs_obj.collection.remove($self$$.model.get("id"))
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.intfs_obj.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}),
			$interfaces$$;
			this.setProperty("priority", this.$("input[name=priority]").val(), $interfaces$$);
			this.setProperty("forwarding-delay", this.$("input[name=forwarding-delay]").val(), $interfaces$$);
			this.setProperty("hello-time", this.$("input[name=hello-time]").val(), $interfaces$$);
			this.setProperty("max-age", this.$("input[name=max-age]").val(), $interfaces$$);
			this.setProperty("stp", this.$("input[name=stp]").is(":checked"), $interfaces$$);
			var $bridgeOld$$ = [],
			$bridgeNew$$ = [],
			$bridgeAdd$$,
			$bridgeDelete$$;
			_.each(this.interfaces.filterByBridgeGroup(this.model.get("id")),
			function($iface$$) {
				$bridgeOld$$.push($iface$$.get("id"))
			});
			this.$("input[name=bridged]:checked").each(function() {
				$bridgeNew$$.push($(this).val())
			});
			$bridgeAdd$$ = _.difference($bridgeNew$$, $bridgeOld$$);
			$bridgeDelete$$ = _.difference($bridgeOld$$, $bridgeNew$$);
			$bridgeAdd$$.length && _.each($bridgeAdd$$,
			function($id$$38_model$$) {
				var $itype$$ = 0 > $id$$38_model$$.indexOf("switch") ? "ethernet": "switch",
				$collection$$ = $batch$$.get("set").get("interfaces"),
				$id$$38_model$$ = $collection$$.modelize({
					id: $id$$38_model$$,
					type: $itype$$
				}).clear().set({
					"bridge-group": {
						bridge: this.model.get("id")
					}
				},
				{
					silent: !0
				});
				$collection$$.add($id$$38_model$$, {
					silent: !0
				})
			},
			this);
			$bridgeDelete$$.length && _.each($bridgeDelete$$,
			function($id$$39_model$$) {
				var $itype$$ = 0 > $id$$39_model$$.indexOf("switch") ? "ethernet": "switch",
				$collection$$ =
				$batch$$.get("delete").get("interfaces"),
				$id$$39_model$$ = $collection$$.modelize({
					id: $id$$39_model$$,
					type: $itype$$
				}).clear().set({
					"bridge-group": null
				},
				{
					silent: !0
				});
				$collection$$.add($id$$39_model$$, {
					silent: !0
				})
			},
			this);
			return $interfaces$$
		}
	});
	EDGE.Views.Interfaces.Configs.Vlan = EDGE.Views.Interfaces.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#InterfacesConfigVlanTemplate").html());
			EDGE.Views.Interfaces.Config.prototype.initialize.call(this, $args$$)
		},
		isBr: function($model$$) {
			return $model$$.get("parent").match(/(br)[0-9]+/)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$6_res$$) {
					$form = $($form$$6_res$$);
					$form$$6_res$$ = $self$$.validateAddrs($form$$6_res$$);
					if ($form$$6_res$$[0]) {
						var $valid$$ =
						!0,
						$msg$$,
						$parent$$ = $self$$.model.get("parent"),
						$newVif$$ = $self$$.model.get("vif");
						if (!$self$$.isBr($self$$.model)) {
							var $newVifMtu$$ = $form.find("input[name=mtu]").val();
							$newVifMtu$$ || ($newVifMtu$$ = 1500)
						}
						$self$$.intfs_obj && $self$$.intfs_obj.collection.each(function($iface$$) {
							if ($valid$$) {
								if (!$self$$.isBr($self$$.model) && $iface$$.id == $parent$$) {
									var $parentMtu$$ = $iface$$.get("mtu");
									$parentMtu$$ || ($parentMtu$$ = "switch" == $iface$$.get("type") ? 9E3: 1500);
									if ($newVifMtu$$ > +$parentMtu$$) {
										$msg$$ = "Error: vlan " +
										$newVif$$ + " mtu must be less than or equal to " + $parent$$ + " mtu of " + $parentMtu$$;
										$valid$$ = !1;
										return
									}
								}
								if ($iface$$.get("pppoe") && $iface$$.get("parent") == $self$$.model.id && (childMtu = $iface$$.get("mtu")) && $newVifMtu$$ < +childMtu + 8) $msg$$ = "Error: vlan " + $newVif$$ + " mtu must be greater than or equal to " + ( + childMtu + 8) + " (mtu of pppoe" + $iface$$.get("pppoe") + " + 8)",
								$valid$$ = !1
							}
						});
						$valid$$ || $(window).trigger("dialog", [$msg$$, "Validation error"]);
						$valid$$ && $self$$.save()
					} else $(window).trigger("dialog", [$form$$6_res$$[1],
					"Validation error"])
				},
				rules: {
					description: {
						maxlength: 100,
						noQuotes: !0
					},
					ips: {
						ipv4OrIpv6Net: !0
					},
					mtu: {
						range: [68, 9E3]
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Interfaces.Config.prototype.render.call(this, !0);
			var $$parent$$ = this.$("form").find("select[name=parent]");
			$$parent$$.empty();
			this.model.collection.filterByType("ethernet").each(function($iface$$) {
				$$parent$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
			});
			this.delegateEvents();
			this.flaggable = !1;
			this.update();
			this.flaggable =
			!0
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.isBr(this.model) ? $$form$$.find("fieldset.mtu").hide() : ($$form$$.find("fieldset.mtu").show(), this.updateTextbox($$form$$.find("input[name=mtu]"), this.model.get("mtu") ? this.model.get("mtu") : "1500", $$form$$.find("label[for=" + $$form$$.find("input[name=mtu]").attr("id") + "]")), this.updateCheckbox($$form$$.find("input[name=enable-proxy-arp]"), this.model.get("ip") && this.model.get("ip")["enable-proxy-arp"], $$form$$.find("label[for=" + $$form$$.find("input[name=enable-proxy-arp]").attr("id") +
			"]")));
			this.updateAddress();
			EDGE.Views.Interfaces.Config.prototype.update.call(this)
		},
		templateVars: function() {
			return {
				vif: this.model.get("vif"),
				parent: this.model.get("parent")
			}
		},
		prepareSave: function($batch$$11_inputMtu$$2_ip$$) {
			$batch$$11_inputMtu$$2_ip$$.get("gget").put("interfaces", null);
			var $interfaces$$ = EDGE.Views.Interfaces.Config.prototype.prepareSave.call(this, $batch$$11_inputMtu$$2_ip$$);
			this.prepareSaveAddress($interfaces$$); ($batch$$11_inputMtu$$2_ip$$ = this.$("input[name=mtu]").val()) && 1500 !=
			$batch$$11_inputMtu$$2_ip$$ ? this.setProperty("mtu", $batch$$11_inputMtu$$2_ip$$, $interfaces$$) : this.isBr(this.model) || $interfaces$$["delete"].set({
				mtu: null
			},
			{
				silent: !0
			});
			var $batch$$11_inputMtu$$2_ip$$ = this.model.get("ip") || {},
			$setIp$$ = $interfaces$$.set.get("ip") || {},
			$deleteIp$$ = $interfaces$$["delete"].get("ip") || {},
			$enableProxyArp$$ = this.$("input[name=enable-proxy-arp]").is(":checked");
			$enableProxyArp$$ && ("undefined" == typeof $batch$$11_inputMtu$$2_ip$$["enable-proxy-arp"] || !$batch$$11_inputMtu$$2_ip$$["enable-proxy-arp"]) ?
			($setIp$$["enable-proxy-arp"] = !0, $interfaces$$.set.set({
				ip: $setIp$$
			},
			{
				silent: !0
			})) : !$enableProxyArp$$ && ("undefined" != typeof $batch$$11_inputMtu$$2_ip$$["enable-proxy-arp"] && $batch$$11_inputMtu$$2_ip$$["enable-proxy-arp"]) && ($deleteIp$$["enable-proxy-arp"] = !0, $interfaces$$["delete"].set({
				ip: $deleteIp$$
			},
			{
				silent: !0
			}));
			_.each(["set", "delete"],
			function($type$$) {
				$interfaces$$[$type$$].hasChanged() && $interfaces$$[$type$$].set({
					parent: this.model.get("parent"),
					vif: this.model.get("vif")
				},
				{
					silent: true
				})
			},
			this);
			return $interfaces$$
		}
	});
	EDGE.Views.Interfaces.Configs.Loopback = EDGE.Views.Interfaces.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#InterfacesConfigLoopbackTemplate").html());
			EDGE.Views.Interfaces.Config.prototype.initialize.call(this, $args$$)
		}
	});
	EDGE.Views.Interfaces.Configs.Pppoe = EDGE.Views.Interfaces.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#InterfacesConfigPppoeTemplate").html());
			EDGE.Views.Interfaces.Config.prototype.initialize.call(this, $args$$);
			this.row = $args$$.row;
			this.interfaces = this.row.interfaces
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$8_valid$$) {
					$form = $($form$$8_valid$$);
					var $form$$8_valid$$ = !0,
					$parent$$13_parentMtu$$ = $self$$.interfaces.filterById($self$$.model.get("parent")),
					$parent$$13_parentMtu$$ = $parent$$13_parentMtu$$.get("mtu") || $parent$$13_parentMtu$$.get("stats").get("mtu"),
					$mtu$$ = $form.find("input[name=mtu]").val();
					1508 < +$parent$$13_parentMtu$$ ? ($parent$$13_parentMtu$$ = 1508, 1500 < +$mtu$$ && ($form$$8_valid$$ = !1)) : +$mtu$$ > +$parent$$13_parentMtu$$ - 8 && ($form$$8_valid$$ = !1);
					$form$$8_valid$$ ? $self$$.save() : (msg = "Error: pppoe " + $self$$.model.id + " mtu should be less than or equal to " + ( + $parent$$13_parentMtu$$ - 8) + " (parent " + $self$$.model.get("parent") + " mtu - 8)", $(window).trigger("dialog",
					[msg, "Validation error"]))
				},
				rules: {
					mtu: {
						range: [68, 9E3]
					},
					user: {
						required: !0
					},
					password: {
						required: !0
					}
				}
			}
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$addresses$$ = $$form$$.find("ul.address");
			$($addresses$$).empty();
			_.each(this.model.get("stats").get("ips"),
			function($addr$$) {
				$($addresses$$).append("<li>" + $addr$$ + "</li>")
			});
			this.updateTextbox($$form$$.find("input[name=user]"), this.model.get("user-id") ? this.model.get("user-id") : "", $$form$$.find("label[for=" + $$form$$.find("input[name=user]").attr("id") +
			"]"));
			this.updateTextbox($$form$$.find("input[name=password]"), this.model.get("password") ? this.model.get("password") : "", $$form$$.find("label[for=" + $$form$$.find("input[name=password]").attr("id") + "]"));
			$$form$$.find(":checkbox[name=showpw]").click(function() {
				$this = $(this);
				$prev = $this.siblings("input[name=password]");
				$this.is(":checked") ? $prev.prop("type", "text") : $prev.prop("type", "password")
			});
			this.updateTextbox($$form$$.find("input[name=mtu]"), this.model.get("mtu") ? this.model.get("mtu") : "", $$form$$.find("label[for=" +
			$$form$$.find("input[name=mtu]").attr("id") + "]"))
		},
		prepareSave: function($batch$$12_inputMtu$$) {
			this.prepareData = this.row.data();
			$batch$$12_inputMtu$$.get("gget").put("interfaces", null);
			var $interfaces$$ = EDGE.Views.Interfaces.Config.prototype.prepareSave.call(this, $batch$$12_inputMtu$$); ($batch$$12_inputMtu$$ = this.$("input[name=mtu]").val()) ? this.setProperty("mtu", $batch$$12_inputMtu$$, $interfaces$$) : $interfaces$$["delete"].set({
				mtu: null
			},
			{
				silent: !0
			});
			this.setProperty("user-id", this.$("input[name=user]").val(),
			$interfaces$$);
			this.setProperty("password", this.$("input[name=password]").val(), $interfaces$$);
			_.each(["set", "delete"],
			function($type$$) {
				$interfaces$$[$type$$].hasChanged() && $interfaces$$[$type$$].set({
					parent: this.model.get("parent"),
					pppoe: this.model.get("pppoe")
				},
				{
					silent: !0
				})
			},
			this);
			return $interfaces$$
		},
		response: function($resp$$) {
			EDGE.Views.Interfaces.Config.prototype.response.call(this, $resp$$);
			this.row.model.get("stats").clearPppoeStats();
			this.row.model.trigger("change")
		},
		templateVars: function() {
			return {
				parent: this.model.get("parent")
			}
		}
	});
	EDGE.Views.Interfaces.AddDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Interfaces.AddDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#InterfacesAddDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.table = $args$$.table;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .add-vlan": "addVlan",
				"click .add-pppoe": "addPppoe"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			this.$el.children(".add-list");
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		addVlan: function() {
			this.table.create("vlan")
		},
		addPppoe: function() {
			this.table.create("pppoe")
		}
	});
	EDGE.Views.Interfaces.DropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Interfaces.DropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#InterfacesDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			this.type = this.row.model.get("type");
			this.vlan = "vlan" === this.type;
			this.pppoe = "pppoe" === this.type;
			this.poe = "ethernet" == this.type && EDGE.Config.Features.poe;
			this.is_switch = "switch" === this.type;
			this.is_supported = _.contains(EDGE.Config.Interfaces.supported, this.type);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			var $events$$ = {};
			return $events$$ = this.vlan ? {
				"click .action-config": "actionConfig",
				"click .action-status": "actionStatus",
				"click .action-delete": "actionDelete"
			}: this.pppoe ? {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}: this.poe ? {
				"click .action-config": "actionConfig",
				"click .action-poe": "actionPoe",
				"click .action-status": "actionStatus"
			}: {
				"click .action-config": "actionConfig",
				"click .action-status": "actionStatus"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			var $$acts$$ = this.$el.children(".action-list");
			$$acts$$.find(".action-status").html(this.row.model.get("disable") ? "Enable": "Disable"); ! this.vlan && !this.pppoe && $$acts$$.find(".action-delete").parent().remove();
			this.poe || $$acts$$.find(".action-poe").parent().remove(); (this.is_switch ||
			this.pppoe) && $$acts$$.find(".action-status").parent().remove();
			this.is_supported || $$acts$$.find(".action-config").parent().remove();
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionConfig: function() {
			this.row.config(!1, 0);
			return ! 1
		},
		actionStatus: function() {
			var $row$$ = this.row,
			$id$$ = $row$$.model.get("id"),
			$self$$ = this;
			$row$$.model.get("disable") ? $self$$.toggle() : window.app.dialogs.confirmationDialog.open({
				title: ($row$$.model.get("disable") ? "Enable": "Disable") +
				" Confirmation",
				message: "Are you sure you want to " + ($row$$.model.get("disable") ? "enable": "disable") + " interface " + $id$$ + " ?",
				confirm: function() {
					$self$$.toggle()
				}
			});
			return ! 1
		},
		actionPoe: function() {
			this.row.config(!1, 1);
			return ! 1
		},
		actionDelete: function() {
			var $self$$ = this.row;
			$self$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			var $id$$ = $self$$.model.get("id"),
			$type$$ = $self$$.model.get("type");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete VLAN Confirmation",
				message: "Are you sure you want to delete " + $type$$ + " " + $id$$ + " ?",
				confirm: $self$$["delete"],
				deny: function() {
					$self$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		toggle: function() {
			var $self$$ = this.row;
			$self$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$self$$.intfs_obj.disableActions();
			$(this);
			var $id$$ = $self$$.model.get("id"),
			$type$$ = $self$$.model.get("type"),
			$changed$$ = new EDGE.Models.App,
			$iface$$ = $changed$$.get("interfaces").add({
				id: $id$$,
				type: $type$$
			}).last().clear(),
			$options$$ = {
				success: function($model$$, $resp$$) {
					UBNT.Logger.debug("RESPONSE");
					UBNT.Logger.debug($resp$$);
					var $r$$ = new EDGE.Models.Response($resp$$);
					$r$$.results.COMMIT ? $self$$.model.set({
						disable: $model$$.get("interfaces").filterByTypeAndId($type$$, $id$$).get("disable")
					}) : $r$$.notices.each(function($a$$51_n$$) {
						$a$$51_n$$ = [$a$$51_n$$, !1];
						$(window).trigger("notify", $a$$51_n$$)
					})
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.$el.find(".drop-down-button button").button("hideWorkingIndicator");
					$self$$.$el.find(".action-list").find(".action-status").html($self$$.model.get("disable") ? "Enable": "Disable");
					$self$$.intfs_obj.enableActions()
				}
			};
			$self$$.model.get("disable") ? ($iface$$.set({
				disable: !0
			},
			{
				silent: !0
			}), $changed$$["delete"](["interfaces"], $options$$)) : ($iface$$.set({
				disable: !0
			},
			{
				silent: !0
			}), $changed$$.save(["interfaces"], $options$$))
		}
	});
	EDGE.Views.Interfaces.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Interfaces.Row",
		initialize: function($args$$) {
			this.specialColumns = [8];
			this.interfaces = $args$$.interfaces;
			this.intfs_obj = $args$$.intfs_obj;
			this.model.bind("change:disable", this.renderDisabled, this);
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			var $ips$$ = "pppoe" == this.model.get("type") || "openvpn" == this.model.get("type") || this.model.get("dhcp") ? this.model.get("stats").get("ips") :
			this.model.get("ips"),
			$rx$$ = this.model.get("stats").get("rx").bps,
			$tx$$ = this.model.get("stats").get("tx").bps,
			$mtu$$ = this.model.get("mtu") || this.model.get("stats").get("mtu"),
			$status$$ = this.model.get("stats").get("status"),
			$poe$$2_poeOutput$$ = this.model.get("poe"),
			$poe$$2_poeOutput$$ = !_.isUndefined($poe$$2_poeOutput$$) && 0 < EDGE.Config.Features.poe_cap[this.model.get("id")] ? $poe$$2_poeOutput$$.output ? $poe$$2_poeOutput$$.output: "off": "",
			$tx$$ = $tx$$ ? EDGE.getNumWithUnit(8 * $tx$$, "bps") : null,
			$rx$$ = $rx$$ ?
			EDGE.getNumWithUnit(8 * $rx$$, "bps") : null;
			return [this.model.get("description") ? $.xss(this.model.get("description")) : this.model.get("id"), this.model.get("id"), this.model.get("type"), $poe$$2_poeOutput$$, ($ips$$ && $ips$$.length ? $ips$$[0] : "") + (this.model.get("dhcp") ? " (dhcp)": ""), $mtu$$, $tx$$, $rx$$, $status$$, ""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$2_ips$$ = "pppoe" == this.model.get("type") || "openvpn" == this.model.get("type") || this.model.get("dhcp") ? this.model.get("stats").get("ips") : this.model.get("ips");
			this.ips ? this.ips.update($$buttons$$2_ips$$ ? $$buttons$$2_ips$$: []) : this.ips = new EDGE.Views.Interfaces.IpList({
				model: this.model,
				ips: $$buttons$$2_ips$$ ? $$buttons$$2_ips$$: [],
				el: this.$(".ip")
			});
			$$buttons$$2_ips$$ = this.$(".buttons");
			$$buttons$$2_ips$$.find(".action-status").html(this.model.get("disable") ? "Enable": "Disable");
			$$buttons$$2_ips$$.find("button").length || ("operator" == EDGE.Config.User.level ? $$buttons$$2_ips$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Interfaces.DropDownButton({
				container: this.$(".buttons"),
				row: this
			}), 0 < this.intfs_obj.$table.data("open-dialog-counter") && (this.$actions.disableAction("delete"), this.$actions.disableAction("status"))));
			this.$el.removeClass("connected disconnected error").addClass(this.model.get("stats").get("status"));
			this.renderDisabled(this.model.get("disable"));
			this.trigger("render");
			return this
		},
		config: function($readonly$$,
		$activeTab$$) {
			if (this.dialogs.config) this.dialogs.config.show(!0);
			else switch (this.model.get("type")) {
			case "ethernet":
				this.dialogs.config = new EDGE.Views.Interfaces.Configs.Ethernet({
					interfaces: this.interfaces,
					model: this.model,
					intfs_obj: this.intfs_obj,
					readonly: $readonly$$
				});
				break;
			case "bridge":
				this.dialogs.config = new EDGE.Views.Interfaces.Configs.Bridge({
					interfaces: this.interfaces,
					model: this.model,
					intfs_obj: this.intfs_obj,
					readonly: $readonly$$
				});
				break;
			case "vlan":
				this.dialogs.config = new EDGE.Views.Interfaces.Configs.Vlan({
					interfaces: this.interfaces,
					model: this.model,
					intfs_obj: this.intfs_obj,
					readonly: $readonly$$
				});
				break;
			case "loopback":
				this.dialogs.config = new EDGE.Views.Interfaces.Configs.Loopback({
					interfaces: this.interfaces,
					model: this.model,
					intfs_obj: this.intfs_obj,
					readonly: $readonly$$
				});
				break;
			case "switch":
				this.dialogs.config = new EDGE.Views.Interfaces.Configs.Switch ({
					interfaces: this.interfaces,
					model: this.model,
					intfs_obj: this.intfs_obj,
					readonly: $readonly$$
				});
				break;
			case "pppoe":
				this.dialogs.config = new EDGE.Views.Interfaces.Configs.Pppoe({
					model: this.model,
					intfs_obj: this.intfs_obj,
					readonly: $readonly$$,
					row: this
				});
				break;
			default:
				this.dialogs.config = new EDGE.Views.Interfaces.Config({
					interfaces: this.interfaces,
					model: this.model,
					intfs_obj: this.intfs_obj,
					readonly: $readonly$$
				})
			}
			$(this.dialogs.config.$("div.dialog-tabs").tabslite("tabs")[$activeTab$$ || 0]).trigger("click")
		},
		"delete": function() {
			this.intfs_obj.delete_intf(this.model)
		},
		reset: function() {
			this.$(".ips").remove("span");
			EDGE.Views.Global.Abstract.Row.prototype.reset.call(this)
		}
	});
	EDGE.Views.Interfaces.IpList = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.ips = $args$$.ips;
			this.template = _.template($("#InterfaceIpListTemplate").html());
			this.model = $args$$.model;
			this.render()
		},
		render: function() {
			this.$el.empty().append($(this.template({
				ips: this.ips.join("<br/>")
			})));
			var $$toggle$$ = this.$el.find(".expand-collapse-toggle");
			if (4 < this.ips.length) {
				var $modelId$$ = this.model.id,
				$isCollapsed$$ = UBNT.Utils.Cookies.get("EDGE.Interfaces.IsCollapsed." + $modelId$$),
				$$ipList$$ =
				this.$el.find(".ip-list");
				"yes" == $isCollapsed$$ && ($$toggle$$.html("see all"), $$ipList$$.hide());
				$$toggle$$.click(function() {
					if ($$ipList$$.is(":visible")) {
						$$ipList$$.hide();
						$$toggle$$.html("see all");
						UBNT.Utils.Cookies.set("EDGE.Interfaces.IsCollapsed." + $modelId$$, "yes", 365)
					} else {
						$$ipList$$.show();
						$$toggle$$.html("see less");
						UBNT.Utils.Cookies.set("EDGE.Interfaces.IsCollapsed." + $modelId$$, "no", 365)
					}
				})
			} else $$toggle$$.hide();
			return this
		},
		update: function($ips$$) {
			this.ips = $ips$$;
			this.render()
		}
	});
	EDGE.Views.Interfaces.InlineCheckbox = Backbone.View.extend({
		initialize: function() {
			this.template = _.template($("#InterfaceInlineCheckboxTemplate").html())
		},
		html: function($name$$, $value$$, $text$$) {
			$value$$ = $value$$ || $name$$;
			return this.template({
				name: $name$$,
				value: $value$$,
				text: $text$$ || $value$$
			})
		}
	});
	EDGE.Routers.Routing = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Routing",
		routes: {
			Routing: "index",
			"Routing/Static": "staticRoutes",
			"Routing/Static/filter/:filter": "staticRoutes",
			"Routing/Dynamic": "dynamicProtocols",
			"Routing*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize routing router");
			if ("object" != typeof EDGE.Views.Routing) throw "Missing routing views";
			this.app = $data$$.app;
			this.views = {};
			this.views._container = new EDGE.Views.Routing.Container
		},
		showTab: function($subtab$$) {
			var $$tab$$ =
			$("li#NavRouting");
			$$tab$$.hasClass("ui-state-active") || ($$tab$$.find("a").trigger("click"), null != $subtab$$ && this.views._container.$(".section-tabs").tabslite("show", $subtab$$))
		},
		index: function() {
			this.debug("forwarding to the static routing page");
			this.navigate("Routing/Static", !0);
			this.views._container.$(".section-tabs").tabslite("show", 0)
		},
		staticRoutes: function($filter$$) {
			this.showTab(0);
			this.views["static"] ? this.views["static"].render() : this.views["static"] = new EDGE.Views.Routing.Static.Default ({
				collection: this.app.data.view.get("routes"),
				interfaces: this.app.data.view.get("interfaces")
			});
			this.views["static"] && this.views["static"].filter($filter$$ ? $filter$$: "all")
		},
		dynamicProtocols: function() {
			this.showTab(1);
			this.views.dynamic ? this.views.dynamic.render() : this.views.dynamic = new EDGE.Views.Routing.Dynamic.Default ({
				model: this.app.data.view.get("routes").filterByRouteType("ospf-cfg").first(),
				collection: this.app.data.view.get("interfaces")
			})
		}
	});
	EDGE.Views.Routing = EDGE.Views.Routing || {};
	EDGE.Views.Routing.Static = {};
	EDGE.Views.Routing.Dynamic = {};
	EDGE.Views.Routing.Container = Backbone.View.extend({
		initialize: function() {
			this.setElement($("#Routing"));
			this.render()
		},
		render: function() {
			this.$el.data("rendered") || (this.$(".section-tabs").tabslite({
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$5_anchor$$) {
						var $$anchor$$5_anchor$$ = $($$anchor$$5_anchor$$),
						$location$$ = window.location.hash,
						$filtered$$ = $location$$.indexOf("/filter/"); - 1 != $filtered$$ && ($location$$ = $location$$.substring(0, $filtered$$));
						$$anchor$$5_anchor$$.attr("href") ==
						$location$$ && $$anchor$$5_anchor$$.trigger("show")
					})
				},
				content: function($$anchor$$) {
					return $("#" + $$anchor$$.data("container"))
				}
			}), this.$el.data("rendered", !0));
			return this
		},
		reset: function() {
			this.debug("resetting routing container");
			this.$el.data("rendered", !1)
		}
	});
	EDGE.Views.Routing.Static.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Routing.Static.Default",
		initialize: function($args$$) {
			this.debug("initialize()");
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.interfaces = $args$$.interfaces;
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.creates = [];
			this.setElement($("#Routing .section-container #RoutingStatic"));
			this.template =
			_.template($("#RoutingStaticTemplate").html());
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$filters = this.$("#RoutingStaticRouteFilters").tabslite();
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No routes available.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "id",
						bVisible: !1
					},
					{
						sClass: "selected"
					},
					{
						sClass: "description"
					},
					{
						sClass: "destination",
						sType: "ipv4-address"
					},
					{
						sClass: "next",
						sType: "ipv4-address"
					},
					{
						sClass: "interface"
					},
					{
						sClass: "type"
					},
					{
						sClass: "fib"
					},
					{
						sClass: "buttons",
						bSortable: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[2, "asc"], [3, "asc"]],
					sScrollY: 1,
					bScrollCollapse: !0,
					sDom: '<"H"fr>t<"F"ip>'
				},
				this.options.options || {}));
				if ("admin" ==
				EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			this.collection.loadData(this);
			return this
		},
		filter: function($filter$$) {
			this.$filters.find("li." + $filter$$ + " a").trigger("show");
			this.dataTable.fnFilter("all" == $filter$$ ? "": $filter$$, 6)
		},
		add: function($route$$) {
			if ("ospf-cfg" != $route$$.get("rtype")) {
				this.rows[$route$$.cid] =
				new EDGE.Views.Routing.Static.Row({
					model: $route$$,
					collection: this.collection,
					robj: this,
					dataTable: this.dataTable
				});
				var $self$$ = this;
				this.lazyResize();
				this.rows[$route$$.cid].bind("render",
				function() {
					this.unbind("render");
					$self$$.lazyResize()
				})
			}
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ?
				this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.dataTable.fnDraw();
				$settings$$.oScroll.sY = this.$table.parents(".main-section").height() - this.$table.parents(".main-section").find(".section-tabs").height() - this.$table.parents(".table-container").height();
				this.dataTable.fnDraw()
			}
		},
		create: function() {
			this.creates.push(new EDGE.Views.Routing.Static.Create({
				id: this.creates.length,
				robj: this,
				collection: this.collection,
				interfaces: this.interfaces
			}))
		},
		remove: function($id$$43_route$$) {
			if (this.dataTable) {
				var $id$$43_route$$ = $id$$43_route$$.cid,
				$row$$ = this.rows[$id$$43_route$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$id$$43_route$$], this.lazyResize())
			}
		},
		reset: function($soft$$) {
			this.debug("resetting routing static routes");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		clear_all: function() {
			this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset()
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$table.data("open-dialog-counter") ? 0: this.$table.data("open-dialog-counter") - 1;
			this.$table.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && (this.$actions.enableAction("delete"),
				this.$actions.enableAction("status"))
			})
		},
		enableRestrictions: function() {
			var $counter$$ = this.$table.data("open-dialog-counter") ? this.$table.data("open-dialog-counter") + 1: 1;
			this.$table.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && (this.$actions.disableAction("delete"), this.$actions.disableAction("status"))
			})
		},
		enableActions: function() {
			$("#RoutingStatic .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".route-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = $("#RoutingStaticRouteAdd button");
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$("#RoutingStatic .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".route-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$ = $("#RoutingStaticRouteAdd button"); ! 1 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Routing.Static.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Routing.Static.Row",
		initialize: function($args$$) {
			_.bindAll(this);
			this.specialColumns = [6];
			this.robj = $args$$.robj;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			var $nh$$ = this.model.get("nexthop").ip || ""; ! $nh$$ && "blackhole" === this.model.get("type") && ($nh$$ = "blackhole");
			return [this.model.generateId(), this.model.get("selected") ? "Yes": "No", $.xss(this.model.get("nexthop").description) ||
			"", this.model.get("destination"), $nh$$, this.model.get("nexthop")["interface"] || "", this.model.get("rtype"), this.model.get("fib") ? "Yes": "No", ""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ = this.$(".buttons"); ! $$buttons$$.find("button").length && ("static" == this.model.get("rtype").toLowerCase() && this.model.in_cfg) && ("operator" == EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) :
			(this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Routing.Static.DropDownButton({
				container: this.$(".buttons"),
				row: this
			})));
			0 < this.robj.$table.data("open-dialog-counter") && this.$actions && (this.$actions.disableAction("delete"), this.$actions.disableAction("status"));
			this.renderDisabled(this.model.get("nexthop").disable);
			this.trigger("render");
			return this
		},
		config: function($readonly$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Routing.Static.Config({
				model: this.model,
				readonly: $readonly$$,
				robj: this.robj
			})
		},
		disable: function() {
			this.robj.disableActions();
			var $batch$$ = new EDGE.Models.Batch,
			$model$$0$$ = this.model.clone(),
			$nexthop$$ = _.clone($model$$0$$.get("nexthop")),
			$isDisabled$$ = $nexthop$$.disable,
			$self$$ = this;
			$model$$0$$.set({
				nexthop: {
					ip: $nexthop$$.ip || null,
					"interface": $nexthop$$["interface"] || null,
					disable: !0
				}
			},
			{
				silent: !0
			});
			$isDisabled$$ ? ($batch$$.get("delete").get("routes").add($model$$0$$, {
				silent: !0
			}), $batch$$.unset("set")) : ($batch$$.get("set").get("routes").add($model$$0$$,
			{
				silent: !0
			}), $batch$$.unset("delete"));
			$batch$$.unset("get");
			$batch$$.get("gget").put("protocols", null);
			$self$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["routes"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.robj.enableActions();
					$self$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		"delete": function() {
			this.debug("delete()");
			this.robj.disableActions();
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.unset("get");
			$batch$$.unset("generic");
			$batch$$.unset("gset");
			$batch$$.get("gget").put("protocols", null);
			var $gdel$$ = $batch$$.get("gdelete"),
			$type$$ = this.model.get("type"),
			$dest$$ = this.model.get("destination"),
			$nh$$ = this.model.get("nexthop"),
			$p$$ = ["protocols", "static"],
			$rp$$ = [],
			$num$$ = {},
			$r_c$$ = this.collection;
			_.each(["gateway", "blackhole",
			"interface"],
			function($t$$) {
				$num$$[$t$$] = $r_c$$.filterCfgStaticByTypeDestAll($t$$, $dest$$).length
			});
			var $n_r$$ = $num$$.gateway + $num$$.blackhole,
			$n_i$$ = $num$$["interface"];
			switch ($type$$) {
			case "gateway":
				$rp$$ = 1 < $n_r$$ ? [$p$$, "route", $dest$$, "next-hop", $nh$$.ip] : [$p$$, "route", $dest$$];
				break;
			case "blackhole":
				$rp$$ = 1 < $n_r$$ ? [$p$$, "route", $dest$$, "blackhole"] : [$p$$, "route", $dest$$];
				break;
			case "interface":
				$rp$$ = 1 < $n_i$$ ? [$p$$, "interface-route", $dest$$, "next-hop-interface", $nh$$["interface"]] : [$p$$, "interface-route",
				$dest$$]
			}
			$gdel$$.put($rp$$, null);
			var $self$$ = this;
			$self$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["routes"], {
				success: function($model$$, $resp$$) {
					$resp$$.DELETE && $resp$$.DELETE.success && !($resp$$.COMMIT && 1 == $resp$$.COMMIT.failure) ? $self$$.collection.remove($self$$.model) : $self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.$el.find(".drop-down-button button").button("hideWorkingIndicator");
					$self$$.robj.enableActions();
					$self$$.reset()
				}
			})
		},
		response: function($p$$15_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $p$$15_resp$$); ($p$$15_resp$$ = EDGE.getObjProp($p$$15_resp$$, ["GET", "protocols"])) ? (this.robj.clear_all(), this.collection["import"]($p$$15_resp$$), this.collection.loadData(this.robj)) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		}
	});
	EDGE.Views.Routing.Static.DropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Routing.Static.DropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#RoutingStaticDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			var $events$$ = {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			};
			"blackhole" !== this.row.model.get("type") && ($events$$ = _.extend($events$$, {
				"click .action-status": "actionStatus"
			}));
			return $events$$
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			var $$actionList$$ = this.$el.children(".action-list");
			"blackhole" === this.row.model.get("type") ? $$actionList$$.find(".action-status").parent().remove() : $$actionList$$.find(".action-status").html(this.row.model.get("nexthop").disable ? "Enable": "Disable");
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionDelete: function() {
			var $row$$ = this.row,
			$dest$$ = $row$$.model.get("destination");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Static Route Confirmation",
				message: "Are you sure you want to delete this static route for " + $dest$$ + " ?",
				confirm: function() {
					$row$$["delete"]()
				}
			});
			return ! 1
		},
		actionConfig: function() {
			this.row.config();
			return ! 1
		},
		actionStatus: function() {
			this.row.disable();
			return ! 1
		}
	});
	EDGE.Views.Routing.Static.Create = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#RoutingStaticCreateTemplate").html());
			this.id = "addstaticroute" + $args$$.id;
			this.type = "route";
			this.action = "create";
			this.title = "Create IPv4 Static Route";
			this.interfaces = $args$$.interfaces;
			this.robj = $args$$.robj;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			return {
				rules: {
					destination: {
						required: !0,
						ipv4netOrDefault: !0
					},
					description: {
						noQuotes: !0
					},
					gateway: {
						required: !0,
						ipv4: !0
					},
					"interface": {
						required: !0
					},
					distance: {
						range: [1, 255]
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this);
			this.robj.enableRestrictions();
			var $self$$ = this;
			this.$("form").find("select[name=type]").bind("change",
			function() {
				var $$this$$0$$ = $(this),
				$value$$ = $$this$$0$$.find("option:selected").val();
				$$this$$0$$.parents("form").find("div.swapped").each(function() {
					var $$this$$ = $(this);
					$$this$$.hasClass($value$$) ? $$this$$.show() : $$this$$.hide();
					$self$$.show()
				})
			}).trigger("change");
			var $$interfaces$$ = this.$("form").find("select[name=interface]");
			$$interfaces$$.empty().append('<option value="">- select -</option>');
			this.interfaces.each(function($iface$$) {
				$$interfaces$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
			});
			_.delay(this.$el.infotip, 100)
		},
		prepareSave: function($batch$$) {
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.unset("get");
			$batch$$.unset("generic");
			$batch$$.unset("gdelete");
			var $gset$$ = $batch$$.get("gset"),
			$type$$ = this.$("select[name=type] option:selected").val(),
			$dest$$ = this.$("input[name=destination]").val(),
			$gw$$ = this.$("input[name=gateway]").val(),
			$intf$$ = this.$("select[name=interface] option:selected").val(),
			$dist$$ = this.$("input[name=distance]").val(),
			$desc$$ = this.$("input[name=description]").val(),
			$en$$ = this.$("input[name=enabled]").is(":checked"),
			$p$$ = ["protocols", "static"],
			$rp$$ = [];
			switch ($type$$) {
			case "gateway":
				$rp$$ = [$p$$, "route", $dest$$, "next-hop", $gw$$];
				break;
			case "blackhole":
				$en$$ = !0;
				$rp$$ = [$p$$, "route", $dest$$, "blackhole"];
				break;
			case "interface":
				$rp$$ =
				[$p$$, "interface-route", $dest$$, "next-hop-interface", $intf$$]
			}
			$en$$ ? $gset$$.put($rp$$, null) : $gset$$.put($rp$$, "disable", null);
			$dist$$ && $gset$$.put($rp$$, "distance", $dist$$);
			$desc$$ && $gset$$.put($rp$$, "description", $desc$$);
			$batch$$.get("gget").put($rp$$, null)
		},
		save: function($batch$$16_e$$) {
			$batch$$16_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			this.robj.disableActions();
			$batch$$16_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$16_e$$);
			var $self$$ = this;
			this.dialog.addClass("saving");
			$batch$$16_e$$.save(["routes"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.robj.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			if ($resp$$ && $resp$$.GET && $resp$$.GET.protocols) {
				var $c$$ = $resp$$.COMMIT && 1 != $resp$$.COMMIT.failure;
				$resp$$.SET && $resp$$.SET.success && $c$$ && (this.collection["import"]($resp$$.GET.protocols), this.collection.loadData(this.robj), this.remove())
			} else $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			this.robj.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Routing.Static.Config = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#RoutingStaticConfigTemplate").html());
			this.id = "configstaticroute" + $args$$.id;
			this.type = "route";
			this.action = "edit";
			this.title = "Static Route Configuration";
			this.robj = $args$$.robj;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			return {
				rules: {
					destination: {
						required: !0,
						ipv4netOrDefault: !0
					},
					gateway: {
						required: !0,
						ipv4: !0
					},
					"interface": {
						required: !0
					},
					distance: {
						range: [1, 255]
					},
					description: {
						noQuotes: !0
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this);
			var $type$$ = this.model.get("type");
			this.$("form").find("div.swapped").each(function() {
				var $$this$$ = $(this);
				$$this$$.hasClass($type$$) ? $$this$$.show() : $$this$$.hide()
			});
			this.robj.enableRestrictions();
			this.show()
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$(".actions").remove()
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$nexthop$$ = this.model.get("nexthop");
			switch (this.model.get("type")) {
			case "gateway":
				this.updateTextbox($$form$$.find("input[name=gateway]"), $nexthop$$.ip, $$form$$.find("label[for=" + $$form$$.find("input[name=gateway]").attr("id") + "]"));
				break;
			case "interface":
				this.updateTextbox($$form$$.find("input[name=interface]"), $nexthop$$["interface"], $$form$$.find("label[for=" + $$form$$.find("input[name=interface]").attr("id") + "]"))
			}
			this.updateTextbox($$form$$.find("input[name=description]"), $nexthop$$.description,
			$$form$$.find("label[for=" + $$form$$.find("input[name=description]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=distance]"), $nexthop$$.distance, $$form$$.find("label[for=" + $$form$$.find("input[name=distance]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=enabled]"), !$nexthop$$.disable, $$form$$.find("label[for=" + $$form$$.find("input[name=enabled]").attr("id") + "]"));
			this.show()
		},
		templateVars: function() {
			switch (this.model.get("type")) {
			case "gateway":
				var $nexthop$$ = this.model.get("nexthop").ip;
				break;
			case "interface":
				$nexthop$$ = this.model.get("nexthop")["interface"];
				break;
			case "blackhole":
				$nexthop$$ = ""
			}
			return {
				type: this.model.get("type"),
				destination: this.model.get("destination"),
				nexthop: $nexthop$$
			}
		},
		prepareSave: function($batch$$) {
			var $routes$$ = {},
			$attrs$$ = {
				rtype: this.model.get("rtype"),
				type: this.model.get("type"),
				destination: this.model.get("destination")
			};
			_.each(["set", "delete"],
			function($type$$) {
				var $collection$$ = $batch$$.get($type$$).get("routes");
				$collection$$.add($attrs$$, {
					silent: !0
				});
				$routes$$[$type$$] = $collection$$.last().clear()
			},
			this);
			this.setProperty(["nexthop", "distance"], this.$("input[name=distance]").val(), $routes$$);
			this.setProperty(["nexthop", "description"], this.$("input[name=description]").val(), $routes$$);
			this.setProperty(["nexthop", "disable"], !this.$("input[name=enabled]").is(":checked"), $routes$$, !0);
			_.each(["set", "delete"],
			function($nexthop$$3_type$$) {
				if ($nexthop$$3_type$$ = $batch$$.get($nexthop$$3_type$$).get("routes").last().get("nexthop")) switch (this.model.get("type")) {
				case "gateway":
					$nexthop$$3_type$$.ip =
					this.model.get("nexthop").ip;
					break;
				case "interface":
					$nexthop$$3_type$$["interface"] = this.model.get("nexthop")["interface"]
				}
			},
			this)
		},
		save: function($batch$$18_e$$) {
			$batch$$18_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$18_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$18_e$$); ($batch$$18_e$$.get("set").get("routes").hasChanged() || $batch$$18_e$$.get("delete").get("routes").hasChanged()) && this.robj.disableActions();
			$batch$$18_e$$.get("set").get("routes").hasChanged() ||
			$batch$$18_e$$.unset("set");
			$batch$$18_e$$.get("delete").get("routes").hasChanged() || $batch$$18_e$$.unset("delete");
			$batch$$18_e$$.unset("get");
			var $self$$ = this;
			if ($batch$$18_e$$.has("set") || $batch$$18_e$$.has("delete")) this.dialog.addClass("saving"),
			$batch$$18_e$$.save(["routes"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.robj.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.protocols ? (this.model.collection["import"]($resp$$.GET.protocols), this.model.collection.loadData(), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			this.robj.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Routing.Static.Summary = Backbone.View.extend({
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.template = _.template($("#RoutingStaticSummaryTemplate").html());
			this.render()
		},
		render: function() {
			this.$el.html(this.template).data("rendered", !0);
			this.graphs = this.$("div.graph");
			this.lazyResize();
			return this
		},
		update: function() {
			this.graphs.each(function() {
				var $$this$$ = $(this);
				$.plot($$this$$.find(".pie"), self.getData($$this$$.data("type")),
				self.getOptions($$this$$.data("type")))
			})
		},
		resize: function() {
			if (this.$el.is(":visible")) {
				var $totalHeight$$ = this.$el.height() - this.$el.parents(".main-section").find(".section-tabs").height(),
				$graphHeight$$ = Math.floor($totalHeight$$ / this.graphs.length);
				self = this;
				this.graphs.each(function() {
					$(this).height($graphHeight$$)
				});
				this.update()
			}
		},
		getData: function() {
			for (var $data$$ = [], $series$$ = Math.floor(5 * Math.random()) + 1, $colors$$ = ["#B0E5FB", "#63AFD5", "#337BB1", "#175389", "#05366A"], $i$$ = 0; $i$$ < $series$$; $i$$++) $data$$[$i$$] =
			{
				label: "Series" + ($i$$ + 1),
				data: Math.floor(100 * Math.random()) + 1,
				color: $colors$$[$i$$]
			};
			return $data$$
		},
		getOptions: function($type$$) {
			switch ($type$$) {
			case "routes":
				return {
					series:
					{
						pie:
						{
							show:
							!0,
							radius: 1,
							label: {
								show: !0,
								radius: 0.75,
								formatter: function($label$$, $series$$) {
									return '<div style="font-size:8pt;text-align:center;padding:2px;color:white;">' + $label$$ + "<br/>" + Math.round($series$$.percent) + "%</div>"
								},
								background: {
									opacity: 0.5
								}
							}
						}
					},
					legend: {
						show: !1
					}
				}
			}
		},
		reset: function() {
			this.debug("resetting routing static summary");
			this.graphs.each(function() {
				$(this).empty()
			})
		}
	});
	EDGE.Views.Routing.Dynamic = {};
	EDGE.Views.Routing.Dynamic.Default = Backbone.View.extend({
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.setElement($("#Routing .section-container #RoutingDynamic"));
			this.template = _.template($("#RoutingDynamicTemplate").html());
			this.readonly = "admin" != EDGE.Config.User.level;
			this.layouts = {};
			this.views = {};
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) _.each(this.views,
			function($view$$) {
				$view$$.update()
			}),
			this.lazyResize();
			else {
				this.$el.html(this.template).data("rendered", !0);
				this.layouts.outer = this.$el.layout({
					scrollToBookmarkOnLoad: !1,
					north: {
						size: 140,
						maxSize: 140,
						spacing_open: 5,
						spacing_closed: 5,
						resizeWithWindow: !0,
						onresize: this.resizeLists,
						onopen: this.resizeLists,
						onclose: this.resizeLists
					}
				});
				if (!this.readonly) {
					var $self$$ = this;
					_.delay(function() {
						$self$$.$el.infotip()
					},
					100)
				}
				this.layouts.lists = this.$("#RoutingDynamicLists").layout({
					scrollToBookmarkOnLoad: !1,
					east: {
						size: 400,
						spacing_open: 5,
						spacing_closed: 5
					}
				});
				this.views.settings =
				new EDGE.Views.Routing.Dynamic.Settings({
					el: this.$("#RoutingDynamicSettings"),
					model: this.model,
					ospf: this,
					collection: this.collection,
					readonly: "admin" != EDGE.Config.User.level
				});
				this.views.areas = new EDGE.Views.Routing.Dynamic.Areas({
					el: this.$("#RoutingDynamicAreas"),
					collection: this.model.get("areas")
				});
				this.views.interfaces = new EDGE.Views.Routing.Dynamic.Interfaces({
					el: this.$("#RoutingDynamicInterfaces"),
					collection: this.collection
				})
			}
			return this
		},
		clear_areas: function() {
			this.views.areas.clear_all();
			this.views.areas.update()
		},
		resize: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && _.each(this.layouts,
			function($layout$$) {
				$layout$$.resizeAll()
			},
			this)
		},
		resizeLists: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && (_.defer(this.layouts.lists.resizeAll), this.views.areas.lazyResize(), this.views.interfaces.lazyResize())
		},
		reset: function() {
			this.debug("reset()");
			this.$el.data("rendered", !1);
			_.each(this.views,
			function($view$$) {
				$view$$.reset()
			});
			this.layouts.lists.removePane("east", !0, !0, !0);
			this.layouts.outer.removePane("west",
			!0, !0, !0);
			this.layouts.outer.destroy();
			delete this.layouts.outer;
			delete this.layouts.lists;
			this.$el.empty()
		}
	});
	var _empty = function $_empty$($item$$) {
		return 0 <= [null, void 0, ""].indexOf($item$$)
	};
	EDGE.Views.Routing.Dynamic.Settings = EDGE.Views.Global.Abstract.Form.extend({
		initialize: function($args$$) {
			this.ospf = $args$$.ospf;
			EDGE.Views.Global.Abstract.Form.prototype.initialize.call(this, $args$$)
		},
		events: {
			"submit form": "save"
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$form$$ = $form.find("#redist-static-metric").val();
					"" != $form$$ && void 0 != $form$$ && 1 != $form.find("input[type=checkbox][name=redist-static]:checked").val() ? alert("static metric is configured, but not enabled") :
					($form$$ = $form.find("#redist-connected-metric").val(), "" != $form$$ && void 0 != $form$$ && 1 != $form.find("input[type=checkbox][name=redist-connected]:checked").val() ? $(window).trigger("dialog", ["connected metric is configured, but not enabled", "Validation error"]) : $self$$.save())
				},
				rules: {
					"router-id": {
						ipv4: !0
					},
					"redist-connected-metric": {
						range: [1, 16]
					},
					"redist-static-metric": {
						range: [1, 16]
					}
				}
			}
		},
		render: function() {
			if ("admin" == EDGE.Config.User.level) {
				var $$form$$ = this.$("form");
				$$form$$.find("button:not(.plaintext)").button();
				$$form$$.form({
					validation: _.extend(this.validation() || {},
					{
						errorElement: "span"
					})
				});
				var $self$$ = this;
				this.$saveButton = this.$("button[type=submit]").button({
					icons: {
						primary: "ui-icon-disk"
					}
				});
				this.$("div.delete button").button({
					icons: {
						primary: "ui-icon-trash"
					}
				}).bind("click",
				function() {
					window.app.dialogs.confirmationDialog.open({
						title: "Delete All OSPF Confirmation",
						message: "Are you sure you want to delete all ospf configuration?",
						confirm: function() {
							$self$$.delete_all()
						}
					})
				})
			} else this.renderView(),
			this.$("button").hide();
			this.delegateEvents();
			this.flaggable = !1;
			this.update();
			this.flaggable = !0;
			return this
		},
		delete_all: function() {
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.unset("get");
			$batch$$.unset("generic");
			$batch$$.unset("gset");
			$batch$$.get("gdelete").put("protocols", "ospf", null);
			$batch$$.get("gget").put("protocols", null);
			var $self$$ = this;
			$batch$$.save(["routes"], {
				success: function() {
					$self$$.model.unset("parameters");
					$self$$.model.unset("redistribute");
					$self$$.model.unset("default-information");
					$self$$.update();
					$self$$.ospf.clear_areas();
					$self$$.model.set({
						disabled: !0
					})
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {}
			})
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$c$$0$$ = this.model.get("parameters"),
			$redist$$ = this.model.get("redistribute"),
			$def$$ = this.model.get("default-information");
			this.updateTextbox($("#router-id"), $c$$0$$ ? $c$$0$$["router-id"] : "", $$form$$.find('label[for="router-id"]'));
			_.each(["connected",
			"static"],
			function($r$$) {
				var $c$$ = $$form$$.find("input[name=redist-" + $r$$ + "]"),
				$l$$ = $$form$$.find("label[for=redist-" + $r$$ + "]"),
				$t$$ = $$form$$.find("#redist-" + $r$$ + "-metric"); ! _empty($redist$$) && void 0 !== $redist$$[$r$$] ? (this.updateCheckbox($c$$, !0, $l$$), !_empty($redist$$[$r$$]) && !_empty($redist$$[$r$$].metric) && this.updateTextbox($t$$, $redist$$[$r$$].metric, $$form$$.find('label[for="#redist-' + $r$$ + '-metric"]'))) : (this.updateCheckbox($c$$, !1, $l$$), this.updateTextbox($t$$, "", $$form$$.find('label[for="#redist-' +
				$r$$ + '-metric"]')))
			},
			this);
			var $c$$0$$ = $$form$$.find("input[name=default-orig]"),
			$l$$0$$ = $$form$$.find("label[for=default-orig]"),
			$def$$ = !_empty($def$$) && void 0 !== $def$$.originate;
			this.updateCheckbox($c$$0$$, $def$$, $l$$0$$)
		},
		prepareSave: function($batch$$) {
			var $routes$$ = {},
			$config$$ = {},
			$changed$$ = {};
			_.each(["set", "delete", "get"],
			function($type$$) {
				$routes$$[$type$$] = $batch$$.get($type$$).get("routes").reset(null, {
					clear: {
						ospfConfig: !0
					}
				});
				$config$$[$type$$] = $routes$$[$type$$].filterByRouteType("ospf-cfg").last().clear();
				$changed$$[$type$$] = !1
			},
			this);
			var $def$$2_params$$ = this.model.get("parameters"),
			$rid$$ = this.$("input[name=router-id]").val();
			if (_empty($rid$$)) ! _empty($def$$2_params$$) && !_empty($def$$2_params$$["router-id"]) && ($config$$["delete"].set({
				parameters: {
					"router-id": null
				}
			}), $changed$$["delete"] = !0);
			else if (_empty($def$$2_params$$) || $rid$$ !== $def$$2_params$$["router-id"]) $config$$.set.set({
				parameters: {
					"router-id": $rid$$
				}
			}),
			$changed$$.set = !0;
			var $self$$ = this,
			$rdist$$ = this.model.get("redistribute");
			_.each(["connected",
			"static"],
			function($t$$) {
				var $act$$ = null,
				$data$$ = null;
				if ($self$$.$el.find("input[name=redist-" + $t$$ + "]").is(":checked")) {
					var $ev$$ = $self$$.$el.find("input[name=redist-" + $t$$ + "-metric]").val();
					if (_empty($ev$$)) ! _empty($rdist$$) && void 0 !== $rdist$$[$t$$] ? !_empty($rdist$$[$t$$]) && !_empty($rdist$$[$t$$].metric) && ($data$$ = {
						metric: null
					},
					$act$$ = "delete") : ($data$$ = null, $act$$ = "set");
					else if (_empty($rdist$$) || _empty($rdist$$[$t$$]) || $rdist$$[$t$$].metric !== $ev$$) $data$$ = {
						metric: $ev$$
					},
					$act$$ = "set"
				} else ! _empty($rdist$$) &&
				void 0 !== $rdist$$[$t$$] && ($data$$ = null, $act$$ = "delete");
				$act$$ && (_empty($config$$[$act$$].get("redistribute")) && $config$$[$act$$].set({
					redistribute: {}
				}), $config$$[$act$$].get("redistribute")[$t$$] = $data$$, $changed$$[$act$$] = !0)
			});
			$def$$2_params$$ = this.model.get("default-information");
			if (this.$("input[name=default-orig]").is(":checked")) {
				if (_empty($def$$2_params$$) || void 0 === $def$$2_params$$.originate) $config$$.set.set({
					"default-information": {
						originate: null
					}
				}),
				$changed$$.set = !0
			} else ! _empty($def$$2_params$$) &&
			void 0 !== $def$$2_params$$.originate && ($config$$["delete"].set({
				"default-information": null
			}), $changed$$["delete"] = !0);
			_.each(["set", "delete"],
			function($type$$) {
				$changed$$[$type$$] && $config$$[$type$$].forceChange()
			});
			if ($changed$$.set || $changed$$["delete"]) $config$$.get.set({
				parameters: null,
				redistribute: null,
				"default-information": null
			}),
			$config$$.get.forceChange()
		},
		save: function($batch$$21_e$$) {
			$batch$$21_e$$ && $batch$$21_e$$.preventDefault();
			this.$el.removeClass("saved success error");
			this.$saveButton.button("showWorkingIndicator");
			$batch$$21_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$21_e$$);
			$batch$$21_e$$.get("set").get("routes").hasChanged() || $batch$$21_e$$.unset("set");
			$batch$$21_e$$.get("delete").get("routes").hasChanged() || $batch$$21_e$$.unset("delete");
			var $self$$ = this;
			$batch$$21_e$$.has("set") || $batch$$21_e$$.has("delete") ? ($self$$.$el.addClass("saving"), $batch$$21_e$$.save(["routes"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify",
					new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.$el.removeClass("saving")
				}
			})) : this.$saveButton.button("hideWorkingIndicator")
		},
		response: function($def$$3_resp$$41_rid$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $def$$3_resp$$41_rid$$);
			$response$$.success ? this.$el.addClass("saved success") : this.$el.addClass("saved error");
			if ($def$$3_resp$$41_rid$$ && $def$$3_resp$$41_rid$$.GET && $def$$3_resp$$41_rid$$.GET.protocols &&
			!_empty($def$$3_resp$$41_rid$$.GET.protocols.ospf)) {
				this.$saveButton.button("hideWorkingIndicator", {
					primary: "ui-icon-check"
				});
				var $ospf$$ = $def$$3_resp$$41_rid$$.GET.protocols.ospf;
				_empty($ospf$$.parameters) ? this.model.unset("parameters") : ($def$$3_resp$$41_rid$$ = $ospf$$.parameters["router-id"], _empty($def$$3_resp$$41_rid$$) ? this.model.unset("parameters") : this.model.set({
					parameters: {
						"router-id": $def$$3_resp$$41_rid$$
					}
				}));
				if (_empty($ospf$$.redistribute)) this.model.unset("redistribute");
				else {
					var $self$$ =
					this;
					_.each(["connected", "static"],
					function($t$$) {
						var $rdist$$ = $ospf$$.redistribute[$t$$];
						if ($rdist$$ !== void 0) {
							var $d$$ = null;
							if (!_empty($rdist$$)) {
								$rdist$$ = $rdist$$.metric;
								_empty($rdist$$) || ($d$$ = {
									metric: $rdist$$
								})
							}
							_empty($self$$.model.get("redistribute")) && $self$$.model.set({
								redistribute: {}
							});
							$self$$.model.get("redistribute")[$t$$] = $d$$
						} else delete $self$$.model.get("redistribute")[$t$$]
					})
				}
				$def$$3_resp$$41_rid$$ = $ospf$$["default-information"];
				_empty($def$$3_resp$$41_rid$$) || void 0 === $def$$3_resp$$41_rid$$.originate ?
				this.model.unset("default-information") : this.model.set({
					"default-information": {
						originate: {}
					}
				});
				this.update()
			} else this.$saveButton.button("hideWorkingIndicator", {
				primary: "ui-icon-notice"
			}),
			$(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		reset: function() {
			this.debug("resetting routing settings")
		}
	});
	EDGE.Views.Routing.Dynamic.Area = {};
	EDGE.Views.Routing.Dynamic.Areas = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Routing.Dynamic.Areas",
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.creates = [];
			this.template = _.template($("#RoutingDynamicAreasTemplate").html());
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !==
				typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sEmptyTable: "No areas available.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "id"
					},
					{
						sClass: "areatype"
					},
					{
						sClass: "authtype"
					},
					{
						sClass: "interfaces"
					},
					{
						sClass: "buttons",
						bSortable: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[0, "asc"]],
					sScrollY: 1,
					bScrollCollapse: !0,
					bPaginate: !0,
					sDom: 't<"F"ip>'
				},
				this.options.options || {}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			return this
		},
		add: function($area$$) {
			this.rows[$area$$.get("id")] = new EDGE.Views.Routing.Dynamic.Area.Row({
				model: $area$$,
				areas: this,
				dataTable: this.dataTable
			});
			var $self$$ = this;
			this.lazyResize();
			this.rows[$area$$.get("id")].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		delete_area: function($area_id$$) {
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			var $routes$$ = {},
			$config$$ = {};
			_.each(["delete", "get"],
			function($type$$) {
				var $c$$29_r$$ = $batch$$.get($type$$).get("routes");
				$routes$$[$type$$] = $c$$29_r$$.reset(null, {
					clear: {
						ospfConfig: !0
					}
				});
				$c$$29_r$$ = $routes$$[$type$$].filterByRouteType("ospf-cfg");
				$config$$[$type$$] = $c$$29_r$$.last().clear()
			},
			this);
			var $das_gas$$ = $config$$.get.get("areas");
			$das_gas$$.add({
				id: "''"
			},
			{
				silent: !0
			});
			$das_gas$$.last().forceChange();
			$das_gas$$ = $config$$["delete"].get("areas");
			$das_gas$$.add({
				id: $area_id$$
			},
			{
				silent: !0
			});
			$das_gas$$.last()["delete"]();
			var $self$$ = this;
			$self$$.disableActions();
			this.rows[$area_id$$].$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["routes"], {
				success: function($model$$, $resp$$) {
					if ($resp$$.DELETE && $resp$$.DELETE.success &&
					!($resp$$.COMMIT && 1 == $resp$$.COMMIT.failure)) {
						var $area$$ = $self$$.collection.filterById($area_id$$);
						if ($area$$) {
							$self$$.collection.remove($area$$);
							return
						}
					}
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.enableActions();
					$self$$.rows[$area_id$$] && $self$$.rows[$area_id$$].$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		clear_all: function() {
			this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset()
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			if ($resp$$ && $resp$$.GET && $resp$$.GET.protocols && $resp$$.GET.protocols.ospf) {
				this.clear_all();
				if ($resp$$.GET.protocols.ospf.area) this.collection["import"]($resp$$.GET.protocols.ospf.area);
				this.update()
			} else $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.dataTable.fnDraw();
				$settings$$.oScroll.sY = this.$table.parents(".main-section").height() - this.$table.parents(".main-section").find(".section-tabs").height() -
				this.$table.parents(".table-container").height() - $("#RoutingDynamicAreasAdd").height();
				this.dataTable.fnDraw()
			}
		},
		create: function() {
			this.creates.push(new EDGE.Views.Routing.Dynamic.Area.Create({
				id: this.creates.length,
				collection: this.collection,
				areas: this
			}))
		},
		remove: function($area$$2_id$$) {
			if (this.dataTable) {
				var $area$$2_id$$ = $area$$2_id$$.get("id"),
				$row$$ = this.rows[$area$$2_id$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$area$$2_id$$],
				this.lazyResize())
			}
		},
		reset: function($soft$$) {
			this.debug("resetting routing dynamic areas");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.clear_all();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$table.data("open-dialog-counter") ? 0: this.$table.data("open-dialog-counter") - 1;
			this.$table.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && this.$actions.enableAction("delete")
			})
		},
		enableRestrictions: function() {
			var $counter$$ = this.$table.data("open-dialog-counter") ? this.$table.data("open-dialog-counter") + 1: 1;
			this.$table.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && this.$actions.disableAction("delete")
			})
		},
		enableActions: function() {
			$("#RoutingDynamic .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$("#RoutingDynamicSettings .actions button").removeAttr("disabled").removeClass("ui-state-disabled");
			$("#RoutingDynamicInterfaces .actions button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".routearea-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".routeinterface-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = $("#RoutingDynamicAreasAdd button");
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			});
			$$button$$ = $("#RoutingDynamicInterfacesAdd button");
			$$button$$.button("option",
			"disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$("#RoutingDynamic .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$("#RoutingDynamicSettings .actions button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$("#RoutingDynamicInterfaces .actions button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".routearea-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".routeinterface-config .actions button[type=submit]").attr("disabled",
			"disabled").addClass("ui-state-disabled");
			var $$button$$10_$buttonRoutingDynamicInterfacesAdd$$ = $("#RoutingDynamicAreasAdd button"); ! 1 == $$button$$10_$buttonRoutingDynamicInterfacesAdd$$.button("option", "disabled") && $$button$$10_$buttonRoutingDynamicInterfacesAdd$$.button({
				disabled: !0
			});
			$$button$$10_$buttonRoutingDynamicInterfacesAdd$$ = $("#RoutingDynamicInterfacesAdd button"); ! 1 == $$button$$10_$buttonRoutingDynamicInterfacesAdd$$.button("option", "disabled") && $$button$$10_$buttonRoutingDynamicInterfacesAdd$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Routing.Dynamic.Area.DropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Routing.Dynamic.Area.DropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#RoutingDynamicAreaDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionDelete: function() {
			var $self$$ = this.row;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Area Confirmation",
				message: "Are you sure you want to delete this area?",
				confirm: function() {
					$self$$["delete"]()
				}
			});
			return ! 1
		},
		actionConfig: function() {
			this.row.config();
			return ! 1
		}
	});
	EDGE.Views.Routing.Dynamic.Area.Row = EDGE.Views.Global.Abstract.Row.extend({
		initialize: function($args$$) {
			this.areas = $args$$.areas;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			return [void 0 == this.model.get("id") ? "": this.model.get("id"), this.model.get("area-type") ? _.keys(this.model.get("area-type"))[0] || "": "", this.model.get("authentication") || "", this.model.get("network") ? this.model.get("network").join(", ") : "", ""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ =
			this.$(".buttons");
			$$buttons$$.find("button").length || ("operator" == EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Routing.Dynamic.Area.DropDownButton({
				container: this.$(".buttons"),
				row: this
			}), 0 < this.areas.$table.data("open-dialog-counter") && (this.$actions.disableAction("delete"), this.$actions.disableAction("status"))));
			this.trigger("render");
			return this
		},
		config: function($readonly$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Routing.Dynamic.Area.Config({
				model: this.model,
				interfaces: this.interfaces,
				readonly: $readonly$$,
				areas: this.areas
			})
		},
		"delete": function() {
			this.areas.delete_area(this.model.get("id"))
		}
	});
	function getDecimalAreaId($id$$) {
		return 0 == +$id$$ ? 0: isIpv4($id$$) ? ipToDec($id$$) : $id$$
	}
	EDGE.Views.Routing.Dynamic.Area.Create = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#RoutingDynamicAreaCreateTemplate").html());
			this.id = "adddynamicroutearea" + $args$$.id;
			this.type = "routearea";
			this.action = "create";
			this.title = "Create OSPF Area";
			this.areas = $args$$.areas;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			$.validator.addClassRules({
				"validate-network": {
					required: !0,
					ipv4net: !0,
					ipv4NetBoundary: !0
				}
			});
			return {
				submitHandler: function($form$$10_type$$) {
					$form = $($form$$10_type$$);
					var $valid$$ = !0,
					$form$$10_type$$ = $form.find("select[name=areatype] option:selected").val(),
					$newId$$ = $form.find("input[name=id]").val();
					if ("" == $form$$10_type$$ || void 0 == $form$$10_type$$) msg = "Must selected area type",
					$valid$$ = !1;
					else if ("normal" != $form$$10_type$$ && (0 == $newId$$ || "0.0.0.0" == $newId$$)) msg = "OSPF backbone can't be of type " + $form$$10_type$$,
					$valid$$ = !1;
					var $newNets$$ = {};
					$self$$.$("input.network-member").each(function() {
						var $network$$ =
						$(this).val();
						$newNets$$[$network$$] = 1
					});
					var $newIdDec$$ = getDecimalAreaId($newId$$);
					$self$$.collection.each(function($area$$) {
						if ($valid$$) {
							var $areaId$$ = $area$$.get("id"); + getDecimalAreaId($areaId$$) == +$newIdDec$$ ? ($valid$$ = !1, msg = "OSPF area " + $newId$$ + " is already defined") : ($area$$ = $area$$.get("network"), _.each($area$$,
							function($net$$) {
								$valid$$ && $newNets$$[$net$$] && ($valid$$ = !1, msg = "OSPF network " + $net$$ + " is already defined in area " + $areaId$$)
							}))
						}
					});
					$valid$$ ? $self$$.save() : $(window).trigger("dialog",
					[msg, "Validation error"])
				},
				rules: {
					id: {
						required: !0,
						ospfv4Area: !0
					}
				},
				errorPlacement: function($error$$, $element$$) {
					$element$$.parent().append($error$$)
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.areas.enableRestrictions();
			this.$el.infotip();
			this.delegateEvents();
			this.show();
			return this
		},
		renderAddables: function() {
			function $addUniqueIdAndName$$($$el$$) {
				var $suffix$$ = (new Date).getTime();
				$$el$$.attr("id", "Member" + $suffix$$).attr("name", "member" + $suffix$$)
			}
			var $self$$ = this,
			$$network$$ = this.$("fieldset.network ul");
			$$network$$.find("input.network-member").each(function() {
				$addUniqueIdAndName$$($(this))
			});
			$$network$$.addable({
				template: $$network$$.find("li").clone(),
				add: $('<li class="addable"><div>Add New</div></li>').find("div").button({
					icons: {
						primary: "ui-icon-plus"
					}
				}).end(),
				added: function() {
					var $$inserted$$ = this.inserted;
					$$inserted$$.infotip();
					$addUniqueIdAndName$$($$inserted$$.find("input"));
					$remove = $('<span class="remove" /></span>').button({
						icons: {
							primary: "ui-icon-minus"
						},
						label: "Remove"
					}).on("click",
					function() {
						$$inserted$$.remove()
					});
					$$inserted$$.append($remove);
					$self$$.show()
				}
			})
		},
		prepareSave: function($batch$$) {
			var $area$$ = {},
			$networks$$ = [];
			_.each(["set", "delete", "get"],
			function($type$$) {
				var $areas$$ = $batch$$.get($type$$).get("routes").reset(null, {
					clear: {
						ospfConfig: !0
					}
				}).filterByRouteType("ospf-cfg").last().get("areas");
				$areas$$.add({
					id: this.$("input[name=id]").val()
				},
				{
					silent: !0
				});
				$area$$[$type$$] = $areas$$.last().clear()
			},
			this);
			$area$$.get.forceChange();
			this.$("input.network-member").each(function() {
				var $network$$ =
				$(this).val();
				$network$$ && $networks$$.push($network$$)
			});
			var $auth$$ = this.$("select[name=authentication] option:selected").val();
			"" != $auth$$ && $area$$.set.set({
				authentication: $auth$$
			});
			$area$$.set.set({
				"area-type": this.$("select[name=areatype] option:selected").val(),
				network: $networks$$
			},
			{
				silent: !0
			})
		},
		save: function($batch$$24_e$$) {
			$batch$$24_e$$ && $batch$$24_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$24_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$24_e$$);
			$batch$$24_e$$.get("set").get("routes").hasChanged() ||
			$batch$$24_e$$.unset("set");
			$batch$$24_e$$.unset("delete");
			var $self$$ = this;
			$batch$$24_e$$.has("set") && (this.dialog.addClass("saving"), this.areas.disableActions(), $batch$$24_e$$.save(["routes"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.areas.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		},
		response: function($resp$$) {
			var $response$$ =
			EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.protocols && $resp$$.GET.protocols.ospf && $resp$$.GET.protocols.ospf.area ? (this.collection["import"]($resp$$.GET.protocols.ospf.area), this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			this.areas.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Routing.Dynamic.Area.Config = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#RoutingDynamicAreaConfigTemplate").html());
			this.id = "editdynamicroutearea" + $args$$.id;
			this.type = "routearea";
			this.action = "edit";
			this.title = "OSPF Area Configuration";
			this.areas = $args$$.areas;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			$.validator.addClassRules({
				"validate-network": {
					required: !0,
					ipv4net: !0,
					ipv4NetBoundary: !0
				}
			});
			return {
				submitHandler: function($form$$11_type$$) {
					$form = $($form$$11_type$$);
					var $valid$$ = !0,
					$msg$$ = "",
					$form$$11_type$$ = $form.find("select[name=areatype] option:selected").val();
					if ("" == $form$$11_type$$ || void 0 == $form$$11_type$$) $msg$$ = "Must selected area type",
					$valid$$ = !1;
					else if ("normal" != $form$$11_type$$) {
						var $id$$ = $self$$.model.get("id");
						if (0 == $id$$ || "0.0.0.0" == $id$$) $msg$$ = "ospf backbone can't be of type " + $form$$11_type$$,
						$valid$$ = !1
					}
					var $editId$$ = $self$$.model.get("id"),
					$newNets$$ =
					{};
					$self$$.$("input.network-member").each(function() {
						var $network$$ = $(this).val();
						$newNets$$[$network$$] = 1
					});
					$self$$.areas.collection.each(function($area$$5_networks$$) {
						if ($valid$$) {
							var $areaId$$ = $area$$5_networks$$.get("id");
							$areaId$$ != $editId$$ && ($area$$5_networks$$ = $area$$5_networks$$.get("network"), _.each($area$$5_networks$$,
							function($net$$) {
								$valid$$ && $newNets$$[$net$$] && ($valid$$ = !1, $msg$$ = "OSPF network " + $net$$ + " is already defined in area " + $areaId$$)
							}))
						}
					});
					$valid$$ ? $self$$.save() : $(window).trigger("dialog",
					[$msg$$, "Validation error"])
				},
				rules: {
					id: {
						required: !0,
						ospfv4Area: !0
					},
					network: {
						required: !0,
						ipv4net: !0,
						ipv4NetBoundary: !0
					}
				},
				errorPlacement: function($error$$, $element$$) {
					$element$$.parent().append($error$$)
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.delegateEvents();
			this.flaggable = !1;
			this.update();
			this.flaggable = !0;
			this.areas.enableRestrictions();
			return this
		},
		renderAddables: function() {
			function $addUniqueIdAndName$$($$el$$) {
				var $suffix$$ = (new Date).getTime();
				$$el$$.attr("id", "Member" + $suffix$$).attr("name", "member" + $suffix$$)
			}
			var $self$$ = this,
			$$network$$ = this.$("fieldset.network ul");
			$$network$$.find("input.network-member").each(function() {
				$addUniqueIdAndName$$($(this))
			});
			$self$$ = this;
			$$network$$.addable({
				template: $$network$$.find("li").clone(),
				add: this.readonly ? null: $('<li class="addable"><div>Add New</div></li>').find("div").button({
					icons: {
						primary: "ui-icon-plus"
					}
				}).end(),
				added: function() {
					var $$inserted$$ = this.inserted;
					$self$$.readonly || $$inserted$$.infotip();
					$addUniqueIdAndName$$($$inserted$$.find("input")); ! $self$$.readonly && !$$inserted$$.is(":first-child") && ($remove = $('<span class="remove" /></span>').button({
						icons: {
							primary: "ui-icon-minus"
						},
						label: "Remove"
					}).on("click",
					function() {
						$$inserted$$.remove()
					}), $$inserted$$.append($remove));
					$self$$.show()
				}
			})
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$("fieldset.actions").remove()
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateSelect($$form$$.find("select[name=areatype]"),
			this.model.get("area-type") ? _.keys(this.model.get("area-type"))[0] : "", $$form$$.find("label[for=" + $$form$$.find("select[name=areatype]").attr("id") + "]"));
			this.updateSelect($$form$$.find("select[name=authentication]"), this.model.get("authentication") || "", $$form$$.find("label[for=" + $$form$$.find("select[name=authentication]").attr("id") + "]"));
			var $network$$ = this.model.get("network"),
			$$network$$ = $$form$$.find("fieldset.network ul");
			$network$$ && $network$$.length && ($$network$$.find("li:not(.addable)").remove(),
			_.each($network$$,
			function($value$$) {
				this.readonly ? $$network$$.addable("add").addable("last").find("span.readonly").html($value$$) : $$network$$.addable("add").addable("last").find("input").val($value$$)
			},
			this));
			this.show()
		},
		templateVars: function() {
			return {
				areaid: this.model.get("id")
			}
		},
		prepareSave: function($batch$$) {
			var $area$$ = {},
			$networks$$ = [];
			_.each(["set", "delete", "get"],
			function($type$$) {
				var $areas$$ = $batch$$.get($type$$).get("routes").reset(null, {
					clear: {
						ospfConfig: !0
					}
				}).filterByRouteType("ospf-cfg").last().get("areas");
				$areas$$.add({
					id: this.model.get("id")
				},
				{
					silent: !0
				});
				$area$$[$type$$] = $areas$$.last().clear()
			},
			this);
			$area$$.get.forceChange();
			var $otype_obj$$ = this.model.get("area-type"),
			$at$$;
			_.each($otype_obj$$,
			function($v$$, $k$$) {
				$at$$ = $k$$
			});
			$at$$ && ($otype_obj$$[$at$$] = null);
			var $ntype$$ = this.$("select[name=areatype] option:selected").val();
			$otype_obj$$ && void 0 === $otype_obj$$[$ntype$$] && $area$$["delete"].set({
				"area-type": $otype_obj$$
			},
			{
				silent: !0
			});
			this.setProperty("area-type", $ntype$$, $area$$);
			this.setProperty("authentication",
			this.$("select[name=authentication] option:selected").val(), $area$$);
			this.$("input.network-member").each(function() {
				var $network$$ = $(this).val();
				$network$$ && $networks$$.push($network$$)
			});
			if (_.difference($networks$$, this.model.get("networks")).length || _.difference(this.model.get("networks"), $networks$$).length) $area$$["delete"].set({
				network: null
			},
			{
				silent: !0
			}),
			$networks$$.length && $area$$.set.set({
				network: $networks$$
			},
			{
				silent: !0
			})
		},
		save: function($batch$$26_e$$) {
			$batch$$26_e$$ && $batch$$26_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$26_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$26_e$$);
			$batch$$26_e$$.get("set").get("routes").hasChanged() || $batch$$26_e$$.unset("set");
			$batch$$26_e$$.get("delete").get("routes").hasChanged() || $batch$$26_e$$.unset("delete");
			var $self$$ = this;
			if ($batch$$26_e$$.has("set") || $batch$$26_e$$.has("delete")) this.dialog.addClass("saving"),
			this.areas.disableActions(),
			$batch$$26_e$$.save(["routes"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.areas.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.protocols && $resp$$.GET.protocols.ospf && $resp$$.GET.protocols.ospf.area ? (this.model.collection["import"]($resp$$.GET.protocols.ospf.area),
			this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			this.areas.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Routing.Dynamic.Interface = {};
	EDGE.Views.Routing.Dynamic.Interfaces = Backbone.View.extend({
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.creates = [];
			this.template = _.template($("#RoutingDynamicInterfacesTemplate").html());
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sEmptyTable: "No interfaces configured for OSPF.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "interface"
					},
					{
						sClass: "cost"
					},
					{
						sClass: "buttons",
						bSortable: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[0, "asc"]],
					sScrollY: 1,
					bScrollCollapse: !0,
					bPaginate: !0,
					sDom: 't<"F"ip>'
				},
				this.options.options || {}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ =
					this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			this.lazyResize();
			return this
		},
		add: function($iface$$) {
			var $ip$$ = $iface$$.get("ip");
			if (!_empty($ip$$) && !_empty($ip$$.ospf) && !this.rows[$iface$$.cid]) {
				this.rows[$iface$$.cid] = new EDGE.Views.Routing.Dynamic.Interface.Row({
					model: $iface$$,
					dataTable: this.dataTable,
					intfs: this
				});
				var $self$$ =
				this;
				this.lazyResize();
				this.rows[$iface$$.cid].bind("render",
				function() {
					this.unbind("render");
					$self$$.lazyResize()
				})
			}
		},
		update: function($full$$) {
			$full$$ && this.collection.each(this.add);
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		remove: function($id$$57_iface$$) {
			if (this.dataTable) {
				var $id$$57_iface$$ = $id$$57_iface$$.cid,
				$row$$ = this.rows[$id$$57_iface$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$id$$57_iface$$],
				this.lazyResize())
			}
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.dataTable.fnDraw();
				$settings$$.oScroll.sY = this.$table.parents(".main-section").height() - this.$table.parents(".main-section").find(".section-tabs").height() -
				this.$table.parents(".table-container").height() - $("#RoutingDynamicInterfacesAdd").height();
				this.dataTable.fnDraw()
			}
		},
		delete_interface: function($iid$$, $row$$) {
			this.disableActions();
			var $intf$$2_pintf$$ = this.collection.filterById($iid$$),
			$itype$$ = $intf$$2_pintf$$.get("type"),
			$intfp$$ = {
				id: $iid$$,
				type: $itype$$
			},
			$siln$$ = {
				silent: !0
			},
			$pintfp$$ = null,
			$ipar$$ = $intf$$2_pintf$$.get("parent");
			_empty($ipar$$) || ($intfp$$.parent = $ipar$$, $intf$$2_pintf$$ = this.collection.filterById($ipar$$), $pintfp$$ = {
				id: $intf$$2_pintf$$.get("id"),
				type: $intf$$2_pintf$$.get("type")
			});
			var $ifs$$ = {},
			$config$$ = {},
			$batch$$ = new EDGE.Models.Batch;
			_.each(["delete", "get"],
			function($t$$) {
				$ifs$$[$t$$] = $batch$$.get($t$$).get("interfaces");
				if ($pintfp$$) {
					$ifs$$[$t$$].add($ifs$$[$t$$].modelize($pintfp$$), $siln$$);
					$ifs$$[$t$$].filterById($ipar$$).clear($siln$$)
				}
				$ifs$$[$t$$].add($ifs$$[$t$$].modelize($intfp$$), $siln$$);
				$config$$[$t$$] = $ifs$$[$t$$].filterById($iid$$);
				$config$$[$t$$].unset("mtu");
				$config$$[$t$$].unset("mac")
			},
			this);
			$config$$["delete"].set({
				ip: {
					ospf: null
				}
			},
			$siln$$);
			$config$$.get.clear($siln$$);
			$batch$$.unset("set");
			var $self$$ = this;
			$row$$ && $row$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["interfaces"], {
				success: function($mod$$, $resp$$) {
					$self$$.response($mod$$, $resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$row$$ && $row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator");
					$self$$.enableActions()
				}
			})
		},
		response: function($mod$$, $resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.interfaces ? (this.collection["import"]($resp$$.GET.interfaces), this.rows = {},
			this.dataTable.fnClearTable(), this.collection.each(this.add), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		create: function() {
			this.creates.push(new EDGE.Views.Routing.Dynamic.Interface.Config({
				id: this.creates.length,
				collection: this.collection,
				creating: !0,
				intfs: this
			}))
		},
		reset: function($soft$$) {
			this.debug("resetting routing dynamic interfaces");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$table.data("open-dialog-counter") ? 0: this.$table.data("open-dialog-counter") -
			1;
			this.$table.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && this.$actions.enableAction("delete")
			})
		},
		enableRestrictions: function() {
			var $counter$$ = this.$table.data("open-dialog-counter") ? this.$table.data("open-dialog-counter") + 1: 1;
			this.$table.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && this.$actions.disableAction("delete")
			})
		},
		enableActions: function() {
			$("#RoutingDynamic .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$("#RoutingDynamicSettings .actions button").removeAttr("disabled").removeClass("ui-state-disabled");
			$("#RoutingDynamicInterfaces .actions button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".routearea-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".routeinterface-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$11_$buttonRoutingDynamicInterfacesAdd$$ = $("#RoutingDynamicAreasAdd button");
			$$button$$11_$buttonRoutingDynamicInterfacesAdd$$.button("option", "disabled") && $$button$$11_$buttonRoutingDynamicInterfacesAdd$$.button({
				disabled: !1
			});
			$$button$$11_$buttonRoutingDynamicInterfacesAdd$$ = $("#RoutingDynamicInterfacesAdd button");
			$$button$$11_$buttonRoutingDynamicInterfacesAdd$$.button("option", "disabled") && $$button$$11_$buttonRoutingDynamicInterfacesAdd$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$("#RoutingDynamic .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$("#RoutingDynamicSettings .actions button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$("#RoutingDynamicInterfaces .actions button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".routearea-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".routeinterface-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$12_$buttonRoutingDynamicInterfacesAdd$$ = $("#RoutingDynamicAreasAdd button");
			 ! 1 == $$button$$12_$buttonRoutingDynamicInterfacesAdd$$.button("option", "disabled") && $$button$$12_$buttonRoutingDynamicInterfacesAdd$$.button({
				disabled: !0
			});
			$$button$$12_$buttonRoutingDynamicInterfacesAdd$$ = $("#RoutingDynamicInterfacesAdd button"); ! 1 == $$button$$12_$buttonRoutingDynamicInterfacesAdd$$.button("option", "disabled") && $$button$$12_$buttonRoutingDynamicInterfacesAdd$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Routing.Dynamic.Interface.DropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Routing.Dynamic.Interface.DropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#RoutingDynamicInterfaceDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionDelete: function() {
			var $self$$ = this.row;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Interface Confirmation",
				message: "Are you sure you want to delete this interface?",
				confirm: function() {
					$self$$["delete"]()
				}
			});
			return ! 1
		},
		actionView: function() {
			this.row.config(!0);
			return ! 1
		},
		actionConfig: function() {
			this.row.config();
			return ! 1
		}
	});
	EDGE.Views.Routing.Dynamic.Interface.Row = EDGE.Views.Global.Abstract.Row.extend({
		initialize: function($args$$) {
			this.intfs = $args$$.intfs;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$);
			this.model.unbind("change")
		},
		data: function() {
			var $ip$$ = this.model.get("ip"),
			$c$$ = ""; ! _empty($ip$$) && (!_empty($ip$$.ospf) && !_empty($ip$$.ospf.cost)) && ($c$$ = $ip$$.ospf.cost);
			return [this.model.get("id"), $c$$, ""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ = this.$(".buttons");
			$$buttons$$.find("button").length || ("operator" ==
			EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Routing.Dynamic.Interface.DropDownButton({
				container: this.$(".buttons"),
				row: this
			}), 0 < this.intfs.$table.data("open-dialog-counter") && (this.$actions.disableAction("delete"), this.$actions.disableAction("status"))));
			this.trigger("render");
			return this
		},
		config: function($readonly$$) {
			this.dialogs.config ?
			this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Routing.Dynamic.Interface.Config({
				model: this.model,
				creating: !1,
				intfs: this.intfs,
				readonly: $readonly$$
			})
		},
		"delete": function() {
			this.intfs.delete_interface(this.model.get("id"), this)
		}
	});
	EDGE.Views.Routing.Dynamic.Interface.Config = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#RoutingDynamicInterfaceConfigTemplate").html());
			this.id = "editdynamicrouteinterface" + (this.model ? this.model.get("id") : "-new" + $args$$.id);
			this.type = "routeinterface";
			this.action = "combo";
			this.title = "OSPF Interface Configuration";
			this.intfs = $args$$.intfs;
			this.creating = $args$$.creating;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ =
			this;
			return {
				submitHandler: function($auth$$1_form$$12_intf$$) {
					$form = $($auth$$1_form$$12_intf$$);
					$auth$$1_form$$12_intf$$ = $self$$.model ? $self$$.model.get("id") : $form.find("select[name=interface]").val();
					if ("" == $auth$$1_form$$12_intf$$ || void 0 == $auth$$1_form$$12_intf$$) $(window).trigger("dialog", ["Must selected an interface", "Validation error"]);
					else {
						var $auth$$1_form$$12_intf$$ = $form.find("select[name=authentication] option:selected").val(),
						$key$$ = $form.find("input[name=authkey]").val();
						if ("plaintext-password" ==
						$auth$$1_form$$12_intf$$ || "md5" == $auth$$1_form$$12_intf$$) {
							if ("" == $key$$ || void 0 == $key$$) {
								$(window).trigger("dialog", ["Must define an auth key when authentication is enabled", "Validation error"]);
								return
							}
							if ("plaintext-password" == $auth$$1_form$$12_intf$$) {
								if (8 < $key$$.length) {
									$(window).trigger("dialog", ["Plaintext password must be between 1-8 characters", "Validation error"]);
									return
								}
							} else if ("md5" == $auth$$1_form$$12_intf$$ && 16 < $key$$.length) {
								$(window).trigger("dialog", ["Plaintext password must be between 1-16 characters",
								"Validation error"]);
								return
							}
						} else if ("" != $key$$ && void 0 != $key$$) {
							$(window).trigger("dialog", ["No auth key should be used if authentication is off", "Validation error"]);
							return
						}
						$self$$.save()
					}
				},
				rules: {
					authkey: {
						noQuotes: !0
					},
					cost: {
						range: [1, 65535]
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.intfs.enableRestrictions();
			var $$parent$$ = this.$("form").find("select[name=interface]");
			this.model ? $$parent$$.parent().empty().addClass("readonly").append(this.model.get("id")) :
			($$parent$$.empty().append('<option value="">- select -</option>'), this.intfs.collection.each(function($iface$$) {
				$$parent$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
			}));
			this.delegateEvents();
			this.flaggable = !1;
			this.update();
			this.flaggable = !0;
			return this
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$a_p_ip$$17_ospf$$ = $$form$$.find("select[name=interface]").attr("id"),
			$a$$52_a_m_intf$$ = this.model ? this.model.get("id") : "";
			this.updateSelect($$form$$.find("select[name=interface]"),
			$a$$52_a_m_intf$$, $$form$$.find('label[for="' + $a_p_ip$$17_ospf$$ + '"]'));
			$a_p_ip$$17_ospf$$ = this.model ? this.model.get("ip") : null;
			$a_p_ip$$17_ospf$$ = _empty($a_p_ip$$17_ospf$$) ? null: $a_p_ip$$17_ospf$$.ospf;
			if (!_empty($a_p_ip$$17_ospf$$)) {
				var $atype_c$$ = $a_p_ip$$17_ospf$$.cost,
				$a$$52_a_m_intf$$ = $a_p_ip$$17_ospf$$.authentication,
				$a_p_ip$$17_ospf$$ = _empty($a$$52_a_m_intf$$) ? null: $a$$52_a_m_intf$$["plaintext-password"],
				$a$$52_a_m_intf$$ = _empty($a$$52_a_m_intf$$) ? null: _empty($a$$52_a_m_intf$$.md5) ? null: $a$$52_a_m_intf$$.md5["key-id"];
				if (!_empty($atype_c$$)) {
					var $akey_cid$$ = $$form$$.find("input[name=cost]").attr("id");
					this.updateTextbox($$form$$.find("input[name=cost]"), $atype_c$$, $$form$$.find('label[for="' + $akey_cid$$ + '"]'))
				}
				var $akey_cid$$ = $atype_c$$ = "",
				$a_id$$ = $$form$$.find("select[name=authentication]").attr("id"),
				$k_id$$ = $$form$$.find("input[name=authkey]").attr("id");
				if (_empty($a_p_ip$$17_ospf$$)) {
					if (!_empty($a$$52_a_m_intf$$)) {
						var $atype_c$$ = "md5",
						$k$$;
						for ($k$$ in $a$$52_a_m_intf$$) {
							$akey_cid$$ = $a$$52_a_m_intf$$[$k$$]["md5-key"];
							break
						}
					}
				} else $atype_c$$ = "plaintext-password",
				$akey_cid$$ = $a_p_ip$$17_ospf$$;
				this.updateSelect($$form$$.find("select[name=authentication]"), $atype_c$$, $$form$$.find('label[for="' + $a_id$$ + '"]'));
				this.updateTextbox($$form$$.find("input[name=authkey]"), $akey_cid$$, $$form$$.find('label[for="' + $k_id$$ + '"]'))
			}
			this.show()
		},
		prepareSave: function($batch$$) {
			if (this.creating && !this.model) {
				var $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$ = this.$("select[name=interface] option:selected").val();
				this.model = this.intfs.collection.filterById($id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$)
			}
			if (this.model) {
				var $iid$$ =
				this.model.get("id"),
				$id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$ = this.model.get("type"),
				$intfp$$ = {
					id: $iid$$,
					type: $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$
				},
				$siln$$ = {
					silent: !0
				},
				$pintfp$$ = null,
				$id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$ = this.model.get("parent");
				_empty($id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$) || ($intfp$$.parent = $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$, $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$ = this.intfs.collection.filterById($id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$),
				$pintfp$$ = {
					id: $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$.get("id"),
					type: $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$.get("type")
				});
				var $ifs$$ = {},
				$config$$ = {},
				$changed$$ = {};
				_.each(["set", "delete", "get"],
				function($t$$) {
					$ifs$$[$t$$] = $batch$$.get($t$$).get("interfaces");
					if ($pintfp$$) {
						$ifs$$[$t$$].add($ifs$$[$t$$].modelize($pintfp$$), $siln$$);
						$ifs$$[$t$$].filterById($pintfp$$.id).clear($siln$$)
					}
					$ifs$$[$t$$].add($ifs$$[$t$$].modelize($intfp$$), $siln$$);
					$config$$[$t$$] = $ifs$$[$t$$].filterById($iid$$);
					$config$$[$t$$].unset("mtu");
					$config$$[$t$$].unset("mac");
					$changed$$[$t$$] = false
				},
				this);
				var $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$ = this.model.get("ip"),
				$id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$ = _empty($id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$) ? void 0: $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$.ospf,
				$data$$ = "",
				$o_atype$$ = "",
				$o_akey$$ = "",
				$o_midx$$ = "";
				if (!_empty($id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$)) {
					var $data$$ = $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$.cost,
					$a$$53_a_m$$ = $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$.authentication,
					$a_p$$1_akey$$ = _empty($a$$53_a_m$$) ? null: $a$$53_a_m$$["plaintext-password"],
					$a$$53_a_m$$ = _empty($a$$53_a_m$$) ? null: _empty($a$$53_a_m$$.md5) ? null: $a$$53_a_m$$.md5["key-id"];
					if (_empty($a_p$$1_akey$$)) {
						if (!_empty($a$$53_a_m$$)) {
							var $o_atype$$ = "md5",
							$atype$$1_k$$;
							for ($atype$$1_k$$ in $a$$53_a_m$$) {
								$o_midx$$ = $atype$$1_k$$;
								$o_akey$$ = $a$$53_a_m$$[$atype$$1_k$$]["md5-key"];
								break
							}
						}
					} else $o_atype$$ = "plaintext-password",
					$o_akey$$ = $a_p$$1_akey$$
				}
				var $cost$$ =
				this.$("input[name=cost]").val();
				$atype$$1_k$$ = this.$("select[name=authentication] option:selected").val();
				$a_p$$1_akey$$ = this.$("input[name=authkey]").val();
				$a$$53_a_m$$ = {
					"delete": {
						ip: {
							ospf: {}
						}
					},
					set: {
						ip: {
							ospf: {}
						}
					}
				};
				_empty($cost$$) ? _empty($data$$) || ($a$$53_a_m$$["delete"].ip.ospf.cost = null, $changed$$["delete"] = !0) : $data$$ !== $cost$$ && ($a$$53_a_m$$.set.ip.ospf.cost = $cost$$, $changed$$.set = !0);
				if (_empty($atype$$1_k$$)) _empty($o_atype$$) || ($a$$53_a_m$$["delete"].ip.ospf.authentication = null, $changed$$["delete"] =
				!0);
				else if (_empty($o_atype$$) || $o_atype$$ !== $atype$$1_k$$ || $o_akey$$ !== $a_p$$1_akey$$) _empty($o_atype$$) || ($a$$53_a_m$$["delete"].ip.ospf.authentication = null, $changed$$["delete"] = !0),
				$data$$ = {},
				"plaintext-password" === $atype$$1_k$$ ? $data$$ = {
					"plaintext-password": $a_p$$1_akey$$
				}: ($atype$$1_k$$ = {},
				$atype$$1_k$$[$o_midx$$ ? $o_midx$$: "1"] = {
					"md5-key": $a_p$$1_akey$$
				},
				$data$$ = {
					md5: {
						"key-id": $atype$$1_k$$
					}
				}),
				$a$$53_a_m$$.set.ip.ospf.authentication = $data$$,
				$changed$$.set = !0; ! $changed$$.set && (!$changed$$["delete"] &&
				void 0 === $id$$60_ip$$18_ipar$$1_itype$$4_ospf$$2_pintf$$) && ($a$$53_a_m$$.set.ip.ospf = null, $changed$$.set = !0);
				$changed$$.set ? $config$$.set.set($a$$53_a_m$$.set, $siln$$) : $batch$$.unset("set");
				$changed$$["delete"] ? $config$$["delete"].set($a$$53_a_m$$["delete"], $siln$$) : $batch$$.unset("delete");
				$changed$$.set || $changed$$["delete"] ? $config$$.get.clear($siln$$) : $batch$$.unset("get")
			} else $(window).trigger("dialog", ["Invalid interface selected", "Validation error"])
		},
		save: function($batch$$29_e$$) {
			$batch$$29_e$$ &&
			$batch$$29_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$29_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$29_e$$);
			var $self$$ = this;
			if ($batch$$29_e$$.has("set") || $batch$$29_e$$.has("delete")) this.dialog.addClass("saving"),
			this.intfs.disableActions(),
			$batch$$29_e$$.save(["interfaces"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.intfs.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.interfaces ? (this.model.set({
				ip: {
					ospf: null
				}
			},
			{
				silent: !0
			}), this.intfs.collection["import"]($resp$$.GET.interfaces), this.intfs.update(!0), this.creating && this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			this.intfs.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		},
		flagErrors: function() {
			this.creating || EDGE.Views.Global.Abstract.Config.prototype.flagErrors.call(this)
		}
	});
	EDGE.Routers.Security = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Security",
		routes: {
			Security: "index",
			"Security/Port_Forwarding": "portForwarding",
			"Security/Firewall/Policies": "firewallPolicies",
			"Security/Firewall/Policies/filter/:filter": "firewallPolicies",
			"Security/NAT": "nat",
			"Security/Groups": "groups",
			"Security/Groups/filter/:filter": "groups",
			"Security*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize security router");
			if ("object" != typeof EDGE.Views.Security) throw "Missing security views";
			this.app = $data$$.app;
			this.views = {};
			this.views._container = new EDGE.Views.Security.Container
		},
		showTab: function($subtab$$) {
			var $$tab$$ = $("li#NavSecurity");
			$$tab$$.hasClass("ui-state-active") || ($$tab$$.find("a").trigger("click"), null != $subtab$$ && this.views._container.$(".section-tabs").tabslite("show", $subtab$$))
		},
		index: function() {
			this.debug("forwarding to the port forwarding page.");
			this.navigate("Security/Port_Forwarding");
			this.portForwarding()
		},
		firewallPolicies: function($filter$$) {
			this.showTab(1);
			this.views.firewallPolicies ? this.views.firewallPolicies.render() : this.views.firewallPolicies = new EDGE.Views.Security.Firewall.Policies.Default ({
				collection: this.app.data.view.get("firewall").get("rulesets"),
				groups: this.app.data.view.get("firewall").get("groups"),
				interfaces: this.app.data.view.get("interfaces"),
				stats: this.app.data.stats,
				appdata: this.app.data,
				dpicategories: this.app.data.view.get("system").get("dpi").get("categories")
			});
			this.views.firewallPolicies && this.views.firewallPolicies.filter($filter$$ ?
			$filter$$: "all")
		},
		nat: function() {
			this.showTab(2);
			this.views.nat ? this.views.nat.render() : this.views.nat = new EDGE.Views.Security.Nat.Default ({
				collection: this.app.data.view.get("services").filterByType("nat").get("rules"),
				interfaces: this.app.data.view.get("interfaces"),
				groups: this.app.data.view.get("firewall").get("groups"),
				stats: this.app.data.stats,
				appdata: this.app.data
			})
		},
		groups: function($filter$$) {
			this.showTab(3);
			this.views.groups ? this.views.groups.render() : this.views.groups = new EDGE.Views.Security.Groups.Default ({
				collection: this.app.data.view.get("firewall").get("groups")
			});
			this.views.groups && this.views.groups.filter($filter$$ ? $filter$$ + "-group": "all")
		},
		portForwarding: function() {
			this.showTab(0);
			this.views.pf ? this.views.pf.render() : this.views.pf = new EDGE.Views.Security.PortForwarding.Default ({
				appdata: this.app.data,
				stats: this.app.data.stats
			});
			this.views.pf && this.views.pf.filter("feature", ".Port_Forwarding")
		}
	});
	EDGE.Views.Security = EDGE.Views.Security || {};
	EDGE.Views.Security.Firewall = {};
	EDGE.Views.Security.Container = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Container",
		initialize: function() {
			this.setElement($("#Security"));
			this.render()
		},
		render: function() {
			this.$el.data("rendered") || (this.$(".section-tabs").tabslite({
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$7_anchor$$) {
						var $$anchor$$7_anchor$$ = $($$anchor$$7_anchor$$),
						$location$$ = window.location.hash,
						$filtered$$ = $location$$.indexOf("/filter/"); - 1 != $filtered$$ && ($location$$ = $location$$.substring(0,
						$filtered$$));
						$$anchor$$7_anchor$$.attr("href") == $location$$ && $$anchor$$7_anchor$$.trigger("show")
					})
				},
				content: function($$anchor$$) {
					return $("#" + $$anchor$$.data("container"))
				}
			}), this.$el.data("rendered", !0));
			return this
		},
		reset: function() {
			this.debug("resetting security container")
		}
	});
	EDGE.Views.Security.Firewall.Policies = {};
	EDGE.Views.Security.Firewall.Policies.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Firewall.Policies.Default",
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.creates = [];
			this.groups = $args$$.groups;
			this.interfaces = $args$$.interfaces;
			this.stats = $args$$.stats;
			this.appdata = $args$$.appdata;
			this.dpicategories = $args$$.dpicategories;
			this.setElement($("#Security .section-container #SecurityFirewallPolicies"));
			this.template = _.template($("#SecurityFirewallPoliciesTemplate").html());
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$filters = this.$("#SecurityFirewallPoliciesFilters").tabslite();
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No rulesets available.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "name"
					},
					{
						sClass: "interfaces"
					},
					{
						sClass: "count"
					},
					{
						sClass: "default"
					},
					{
						sClass: "buttons",
						bSortable: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[0, "asc"]],
					sScrollY: 1,
					bScrollCollapse: !0,
					sDom: '<"H"fr>t<"F"ip>'
				},
				this.options.options ||
				{}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			return this
		},
		filter: function($filter$$) {
			this.$filters.find("li." + $filter$$ + " a").trigger("show");
			this.dataTable.fnFilter("all" == $filter$$ ? "": $filter$$, 3)
		},
		add: function($ruleset$$) {
			this.rows[$ruleset$$.get("name")] = new EDGE.Views.Security.Firewall.Policies.RulesetRow({
				model: $ruleset$$,
				interfaces: this.interfaces,
				groups: this.groups,
				policies: this,
				dataTable: this.dataTable,
				stats: this.stats,
				appdata: this.appdata,
				dpicategories: this.dpicategories
			});
			var $self$$ = this;
			this.lazyResize();
			this.rows[$ruleset$$.get("name")].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.$table.fnDraw();
				$settings$$.oScroll.sY = this.$table.parents(".main-section").height() - this.$table.parents(".main-section").find(".section-tabs").height() - this.$table.parents(".table-container").height();
				this.$table.fnDraw()
			}
		},
		delete_ruleset: function($rs_mod$$, $row$$) {
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.get("get").set({
				firewall: null
			});
			var $rulesets$$ = $batch$$.get("delete").get("firewall").clear().get("rulesets");
			$rulesets$$.add({
				name: $rs_mod$$.get("name"),
				ipv6: $rs_mod$$.get("ipv6")
			},
			{
				silent: !0
			});
			$rulesets$$.last().clear()["delete"]();
			this.disableActions();
			var $self$$ = this;
			$row$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					var $cs$$1_ruleset$$ = $resp$$.COMMIT &&
					$resp$$.COMMIT.success && 1 != $resp$$.COMMIT.failure;
					if ($resp$$.DELETE && $resp$$.DELETE.success && $cs$$1_ruleset$$ && ($cs$$1_ruleset$$ = $self$$.collection.filterByName($rs_mod$$.get("name")))) {
						$self$$.collection.remove($cs$$1_ruleset$$);
						return
					}
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.enableActions();
					$row$$ && $row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.firewall ? (this.reset(), $resp$$.GET.firewall.name && this.collection["import"]($resp$$.GET.firewall.name, !1), $resp$$.GET.firewall["ipv6-name"] && this.collection["import"]($resp$$.GET.firewall["ipv6-name"], !0), this.render()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		create: function() {
			this.creates.push(new EDGE.Views.Security.Firewall.Policies.RulesetCreate({
				id: this.creates.length,
				collection: this.collection,
				policies: this
			}))
		},
		remove: function($name$$76_ruleset$$) {
			if (this.dataTable) {
				var $name$$76_ruleset$$ = $name$$76_ruleset$$.get("name"),
				$row$$ = this.rows[$name$$76_ruleset$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$name$$76_ruleset$$], this.lazyResize())
			}
		},
		reset: function($soft$$) {
			this.debug("resetting security firewall policies");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$table.data("open-dialog-counter") ? 0: this.$table.data("open-dialog-counter") - 1;
			this.$table.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && (this.$actions.enableAction("delete"), this.$actions.enableAction("copy"))
			})
		},
		enableRestrictions: function() {
			var $counter$$ =
			this.$table.data("open-dialog-counter") ? this.$table.data("open-dialog-counter") + 1: 1;
			this.$table.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && (this.$actions.disableAction("delete"), this.$actions.disableAction("copy"))
			})
		},
		enableActions: function() {
			$("#SecurityFirewallPolicies .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".ruleset-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = $("#SecurityFirewallPoliciesAdd button");
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$("#SecurityFirewallPolicies .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".ruleset-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$ = $("#SecurityFirewallPoliciesAdd button"); ! 1 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Security.Firewall.Policies.RulesetRowDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Firewall.Policies.RulesetRowDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#SecurityFirewallPoliciesRulesetRowDropDownButton").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			var $events$$ =
			{};
			return $events$$ = this.readonly ? {
				"click .action-rules-readonly": "actionViewRules",
				"click .action-configuration-readonly": "actionViewConfiguration",
				"click .action-interfaces-readonly": "actionViewInterfaces",
				"click .action-stats-readonly": "actionViewStats"
			}: {
				"click .action-rules": "actionRules",
				"click .action-configuration": "actionConfiguration",
				"click .action-interfaces": "actionInterfaces",
				"click .action-stats": "actionStats",
				"click .action-copy": "actionCopy",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			var $$actionList$$ = this.$el.children(".action-list");
			this.readonly ? ($$actionList$$.find(".action-rules").parent().remove(), $$actionList$$.find(".action-configuration").parent().remove(), $$actionList$$.find(".action-interfaces").parent().remove(), $$actionList$$.find(".action-stats").parent().remove(), $$actionList$$.find(".action-copy").parent().remove(), $$actionList$$.find(".action-delete").parent().remove()) : ($$actionList$$.find(".action-rules-readonly").parent().remove(),
			$$actionList$$.find(".action-configuration-readonly").parent().remove(), $$actionList$$.find(".action-interfaces-readonly").parent().remove(), $$actionList$$.find(".action-stats-readonly").parent().remove());
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionViewRules: function() {
			this.row.config(!0, 0);
			return ! 1
		},
		actionViewConfiguration: function() {
			this.row.config(!0, 1);
			return ! 1
		},
		actionViewInterfaces: function() {
			this.row.config(!0, 2);
			return ! 1
		},
		actionViewStats: function() {
			this.row.config(!0,
			3);
			return ! 1
		},
		actionRules: function() {
			this.row.config(!1, 0);
			return ! 1
		},
		actionConfiguration: function() {
			this.row.config(!1, 1);
			return ! 1
		},
		actionInterfaces: function() {
			this.row.config(!1, 2);
			return ! 1
		},
		actionStats: function() {
			this.row.config(!1, 3);
			return ! 1
		},
		actionCopy: function() {
			this.row.copy();
			return ! 1
		},
		actionDelete: function() {
			var $self$$ = this.row,
			$name$$ = $self$$.model.get("name");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete ruleset " + $name$$ +
				" ?",
				confirm: function() {
					$self$$["delete"]()
				}
			});
			return ! 1
		}
	});
	EDGE.Views.Security.Firewall.Policies.RulesetRow = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Firewall.Policies.RulesetRow",
		initialize: function($args$$) {
			this.debug("initialize()");
			this.groups = $args$$.groups;
			this.interfaces = $args$$.interfaces;
			this.policies = $args$$.policies;
			this.stats = $args$$.stats;
			this.appdata = $args$$.appdata;
			this.dpicategories = $args$$.dpicategories;
			this.model.get("rules").bind("add", this.update, this);
			this.model.get("rules").bind("remove", this.update,
			this);
			this.specialColumns = [4];
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			this.debug("data()");
			var $name$$ = this.model.get("name"),
			$interfaces$$ = [];
			_.each(this.interfaces.filterByFirewallRuleset($name$$),
			function($intf$$) {
				var $id$$ = $intf$$.get("id"),
				$fw$$ = $intf$$.get("firewall");
				$fw$$ && _.each(["in", "out", "local"],
				function($dir$$) {
					$fw$$[$dir$$] && $fw$$[$dir$$].name == $name$$ && $interfaces$$.push($id$$ + "/" + $dir$$)
				})
			},
			this);
			return [this.model.get("name"), $interfaces$$.length ?
			$interfaces$$.join(", ") : "", this.model.get("rules").length, this.model.get("default-action") || "", ""]
		},
		render: function() {
			this.$actions && this.$actions.remove();
			this.$actions = new EDGE.Views.Security.Firewall.Policies.RulesetRowDropDownButton({
				container: this.$(".buttons"),
				row: this
			});
			0 < this.policies.$table.data("open-dialog-counter") && (this.$actions.disableAction("delete"), this.$actions.disableAction("copy"));
			this.trigger("render");
			return this
		},
		config: function($readonly$$, $activeTab$$) {
			this.dialogs.config ?
			this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Security.Firewall.Policies.RulesetConfig({
				model: this.model,
				interfaces: this.interfaces,
				collection: this.model.get("rules"),
				policies: this.policies,
				groups: this.groups,
				readonly: $readonly$$,
				stats: this.stats,
				appdata: this.appdata,
				dpicategories: this.dpicategories
			});
			$(this.dialogs.config.$("div.dialog-tabs").tabslite("tabs")[$activeTab$$ || 0]).trigger("click")
		},
		"delete": function() {
			this.policies.delete_ruleset(this.model, this)
		},
		copy: function() {
			this.dialogs.copy ?
			this.dialogs.copy.show(!0) : this.dialogs.copy = new EDGE.Views.Security.Firewall.Policies.RulesetCopy({
				model: this.model,
				policies: this.policies
			})
		}
	});
	EDGE.Views.Security.Firewall.Policies.RulesetCopy = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#SecurityFirewallPoliciesRulesetCopyTemplate").html());
			this.id = "rulesetcopy" + this.model.get("type") + this.model.get("id");
			this.title = "Copy Firewall Ruleset";
			this.type = "ruleset";
			this.action = "copy";
			this.policies = $args$$.policies;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		save: function($batch$$31_e$$) {
			$batch$$31_e$$ && $batch$$31_e$$.preventDefault();
			$batch$$31_e$$ = new EDGE.Models.Batch;
			$batch$$31_e$$.unset("set");
			$batch$$31_e$$.unset("delete");
			$batch$$31_e$$.get("get").set({
				firewall: null
			});
			var $g$$3_key$$ = this.model.get("ipv6") ? "ipv6-name": "name",
			$data$$ = this.model.get("name"),
			$nname$$ = this.$("input[name=name]").val() ? this.$("input[name=name]").val() : $data$$ + "-copy",
			$rn$$ = {};
			$rn$$[$data$$] = {
				to: $nname$$
			};
			$data$$ = {};
			$data$$[$g$$3_key$$] = [$rn$$];
			$g$$3_key$$ = $batch$$31_e$$.get("generic");
			$g$$3_key$$.setOp("CLONE");
			$g$$3_key$$.setAttrs({
				firewall: $data$$
			});
			this.dialog.addClass("saving");
			this.policies.disableActions();
			var $self$$ = this;
			$batch$$31_e$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.policies.enableActions();
					$self$$.dialog && ($self$$.dialog.removeClass("saving"), $self$$.remove())
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this,
			$resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.firewall ? ($resp$$.GET.firewall.name && this.model.collection["import"]($resp$$.GET.firewall.name, !1), $resp$$.GET.firewall["ipv6-name"] && this.model.collection["import"]($resp$$.GET.firewall["ipv6-name"], !0), this.policies.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		}
	});
	EDGE.Views.Security.Firewall.Policies.RulesetCreate = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Firewall.Policies.RulesetCreate",
		initialize: function($args$$) {
			this.template = _.template($("#SecurityFirewallPoliciesRulesetCreateTemplate").html());
			this.id = "ruleset" + $args$$.id;
			this.type = "ruleset";
			this.action = "create";
			this.title = "Create New Firewall Ruleset";
			this.policies = $args$$.policies;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			return {
				rules: {
					name: {
						required: !0,
						maxlength: 28,
						noIptablesReserved: !0,
						noshellpunctuation: !0,
						noQuotes: !0,
						noWhiteSpace: !0,
						novzone: !0
					},
					description: {
						noQuotes: !0
					},
					"default-action": {
						required: !0
					}
				},
				messages: {
					name: {
						required: Msg.V_FwNameRequired,
						maxlength: Msg.V_FwNameMaxLength,
						noshellpunctuation: Msg.V_ShellPunctuation
					}
				}
			}
		},
		prepareSave: function($batch$$32_collection$$) {
			var $fname_model$$ = this.$("input[name=name]").val();
			$batch$$32_collection$$.unset("get");
			$batch$$32_collection$$.unset("delete");
			$batch$$32_collection$$.get("set").get("firewall").clear();
			$batch$$32_collection$$.get("gget").put("firewall", "name", $fname_model$$, null);
			$batch$$32_collection$$.get("gget").put("firewall", "name", "__FORCE_ASSOC", !0);
			$batch$$32_collection$$ = $batch$$32_collection$$.get("set").get("firewall").get("rulesets");
			$batch$$32_collection$$.add({
				name: $fname_model$$
			});
			$fname_model$$ = $batch$$32_collection$$.last();
			$fname_model$$.clear({
				silent: !0
			});
			$fname_model$$.set({
				description: this.$("input[name=description]").val(),
				"default-action": this.$("input[type=radio][name=default-action]:checked").val(),
				ipv6: !1,
				"enable-default-log": this.$("input[name=enable-default-log]").is(":checked")
			},
			{
				silent: !0
			})
		},
		save: function($batch$$33_e$$) {
			$batch$$33_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$33_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$33_e$$);
			var $self$$ = this;
			$batch$$33_e$$.has("set") && (this.dialog.addClass("saving"), $batch$$33_e$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.firewall ? ($resp$$.GET.firewall.name && this.collection["import"]($resp$$.GET.firewall.name, !1), $resp$$.GET.firewall["ipv6-name"] && this.collection["import"]($resp$$.GET.firewall["ipv6-name"], !0), this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this);
			this.policies.enableRestrictions()
		},
		remove: function() {
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this);
			this.policies.disableRestrictions()
		}
	});
	EDGE.Views.Security.Firewall.Policies.RulesetConfig = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Firewall.Policies.RulesetConfig",
		events: {
			"submit form": "save",
			"click button.order": "reorder",
			"click button.add": "create"
		},
		initialize: function($args$$) {
			this.template = _.template($("#SecurityFirewallPoliciesRulesetConfigTemplate").html());
			var $name$$ = this.model.get("name");
			this.id = "ruleset" + $name$$;
			this.type = "ruleset";
			this.action = "edit";
			this.title = "Ruleset Configuration for " +
			$name$$;
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.removeRule, this);
			this.rows = {};
			this.creates = [];
			this.groups = $args$$.groups;
			this.interfaces = $args$$.interfaces;
			this.policies = $args$$.policies;
			this.stats = $args$$.stats;
			this.appdata = $args$$.appdata;
			this.dpicategories = $args$$.dpicategories;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					var $err$$ = !1;
					$form.find("fieldset.interfaces div.interface").each(function($$this$$25_dir$$) {
						var $$this$$25_dir$$ = $(this),
						$intf$$ = $$this$$25_dir$$.find("select[name=interface] option:selected").val(),
						$$this$$25_dir$$ = $$this$$25_dir$$.find("select[name=direction] option:selected").val();
						if ("" == $intf$$ && "" != $$this$$25_dir$$ || "" != $intf$$ && "" == $$this$$25_dir$$) $err$$ = !0
					});
					$err$$ ? $(window).trigger("dialog", ["Must specify both interface and direction", "Validation error"]) : $self$$.save()
				},
				rules: {
					description: {
						noQuotes: !0
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.policies.enableRestrictions();
			var $self$$ = this;
			if (!this.$el.data("rendered")) {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$table = this.$("div.rules table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sEmptyTable: "No rules available."
					},
					aoColumns: [{
						sClass: "new",
						bVisible: !1
					},
					{
						sClass: "order"
					},
					{
						sClass: "description"
					},
					{
						sClass: "source"
					},
					{
						sClass: "destination"
					},
					{
						sClass: "protocol"
					},
					{
						sClass: "action"
					},
					{
						sClass: "buttons"
					}],
					bPaginate: !1,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					bSort: !1,
					sDom: "t"
				},
				this.options.options || {}));
				this.dataTable.fnFilter("false", 0);
				if ("admin" == EDGE.Config.User.level) {
					var $$buttons$$ = this.$el.find("div.actions button");
					this.$("div.dialog-tabs").tabslite("tabs").bind("show",
					function() {
						$$buttons$$.hide();
						var $button$$ = $(this).data("button");
						$button$$ && $$buttons$$.filter("." + $button$$).show()
					}).first().trigger("show")
				} else this.$("div.actions button").hide();
				$self$$ = this;
				this.$tbody.sortable({
					cursor: "move",
					axis: "y",
					forcePlaceholderSize: !0,
					stop: function($event$$, $ui$$) {
						var $$item$$ = $($ui$$.item),
						$ord$$ = $$item$$.find(".order").html(),
						$from$$ = parseInt($ord$$, 10),
						$$item$$ = $$item$$.prevAll("tr").length + 1,
						$rule$$0$$ = $self$$.collection.filterByOrder($from$$);
						if (null === $ord$$ || void 0 === $ord$$) $from$$ = $$item$$;
						$from$$ > $$item$$ ? ($self$$.collection.filterByOrderBetween($$item$$ - 1, $from$$).each(function($rule$$) {
							$rule$$.set({
								order: $rule$$.get("order") + 1
							})
						}), $rule$$0$$.set({
							order: $$item$$
						})) :
						$$item$$ > $from$$ && ($self$$.collection.filterByOrderBetween($from$$, $$item$$ + 1).each(function($rule$$) {
							$rule$$.set({
								order: $rule$$.get("order") - 1
							})
						}), $rule$$0$$.set({
							order: $$item$$
						}));
						$from$$ != $$item$$ && ($self$$.reordered = !0, $self$$.dataTable.fnSort([[1, "asc"]]), $self$$.disableAddButton(), $self$$.disableActions())
					}
				}).disableSelection();
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add);
				var $$statsTab$$ = this.$("div.dialog-tabs li a.realtime");
				$$statsTab$$.one("show",
				function() {
					$self$$.renderStats($$statsTab$$)
				});
				this.$el.data("rendered", !0);
				this.show();
				this.delegateEvents()
			}
			this.flaggable = !1;
			this.update();
			this.flaggable = !0;
			return this
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$("fieldset.actions").remove()
		},
		renderStats: function($$tab$$) {
			this.statsView = new EDGE.Views.Security.Firewall.Policies.RulesetStats({
				model: this.model,
				collection: this.model.get("stats"),
				rules: this.collection,
				el: this.$("div.tab-content.stats"),
				dialog: this,
				stats: this.stats,
				appdata: this.appdata
			});
			var $self$$ = this;
			$$tab$$.bind("show",
			function() {
				$self$$.statsView.subscribe()
			}).bind("hide",
			function() {
				$self$$.statsView.unsubscribe()
			}).trigger("show")
		},
		renderAddables: function() {
			var $self$$ = this,
			$$interfaces$$ = this.$("fieldset.interfaces"),
			$$select$$ = $$interfaces$$.find("select[name=interface]");
			this.interfaces.each(function($iface$$) {
				$$select$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
			});
			this.$template = $$interfaces$$.find("div.interface");
			this.$template.find("span.remove").button({
				icons: {
					primary: "ui-icon-minus"
				},
				label: "Remove"
			}).on("click",
			function() {
				$self$$.$template.remove()
			});
			this.readonly && this.$template.find("span.remove").remove();
			$$interfaces$$.addable({
				template: $$interfaces$$.find("div.interface").clone(!0),
				add: this.readonly ? null: $('<span class="addable">Add Interface</span>').button({
					icons: {
						primary: "ui-icon-plus"
					}
				}),
				added: function() {
					var $$inserted$$ = this.inserted;
					$self$$.readonly || ($remove = this.inserted.find("span.remove").on("click",
					function() {
						$$inserted$$.remove()
					}));
					$self$$.show()
				}
			})
		},
		add: function($rule$$) {
			this.rows[$rule$$.get("id")] =
			new EDGE.Views.Security.Firewall.Policies.RuleRow({
				model: $rule$$,
				ruleset: this.model,
				interfaces: this.interfaces,
				groups: this.groups,
				rsobj: this,
				dataTable: this.dataTable,
				dpicategories: this.dpicategories
			});
			this.$el.data("rendered") && this.show()
		},
		create: function() {
			this.creates.push(new EDGE.Views.Security.Firewall.Policies.RuleConfig({
				id: this.creates.length,
				collection: this.collection,
				ruleset: this.model,
				interfaces: this.interfaces,
				groups: this.groups,
				rsobj: this,
				dpicategories: this.dpicategories
			}))
		},
		update: function() {
			var $$form$$ =
			this.$("form"),
			$n$$ = this.model.get("name");
			this.updateTextbox($$form$$.find("input[name=name]"), $n$$, $$form$$.find('label[for="' + $$form$$.find("input[name=name]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=description]"), this.model.get("description"), $$form$$.find('label[for="' + $$form$$.find("input[name=description]").attr("id") + '"]'));
			this.updateRadio($$form$$.find("input[type=radio][name=default-action]"), $$form$$.find("input[name=default-action][value=" + this.model.get("default-action") +
			"]"), $$form$$.find("label[for=default-action]"));
			var $dlog_m_interfaces$$ = this.model.get("enable-default-log");
			this.updateCheckbox($$form$$.find("input[name=enable-default-log]"), $dlog_m_interfaces$$ || null === $dlog_m_interfaces$$, $$form$$.find('label[for="' + $$form$$.find("input[name=enable-default-log]").attr("id") + '"]'));
			var $dlog_m_interfaces$$ = this.interfaces.filterByFirewallRuleset($n$$),
			$$interfaces$$ = $$form$$.find("fieldset.interfaces");
			$dlog_m_interfaces$$.length && ($$interfaces$$.find("div.interface").remove(),
			_.each($dlog_m_interfaces$$,
			function($iface$$) {
				_.each(["in", "out", "local"],
				function($dir$$) {
					$iface$$.get("firewall")[$dir$$] && $iface$$.get("firewall")[$dir$$].name == $n$$ && (this.readonly ? $$interfaces$$.addable("add").addable("last").find("select[name=interface]").next("span.readonly").html($iface$$.get("id")).end().end().find("select[name=direction]").next("span.readonly").html($dir$$) : $$interfaces$$.addable("add").addable("last").find('select[name=interface] option[value="' + $iface$$.get("id") + '"]').attr("selected",
					"selected").end().find('select[name=direction] option[value="' + $dir$$ + '"]').attr("selected", "selected"))
				},
				this)
			},
			this));
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.$el[this.model.isNew() ? "addClass": "removeClass"]("new");
			this.show()
		},
		show: function() {
			EDGE.Views.Global.Abstract.Config.prototype.show.call(this)
		},
		templateVars: function() {
			return {
				name: this.model.get("name")
			}
		},
		prepareSave: function($batch$$) {
			var $result$$ = {},
			$name$$ = this.model.get("name"),
			$attrs$$ = {
				name: $name$$
			};
			_.each(["set",
			"delete", "get"],
			function($type$$) {
				var $rulesets$$ = $batch$$.get($type$$).get("firewall").clear().get("rulesets");
				$rulesets$$.add($attrs$$, {
					silent: !0
				});
				$result$$[$type$$] = $rulesets$$.last().clear()
			},
			this);
			this.setProperty("description", this.$("input[name=description]").val(), $result$$);
			this.setProperty("default-action", this.$("input[name=default-action]:checked").val(), $result$$);
			var $changed$$ = this.model.get("enable-default-log"),
			$changed$$ = $changed$$ || null === $changed$$,
			$nlog$$ = this.$("input[name=enable-default-log]").is(":checked");
			$changed$$ != $nlog$$ && $result$$[$nlog$$ ? "set": "delete"].set({
				"enable-default-log": !0
			},
			{
				silent: !0
			});
			var $ifs$$ = {};
			_.each(["set", "delete"],
			function($t$$) {
				$ifs$$[$t$$] = $batch$$.get($t$$).get("interfaces")
			},
			this);
			var $newInterfaces$$ = {};
			this.$("form").find("fieldset.interfaces div.interface").each(function($$this$$26_direction$$) {
				var $$this$$26_direction$$ = $(this),
				$iface$$ = $$this$$26_direction$$.find("select[name=interface] option:selected").val(),
				$$this$$26_direction$$ = $$this$$26_direction$$.find("select[name=direction] option:selected").val();
				"" != $iface$$ && "" != $$this$$26_direction$$ && (void 0 === $newInterfaces$$[$iface$$] && ($newInterfaces$$[$iface$$] = {}), $newInterfaces$$[$iface$$][$$this$$26_direction$$] = !0)
			});
			var $oldInterfaces$$ = {};
			_.each(this.interfaces.filterByFirewallRuleset($name$$),
			function($iface$$) {
				var $dirs$$ = {};
				_.each(["in", "out", "local"],
				function($dir$$) {
					$iface$$.get("firewall")[$dir$$] && $iface$$.get("firewall")[$dir$$].name == $name$$ && ($dirs$$[$dir$$] = !0)
				});
				$oldInterfaces$$[$iface$$.get("id")] = $dirs$$
			});
			var $siln$$ = {
				silent: !0
			};
			_.each($newInterfaces$$,
			function($dirs$$, $id$$) {
				var $current$$ = this.interfaces.filterById($id$$),
				$added$$ = !1;
				_.each($dirs$$,
				function($t$$, $dir$$) {
					if (!$oldInterfaces$$[$id$$] || !$oldInterfaces$$[$id$$][$dir$$]) {
						var $firewall$$ = {};
						$firewall$$[$dir$$] = {
							name: $name$$
						};
						$added$$ ? $ifs$$.set.last().get("firewall")[$dir$$] = {
							name: $name$$
						}: ("pppoe" == $current$$.get("type") ? $ifs$$.set.add({
							type: $current$$.get("type"),
							id: $id$$,
							parent: $current$$.get("parent"),
							pppoe: $current$$.get("pppoe")
						}) : $ifs$$.set.add({
							type: $current$$.get("type"),
							id: $id$$
						},
						$siln$$), $ifs$$.set.last().clear($siln$$), $ifs$$.set.last().set({
							firewall: $firewall$$
						},
						$siln$$), $ifs$$.set.last().forceChange(), $added$$ = !0)
					}
				},
				this)
			},
			this);
			_.each($oldInterfaces$$,
			function($dirs$$, $id$$) {
				var $current$$ = this.interfaces.filterById($id$$),
				$added$$ = !1;
				_.each($dirs$$,
				function($t$$, $dir$$) {
					if (!$newInterfaces$$[$id$$] || !$newInterfaces$$[$id$$][$dir$$]) {
						var $firewall$$ = {};
						$firewall$$[$dir$$] = {
							name: $name$$
						};
						$added$$ ? $ifs$$["delete"].last().get("firewall")[$dir$$] = {
							name: $name$$
						}:
						("pppoe" == $current$$.get("type") ? $ifs$$["delete"].add({
							type: $current$$.get("type"),
							id: $id$$,
							parent: $current$$.get("parent"),
							pppoe: $current$$.get("pppoe")
						}) : $ifs$$["delete"].add({
							type: $current$$.get("type"),
							id: $id$$
						},
						$siln$$), $ifs$$["delete"].last().clear($siln$$), $ifs$$["delete"].last().set({
							firewall: $firewall$$
						},
						$siln$$), $ifs$$["delete"].last().forceChange(), $added$$ = !0)
					}
				},
				this)
			},
			this);
			$changed$$ = !1;
			$batch$$.get("set").get("firewall").hasChanged() || $batch$$.get("set").get("interfaces").hasChanged() ?
			$changed$$ = !0: $batch$$.unset("set");
			$batch$$.get("delete").get("firewall").hasChanged() || $batch$$.get("delete").get("interfaces").hasChanged() ? $changed$$ = !0: $batch$$.unset("delete");
			$changed$$ && (($batch$$.get("set") && $batch$$.get("set").get("firewall").hasChanged() || $batch$$.get("delete") && $batch$$.get("delete").get("firewall").hasChanged()) && $batch$$.get("get").get("firewall").get("rulesets").last().forceChange(), ($batch$$.get("set") && $batch$$.get("set").get("interfaces").hasChanged() || $batch$$.get("delete") &&
			$batch$$.get("delete").get("interfaces").hasChanged()) && $batch$$.get("get").set({
				interfaces: null
			}))
		},
		save: function($batch$$35_e$$) {
			$batch$$35_e$$ && $batch$$35_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$35_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$35_e$$);
			var $self$$ = this;
			if ($batch$$35_e$$.has("set") || $batch$$35_e$$.has("delete")) this.dialog.addClass("saving"),
			this.policies.disableActions(),
			$batch$$35_e$$.save(["firewall", "interfaces"], {
				success: function($model$$,
				$resp$$) {
					$self$$.response($resp$$);
					$self$$.model && $self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.model && $self$$.flagErrors()
				},
				complete: function() {
					$self$$.policies.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		delete_rule: function($rule_id$$, $row$$) {
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.get("get").set({
				firewall: null
			});
			var $rules$$1_rulesets$$ = $batch$$.get("delete").get("firewall").clear().get("rulesets");
			$rules$$1_rulesets$$.add({
				name: this.model.get("name"),
				ipv6: this.model.get("ipv6")
			},
			{
				silent: !0
			});
			$rules$$1_rulesets$$ = $rules$$1_rulesets$$.last().clear({
				silent: !0
			}).get("rules");
			$rules$$1_rulesets$$.add({
				id: $rule_id$$
			},
			{
				silent: !0
			});
			$rules$$1_rulesets$$.last()["delete"]();
			var $self$$ = this;
			$row$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			this.policies.disableActions();
			$batch$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					if ($resp$$.DELETE &&
					$resp$$.DELETE.success && !($resp$$.COMMIT && 1 == $resp$$.COMMIT.failure)) {
						var $rule$$ = $self$$.collection.filterById($rule_id$$);
						if ($rule$$) {
							$self$$.collection.remove($rule$$);
							return
						}
					}
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.policies.enableActions();
					$self$$.enableAddButton();
					$self$$.enableReordering();
					$self$$.enableActions();
					$row$$ && $row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		copy_rule: function($rule_id$$, $row$$) {
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.get("get").set({
				firewall: null
			});
			var $g$$4_key$$ = this.model.get("ipv6") ? "ipv6-name": "name",
			$rname$$ = this.model.get("name"),
			$data$$ = this.collection.maxId() + 1,
			$rn$$ = {};
			$rn$$[$rule_id$$] = {
				to: $data$$
			};
			$data$$ = {};
			$data$$[$g$$4_key$$] = {};
			$data$$[$g$$4_key$$][$rname$$] = {
				rule: [$rn$$]
			};
			$g$$4_key$$ = $batch$$.get("generic");
			$g$$4_key$$.setOp("CLONE");
			$g$$4_key$$.setAttrs({
				firewall: $data$$
			});
			var $self$$ = this;
			$row$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			this.policies.disableActions();
			$batch$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.dialog && $self$$.dialog.removeClass("saving success")
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.policies.enableActions();
					$self$$.enableAddButton();
					$self$$.enableReordering();
					$self$$.enableActions();
					$row$$ && $row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		response: function($resp$$, $nodes$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$, $nodes$$);
			if ($resp$$ && $resp$$.GET) {
				if ($resp$$.GET.interfaces) this.interfaces["import"]($resp$$.GET.interfaces);
				if ($resp$$.GET.firewall) {
					var $fwn$$ = $resp$$.GET.firewall.name,
					$n$$ = this.model.get("name");
					$fwn$$ && ($fwn$$[$n$$] && (this.dataTable.fnClearTable(), this.rows = {},
					this.collection.reset(), this.model.set({
						description: $fwn$$[$n$$].description,
						"default-action": $fwn$$[$n$$]["default-action"],
						"enable-default-log": "enable-default-log" in $fwn$$[$n$$]
					})), this.policies.collection["import"]($fwn$$, !1))
				}
				this.policies.update();
				this.update()
			} else $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		reorder: function() {
			if (this.reordered) {
				this.dialog.removeClass("saved success error");
				var $rules$$ = [];
				this.collection.each(function($rule$$) {
					var $r$$ =
					{};
					$r$$[$rule$$.id] = $rule$$.get("order");
					$rules$$.push($r$$)
				});
				var $data$$ = {
					name: {}
				};
				$data$$.name[this.model.get("name")] = $rules$$;
				var $batch$$ = new EDGE.Models.Batch;
				$batch$$.unset("set");
				$batch$$.unset("delete");
				$batch$$.get("get").set({
					firewall: null
				});
				var $g$$ = $batch$$.get("generic");
				$g$$.setOp("FW_REORDER");
				$g$$.setAttrs($data$$);
				var $self$$ = this;
				this.dialog.addClass("saving");
				$batch$$.save(["firewall"], {
					success: function($model$$, $resp$$) {
						$self$$.statsView && $self$$.statsView.reset(!0);
						$self$$.response($resp$$,
						["FW_REORDER"]);
						$self$$.reordered = !1;
						$self$$.statsView && $self$$.statsView.subscribe();
						$self$$.enableAddButton();
						$self$$.enableActions()
					},
					error: function() {
						$(window).trigger("notify", new EDGE.Models.Notice({
							type: "error",
							notice: Msg.E_SaveFailed
						}))
					},
					complete: function() {
						$self$$.dialog && $self$$.dialog.removeClass("saving")
					}
				})
			}
		},
		remove: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.$el.data("rendered", !1);
			this.$el.empty();
			this.statsView &&
			this.statsView.unsubscribe();
			this.policies.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		},
		removeRule: function($id$$67_rule$$) {
			if (this.dataTable) {
				var $id$$67_rule$$ = $id$$67_rule$$.get("id"),
				$row$$ = this.rows[$id$$67_rule$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$id$$67_rule$$], this.show())
			}
		},
		enableActions: function() {
			this.$el.find(".rules .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled")
		},
		disableActions: function() {
			this.$el.find(".rules .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled")
		},
		enableAddButton: function() {
			var $$button$$ = this.$el.find("button.add.rules");
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableAddButton: function() {
			var $$button$$ = this.$el.find("button.add.rules"); ! 1 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		},
		enableReordering: function() {
			var $counter$$ = 0 == this.$tbody.data("open-dialog-counter") ?
			0: this.$tbody.data("open-dialog-counter") - 1;
			this.$tbody.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && (this.$tbody.sortable("enable"), $.each(this.rows,
			function() {
				this.$actions && (this.$actions.enableAction("delete"), this.$actions.enableAction("copy"))
			}))
		},
		disableReordering: function() {
			var $counter$$ = this.$tbody.data("open-dialog-counter") ? this.$tbody.data("open-dialog-counter") + 1: 1;
			this.$tbody.data("open-dialog-counter", $counter$$); ! 1 == this.$tbody.sortable("option", "disabled") && (this.$tbody.sortable("disable"),
			$.each(this.rows,
			function() {
				this.$actions && (this.$actions.disableAction("delete"), this.$actions.disableAction("copy"))
			}))
		}
	});
	EDGE.Views.Security.Firewall.Policies.RulesetStats = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Firewall.Policies.RulesetStats",
		initialize: function($args$$) {
			_.bindAll(this);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.rules = $args$$.rules;
			this.stats = $args$$.stats;
			this.appdata = $args$$.appdata;
			this.dialog = $args$$.dialog;
			this.subscribed = !1;
			this.template = _.template($("#SecurityFirewallPoliciesRulesetStatsTemplate").html());
			this.render()
		},
		render: function() {
			this.$el.data("rendered") ? this.update() : ("undefined" !== typeof this.dataTable && this.dataTable.fnDestroy(), this.$el.html(this.template).data("rendered", !0), this.$table = this.$("table"), this.$tbody = this.$table.find("tbody"), this.dataTable = this.$table.dataTable(_.extend({
				oLanguage: {
					sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
					sSearch: "Search _INPUT_",
					sEmptyTable: "No stats available.",
					sInfoEmpty: ""
				},
				aoColumns: [{
					sClass: "rule"
				},
				{
					sClass: "packets",
					bSortable: !1
				},
				{
					sClass: "bytes",
					bSortable: !1
				},
				{
					sClass: "action"
				},
				{
					sClass: "description"
				}],
				bPaginate: !1,
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				bSort: !0,
				sDom: "t"
			},
			this.options.options || {})), this.collection.length && this.$tbody.empty(), this.collection.each(this.add));
			return this
		},
		add: function($stats$$) {
			var $rule$$ = this.rules.filterById($stats$$.get("id")); ! $rule$$ && 1E4 == $stats$$.get("id") && ($rule$$ = new Backbone.Model({
				id: $stats$$.get("id"),
				order: $stats$$.get("id")
			}));
			$rule$$ && (this.rows[$stats$$.get("id")] =
			new EDGE.Views.Security.Firewall.Policies.RulesetStatsRow({
				model: $stats$$,
				rule: $rule$$,
				dataTable: this.dataTable
			}));
			this.dialog.show()
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			})
		},
		remove: function($id$$69_stats$$) {
			if (this.dataTable) {
				var $id$$69_stats$$ = $id$$69_stats$$.get("id"),
				$row$$ = this.rows[$id$$69_stats$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$id$$69_stats$$])
			}
		},
		reset: function($soft$$) {
			this.debug("resetting security firewall ruleset stats");
			this.unsubscribe();
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		subscribe: function() {
			if (!this.subscribed) {
				this.subscribed = !0;
				var $fwsub$$ = {
					name: "fw-stats",
					sub_id: "fwstat:" + this.model.get("name"),
					chain: this.model.get("name")
				};
				this.stats.subscribe([$fwsub$$]);
				this.containSubscribe($fwsub$$) || this.appdata.subscribe.push($fwsub$$)
			}
		},
		containSubscribe: function($sub$$) {
			for (var $i$$ =
			0; $i$$ < this.appdata.subscribe.length; $i$$++) if (this.appdata.subscribe[$i$$].name == $sub$$.name) return ! 0;
			return ! 1
		},
		unsubscribe: function() {
			this.subscribed && (this.subscribed = !1, this.stats.unsubscribe([{
				name: "fw-stats",
				sub_id: "fwstat:" + this.model.get("name"),
				chain: this.model.get("name")
			}]))
		}
	});
	EDGE.Views.Security.Firewall.Policies.RulesetStatsRow = EDGE.Views.Global.Abstract.Row.extend({
		initialize: function($args$$) {
			this.rule = $args$$.rule;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			return [this.rule.get("order"), this.model.get("packets") || 0, this.model.get("bytes") || 0, this.model.get("action"), $.xss(this.model.get("description")) || ""]
		}
	});
	EDGE.Views.Security.Firewall.Policies.RuleRowDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Firewall.Policies.RulesetRowDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#SecurityFirewallPoliciesRuleRowDropDownButton").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			var $events$$ =
			{};
			return $events$$ = this.readonly ? {
				"click .action-basic-readonly": "actionViewBasic",
				"click .action-advanced-readonly": "actionViewAdvanced",
				"click .action-source-readonly": "actionViewSource",
				"click .action-destination-readonly": "actionViewDestination",
				"click .action-time-readonly": "actionViewTime"
			}: {
				"click .action-basic": "actionBasic",
				"click .action-advanced": "actionAdvanced",
				"click .action-source": "actionSource",
				"click .action-destination": "actionDestination",
				"click .action-time": "actionTime",
				"click .action-copy": "actionCopy",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			var $$actionList$$ = this.$el.children(".action-list");
			this.readonly ? ($$actionList$$.find(".action-basic").parent().remove(), $$actionList$$.find(".action-advanced").parent().remove(), $$actionList$$.find(".action-source").parent().remove(), $$actionList$$.find(".action-destination").parent().remove(), $$actionList$$.find(".action-time").parent().remove(), $$actionList$$.find(".action-copy").parent().remove(),
			$$actionList$$.find(".action-delete").parent().remove()) : ($$actionList$$.find(".action-basic-readonly").parent().remove(), $$actionList$$.find(".action-advanced-readonly").parent().remove(), $$actionList$$.find(".action-source-readonly").parent().remove(), $$actionList$$.find(".action-destination-readonly").parent().remove(), $$actionList$$.find(".action-time-readonly").parent().remove());
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionViewBasic: function() {
			this.row.config(!0,
			0);
			return ! 1
		},
		actionViewAdvanced: function() {
			this.row.config(!0, 1);
			return ! 1
		},
		actionViewSource: function() {
			this.row.config(!0, 2);
			return ! 1
		},
		actionViewDestination: function() {
			this.row.config(!0, 3);
			return ! 1
		},
		actionViewTime: function() {
			this.row.config(!0, 4);
			return ! 1
		},
		actionBasic: function() {
			this.row.config(!1, 0);
			return ! 1
		},
		actionAdvanced: function() {
			this.row.config(!1, 1);
			return ! 1
		},
		actionSource: function() {
			this.row.config(!1, 2);
			return ! 1
		},
		actionDestination: function() {
			this.row.config(!1, 3);
			return ! 1
		},
		actionTime: function() {
			this.row.config(!1,
			4);
			return ! 1
		},
		actionCopy: function() {
			this.row.copy();
			this.row.rsobj.disableActions();
			this.row.rsobj.disableAddButton();
			this.row.rsobj.disableReordering();
			return ! 1
		},
		actionDelete: function() {
			var $self$$ = this.row,
			$rule$$ = $self$$.model.get("order");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete this firewall rule #" + $rule$$ + " ?",
				confirm: function() {
					$self$$.rsobj.disableActions();
					$self$$.rsobj.disableAddButton();
					$self$$.rsobj.disableReordering();
					$self$$["delete"]()
				}
			});
			return ! 1
		}
	});
	EDGE.Views.Security.Firewall.Policies.RuleRow = EDGE.Views.Global.Abstract.Row.extend({
		initialize: function($args$$) {
			this.specialColumns = [6];
			this.ruleset = $args$$.ruleset;
			this.interfaces = $args$$.interfaces;
			this.groups = $args$$.groups;
			this.rsobj = $args$$.rsobj;
			this.dpicategories = $args$$.dpicategories;
			this.model.bind("added", this.added, this);
			this.model.bind("change:disable", this.renderDisabled, this);
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			var $source$$ = [];
			_.each(this.model.get("source"),
			function($value$$, $type$$) {
				$value$$ && $source$$.push($type$$ + " " + $value$$)
			});
			var $source$$ = $source$$.join("<br />"),
			$destination$$ = [];
			_.each(this.model.get("destination"),
			function($value$$, $type$$) {
				$destination$$.push($type$$ + " " + $value$$)
			});
			$destination$$ = $destination$$.join("<br />");
			return [this.model.isNew(), this.model.get("order"), $.xss(this.model.get("description")) || "-", $source$$, $destination$$, this.model.get("protocol") || "*", this.model.get("action") || "", ""]
		},
		render: function() {
			this.$actions &&
			this.$actions.remove();
			this.$actions = new EDGE.Views.Security.Firewall.Policies.RuleRowDropDownButton({
				container: this.$(".buttons"),
				row: this
			});
			1 < this.rsobj.$tbody.data("open-dialog-counter") && (this.$actions.disableAction("copy"), this.$actions.disableAction("delete"));
			this.renderDisabled(this.model.get("disable"));
			this.trigger("render");
			return this
		},
		config: function($readonly$$, $activeTab$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Security.Firewall.Policies.RuleConfig({
				model: this.model,
				ruleset: this.ruleset,
				interfaces: this.interfaces,
				groups: this.groups,
				rsobj: this.rsobj,
				dpicategories: this.dpicategories,
				readonly: $readonly$$
			});
			$(this.dialogs.config.$("div.dialog-tabs").tabslite("tabs")[$activeTab$$ || 0]).trigger("click")
		},
		"delete": function() {
			this.rsobj.reordered ? $(window).trigger("dialog", ["Save rules order before deleting rules", "Validation error"]) : this.rsobj.delete_rule(this.model.get("id"), this)
		},
		copy: function() {
			this.rsobj.reordered ? $(window).trigger("dialog", ["Save rules order before copying rules",
			"Validation error"]) : this.rsobj.copy_rule(this.model.get("id"), this)
		},
		added: function() {
			this.update(!0);
			this.dataTable.fnDraw(!0)
		}
	});
	function isTcpUdp($protoChecked$$, $protoName$$, $protoNum$$) {
		switch ($protoChecked$$) {
		case "name":
			if ("tcp" == $protoName$$ || "udp" == $protoName$$) return ! 0;
			break;
		case "number":
			if (6 == +$protoNum$$ || 17 == +$protoNum$$) return ! 0;
			break;
		case "tcp_udp":
			return ! 0;
		case "tcp":
			return ! 0;
		case "udp":
			return ! 0
		}
		return ! 1
	}
	EDGE.Views.Security.Firewall.Policies.RuleConfig = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#SecurityFirewallPoliciesRuleConfigTemplate").html());
			this.id = "rule" + (this.model ? this.model.get("id") : "-new" + $args$$.id);
			this.type = "rule";
			this.action = "combo";
			this.title = this.model ? "Rule Configuration for " + this.model.get("id") : "Add New Rule";
			this.ruleset = $args$$.ruleset;
			this.interfaces = $args$$.interfaces;
			this.groups = $args$$.groups;
			this.collection = $args$$.collection;
			this.rsobj = $args$$.rsobj;
			this.dpicategories = $args$$.dpicategories;
			this.CUSTOM = "custom-";
			this.PREDEFINED = "predefined-";
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		templateVars: function() {
			var $ret$$ = {
				cats: "Bypass-Proxies-and-Tunnels File-Transfer Games Instant-messaging Mail-and-Collaboration Mobile P2P Remote-Access-Terminals Social-Network Stock-Market Streaming-Media TopSites-Adult TopSites-Arts TopSites-Business TopSites-Computers TopSites-Games TopSites-Health TopSites-Home TopSites-KidsnTeens TopSites-News TopSites-Recreation TopSites-Reference TopSites-Regional TopSites-Science TopSites-Shopping TopSites-Society TopSites-Sports Voice-over-IP Web-IM".split(" "),
				custom_cats: []
			};
			this.dpicategories.each(function($cat$$) {
				$ret$$.custom_cats.push($cat$$.get("name"))
			},
			this);
			return $ret$$
		},
		validation: function() {
			function $retrieveTab$$($$e$$) {
				var $tab$$;
				_.each(["basic", "advanced", "source", "destination", "time"],
				function($t$$) {
					$$e$$.closest("div.tab-content").hasClass($t$$) && ($tab$$ = $t$$)
				});
				return $tab$$.toProperCase()
			}
			var $self$$ = this;
			return {
				submitHandler: function($action$$18_form$$) {
					$form = $($action$$18_form$$);
					var $action$$18_form$$ = $form.find("input[type=radio][name=action]:checked").val(),
					$dAddr_dport_error_fields_monthDays_weekDays$$ = $form.find(":input.error");
					if ($dAddr_dport_error_fields_monthDays_weekDays$$.length) {
						$form.find("span.error").show();
						var $error_labels$$ = [];
						_.each($dAddr_dport_error_fields_monthDays_weekDays$$,
						function($e$$) {
							$error_labels$$.push($form.find("label[for^=" + $($e$$).attr("name") + "]").html() + "(" + $retrieveTab$$($($e$$)) + ")")
						});
						$(window).trigger("dialog", ["Invalid Input(s): " + $error_labels$$.join(", "), "Validation error"])
					} else if (void 0 == $action$$18_form$$) $(window).trigger("dialog",
					["Must define an action for the rule", "Validation error"]);
					else {
						$action$$18_form$$ = $form.find("input[name=source-port]").val();
						$dAddr_dport_error_fields_monthDays_weekDays$$ = $form.find("input[name=destination-port]").val();
						if ("" != $dAddr_dport_error_fields_monthDays_weekDays$$ || "" != $action$$18_form$$) {
							if ($action$$18_form$$ && $dAddr_dport_error_fields_monthDays_weekDays$$) {
								var $a$$54_protoName$$ = [$action$$18_form$$, $dAddr_dport_error_fields_monthDays_weekDays$$],
								$i$$211_protoChecked$$;
								for ($i$$211_protoChecked$$ in $a$$54_protoName$$) {
									var $port$$1_protoNum$$ =
									$a$$54_protoName$$[$i$$211_protoChecked$$];
									if ( - 1 != $port$$1_protoNum$$.indexOf(",") || -1 != $port$$1_protoNum$$.indexOf("-")) {
										$(window).trigger("dialog", ["Cannot specify multiple ports when both source and destination ports are specified", "Validation error"]);
										return
									}
								}
							}
							$i$$211_protoChecked$$ = $form.find("input[type=radio][name=protocol]:checked").val();
							$a$$54_protoName$$ = $form.find("select[name=protocol-name]").val();
							$port$$1_protoNum$$ = $form.find("input[name=protocol-number]").val();
							if (!isTcpUdp($i$$211_protoChecked$$,
							$a$$54_protoName$$, $port$$1_protoNum$$)) {
								$(window).trigger("dialog", ["Protocol must be 'tcp' and/or 'udp' to use destination/source ports", "Validation error"]);
								return
							}
						}
						$i$$211_protoChecked$$ = $form.find("select[name=source-address-group]").val();
						var $a$$54_protoName$$ = $form.find("select[name=source-iface-address]").val(),
						$port$$1_protoNum$$ = $form.find("select[name=source-network-group]").val(),
						$sPortG$$ = $form.find("select[name=source-port-group]").val(),
						$dAddrG$$ = $form.find("select[name=destination-address-group]").val(),
						$dIfAddr$$ = $form.find("select[name=destination-iface-address]").val(),
						$dNetG$$ = $form.find("select[name=destination-network-group]").val(),
						$dPortG$$ = $form.find("select[name=destination-port-group]").val(); ($i$$211_protoChecked$$ || $a$$54_protoName$$) && $port$$1_protoNum$$ ? $(window).trigger("dialog", ["Can not use both network and address group for source", "Validation error"]) : ($dAddrG$$ || $dIfAddr$$) && $dNetG$$ ? $(window).trigger("dialog", ["Can not use both network and address group for destination", "Validation error"]) :
						$action$$18_form$$ && $sPortG$$ ? $(window).trigger("dialog", ["Can not use both port-group and port for source", "Validation error"]) : $dAddr_dport_error_fields_monthDays_weekDays$$ && $dPortG$$ ? $(window).trigger("dialog", ["Can not use both port-group and port for destination", "Validation error"]) : ($action$$18_form$$ = $form.find("input[name=source-address]").val(), $dAddr_dport_error_fields_monthDays_weekDays$$ = $form.find("input[name=destination-address]").val(), $action$$18_form$$ && ($i$$211_protoChecked$$ ||
						$a$$54_protoName$$ || $port$$1_protoNum$$) ? $(window).trigger("dialog", ["Can not use both group and source address", "Validation error"]) : $dAddr_dport_error_fields_monthDays_weekDays$$ && ($dAddrG$$ || $dIfAddr$$ || $dNetG$$) ? $(window).trigger("dialog", ["Can not use both group and destination address", "Validation error"]) : ($action$$18_form$$ = $form.find("input[type=checkbox][name=monthdays-negation]:checked").val(), $dAddr_dport_error_fields_monthDays_weekDays$$ = $form.find("input[name=monthdays]").val(), $action$$18_form$$ &&
						!$dAddr_dport_error_fields_monthDays_weekDays$$ ? $(window).trigger("dialog", ["Must include Month Days when except is checked", "Validation error"]) : ($action$$18_form$$ = $form.find("input[type=checkbox][name=weekdays-negation]:checked").val(), $dAddr_dport_error_fields_monthDays_weekDays$$ = $form.find("input[name=weekdays]").val(), $action$$18_form$$ && !$dAddr_dport_error_fields_monthDays_weekDays$$ ? $(window).trigger("dialog", ["Must include Week Days when except is checked", "Validation error"]) : $self$$.save())))
					}
				},
				rules: {
					description: {
						noQuotes: !0
					},
					action: {
						required: !0
					},
					"source-address": {
						iptablesAddress: !0
					},
					"destination-address": {
						iptablesAddress: !0
					},
					"source-port": {
						iptablesPort: !0
					},
					"destination-port": {
						iptablesPort: !0
					},
					"source-mac-address": {
						mac: !0
					},
					"protocol-number": {
						range: [0, 255]
					},
					"recent-count": {
						range: [1, 255]
					},
					"recent-time": {
						range: [1, 2147483647]
					},
					monthdays: {
						iptablesMonthDays: !0
					},
					weekdays: {
						iptablesWeekDays: !0
					},
					startdate: {
						iptablesDate: !0
					},
					starttime: {
						iptablesTime: !0
					},
					stopdate: {
						iptablesDate: !0
					},
					stoptime: {
						iptablesTime: !0
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			_.each(["address", "network", "port"],
			function($type$$) {
				_.each(["source", "destination"],
				function($location$$) {
					var $$select$$ = this.$("select[name=" + $location$$ + "-" + $type$$ + "-group]");
					$$select$$.empty().append('<option value="">--</option>');
					this.groups.filterByType($type$$ + "-group").each(function($group$$) {
						$$select$$.append('<option value="' + $group$$.get("name") + '">' + ($group$$.get("description") || $group$$.get("name")) +
						"</option>")
					})
				},
				this)
			},
			this);
			_.each(["source", "destination"],
			function($type$$) {
				var $$addrGroups$$ = this.$("form").find("select[name=" + $type$$ + "-address-group]"),
				$$interfaces$$ = this.$("form").find("select[name=" + $type$$ + "-iface-address]");
				$$interfaces$$.empty().append('<option value="">--</option>');
				this.interfaces.each(function($iface$$) {
					$$interfaces$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
				});
				$$interfaces$$.append('<option value="other">other</option>').on("change",
				function() {
					var $$this$$ = $(this),
					$val$$ = $$this$$.val();
					$val$$ && $$addrGroups$$.val("");
					"other" == $val$$ ? $$this$$.next().show() : $$this$$.next().hide()
				}).trigger("change");
				$$addrGroups$$.on("change",
				function() {
					$(this).val() && $$interfaces$$.val("").trigger("change")
				})
			},
			this);
			this.delegateEvents();
			if (this.model) this.flaggable = !1,
			this.update(),
			this.flaggable = !0;
			else {
				var $$form$$ = this.$("form"),
				$$checked$$ = $$form$$.find("input[name=protocol][value=all]");
				this.updateRadio($$form$$.find("input[type=radio][name=protocol]"),
				$$checked$$, $$form$$.find("legend[data-field=protocol]"));
				this.show()
			}
			this.rsobj.disableReordering();
			return this
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$("form fieldset.utc").hide()
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=description]"), this.model.get("description"), $$form$$.find('label[for="' + $$form$$.find("input[name=description]").attr("id") + '"]'));
			this.updateCheckbox($$form$$.find("input[name=enabled]"),
			!this.model.get("disable"), $$form$$.find("label[for=" + $$form$$.find("input[name=enabled]").attr("id") + "]"));
			this.updateRadio($$form$$.find("input[type=radio][name=action]"), $$form$$.find("input[name=action][value=" + this.model.get("action") + "]"), $$form$$.find("legend[data-field=action]"));
			this.updateCheckbox($$form$$.find("input[name=log]"), "enable" == this.model.get("log"), $$form$$.find("input[name=log]").parents("label"));
			var $monthdays_protocol$$ = this.model.get("protocol"),
			$$appSelect_$checked$$2_time$$;
			if ("all" == $monthdays_protocol$$) $$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=protocol][value=all]"),
			this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$appSelect_$checked$$2_time$$, $$form$$.find("legend[data-field=protocol]"));
			else if (null !== $monthdays_protocol$$) if ("tcp_udp" == $monthdays_protocol$$) $$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=protocol][value=tcp_udp]"),
			this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$appSelect_$checked$$2_time$$,
			$$form$$.find("legend[data-field=protocol]"));
			else if ("tcp" == $monthdays_protocol$$) $$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=protocol][value=tcp]"),
			this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$appSelect_$checked$$2_time$$, $$form$$.find("legend[data-field=protocol]"));
			else if ("udp" == $monthdays_protocol$$) $$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=protocol][value=udp]"),
			this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$appSelect_$checked$$2_time$$,
			$$form$$.find("legend[data-fiedl=protocol]"));
			else {
				var $application_negated_recent_source$$ = !1;
				"!" == $monthdays_protocol$$.substr(0, 1) && ($application_negated_recent_source$$ = !0, $monthdays_protocol$$ = $monthdays_protocol$$.substr(1));
				0 <= parseInt($monthdays_protocol$$, 10) ? ($$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=protocol][value=number]"), this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$appSelect_$checked$$2_time$$, $$form$$.find("legend[data-field=protocol]")), this.updateCheckbox($$form$$.find("input[name=protocol-number-negation]"),
				$application_negated_recent_source$$, $$form$$.find("input[name=protocol-number-negation]").parents("label")), this.updateTextbox($$form$$.find("input[name=protocol-number]"), $monthdays_protocol$$, $$form$$.find("input[type=radio][name=protocol][value=number]").parents("label"))) : ($$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=protocol][value=name]"), this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$appSelect_$checked$$2_time$$, $$form$$.find("legend[data-field=protocol]")),
				this.updateCheckbox($$form$$.find("input[name=protocol-name-negation]"), $application_negated_recent_source$$, $$form$$.find("input[name=protocol-name-negation]").parents("label")), this.updateSelect($$form$$.find("select[name=protocol-name]"), $monthdays_protocol$$, $$form$$.find("input[type=radio][name=protocol][value=name]").parents("label")))
			}
			null !== $monthdays_protocol$$ && $$appSelect_$checked$$2_time$$.trigger("change");
			var $states$$ = this.model.get("states") || [];
			_.each(this.model.states(),
			function($state$$) {
				this.updateCheckbox($$form$$.find("input[name=state-" +
				$state$$ + "]"), _.include($states$$, $state$$), $$form$$.find("input[name=state-" + $state$$ + "]").parents("label"))
			},
			this);
			$application_negated_recent_source$$ = this.model.get("recent") || {};
			this.updateTextbox($$form$$.find("input[name=recent-time]"), $application_negated_recent_source$$.time, $$form$$.find("label[for=" + $$form$$.find("input[name=recent-time]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=recent-count]"), $application_negated_recent_source$$.count, $$form$$.find("label[for=" +
			$$form$$.find("input[name=recent-count]").attr("id") + "]"));
			this.updateRadio($$form$$.find("input[type=radio][name=ipsec]"), $$form$$.find("input[name=ipsec][value=" + (this.model.get("ipsec") || "") + "]"), $$form$$.find("legend[data-field=ipsec]"));
			var $p2p$$ = this.model.get("p2p");
			$p2p$$ ? "all" == $p2p$$ ? ($$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=p2p][value=all]"), this.updateRadio($$form$$.find("input[type=radio][name=p2p]"), $$appSelect_$checked$$2_time$$, $$form$$.find("legend[data-field=p2p]"))) :
			_.isArray($p2p$$) && ($$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=p2p][value=name]"), this.updateRadio($$form$$.find("input[type=radio][name=p2p]"), $$appSelect_$checked$$2_time$$, $$form$$.find("legend[data-field=p2p]")), $$form$$.find("input[type=checkbox][name=p2p-name]").each(function() {
				var $$this$$ = $(this);
				$$this$$.attr("checked", _.contains($p2p$$, $$this$$.val()))
			})) : ($$appSelect_$checked$$2_time$$ = $$form$$.find("input[name=p2p][value=]"), this.updateRadio($$form$$.find("input[type=radio][name=p2p]"),
			$$appSelect_$checked$$2_time$$, $$form$$.find("legend[data-field=p2p]")));
			$$appSelect_$checked$$2_time$$.trigger("change");
			if ($application_negated_recent_source$$ = this.model.get("application")) $application_negated_recent_source$$.category ? $application_negated_recent_source$$ = this.PREDEFINED + $application_negated_recent_source$$.category: $application_negated_recent_source$$["custom-category"] && ($application_negated_recent_source$$ = this.CUSTOM + $application_negated_recent_source$$["custom-category"]),
			$$appSelect_$checked$$2_time$$ = $$form$$.find("select[name=application]"),
			this.updateSelect($$appSelect_$checked$$2_time$$, $application_negated_recent_source$$);
			_.each(["source", "destination"],
			function($type$$) {
				var $cfg$$ = this.model.get($type$$) || {};
				this.updateTextbox($$form$$.find("input[name=" + $type$$ + "-address]"), $cfg$$.address, $$form$$.find("label[for=" + $$form$$.find("input[name=" + $type$$ + "-address]").attr("id") + "]"));
				this.updateTextbox($$form$$.find("input[name=" + $type$$ + "-port]"), $cfg$$.port,
				$$form$$.find("label[for=" + $$form$$.find("input[name=" + $type$$ + "-port]").attr("id") + "]"));
				if ($cfg$$["address-group"] && $cfg$$["address-group"].substr(0, 7) == "ADDRv4_") {
					var $iface$$ = $cfg$$["address-group"].substr(7),
					$$select$$ = $$form$$.find("select[name=" + $type$$ + "-iface-address]");
					if (this.interfaces.filterById($iface$$)) this.updateSelect($$select$$, $iface$$ || "", $$form$$.find("label[for=" + $$select$$.attr("id") + "]"));
					else {
						this.updateSelect($$select$$, "other", $$form$$.find("label[for=" + $$select$$.attr("id") +
						"]"));
						this.updateTextbox($$form$$.find("input[name=" + $type$$ + "-iface-address-custom]"), $iface$$, $$form$$.find("label[for=" + $$form$$.find("input[name=" + $type$$ + "-iface-address-custom]").attr("id") + "]"))
					}
					$$select$$.trigger("change")
				} else this.updateSelect($$form$$.find("select[name=" + $type$$ + "-address-group]"), $cfg$$["address-group"] || "", $$form$$.find("label[for=" + $$form$$.find("select[name=" + $type$$ + "-address-group]").attr("id") + "]"));
				this.updateSelect($$form$$.find("select[name=" + $type$$ + "-network-group]"),
				$cfg$$["network-group"] || "", $$form$$.find("label[for=" + $$form$$.find("select[name=" + $type$$ + "-address-group]").attr("id") + "]"));
				this.updateSelect($$form$$.find("select[name=" + $type$$ + "-port-group]"), $cfg$$["port-group"] || "", $$form$$.find("label[for=" + $$form$$.find("select[name=" + $type$$ + "-address-group]").attr("id") + "]"))
			},
			this);
			$application_negated_recent_source$$ = this.model.get("source") || {};
			this.updateTextbox($$form$$.find("input[name=source-mac-address]"), $application_negated_recent_source$$["mac-address"],
			$$form$$.find("label[for=" + $$form$$.find("input[name=source-mac-address]").attr("id") + "]"));
			$$appSelect_$checked$$2_time$$ = this.model.get("time") || {};
			var $monthdays_protocol$$ = $$appSelect_$checked$$2_time$$.monthdays,
			$weekdays$$ = $$appSelect_$checked$$2_time$$.weekdays,
			$application_negated_recent_source$$ = !1;
			$monthdays_protocol$$ && "!" == $monthdays_protocol$$.substr(0, 1) ? ($application_negated_recent_source$$ = !0, $monthdays_protocol$$ = $monthdays_protocol$$.substr(1)) : $application_negated_recent_source$$ =
			!1;
			this.updateTextbox($$form$$.find("input[name=monthdays]"), $monthdays_protocol$$, $$form$$.find("label[for=" + $$form$$.find("input[name=monthdays]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=monthdays-negation]"), $application_negated_recent_source$$, $$form$$.find("input[name=monthdays-negation]").parents("label"));
			$weekdays$$ && "!" == $weekdays$$.substr(0, 1) ? ($application_negated_recent_source$$ = !0, $weekdays$$ = $weekdays$$.substr(1)) : $application_negated_recent_source$$ = !1;
			this.updateTextbox($$form$$.find("input[name=weekdays]"),
			$weekdays$$, $$form$$.find("label[for=" + $$form$$.find("input[name=weekdays]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=weekdays-negation]"), $application_negated_recent_source$$, $$form$$.find("input[name=weekdays-negation]").parents("label"));
			this.updateTextbox($$form$$.find("input[name=startdate]"), $$appSelect_$checked$$2_time$$.startdate, $$form$$.find("label[for=" + $$form$$.find("input[name=startdate]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=starttime]"),
			$$appSelect_$checked$$2_time$$.starttime, $$form$$.find("label[for=" + $$form$$.find("input[name=starttime]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=stopdate]"), $$appSelect_$checked$$2_time$$.stopdate, $$form$$.find("label[for=" + $$form$$.find("input[name=stopdate]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=stoptime]"), $$appSelect_$checked$$2_time$$.stoptime, $$form$$.find("label[for=" + $$form$$.find("input[name=stoptime]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=utc]"),
			!!$$appSelect_$checked$$2_time$$.utc, $$form$$.find("input[name=utc]").parents("label"));
			this.show()
		},
		prepareSave: function($batch$$) {
			var $result$$ = {};
			_.each(["set", "delete", "get"],
			function($type$$) {
				var $rulesets$$ = $batch$$.get($type$$).get("firewall").clear().get("rulesets");
				$rulesets$$.add({
					name: this.ruleset.get("name"),
					ipv6: this.ruleset.get("ipv6")
				});
				rules = $rulesets$$.last().clear().get("rules");
				rules.add({
					id: this.model ? this.model.get("id") : this.collection.maxId() + 1
				});
				$result$$[$type$$] = rules.last().clear()
			},
			this);
			$result$$.get.forceChange();
			this.setProperty("description", this.$("input[name=description]").val(), $result$$);
			this.setProperty("disable", !this.$("input[name=enabled]").is(":checked"), $result$$, !0);
			this.setProperty("action", this.$("input[name=action]:checked").val(), $result$$);
			this.setProperty("log", this.$("input[name=log]").is(":checked") ? "enable": "disable", $result$$);
			var $app_val_op2pv_protocol$$2_tmp$$ = this.$("input[name=protocol]:checked").val();
			switch ($app_val_op2pv_protocol$$2_tmp$$) {
			case "name":
				$app_val_op2pv_protocol$$2_tmp$$ =
				this.$("select[name=protocol-name] option:selected").val();
				this.$("input[name=protocol-name-negation]").is(":checked") && ($app_val_op2pv_protocol$$2_tmp$$ = "!" + $app_val_op2pv_protocol$$2_tmp$$);
				break;
			case "number":
				$app_val_op2pv_protocol$$2_tmp$$ = this.$("input[name=protocol-number]").val(),
				this.$("input[name=protocol-number-negation]").is(":checked") && ($app_val_op2pv_protocol$$2_tmp$$ = "!" + $app_val_op2pv_protocol$$2_tmp$$)
			}
			this.setProperty("protocol", $app_val_op2pv_protocol$$2_tmp$$, $result$$);
			var $app_val_op2pv_protocol$$2_tmp$$ =
			new EDGE.Models.FirewallRule({
				id: "tmp"
			}),
			$states$$ = [];
			_.each($app_val_op2pv_protocol$$2_tmp$$.states(),
			function($state$$) {
				this.$("input[name=state-" + $state$$ + "]").is(":checked") && $states$$.push($state$$)
			},
			this);
			this.setProperty("states", _.isEmpty($states$$) ? null: $states$$, $result$$);
			delete $app_val_op2pv_protocol$$2_tmp$$;
			this.setProperty(["recent", "time"], this.$("input[name=recent-time]").val(), $result$$);
			this.setProperty(["recent", "count"], this.$("input[name=recent-count]").val(), $result$$);
			this.model &&
			this.model.get("ipsec") != this.$("input[name=ipsec]:checked").val() && this.setProperty("ipsec", null, $result$$);
			this.setProperty("ipsec", this.$("input[name=ipsec]:checked").val(), $result$$);
			var $app_val_op2pv_protocol$$2_tmp$$ = this.$("select[name=application]").val(),
			$actual_app_op2p_p2pv$$ = "";
			$app_val_op2pv_protocol$$2_tmp$$.startWith(this.PREDEFINED) && (this.setProperty(["application", "category"], $app_val_op2pv_protocol$$2_tmp$$.substring(this.PREDEFINED.length), $result$$), $actual_app_op2p_p2pv$$ = $app_val_op2pv_protocol$$2_tmp$$.substring(this.PREDEFINED.length));
			$app_val_op2pv_protocol$$2_tmp$$.startWith(this.CUSTOM) && (this.setProperty(["application", "custom-category"], $app_val_op2pv_protocol$$2_tmp$$.substring(this.CUSTOM.length), $result$$), $actual_app_op2p_p2pv$$ = $app_val_op2pv_protocol$$2_tmp$$.substring(this.CUSTOM.length));
			this.model && (this.model.get("application") && this.model.get("application")["custom-category"] != $actual_app_op2p_p2pv$$ && this.model.get("application").category != $actual_app_op2p_p2pv$$) && this.setProperty("application", null, $result$$);
			$actual_app_op2p_p2pv$$ = this.model ? this.model.get("p2p") : null;
			$app_val_op2pv_protocol$$2_tmp$$ = "";
			_.isArray($actual_app_op2p_p2pv$$) && 0 < $actual_app_op2p_p2pv$$.length && ($app_val_op2pv_protocol$$2_tmp$$ = $actual_app_op2p_p2pv$$[0], "all" != $app_val_op2pv_protocol$$2_tmp$$ && ($app_val_op2pv_protocol$$2_tmp$$ = "name"));
			$actual_app_op2p_p2pv$$ = this.$("input[name=p2p]:checked").val();
			if ($app_val_op2pv_protocol$$2_tmp$$ != $actual_app_op2p_p2pv$$ || "name" == $actual_app_op2p_p2pv$$) {
				var $p2p$$ = []; ("all" == $app_val_op2pv_protocol$$2_tmp$$ &&
				"name" == $actual_app_op2p_p2pv$$ || "name" == $app_val_op2pv_protocol$$2_tmp$$ && "all" == $actual_app_op2p_p2pv$$) && this.setProperty("p2p", $p2p$$, $result$$, !0);
				"name" == $actual_app_op2p_p2pv$$ ? ($p2p$$ = [], this.$("input[name=p2p-name]:checked").each(function() {
					$p2p$$.push($(this).val())
				})) : "all" == $actual_app_op2p_p2pv$$ && ($p2p$$ = ["all"]);
				this.setProperty("p2p", $p2p$$, $result$$, !0)
			}
			_.each(["source", "destination"],
			function($type$$) {
				this.setProperty([$type$$, "address"], this.$("input[name=" + $type$$ + "-address]").val(),
				$result$$);
				this.setProperty([$type$$, "port"], this.$("input[name=" + $type$$ + "-port]").val(), $result$$);
				var $addrGroup$$ = this.$("select[name=" + $type$$ + "-iface-address] option:selected").val();
				if ($addrGroup$$) {
					$addrGroup$$ == "other" && ($addrGroup$$ = this.$("input[name=" + $type$$ + "-iface-address-custom]").val());
					this.setProperty([$type$$, "address-group"], "ADDRv4_" + $addrGroup$$, $result$$)
				} else this.setProperty([$type$$, "address-group"], this.$("select[name=" + $type$$ + "-address-group] option:selected").val(),
				$result$$);
				this.setProperty([$type$$, "network-group"], this.$("select[name=" + $type$$ + "-network-group] option:selected").val(), $result$$);
				this.setProperty([$type$$, "port-group"], this.$("select[name=" + $type$$ + "-port-group] option:selected").val(), $result$$)
			},
			this);
			this.setProperty(["source", "mac-address"], this.$("input[name=source-mac-address]").val(), $result$$);
			this.setProperty(["time", "monthdays"], (this.$("input[name=monthdays-negation]").is(":checked") ? "!": "") + this.$("input[name=monthdays]").val(),
			$result$$);
			this.setProperty(["time", "weekdays"], (this.$("input[name=weekdays-negation]").is(":checked") ? "!": "") + this.$("input[name=weekdays]").val(), $result$$);
			this.setProperty(["time", "startdate"], this.$("input[name=startdate]").val(), $result$$);
			this.setProperty(["time", "starttime"], this.$("input[name=starttime]").val(), $result$$);
			this.setProperty(["time", "stopdate"], this.$("input[name=stopdate]").val(), $result$$);
			this.setProperty(["time", "stoptime"], this.$("input[name=stoptime]").val(), $result$$);
			this.setProperty(["time", "utc"], this.$("input[name=utc]").is(":checked"), $result$$);
			this.debug($result$$);
			return $result$$
		},
		save: function($batch$$40_e$$) {
			$batch$$40_e$$ && $batch$$40_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$40_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$40_e$$);
			$batch$$40_e$$.get("set").get("firewall").hasChanged() || $batch$$40_e$$.unset("set");
			$batch$$40_e$$.get("delete").get("firewall").hasChanged() || $batch$$40_e$$.unset("delete");
			var $self$$ =
			this;
			if ($batch$$40_e$$.has("set") || $batch$$40_e$$.has("delete")) this.dialog.addClass("saving"),
			$batch$$40_e$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.model && $self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.model && $self$$.flagErrors()
				},
				complete: function() {
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this,
			$resp$$),
			$s$$ = !$resp$$.SET || $resp$$.SET.success,
			$c$$ = $resp$$.COMMIT && $resp$$.COMMIT.success && 1 != $resp$$.COMMIT.failure;
			if ($resp$$.DELETE && !$resp$$.DELETE.success || !$s$$ || !$c$$) return $response$$;
			try {
				this.model ? (this.model.collection["import"]($resp$$.GET.firewall[this.ruleset.get("ipv6") ? "ipv6-name": "name"][this.ruleset.get("name")].rule), this.rsobj.update(), this.update()) : (this.collection["import"]($resp$$.GET.firewall[this.ruleset.get("ipv6") ? "ipv6-name": "name"][this.ruleset.get("name")].rule, this.collection.maxOrder()),
				this.remove())
			} catch($e$$) {}
			return $response$$
		},
		remove: function() {
			this.rsobj.enableReordering();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Security.Groups = {};
	EDGE.Views.Security.Groups.Default = Backbone.View.extend({
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.creates = [];
			this.setElement($("#Security .section-container #SecurityGroups"));
			this.template = _.template($("#SecurityGroupsTemplate").html());
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$filters = this.$("#SecurityGroupsFilters").tabslite();
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sSearch: "Search _INPUT_",
						sEmptyTable: "No groups available."
					},
					aoColumns: [{
						sClass: "name"
					},
					{
						sClass: "description"
					},
					{
						sClass: "type"
					},
					{
						sClass: "count"
					},
					{
						sClass: "buttons",
						bSortable: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[0, "asc"]],
					sScrollY: 1,
					bScrollCollapse: !0,
					sDom: '<"H"fr>t<"F"ip>'
				},
				this.options.options || {}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			return this
		},
		filter: function($filter$$) {
			this.$filters.find("li." + $filter$$ + " a").trigger("show");
			this.dataTable.fnFilter("all" == $filter$$ ? "": $filter$$, 2)
		},
		add: function($group$$) {
			this.rows[$group$$.get("name")] = new EDGE.Views.Security.Groups.GroupRow({
				model: $group$$,
				groups: this,
				ruleset: this.model,
				dataTable: this.dataTable
			});
			var $self$$ = this;
			this.lazyResize();
			this.rows[$group$$.get("name")].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") &&
			this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.$table.fnDraw();
				$settings$$.oScroll.sY = this.$table.parents(".main-section").height() - this.$table.parents(".main-section").find(".section-tabs").height() - this.$table.parents(".table-container").height();
				this.$table.fnDraw()
			}
		},
		delete_group: function($gmod$$, $row$$) {
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.get("get").set({
				firewall: null
			});
			var $gname$$ = $gmod$$.get("name"),
			$gtype$$ = $gmod$$.get("type"),
			$data$$ = {};
			$data$$[$gtype$$] = {};
			$data$$[$gtype$$][$gname$$] = null;
			$data$$[$gtype$$].__FORCE_ASSOC = !0;
			var $g$$ = $batch$$.get("generic");
			$g$$.setOp("DELETE");
			$g$$.setAttrs({
				firewall: {
					group: $data$$
				}
			});
			var $self$$ = this;
			$row$$.$el.find(".drop-down-button button").button("showWorkingIndicator",
			"secondary", "ui-icon-spinner");
			this.disableActions();
			$batch$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					var $cs$$2_group$$ = $resp$$.COMMIT && $resp$$.COMMIT.success && 1 != $resp$$.COMMIT.failure;
					if ($resp$$.DELETE && $resp$$.DELETE.success && $cs$$2_group$$ && ($cs$$2_group$$ = $self$$.collection.filterByTypeAndName($gtype$$, $gname$$))) {
						$self$$.collection.remove($cs$$2_group$$);
						return
					}
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.enableActions();
					$row$$ && $row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			if ($resp$$ && $resp$$.GET && $resp$$.GET.firewall) {
				this.reset(!0);
				if ($resp$$.GET.firewall.group) this.collection["import"]($resp$$.GET.firewall.group);
				this.update()
			} else $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		create: function() {
			this.creates.push(new EDGE.Views.Security.Groups.Create({
				id: this.creates.length,
				collection: this.collection,
				groups: this
			}))
		},
		remove: function($group$$4_name$$) {
			if (this.dataTable) {
				var $group$$4_name$$ = $group$$4_name$$.get("name"),
				$row$$ = this.rows[$group$$4_name$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$group$$4_name$$], this.lazyResize())
			}
		},
		reset: function($soft$$) {
			this.debug("resetting groups");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$table.data("open-dialog-counter") ? 0: this.$table.data("open-dialog-counter") - 1;
			this.$table.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions &&
				this.$actions.enableAction("delete")
			})
		},
		enableRestrictions: function() {
			var $counter$$ = this.$table.data("open-dialog-counter") ? this.$table.data("open-dialog-counter") + 1: 1;
			this.$table.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && this.$actions.disableAction("delete")
			})
		},
		enableActions: function() {
			$("#SecurityGroups .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".fwgroup-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = $("#SecurityGroupsAdd button");
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$("#SecurityGroups .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".fwgroup-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$ = $("#SecurityGroupsAdd button"); ! 1 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Security.Groups.GroupRowDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Groups.GroupRowDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#SecurityGroupsGroupRowDropDownButton").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			this.ruleset = $args$$.ruleset;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionConfig: function() {
			this.row.config(!1);
			return ! 1
		},
		actionDelete: function() {
			var $self$$ = this.row;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Group Confirmation",
				message: "Are you sure you would like to delete this group?",
				confirm: function() {
					$self$$.gdelete()
				}
			});
			return ! 1
		}
	});
	EDGE.Views.Security.Groups.GroupRow = EDGE.Views.Global.Abstract.Row.extend({
		initialize: function($args$$) {
			this.specialColumns = [3];
			this.ruleset = $args$$.ruleset;
			this.model.bind("added", this.added, this);
			this.groups = $args$$.groups;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			return [this.model.get("name"), $.xss(this.model.get("description")) || "", this.model.get("type"), this.model.members() ? this.model.members().length: 0, ""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ =
			this.$(".buttons");
			$$buttons$$.find("button").length || ("operator" == EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Security.Groups.GroupRowDropDownButton({
				container: this.$(".buttons"),
				row: this
			}), 0 < this.groups.$table.data("open-dialog-counter") && (this.$actions.disableAction("delete"), this.$actions.disableAction("copy"))));
			this.trigger("render");
			return this
		},
		config: function($readonly$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Security.Groups.Config({
				model: this.model,
				readonly: $readonly$$,
				groups: this.groups
			})
		},
		gdelete: function() {
			this.groups.delete_group(this.model, this)
		},
		added: function() {
			this.update(!0);
			this.dataTable.fnDraw(!0)
		}
	});
	EDGE.Views.Security.Groups.Create = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#SecurityGroupsCreateTemplate").html());
			this.id = "fwgroup" + $args$$.id;
			this.type = "fwgroup";
			this.action = "create";
			this.title = "Create New Firewall/NAT Group";
			this.groups = $args$$.groups;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$15_type$$) {
					$form = $($form$$15_type$$);
					var $valid$$ = !0,
					$form$$15_type$$ = $form.find("input[type=radio][name=type]:checked").val();
					if (void 0 == $form$$15_type$$) $(window).trigger("dialog", ["Must define the group type", "Validation error"]);
					else {
						var $newName$$ = $form.find("input[name=name]").val();
						$self$$.collection.each(function($groups$$) {
							$valid$$ && _.each($groups$$,
							function($group$$) {
								$newName$$ == $group$$.name && ($valid$$ = !1)
							})
						}); ! 1 == $valid$$ && $(window).trigger("dialog", ["group [" + $newName$$ + "] already exists as a " + $form$$15_type$$, "Validation error"]);
						$valid$$ && $self$$.save()
					}
				},
				rules: {
					name: {
						required: !0,
						maxlength: 31,
						noshellpunctuation: !0,
						noWhiteSpace: !0,
						noQuotes: !0
					},
					description: {
						noQuotes: !0
					}
				},
				messages: {
					name: {
						required: Msg.V_FwGroupNameRequired,
						maxlength: Msg.V_FwGroupNameMaxLength,
						noshellpunctuation: Msg.V_ShellPunctuation
					}
				}
			}
		},
		prepareSave: function($batch$$42_collection$$) {
			var $model$$80_name$$ = this.$("input[name=name]").val(),
			$type$$ = this.$("input[type=radio][name=type]:checked").val();
			$batch$$42_collection$$.unset("get");
			$batch$$42_collection$$.unset("delete");
			$batch$$42_collection$$.get("set").get("firewall").clear();
			var $fg$$ = ["firewall", "group", $type$$];
			$batch$$42_collection$$.get("gget").put($fg$$, $model$$80_name$$, null);
			$batch$$42_collection$$.get("gget").put($fg$$, "__FORCE_ASSOC", !0);
			$batch$$42_collection$$ = $batch$$42_collection$$.get("set").get("firewall").get("groups");
			$batch$$42_collection$$.add({
				name: $model$$80_name$$,
				type: $type$$
			});
			$model$$80_name$$ = $batch$$42_collection$$.last();
			$model$$80_name$$.clear({
				silent: !0
			});
			$model$$80_name$$.set({
				description: this.$("input[name=description]").val()
			},
			{
				silent: !0
			})
		},
		save: function($batch$$43_e$$) {
			$batch$$43_e$$ && $batch$$43_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$43_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$43_e$$);
			var $self$$ = this;
			$batch$$43_e$$.has("set") && (this.dialog.addClass("saving"), this.groups.disableActions(), $batch$$43_e$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.groups.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.firewall ? ($resp$$.GET.firewall.group && this.collection["import"]($resp$$.GET.firewall.group), this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		render: function() {
			this.groups.enableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this)
		},
		remove: function() {
			this.groups.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Security.Groups.Config = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#SecurityGroupsConfigTemplate").html());
			this.id = "group" + this.model.get("name");
			this.type = "fwgroup";
			this.action = "create";
			this.title = "Edit Firewall/NAT Group";
			this.groups = $args$$.groups;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.groups.enableRestrictions();
			this.delegateEvents();
			this.flaggable = !1;
			this.update();
			this.flaggable = !0;
			return this
		},
		renderAddables: function() {
			function $addUniqueIdAndName$$($$el$$) {
				var $suffix$$ = (new Date).getTime();
				$$el$$.attr("id", "Member" + $suffix$$).attr("name", "member" + $suffix$$)
			}
			var $self$$ = this,
			$$members$$ = this.$("fieldset.members ul");
			$$members$$.find("input.group-member").each(function() {
				$addUniqueIdAndName$$($(this))
			});
			$$members$$.addable({
				template: $$members$$.find("li").clone(),
				add: this.readonly ? null: $('<li class="addable"><div>Add New</div></li>').find("div").button({
					icons: {
						primary: "ui-icon-plus"
					}
				}).end(),
				added: function() {
					$self$$.readonly || this.inserted.infotip();
					$addUniqueIdAndName$$(this.inserted.find("input"));
					$self$$.show()
				}
			})
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=description]"), this.model.get("description"), $$form$$.find('label[for="' + $$form$$.find("input[name=description]").attr("id") + '"]'));
			var $members$$ = this.model.members(),
			$$members$$ = $$form$$.find("fieldset.members ul");
			$members$$.length && ($$members$$.find("li:not(.addable)").remove(),
			_.each($members$$,
			function($value$$) {
				this.readonly ? $$members$$.addable("add").addable("last").find("span.readonly").html($value$$) : $$members$$.addable("add").addable("last").find("input").val($value$$)
			},
			this));
			this.show()
		},
		templateVars: function() {
			var $memberKey$$ = this.model.memberKey();
			grouptype = $memberKey$$.substr(0, 1).toUpperCase() + $memberKey$$.substr(1);
			return {
				name: this.model.get("name"),
				memberkey: $memberKey$$,
				grouptype: grouptype,
				infotip: $("#SecurityGroupInfotip" + grouptype).html()
			}
		},
		validation: function() {
			return {
				rules: {
					description: {
						noQuotes: !0
					}
				}
			}
		},
		prepareSave: function($batch$$) {
			var $result$$ = {},
			$deleteMembers_gname$$ = this.model.get("name"),
			$fg$$1_gtype$$ = this.model.get("type"),
			$attrs$$ = {
				name: $deleteMembers_gname$$,
				type: $fg$$1_gtype$$
			},
			$members$$ = [],
			$memberKey$$ = this.model.memberKey();
			_.each(["set", "delete"],
			function($type$$) {
				var $groups$$ = $batch$$.get($type$$).get("firewall").clear().get("groups");
				$groups$$.add($attrs$$, {
					silent: !0
				});
				$result$$[$type$$] = $groups$$.last().clear()
			},
			this);
			$batch$$.unset("get");
			$fg$$1_gtype$$ = ["firewall", "group",
			$fg$$1_gtype$$];
			$batch$$.get("gget").put($fg$$1_gtype$$, $deleteMembers_gname$$, null);
			$batch$$.get("gget").put($fg$$1_gtype$$, "__FORCE_ASSOC", !0);
			this.$("input.group-member").each(function() {
				var $member$$ = $(this).val();
				$member$$ && $members$$.push($member$$)
			});
			if (_.difference($members$$, this.model.members()).length || _.difference(this.model.members(), $members$$).length) $deleteMembers_gname$$ = {},
			$deleteMembers_gname$$[$memberKey$$] = null,
			$result$$["delete"].set($deleteMembers_gname$$, {
				silent: !0
			}),
			_.isEmpty($members$$) ||
			($deleteMembers_gname$$ = {},
			$deleteMembers_gname$$[$memberKey$$] = $members$$, $result$$.set.set($deleteMembers_gname$$, {
				silent: !0
			}));
			this.setProperty("description", this.$("input[name=description]").val(), $result$$);
			return $result$$
		},
		save: function($batch$$45_e$$) {
			$batch$$45_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$45_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$45_e$$);
			$batch$$45_e$$.get("set").get("firewall").hasChanged() || $batch$$45_e$$.unset("set");
			$batch$$45_e$$.get("delete").get("firewall").hasChanged() ||
			$batch$$45_e$$.unset("delete");
			var $self$$ = this;
			if ($batch$$45_e$$.has("set") || $batch$$45_e$$.has("delete")) this.dialog.addClass("saving"),
			this.groups.disableActions(),
			$batch$$45_e$$.save(["firewall"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.model && $self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.model && $self$$.flagErrors()
				},
				complete: function() {
					$self$$.groups.enableActions();
					$self$$.dialog &&
					$self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.firewall && $resp$$.GET.firewall.group ? (this.model.collection["import"]($resp$$.GET.firewall.group), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			this.groups.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Security.Nat = {};
	EDGE.Views.Security.Nat.Default = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.interfaces = $args$$.interfaces;
			this.groups = $args$$.groups;
			this.stats = $args$$.stats;
			this.appdata = $args$$.appdata;
			this.subscribed = !1;
			this.setElement($("#Security .section-container #SecurityNat"));
			this.template = _.template($("#SecurityNatTemplate").html());
			this.layouts = {};
			this.views = {};
			this.render()
		},
		render: function() {
			this.$el.data("rendered") ?
			_.each(this.views,
			function($view$$) {
				$view$$.update()
			}) : (this.$el.html(this.template).data("rendered", !0), this.views.source = new EDGE.Views.Security.Nat.Source({
				el: this.$("#SecurityNatSource"),
				collection: this.collection,
				interfaces: this.interfaces,
				groups: this.groups
			}), this.views.destination = new EDGE.Views.Security.Nat.Destination({
				el: this.$("#SecurityNatDestination"),
				collection: this.collection,
				interfaces: this.interfaces,
				groups: this.groups
			}), this.views.source.setOther(this.views.destination), this.views.destination.setOther(this.views.source));
			this.subscribe();
			return this
		},
		resize: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && _.each(this.layouts,
			function($layout$$) {
				$layout$$.resizeAll()
			},
			this)
		},
		resizeDestination: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && this.views.destination.resize()
		},
		reset: function() {
			this.debug("reset()");
			this.$el.data("rendered", !1);
			this.unsubscribe();
			_.each(this.views,
			function($view$$) {
				$view$$.reset()
			});
			this.$el.empty()
		},
		subscribe: function() {
			if (!this.subscribed) {
				this.subscribed =
				!0;
				if (!this.unsubint) {
					var $self$$ = this;
					this.unsubint = setInterval(function() {
						$self$$.$el.is(":visible") || $self$$.unsubscribe()
					},
					2E3)
				}
				var $ns$$ = {
					name: "nat-stats",
					sub_id: "nat-stats"
				};
				this.stats.subscribe([$ns$$]);
				this.containSubscribe($ns$$) || this.appdata.subscribe.push($ns$$)
			}
		},
		containSubscribe: function($sub$$) {
			for (var $i$$ = 0; $i$$ < this.appdata.subscribe.length; $i$$++) if (this.appdata.subscribe[$i$$].name == $sub$$.name) return ! 0;
			return ! 1
		},
		unsubscribe: function() {
			this.subscribed && (this.subscribed = !1, this.unsubint &&
			(clearInterval(this.unsubint), this.unsubint = null), this.stats.unsubscribe([{
				name: "nat-stats",
				sub_id: "nat-stats"
			}]))
		}
	});
	EDGE.Views.Security.Nat.List = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.interfaces = $args$$.interfaces;
			this.groups = $args$$.groups;
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.lazySort = _.debounce(this.sort, 10);
			this.rows = {};
			this.creates = [];
			this.render()
		},
		setOther: function($other$$) {
			this.otherList = $other$$
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.datatableconfig = {
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No rules available.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "order"
					},
					{
						sClass: "description"
					},
					{
						sClass: "source"
					},
					{
						sClass: "destination"
					},
					{
						sClass: "translation"
					},
					{
						sClass: "count",
						bSortable: !1
					},
					{
						sClass: "buttons",
						bSortable: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[0, "asc"]],
					sScrollY: this.maxTableSize(),
					bScrollCollapse: !0,
					sDom: '<"H"fr>t<"F"ip>'
				};
				this.$el.html(this.template).data("rendered", !0);
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.datatableconfig = _.extend(this.datatableconfig, this.options.options || {});
				this.dataTable = this.$table.dataTable(this.datatableconfig);
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("button[name=r_add]").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					});
					this.$reorderButton = this.$("button[name=r_ord]").button({
						icons: {
							primary: "ui-icon-disk"
						}
					}).bind("click",
					function() {
						$self$$.reorder()
					})
				} else this.$("button[name=r_add]").hide(),
				this.$("button[name=r_ord]").hide();
				"admin" == EDGE.Config.User.level && this.$tbody.sortable({
					cursor: "move",
					axis: "y",
					forcePlaceholderSize: !0,
					handle: "td:not(.buttons)",
					stop: function($event$$, $ui$$) {
						var $dest$$ = "DestinationConfig" === $self$$.configClass,
						$$item$$4_to$$ = $($ui$$.item),
						$ord$$ = $$item$$4_to$$.find(".order").html(),
						$from$$ =
						parseInt($ord$$, 10),
						$$item$$4_to$$ = $$item$$4_to$$.prevAll("tr").length + 1,
						$rule$$0$$ = $self$$.collection.filterByTypeOrder($dest$$, $from$$),
						$nto$$ = $dest$$ ? $$item$$4_to$$: $$item$$4_to$$ + 4999;
						if (null === $ord$$ || void 0 === $ord$$) $from$$ = $$item$$4_to$$;
						$from$$ > $$item$$4_to$$ ? ($self$$.collection.filterByTypeOrderBetween($dest$$, $$item$$4_to$$ - 1, $from$$).each(function($rule$$) {
							$rule$$.set({
								order: $rule$$.get("order") + 1
							})
						}), $rule$$0$$.set({
							order: $nto$$
						})) : $$item$$4_to$$ > $from$$ && ($self$$.collection.filterByTypeOrderBetween($dest$$,
						$from$$, $$item$$4_to$$ + 1).each(function($rule$$) {
							$rule$$.set({
								order: $rule$$.get("order") - 1
							})
						}), $rule$$0$$.set({
							order: $nto$$
						}));
						$from$$ != $$item$$4_to$$ && ($self$$.reordered = !0, $self$$.dataTable.fnSort([[0, "asc"]]), $self$$.disableAddButton(), $self$$.disableActions())
					}
				}).disableSelection();
				this.filtered.length && this.$tbody.empty();
				this.filtered.each(this.add)
			}
			return this
		},
		add: function($rule$$) {
			if (_.intersection([$rule$$.get("type")], this.types).length) {
				this.rows[$rule$$.get("id")] = new EDGE.Views.Security.Nat.Row({
					configClass: this.configClass,
					model: $rule$$,
					rulelist: this,
					interfaces: this.interfaces,
					groups: this.groups,
					dataTable: this.dataTable
				});
				var $self$$ = this;
				this.rows[$rule$$.get("id")].bind("render",
				function() {
					this.unbind("render");
					$self$$.lazyResize()
				})
			}
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		maxTableSize: function() {
			var $dest$$ = function $$dest$$$($memo$$, $el$$) {
				return $memo$$ + $($el$$).height()
			},
			$half$$ = this.$el.closest("#SecurityNat").height() / 2,
			$source$$ = _($("#SecurityNatSource").find("tbody")).reduce($dest$$,
			0) + 135,
			$dest$$ = _($("#SecurityNatDestination").find("tbody")).reduce($dest$$, 0) + 135;
			$source$$ > $half$$ && $dest$$ < $half$$ ? $source$$ = 2 * $half$$ - $dest$$: $dest$$ = $source$$ < $half$$ && $dest$$ > $half$$ ? 2 * $half$$ - $source$$: $source$$ = $half$$;
			return 0 < this.$el.closest("#SecurityNatSource").length ? $source$$ - 135: $dest$$ - 135
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") :
				this.$table.parents(".dataTables_wrapper").addClass("onepage");
				this.dataTable.fnDestroy();
				this.datatableconfig.sScrollY = this.maxTableSize();
				35 > this.datatableconfig.sScrollY && (this.datatableconfig.sScrollY = 35);
				this.dataTable = this.$table.dataTable(this.datatableconfig);
				this.$table.fnDraw()
			}
		},
		delete_rule: function($rule$$, $row$$) {
			var $rid$$ = $rule$$.get("id"),
			$batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			var $nat$$ = {};
			_.each(["delete", "get"],
			function($t$$) {
				var $s$$ = $batch$$.get($t$$).get("services");
				$s$$.reset(null, {
					clear: {
						nat: !0
					}
				});
				$nat$$[$t$$] = $s$$.filterByType("nat")
			},
			this);
			$nat$$["delete"].get("rules").add({
				id: $rid$$
			},
			{
				silent: !0
			});
			$nat$$["delete"].get("rules").last()["delete"]();
			$nat$$["delete"].forceChange();
			$nat$$.get.forceChange();
			var $self$$ = this;
			$row$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.enableReordering();
					$self$$.enableAddButton();
					$row$$ && $row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		copy_rule: function($rmod$$, $row$$) {
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.unset("delete");
			var $g$$7_rid$$3_s$$ = $batch$$.get("get").get("services");
			$g$$7_rid$$3_s$$.reset(null, {
				clear: {
					nat: !0
				}
			});
			$g$$7_rid$$3_s$$.filterByType("nat").forceChange();
			var $g$$7_rid$$3_s$$ = $rmod$$.get("id"),
			$r$$ =
			$rmod$$.get("type"),
			$nid$$ = this.collection.getNextId($r$$),
			$r$$ = {};
			$r$$[$g$$7_rid$$3_s$$] = {
				to: $nid$$
			};
			$g$$7_rid$$3_s$$ = $batch$$.get("generic");
			$g$$7_rid$$3_s$$.setOp("CLONE");
			$g$$7_rid$$3_s$$.setAttrs({
				service: {
					nat: {
						rule: [$r$$]
					}
				}
			});
			var $self$$ = this;
			$row$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.enableReordering();
					$self$$.enableAddButton();
					$row$$ && $row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		reorder: function() {
			if (this.reordered) {
				this.$reorderButton.button("showWorkingIndicator");
				var $rules$$ = [];
				this.filtered.each(function($rule$$) {
					var $r$$ = {};
					$r$$[$rule$$.id] = $rule$$.get("order");
					$rules$$.push($r$$)
				});
				var $data$$ = {};
				$data$$.rules = $rules$$;
				var $batch$$ = new EDGE.Models.Batch;
				$batch$$.unset("get");
				$batch$$.unset("set");
				$batch$$.unset("delete");
				$batch$$.get("gget").put("service", "nat", "rule", null);
				var $g$$ = $batch$$.get("generic");
				$g$$.setOp("NAT_REORDER");
				$g$$.setAttrs($data$$);
				var $self$$ = this;
				this.$table.addClass("saving");
				$batch$$.save(["services"], {
					success: function($model$$, $resp$$) {
						$self$$.response($resp$$, ["NAT_REORDER"]);
						$self$$.reordered = !1;
						$self$$.enableAddButton();
						$self$$.enableActions();
						$self$$.$reorderButton.button("hideWorkingIndicator", {
							primary: "ui-icon-check"
						})
					},
					error: function() {
						$(window).trigger("notify",
						new EDGE.Models.Notice({
							type: "error",
							notice: Msg.E_SaveFailed
						}));
						$self$$.$reorderButton.button("hideWorkingIndicator", {
							primary: "ui-icon-notice"
						})
					},
					complete: function() {
						$self$$.$table.removeClass("saving")
					}
				})
			}
		},
		response: function($resp$$, $nodes$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$, $nodes$$);
			try {
				this.dataTable.fnClearTable(),
				this.rows = {},
				this.otherList.dataTable.fnClearTable(),
				this.otherList.rows = {},
				this.collection.reset(),
				this.collection["import"]($resp$$.GET.service.nat.rule),
				this.update_filtered(),
				this.otherList.update_filtered(),
				this.update()
			} catch($e$$) {}
			return $response$$
		},
		create: function() {
			this.creates.push(new EDGE.Views.Security.Nat[this.configClass]({
				id: this.creates.length,
				collection: this.collection,
				interfaces: this.interfaces,
				groups: this.groups,
				rulelist: this
			}))
		},
		remove: function($id$$74_rule$$) {
			if (this.dataTable) {
				var $id$$74_rule$$ = $id$$74_rule$$.get("id"),
				$row$$ = this.rows[$id$$74_rule$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)),
				delete this.rows[$id$$74_rule$$], this.lazyResize())
			}
		},
		sort: function() {
			this.dataTable && this.dataTable.fnSort([[0, "asc"]])
		},
		reset: function($soft$$) {
			this.debug("resetting security nat list");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		enableActions: function() {
			switch (this.configClass) {
			case "SourceConfig":
				$("#SecurityNatSource .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
				break;
			case "DestinationConfig":
				$("#SecurityNatDestination .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled")
			}
		},
		disableActions: function() {
			switch (this.configClass) {
			case "SourceConfig":
				$("#SecurityNatSource .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
				break;
			case "DestinationConfig":
				$("#SecurityNatDestination .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled")
			}
		},
		enableAddButton: function() {
			var $$button$$ =
			!1;
			switch (this.configClass) {
			case "SourceConfig":
				$$button$$ = $('#SecurityNatSourceAdd button[name="r_add"]');
				break;
			case "DestinationConfig":
				$$button$$ = $('#SecurityNatDestinationAdd button[name="r_add"]');
				break;
			default:
				return
			}
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableAddButton: function() {
			var $$button$$ = !1;
			switch (this.configClass) {
			case "SourceConfig":
				$$button$$ = $('#SecurityNatSourceAdd button[name="r_add"]');
				break;
			case "DestinationConfig":
				$$button$$ = $('#SecurityNatDestinationAdd button[name="r_add"]');
				break;
			default:
				return
			} ! 1 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		},
		enableReordering: function() {
			var $counter$$ = 0 == this.$tbody.data("open-dialog-counter") ? 0: this.$tbody.data("open-dialog-counter") - 1;
			this.$tbody.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && (this.$tbody.sortable("enable"), $.each(this.rows,
			function() {
				this.$actions && (this.$actions.enableAction("delete"), this.$actions.enableAction("copy"))
			}))
		},
		disableReordering: function() {
			var $counter$$ = this.$tbody.data("open-dialog-counter") ?
			this.$tbody.data("open-dialog-counter") + 1: 1;
			this.$tbody.data("open-dialog-counter", $counter$$); ! 1 == this.$tbody.sortable("option", "disabled") && (this.$tbody.sortable("disable"), $.each(this.rows,
			function() {
				this.$actions && (this.$actions.disableAction("delete"), this.$actions.disableAction("copy"))
			}))
		}
	});
	EDGE.Views.Security.Nat.RowDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.Nat.RowDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#SecurityNatRowDropDownButton").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .action-config": "actionConfig",
				"click .action-copy": "actionCopy",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionConfig: function() {
			this.row.config(!1);
			return ! 1
		},
		actionCopy: function() {
			this.row.rulelist.disableActions();
			this.row.rulelist.disableAddButton();
			this.row.rulelist.disableReordering();
			this.row.copy();
			return ! 1
		},
		actionDelete: function() {
			var $self$$ = this.row;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Rule Confirmation",
				message: "Are you sure you would like to delete this rule?",
				confirm: function() {
					$self$$.rulelist.disableActions();
					$self$$.rulelist.disableAddButton();
					$self$$.rulelist.disableReordering();
					$self$$.rdelete()
				}
			});
			return ! 1
		}
	});
	EDGE.Views.Security.Nat.Row = EDGE.Views.Global.Abstract.Row.extend({
		initialize: function($args$$) {
			this.configClass = $args$$.configClass;
			this.rulelist = $args$$.rulelist;
			this.interfaces = $args$$.interfaces;
			this.groups = $args$$.groups;
			this.model.bind("change:disable", this.renderDisabled, this);
			this.specialColumns = [4];
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			var $source$$ = [];
			_.each(this.model.get("source"),
			function($value$$, $type$$) {
				$value$$ && $source$$.push($type$$ +
				" " + $value$$)
			});
			var $source$$ = $source$$.join("<br />"),
			$destination$$ = [];
			_.each(this.model.get("destination"),
			function($value$$, $type$$) {
				$destination$$.push($type$$ + " " + $value$$)
			});
			var $destination$$ = $destination$$.join("<br />"),
			$trans$$ = "",
			$addr$$ = null,
			$disp_order$$ = this.model.get("order");
			if ("DestinationConfig" === this.configClass) $addr$$ = this.model.get("inside-address");
			else if ($disp_order$$ -= 4999, "masquerade" === this.model.get("type")) {
				var $oi$$ = this.model.get("outbound-interface");
				$oi$$ && ($trans$$ =
				"masquerade to " + $oi$$)
			} else $addr$$ = this.model.get("outside-address");
			$addr$$ && ($addr$$.address && ($trans$$ = $addr$$.address), $addr$$.port && ($trans$$ && ($trans$$ += " "), $trans$$ += "port " + $addr$$.port), $trans$$ = "to " + $trans$$);
			return [$disp_order$$, (this.model.get("exclude") ? '<span class="exclude">Exclude</span>': "") + ($.xss(this.model.get("description")) || ""), $source$$, $destination$$, $trans$$, this.model.get("count") || "", ""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ = this.$(".buttons");
			$$buttons$$.find("button").length ||
			("operator" == EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Security.Nat.RowDropDownButton({
				container: this.$(".buttons"),
				row: this
			}), 1 < this.rulelist.$tbody.data("open-dialog-counter") && (this.$actions.disableAction("copy"), this.$actions.disableAction("delete"))));
			this.renderDisabled(this.model.get("disable"));
			this.trigger("render");
			return this
		},
		rdelete: function() {
			this.rulelist.delete_rule(this.model, this)
		},
		copy: function() {
			this.rulelist.copy_rule(this.model, this)
		},
		config: function($readonly$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Security.Nat[this.configClass]({
				model: this.model,
				readonly: $readonly$$,
				interfaces: this.interfaces,
				groups: this.groups,
				rulelist: this.rulelist
			})
		}
	});
	EDGE.Views.Security.Nat.Config = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.type = "nat";
			this.action = "combo";
			this.interfaces = $args$$.interfaces;
			this.groups = $args$$.groups;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			_.each(["address", "network", "port"],
			function($type$$) {
				_.each(["source", "destination"],
				function($location$$) {
					var $$select$$ = this.$("select[name=" +
					$location$$ + "-" + $type$$ + "-group]");
					$$select$$.empty().append('<option value="">--</option>');
					this.groups.filterByType($type$$ + "-group").each(function($group$$) {
						$$select$$.append('<option value="' + $group$$.get("name") + '">' + ($group$$.get("description") || $group$$.get("name")) + "</option>")
					})
				},
				this)
			},
			this);
			_.each(["source", "destination"],
			function($type$$) {
				var $$addrGroups$$ = this.$("form").find("select[name=" + $type$$ + "-address-group]"),
				$$interfaces$$ = this.$("form").find("select[name=" + $type$$ + "-iface-address]");
				$$interfaces$$.empty().append('<option value="">--</option>');
				this.interfaces.each(function($iface$$) {
					$$interfaces$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
				});
				$$interfaces$$.append('<option value="other">other</option>').on("change",
				function() {
					var $$this$$ = $(this),
					$val$$ = $$this$$.val();
					$val$$ && $$addrGroups$$.val("");
					"other" == $val$$ ? $$this$$.next().show() : $$this$$.next().hide()
				}).trigger("change");
				$$addrGroups$$.on("change",
				function() {
					$(this).val() && $$interfaces$$.val("").trigger("change")
				})
			},
			this)
		},
		renderInterfaces: function($$select$$) {
			$$select$$.empty().append('<option value="">--</option>');
			this.interfaces.each(function($iface$$) {
				$$select$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
			});
			$$select$$.append('<option class="other-interface" value="other">other</option>')
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=description]"), this.model.get("description"), $$form$$.find('label[for="' + $$form$$.find("input[name=description]").attr("id") +
			'"]'));
			this.updateCheckbox($$form$$.find("input[name=enabled]"), !this.model.get("disable"), $$form$$.find("label[for=" + $$form$$.find("input[name=enabled]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=exclude]"), this.model.get("exclude"), $$form$$.find("label[for=" + $$form$$.find("input[name=exclude]").attr("id") + "]"));
			this.updateCheckbox($$form$$.find("input[name=log]"), "enable" == this.model.get("log"), $$form$$.find("label[for=" + $$form$$.find("input[name=log]").attr("id") + "]"));
			var $protocol$$ =
			this.model.get("protocol"),
			$$checked$$;
			if ($protocol$$ && "all" != $protocol$$) if ("tcp_udp" == $protocol$$) $$checked$$ = $$form$$.find("input[name=protocol][value=tcp_udp]"),
			this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$checked$$, $$form$$.find("legend[data-field=protocol]"));
			else if ("tcp" == $protocol$$) $$checked$$ = $$form$$.find("input[name=protocol][value=tcp]"),
			this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$checked$$, $$form$$.find("legend[data-field=protocol]"));
			else if ("udp" == $protocol$$) $$checked$$ = $$form$$.find("input[name=protocol][value=udp]"),
			this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$checked$$, $$form$$.find("legend[data-field=protocol]"));
			else {
				var $negated$$ = !1;
				"!" == $protocol$$.substr(0, 1) && ($negated$$ = !0, $protocol$$ = $protocol$$.substr(1));
				0 <= parseInt($protocol$$, 10) ? ($$checked$$ = $$form$$.find("input[name=protocol][value=number]"), this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$checked$$, $$form$$.find("legend[data-field=protocol]")),
				this.updateCheckbox($$form$$.find("input[name=protocol-number-negation]"), $negated$$, $$form$$.find("input[name=protocol-number-negation]").parents("label")), this.updateTextbox($$form$$.find("input[name=protocol-number]"), $protocol$$, $$form$$.find("input[type=radio][name=protocol][value=number]").parents("label"))) : ($$checked$$ = $$form$$.find("input[name=protocol][value=name]"), this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$checked$$, $$form$$.find("legend[data-field=protocol]")),
				this.updateCheckbox($$form$$.find("input[name=protocol-name-negation]"), $negated$$, $$form$$.find("input[name=protocol-name-negation]").parents("label")), this.updateSelect($$form$$.find("select[name=protocol-name]"), $protocol$$, $$form$$.find("input[type=radio][name=protocol][value=name]").parents("label")))
			} else $$checked$$ = $$form$$.find("input[name=protocol][value=all]"),
			this.updateRadio($$form$$.find("input[type=radio][name=protocol]"), $$checked$$, $$form$$.find("legend[data-field=protocol]"));
			$$checked$$.trigger("change");
			_.each(["source", "destination"],
			function($type$$) {
				var $cfg$$ = this.model.get($type$$) || {};
				this.updateTextbox($$form$$.find("input[name=" + $type$$ + "-address]"), $cfg$$.address, $$form$$.find("label[for=" + $$form$$.find("input[name=" + $type$$ + "-address]").attr("id") + "]"));
				this.updateTextbox($$form$$.find("input[name=" + $type$$ + "-port]"), $cfg$$.port, $$form$$.find("label[for=" + $$form$$.find("input[name=" + $type$$ + "-port]").attr("id") + "]"));
				if ($cfg$$["address-group"] && "ADDRv4_" == $cfg$$["address-group"].substr(0,
				7)) {
					var $iface$$ = $cfg$$["address-group"].substr(7),
					$$select$$ = $$form$$.find("select[name=" + $type$$ + "-iface-address]");
					this.interfaces.filterById($iface$$) ? this.updateSelect($$select$$, $iface$$ || "", $$form$$.find("label[for=" + $$select$$.attr("id") + "]")) : (this.updateSelect($$select$$, "other", $$form$$.find("label[for=" + $$select$$.attr("id") + "]")), this.updateTextbox($$form$$.find("input[name=" + $type$$ + "-iface-address-custom]"), $iface$$, $$form$$.find("label[for=" + $$form$$.find("input[name=" + $type$$ + "-iface-address-custom]").attr("id") +
					"]")));
					$$select$$.trigger("change")
				} else this.updateSelect($$form$$.find("select[name=" + $type$$ + "-address-group]"), $cfg$$["address-group"] || "", $$form$$.find("label[for=" + $$form$$.find("select[name=" + $type$$ + "-address-group]").attr("id") + "]"));
				this.updateSelect($$form$$.find("select[name=" + $type$$ + "-network-group]"), $cfg$$["network-group"] || "", $$form$$.find("label[for=" + $$form$$.find("select[name=" + $type$$ + "-address-group]").attr("id") + "]"));
				this.updateSelect($$form$$.find("select[name=" + $type$$ + "-port-group]"),
				$cfg$$["port-group"] || "", $$form$$.find("label[for=" + $$form$$.find("select[name=" + $type$$ + "-address-group]").attr("id") + "]"))
			},
			this);
			this.show()
		},
		prepareSave: function($batch$$) {
			var $result$$ = {},
			$protocol$$4_type$$ = this.getType(),
			$attrs$$ = {
				id: this.model ? this.model.get("id") : this.collection.getNextId($protocol$$4_type$$)
			};
			_.each(["set", "delete", "get"],
			function($type$$) {
				var $nat$$ = $batch$$.get($type$$).get("services").reset(null, {
					clear: {
						nat: !0
					}
				}).filterByType("nat");
				$nat$$.get("rules").add($attrs$$);
				$result$$[$type$$] = $nat$$.get("rules").last().clear()
			},
			this);
			$result$$.set.set({
				type: $protocol$$4_type$$
			},
			{
				silent: !0
			});
			$result$$.get.set({
				type: $protocol$$4_type$$
			},
			{
				silent: !0
			});
			$result$$.get.unset("type", {
				silent: !0
			});
			this.setProperty("description", this.$("input[name=description]").val(), $result$$);
			this.setProperty("disable", !this.$("input[name=enabled]").is(":checked"), $result$$, !0);
			this.setProperty("exclude", this.$("input[name=exclude]").is(":checked"), $result$$, !0);
			this.setProperty("log", this.$("input[name=log]").is(":checked") ?
			"enable": "disable", $result$$);
			$protocol$$4_type$$ = this.$("input[name=protocol]:checked").val();
			switch ($protocol$$4_type$$) {
			case "name":
				$protocol$$4_type$$ = this.$("select[name=protocol-name] option:selected").val();
				this.$("input[name=protocol-name-negation]").is(":checked") && ($protocol$$4_type$$ = "!" + $protocol$$4_type$$);
				break;
			case "number":
				$protocol$$4_type$$ = this.$("input[name=protocol-number]").val(),
				this.$("input[name=protocol-number-negation]").is(":checked") && ($protocol$$4_type$$ = "!" + $protocol$$4_type$$)
			}
			this.setProperty("protocol",
			$protocol$$4_type$$, $result$$);
			_.each(["source", "destination"],
			function($type$$) {
				this.setProperty([$type$$, "address"], this.$("input[name=" + $type$$ + "-address]").val(), $result$$);
				this.setProperty([$type$$, "port"], this.$("input[name=" + $type$$ + "-port]").val(), $result$$);
				var $addrGroup$$ = this.$("select[name=" + $type$$ + "-iface-address] option:selected").val();
				$addrGroup$$ ? ("other" == $addrGroup$$ && ($addrGroup$$ = this.$("input[name=" + $type$$ + "-iface-address-custom]").val()), this.setProperty([$type$$, "address-group"],
				"ADDRv4_" + $addrGroup$$, $result$$)) : this.setProperty([$type$$, "address-group"], this.$("select[name=" + $type$$ + "-address-group] option:selected").val(), $result$$);
				this.setProperty([$type$$, "network-group"], this.$("select[name=" + $type$$ + "-network-group] option:selected").val(), $result$$);
				this.setProperty([$type$$, "port-group"], this.$("select[name=" + $type$$ + "-port-group] option:selected").val(), $result$$)
			},
			this);
			return $result$$
		},
		save: function($batch$$50_e$$) {
			$batch$$50_e$$ && $batch$$50_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$50_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$50_e$$);
			$batch$$50_e$$.get("set").get("services").hasChanged() || $batch$$50_e$$.unset("set");
			$batch$$50_e$$.get("delete").get("services").hasChanged() || $batch$$50_e$$.unset("delete");
			var $self$$ = this;
			if ($batch$$50_e$$.has("set") || $batch$$50_e$$.has("delete")) this.dialog.addClass("saving"),
			$batch$$50_e$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.model &&
					$self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.model && $self$$.flagErrors()
				},
				complete: function() {
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			try {
				if (this.model) this.model.collection["import"]($resp$$.GET.service.nat.rule);
				else this.collection["import"]($resp$$.GET.service.nat.rule),
				this.remove()
			} catch($e$$) {}
			return $response$$
		}
	});
	EDGE.Views.Security.Nat.Source = EDGE.Views.Security.Nat.List.extend({
		initialize: function($args$$) {
			this.template = _.template($("#SecurityNatSourceTemplate").html());
			this.configClass = "SourceConfig";
			this.types = ["source", "masquerade"];
			this.filtered = this.collection.filterBySource();
			EDGE.Views.Security.Nat.List.prototype.initialize.call(this, $args$$)
		},
		update_filtered: function() {
			this.filtered = this.collection.filterBySource()
		}
	});
	EDGE.Views.Security.Nat.SourceConfig = EDGE.Views.Security.Nat.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#SecurityNatSourceConfigTemplate").html());
			this.id = "natsource" + (this.model ? this.model.get("id") : "-new" + $args$$.id);
			this.title = "Source NAT Rule Configuration";
			this.row = $args$$.row;
			this.rulelist = $args$$.rulelist;
			EDGE.Views.Security.Nat.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($dPort_form$$) {
					$form =
					$($dPort_form$$);
					switch ($form.find("input[type=radio][name=translation]:checked").val()) {
					case "masquerade":
						break;
					case "manual":
						var $sAddrG$$ = $form.find("input[name=translation-address]").val(),
						$prefixRe_sIfAddr$$ = $form.find("input[name=translation-port]").val();
						if (!$sAddrG$$ && !$prefixRe_sIfAddr$$) {
							$(window).trigger("dialog", ["Must have a translations address or port", "Validation error"]);
							return
						}
						break;
					default:
						$(window).trigger("dialog", ["Must select either masquerade or manual for translation", "Validation error"]);
						return
					}
					var $dPort_form$$ = $form.find("input[name=destination-port]").val(),
					$sPort$$ = $form.find("input[name=source-port]").val();
					if ($prefixRe_sIfAddr$$ || $dPort_form$$ || $sPort$$) {
						var $protoChecked$$2_sAddr$$ = $form.find("input[name=protocol]:checked").val(),
						$dAddr$$1_protoName$$ = $form.find("select[name=protocol-name] option:selected").val(),
						$neg_protoNum$$2_sNetG$$ = $form.find("input[name=protocol-number]").val();
						if (!isTcpUdp($protoChecked$$2_sAddr$$, $dAddr$$1_protoName$$, $neg_protoNum$$2_sNetG$$)) {
							$(window).trigger("dialog",
							["Protocol must be 'tcp, 'udp', or 'tcp_udp' when using port", "Validation error"]);
							return
						}
					}
					if ("other" == $form.find("select[name=outbound-interface]").val() && 0 == $form.find("input[name=other-interface]").val().length) $(window).trigger("dialog", ["Must enter outbound interface name", "Validation error"]);
					else if ($dPort_form$$ && $sPort$$ && ($dPort_form$$.match("-") || $sPort$$.match("-"))) $(window).trigger("dialog", ["Can not specify a port range when both source and destination ports are specified", "Validation error"]);
					else {
						$protoChecked$$2_sAddr$$ = $form.find("input[name=source-address]").val();
						$dAddr$$1_protoName$$ = $form.find("input[name=destination-address]").val();
						if ($dAddr$$1_protoName$$.match("/") && (($neg_protoNum$$2_sNetG$$ = $dAddr$$1_protoName$$.match(/^\!(.+)/)) && ($dAddr$$1_protoName$$ = $neg_protoNum$$2_sNetG$$[1]), !checkNetBoundary($dAddr$$1_protoName$$))) {
							$(window).trigger("dialog", ["Destination subnet is not on a network boundary", "Validation error"]);
							return
						}
						if ($sAddrG$$ && $sAddrG$$.match("/")) {
							if (!checkNetBoundary($sAddrG$$)) {
								$(window).trigger("dialog",
								["Translation subnet is not on a network boundary", "Validation error"]);
								return
							}
							if ($prefixRe_sIfAddr$$) {
								$(window).trigger("dialog", ["Can not use translation port when translating one subnet to another", "Validation error"]);
								return
							}
							if (!$protoChecked$$2_sAddr$$.match("/")) {
								$(window).trigger("dialog", ["Source address needs to be a subnet when translating one subnet to another", "Validation error"]);
								return
							}
							if ($sAddrG$$.match("^!") || $protoChecked$$2_sAddr$$.match("^!")) {
								$(window).trigger("dialog", ["Can not negate subnet when translating one subnet to another",
								"Validation error"]);
								return
							} ($neg_protoNum$$2_sNetG$$ = $protoChecked$$2_sAddr$$.match(/^\!(.+)/)) && ($protoChecked$$2_sAddr$$ = $neg_protoNum$$2_sNetG$$[1]);
							if (!checkNetBoundary($protoChecked$$2_sAddr$$)) {
								$(window).trigger("dialog", ["Source subnet is not on a network boundary", "Validation error"]);
								return
							}
							$prefixRe_sIfAddr$$ = /\d+\.\d+\.\d+\.\d+\/(\d+)/;
							$sAddrG$$ = $sAddrG$$.match($prefixRe_sIfAddr$$);
							$prefixRe_sIfAddr$$ = $protoChecked$$2_sAddr$$.match($prefixRe_sIfAddr$$);
							if ($sAddrG$$[1] != $prefixRe_sIfAddr$$[1]) {
								$(window).trigger("dialog",
								["Subnet mask must be the same when translating one subnet to another", "Validation error"]);
								return
							}
						}
						var $sAddrG$$ = $form.find("select[name=source-address-group]").val(),
						$prefixRe_sIfAddr$$ = $form.find("select[name=source-iface-address]").val(),
						$neg_protoNum$$2_sNetG$$ = $form.find("select[name=source-network-group]").val(),
						$sPortG$$ = $form.find("select[name=source-port-group]").val(),
						$dAddrG$$ = $form.find("select[name=destination-address-group]").val(),
						$dIfAddr$$ = $form.find("select[name=destination-iface-address]").val(),
						$dNetG$$ = $form.find("select[name=destination-network-group]").val(),
						$dPortG$$ = $form.find("select[name=destination-port-group]").val(); ($sAddrG$$ || $prefixRe_sIfAddr$$) && $neg_protoNum$$2_sNetG$$ ? $(window).trigger("dialog", ["Can not use both network and address group for source", "Validation error"]) : ($dAddrG$$ || $dIfAddr$$) && $dNetG$$ ? $(window).trigger("dialog", ["Can not use both network and address group for destination", "Validation error"]) : $sPort$$ && $sPortG$$ ? $(window).trigger("dialog", ["Can not use both port-group and port for source",
						"Validation error"]) : $dPort_form$$ && $dPortG$$ ? $(window).trigger("dialog", ["Can not use both port-group and port for destination", "Validation error"]) : $protoChecked$$2_sAddr$$ && ($sAddrG$$ || $prefixRe_sIfAddr$$ || $neg_protoNum$$2_sNetG$$) ? $(window).trigger("dialog", ["Can not use both group and source address", "Validation error"]) : $dAddr$$1_protoName$$ && ($dAddrG$$ || $dIfAddr$$ || $dNetG$$) ? $(window).trigger("dialog", ["Can not use both group and destination address", "Validation error"]) : $self$$.save()
					}
				},
				rules: {
					description: {
						noQuotes: !0
					},
					"outbound-interface": {
						required: !0
					},
					"protocol-number": {
						range: [0, 255]
					},
					"translation-address": {
						natAddress: !0
					},
					"translation-port": {
						natPort: !0
					},
					"source-port": {
						iptablesPort: !0
					},
					"destination-port": {
						iptablesPort: !0
					},
					"source-address": {
						iptablesAddress: !0
					},
					"destination-address": {
						iptablesAddress: !0
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Security.Nat.Config.prototype.render.call(this, !0);
			var $$form$$ = this.$("form"),
			$$outbound$$ = $$form$$.find("select[name=outbound-interface]");
			this.renderInterfaces($$outbound$$);
			$$outbound$$.unbind("change.interface").bind("change.interface",
			function() {
				"other" == $$outbound$$.val() ? $$form$$.find("input[name=other-interface]").show().focus() : $$form$$.find("input[name=other-interface]").hide()
			});
			$$form$$.find("input[name=other-interface]").hide();
			this.model || $$form$$.find("input[type=checkbox][name=enabled]").attr("checked", "checked");
			this.delegateEvents();
			this.flaggable = !1;
			this.model ? this.update() : this.show();
			this.flaggable = !0;
			"undefined" != typeof this.rulelist && this.rulelist.disableReordering()
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$$translation_ifval$$ = this.model.get("outbound-interface");
			0 != $$form$$.find("select[name=outbound-interface] option[value='" + $$translation_ifval$$ + "']").length ? (this.updateSelect($$form$$.find("select[name=outbound-interface]"), $$translation_ifval$$, $$form$$.find("label[for=" + $$form$$.find("select[name=outbound-interface]").attr("id") + "]")), $$form$$.find("input[name=other-interface]").hide()) : (this.updateSelect($$form$$.find("select[name=outbound-interface]"), "other"), this.updateTextbox($$form$$.find("input[name=other-interface]"),
			$$translation_ifval$$), $$form$$.find("input[name=other-interface]").show());
			if ("masquerade" == this.model.get("type")) $$translation_ifval$$ = $$form$$.find("input[name=translation][value=masquerade]"),
			this.updateRadio($$form$$.find("input[type=radio][name=translation]"), $$translation_ifval$$, $$form$$.find("label[for=translation]"));
			else {
				$$translation_ifval$$ = $$form$$.find("input[name=translation][value=manual]");
				this.updateRadio($$form$$.find("input[type=radio][name=translation]"), $$translation_ifval$$,
				$$form$$.find("label[for=translation]"));
				var $$outside$$ = this.model.get("outside-address");
				this.updateTextbox($$form$$.find("input[name=translation-address]"), $$outside$$.address, $$form$$.find("input[name=translation-address]").parents("label"));
				this.updateTextbox($$form$$.find("input[name=translation-port]"), $$outside$$.port, $$form$$.find("input[name=translation-port]").parents("label"))
			}
			$$translation_ifval$$.trigger("change");
			EDGE.Views.Security.Nat.Config.prototype.update.call(this)
		},
		prepareSave: function($batch$$51_result$$) {
			var $batch$$51_result$$ =
			EDGE.Views.Security.Nat.Config.prototype.prepareSave.call(this, $batch$$51_result$$),
			$selectedInterface$$ = this.$("select[name=outbound-interface] option:selected").val();
			"other" == $selectedInterface$$ ? this.setProperty("outbound-interface", this.$("input[name=other-interface]").val(), $batch$$51_result$$) : this.setProperty("outbound-interface", $selectedInterface$$, $batch$$51_result$$);
			"source" == this.getType() ? (this.setProperty(["outside-address", "address"], this.$("input[name=translation-address]").val(),
			$batch$$51_result$$), this.setProperty(["outside-address", "port"], this.$("input[name=translation-port]").val(), $batch$$51_result$$)) : (this.setProperty(["outside-address", "address"], "", $batch$$51_result$$), this.setProperty(["outside-address", "port"], "", $batch$$51_result$$));
			return $batch$$51_result$$
		},
		response: function($resp$$97_response$$) {
			$resp$$97_response$$ = EDGE.Views.Security.Nat.Config.prototype.response.call(this, $resp$$97_response$$);
			this.rulelist.update_filtered();
			return $resp$$97_response$$
		},
		getType: function() {
			return this.$("input[name=translation][value=masquerade]").is(":checked") ? "masquerade": "source"
		},
		remove: function() {
			"undefined" != typeof this.rulelist && this.rulelist.enableReordering();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Security.Nat.Destination = EDGE.Views.Security.Nat.List.extend({
		initialize: function($args$$) {
			this.template = _.template($("#SecurityNatDestinationTemplate").html());
			this.configClass = "DestinationConfig";
			this.types = ["destination"];
			this.filtered = this.collection.filterByDestination();
			EDGE.Views.Security.Nat.List.prototype.initialize.call(this, $args$$)
		},
		update_filtered: function() {
			this.filtered = this.collection.filterByDestination()
		}
	});
	EDGE.Views.Security.Nat.DestinationConfig = EDGE.Views.Security.Nat.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#SecurityNatDestinationConfigTemplate").html());
			this.id = "natdestination" + (this.model ? this.model.get("id") : "-new" + $args$$.id);
			this.title = "Destination NAT Rule Configuration";
			this.row = $args$$.row;
			this.rulelist = $args$$.rulelist;
			EDGE.Views.Security.Nat.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($dPort$$1_form$$) {
					$form =
					$($dPort$$1_form$$);
					var $sAddrG$$2_tPre$$1_transAddr$$ = $form.find("input[name=translation-address]").val(),
					$dPre_prefixRe$$1_sIfAddr$$2_transPort$$ = $form.find("input[name=translation-port]").val();
					if (!$sAddrG$$2_tPre$$1_transAddr$$ && !$dPre_prefixRe$$1_sIfAddr$$2_transPort$$) $(window).trigger("dialog", ["Must have a translations address or port", "Validation error"]);
					else {
						var $dPort$$1_form$$ = $form.find("input[name=destination-port]").val(),
						$sPort$$ = $form.find("input[name=source-port]").val();
						if ($dPre_prefixRe$$1_sIfAddr$$2_transPort$$ ||
						$dPort$$1_form$$ || $sPort$$) {
							var $protoChecked$$3_sAddr$$ = $form.find("input[name=protocol]:checked").val(),
							$dAddr$$2_protoName$$ = $form.find("select[name=protocol-name] option:selected").val(),
							$neg$$1_protoNum$$3_sNetG$$ = $form.find("input[name=protocol-number]").val();
							if (!isTcpUdp($protoChecked$$3_sAddr$$, $dAddr$$2_protoName$$, $neg$$1_protoNum$$3_sNetG$$)) {
								$(window).trigger("dialog", ["Protocol must be 'tcp, 'udp', or 'tcp_udp' when using port", "Validation error"]);
								return
							}
						}
						if ("other" == $form.find("select[name=inbound-interface]").val() &&
						0 == $form.find("input[name=other-interface]").val().length) $(window).trigger("dialog", ["Must enter outbound interface name", "Validation error"]);
						else if ($dPort$$1_form$$ && $sPort$$ && ($dPort$$1_form$$.match("-") || $sPort$$.match("-"))) $(window).trigger("dialog", ["Can not specify a port range when both source and destination ports are specified", "Validation error"]);
						else {
							$protoChecked$$3_sAddr$$ = $form.find("input[name=source-address]").val();
							$dAddr$$2_protoName$$ = $form.find("input[name=destination-address]").val();
							if ($protoChecked$$3_sAddr$$.match("/") && (($neg$$1_protoNum$$3_sNetG$$ = $protoChecked$$3_sAddr$$.match(/^\!(.+)/)) && ($protoChecked$$3_sAddr$$ = $neg$$1_protoNum$$3_sNetG$$[1]), !checkNetBoundary($protoChecked$$3_sAddr$$))) {
								$(window).trigger("dialog", ["Source subnet is not on a network boundary", "Validation error"]);
								return
							}
							if ($sAddrG$$2_tPre$$1_transAddr$$.match("/")) {
								if (!checkNetBoundary($sAddrG$$2_tPre$$1_transAddr$$)) {
									$(window).trigger("dialog", ["Translation subnet is not on a network boundary", "Validation error"]);
									return
								}
								if ($dPre_prefixRe$$1_sIfAddr$$2_transPort$$) {
									$(window).trigger("dialog", ["Can not use translation port when translating one subnet to another", "Validation error"]);
									return
								}
								if (!$dAddr$$2_protoName$$.match("/")) {
									$(window).trigger("dialog", ["Destination address needs to be a subnet when translating one subnet to another", "Validation error"]);
									return
								}
								if ($sAddrG$$2_tPre$$1_transAddr$$.match("^!") || $dAddr$$2_protoName$$.match("^!")) {
									$(window).trigger("dialog", ["Can not negate subnet when translating one subnet to another",
									"Validation error"]);
									return
								} ($neg$$1_protoNum$$3_sNetG$$ = $dAddr$$2_protoName$$.match(/^\!(.+)/)) && ($dAddr$$2_protoName$$ = $neg$$1_protoNum$$3_sNetG$$[1]);
								if (!checkNetBoundary($dAddr$$2_protoName$$)) {
									$(window).trigger("dialog", ["Destination subnet is not on a network boundary", "Validation error"]);
									return
								}
								$dPre_prefixRe$$1_sIfAddr$$2_transPort$$ = /\d+\.\d+\.\d+\.\d+\/(\d+)/;
								$sAddrG$$2_tPre$$1_transAddr$$ = $sAddrG$$2_tPre$$1_transAddr$$.match($dPre_prefixRe$$1_sIfAddr$$2_transPort$$);
								$dPre_prefixRe$$1_sIfAddr$$2_transPort$$ =
								$dAddr$$2_protoName$$.match($dPre_prefixRe$$1_sIfAddr$$2_transPort$$);
								if ($sAddrG$$2_tPre$$1_transAddr$$[1] != $dPre_prefixRe$$1_sIfAddr$$2_transPort$$[1]) {
									$(window).trigger("dialog", ["Subnet mask must be the same when translating one subnet to another", "Validation error"]);
									return
								}
							}
							var $sAddrG$$2_tPre$$1_transAddr$$ = $form.find("select[name=source-address-group]").val(),
							$dPre_prefixRe$$1_sIfAddr$$2_transPort$$ = $form.find("select[name=source-iface-address]").val(),
							$neg$$1_protoNum$$3_sNetG$$ = $form.find("select[name=source-network-group]").val(),
							$sPortG$$ = $form.find("select[name=source-port-group]").val(),
							$dAddrG$$ = $form.find("select[name=destination-address-group]").val(),
							$dIfAddr$$ = $form.find("select[name=destination-iface-address]").val(),
							$dNetG$$ = $form.find("select[name=destination-network-group]").val(),
							$dPortG$$ = $form.find("select[name=destination-port-group]").val(); ($sAddrG$$2_tPre$$1_transAddr$$ || $dPre_prefixRe$$1_sIfAddr$$2_transPort$$) && $neg$$1_protoNum$$3_sNetG$$ ? $(window).trigger("dialog", ["Can not use both network and address group for source",
							"Validation error"]) : ($dAddrG$$ || $dIfAddr$$) && $dNetG$$ ? $(window).trigger("dialog", ["Can not use both network and address group for destination", "Validation error"]) : $sPort$$ && $sPortG$$ ? $(window).trigger("dialog", ["Can not use both port-group and port for source", "Validation error"]) : $dPort$$1_form$$ && $dPortG$$ ? $(window).trigger("dialog", ["Can not use both port-group and port for destination", "Validation error"]) : $protoChecked$$3_sAddr$$ && ($sAddrG$$2_tPre$$1_transAddr$$ || $dPre_prefixRe$$1_sIfAddr$$2_transPort$$ ||
							$neg$$1_protoNum$$3_sNetG$$) ? $(window).trigger("dialog", ["Can not use both group and source address", "Validation error"]) : $dAddr$$2_protoName$$ && ($dAddrG$$ || $dIfAddr$$ || $dNetG$$) ? $(window).trigger("dialog", ["Can not use both group and destination address", "Validation error"]) : $self$$.save()
						}
					}
				},
				rules: {
					description: {
						noQuotes: !0
					},
					"inbound-interface": {
						required: !0
					},
					"protocol-number": {
						range: [0, 255]
					},
					"translation-address": {
						natAddress: !0
					},
					"translation-port": {
						natPort: !0
					},
					"source-port": {
						iptablesPort: !0
					},
					"destination-port": {
						iptablesPort: !0
					},
					"source-address": {
						iptablesAddress: !0
					},
					"destination-address": {
						iptablesAddress: !0
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Security.Nat.Config.prototype.render.call(this, !0);
			var $$form$$ = this.$("form"),
			$$inbound$$ = $$form$$.find("select[name=inbound-interface]");
			this.renderInterfaces($$inbound$$);
			$$inbound$$.unbind("change.interface").bind("change.interface",
			function() {
				"other" == $$inbound$$.val() ? $$form$$.find("input[name=other-interface]").show().focus() : $$form$$.find("input[name=other-interface]").hide()
			});
			$$form$$.find("input[name=other-interface]").hide();
			this.model || $$form$$.find("input[type=checkbox][name=enabled]").attr("checked", "checked");
			this.delegateEvents();
			this.flaggable = !1;
			this.model ? this.update() : this.show();
			this.flaggable = !0;
			"undefined" != typeof this.rulelist && this.rulelist.disableReordering()
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$$inside_ifval$$ = this.model.get("inbound-interface");
			0 != $$form$$.find("select[name=inbound-interface] option[value='" + $$inside_ifval$$ + "']").length ?
			(this.updateSelect($$form$$.find("select[name=inbound-interface]"), $$inside_ifval$$, $$form$$.find("label[for=" + $$form$$.find("select[name=inbound-interface]").attr("id") + "]")), $$form$$.find("input[name=other-interface]").hide()) : (this.updateSelect($$form$$.find("select[name=inbound-interface]"), "other"), this.updateTextbox($$form$$.find("input[name=other-interface]"), $$inside_ifval$$), $$form$$.find("input[name=other-interface]").show());
			$$inside_ifval$$ = this.model.get("inside-address");
			this.updateTextbox($$form$$.find("input[name=translation-address]"),
			$$inside_ifval$$.address, $$form$$.find("label[for=" + $$form$$.find("input[name=translation-address]").attr("id") + "]"));
			this.updateTextbox($$form$$.find("input[name=translation-port]"), $$inside_ifval$$.port, $$form$$.find("label[for=" + $$form$$.find("input[name=translation-port]").attr("id") + "]"));
			EDGE.Views.Security.Nat.Config.prototype.update.call(this)
		},
		prepareSave: function($batch$$52_result$$) {
			var $batch$$52_result$$ = EDGE.Views.Security.Nat.Config.prototype.prepareSave.call(this, $batch$$52_result$$),
			$selectedInterface$$ = this.$("select[name=inbound-interface] option:selected").val();
			"other" == $selectedInterface$$ ? this.setProperty("inbound-interface", this.$("input[name=other-interface]").val(), $batch$$52_result$$) : this.setProperty("inbound-interface", $selectedInterface$$, $batch$$52_result$$);
			this.setProperty(["inside-address", "address"], this.$("input[name=translation-address]").val(), $batch$$52_result$$);
			this.setProperty(["inside-address", "port"], this.$("input[name=translation-port]").val(), $batch$$52_result$$);
			return $batch$$52_result$$
		},
		response: function($resp$$98_response$$) {
			$resp$$98_response$$ = EDGE.Views.Security.Nat.Config.prototype.response.call(this, $resp$$98_response$$);
			this.rulelist.update_filtered();
			return $resp$$98_response$$
		},
		getType: function() {
			return "destination"
		},
		remove: function() {
			"undefined" != typeof this.rulelist && this.rulelist.enableReordering();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Security.PortForwarding = {};
	EDGE.Views.Security.PortForwarding.Default = EDGE.Views.Global.WizardBase.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Security.PortForwarding.Default",
		initialize: function($args$$) {
			this.stats = $args$$.stats;
			this.appdata = $args$$.appdata;
			this.subscribed = !1;
			this.setElement($("#Security .section-container #SecurityPortForwarding"));
			this.template = _.template($("#SecurityPortForwardingDefaultTemplate").html());
			this.$el.html(this.template);
			this.$el.prepend('<div class="loading"></div>');
			EDGE.Views.Global.WizardBase.prototype.initialize.call(this,
			$args$$);
			this.render();
			this.loadCollection()
		},
		render: function() {
			$(document).off("change", "select.has-other");
			EDGE.Views.Global.WizardBase.prototype.render.call(this);
			this.subscribe();
			this.stats.model.bind("pfsupdate", this.updateRules);
			return this
		},
		renderReadonly: function() {
			EDGE.Views.Global.WizardBase.prototype.renderReadonly.call(this);
			this.$form.find("input[name=stats]").show().next().hide()
		},
		updateRules: function() {
			_.each(this.$form.find("tr"),
			function($row$$, $index$$) {
				if (m = this.stats.pfscollection.get($index$$)) $($row$$).find("div.bytes").html(m.get("bytes")),
				$($row$$).find("div.packets").html(m.get("packets"))
			},
			this)
		},
		onChange: function() {
			var $self$$ = this;
			$(document).on("keyup", "table.addable-container input[type=text]",
			function() {
				$self$$.hideStats()
			});
			$(document).on("change", "table.addable-container select",
			function($event$$, $trigger$$) {
				$trigger$$ || $self$$.hideStats()
			});
			$(document).on("change", ":checkbox[name=stats]",
			function() {
				var $$this$$ = $(this),
				$$paddable$$ = $self$$.$form.find("div.addable[data-object=rules-config]"),
				$$ptable$$ = $$paddable$$.find("table.addable-container");
				$$this$$.is(":checked") ? ($$ptable$$.find(":input").prop("disabled", !0), $$ptable$$.find("th.stats").removeClass("hidden"), $$ptable$$.find("button.addable-remove").addClass("hidden"), $$paddable$$.find("button.addable-add").addClass("hidden"), $$ptable$$.find(".bytes").removeClass("hidden"), $$ptable$$.find(".packets").removeClass("hidden"), $$ptable$$.find("span.ui-icon-info").addClass("hidden")) : ($$ptable$$.find(":input").prop("disabled", !1), $$ptable$$.find("th.stats").addClass("hidden"), $$ptable$$.find("button.addable-remove").removeClass("hidden"),
				$$paddable$$.find("button.addable-add").removeClass("hidden"), $$ptable$$.find(".bytes").addClass("hidden"), $$ptable$$.find(".packets").addClass("hidden"), $$ptable$$.find("span.ui-icon-info").removeClass("hidden"))
			})
		},
		clickRemove: function($$add$$) {
			"rules-config" == $$add$$.parent().data("object") && this.hideStats()
		},
		addFunction: function($$add$$, $trigger$$) { ! $trigger$$ && "rules-config" == $$add$$.parent().data("object") && this.hideStats()
		},
		hideStats: function() {
			this.$form.find(":checkbox[name=stats]").off("change");
			this.$form.find("span.stats").addClass("hidden")
		},
		showStats: function() {
			this.$form.find("span.stats").removeClass("hidden")
		},
		doChange: function() {
			this.showStats()
		},
		infotip: function($elem$$) {
			$elem$$.infotip({
				position: {
					left: 0,
					top: 3
				}
			})
		},
		setContent: function() {
			this.$form = this.$("form")
		},
		populateForm: function($data$$, $$form$$) {
			$data$$ && _.each($data$$,
			function($value$$, $field$$) {
				if ($.isArray($value$$)) if ($$form$$) {
					var $$addable$$7_$input$$ = $$form$$.find("div.addable[data-object=" + $field$$ + "]");
					this.populateAddable($$addable$$7_$input$$,
					$value$$)
				} else $$addable$$7_$input$$ = this.$form.find("div.addable[data-object=" + $field$$ + "]"),
				("0" == $$addable$$7_$input$$.data("level") || "undefined" == typeof $$addable$$7_$input$$.data("level")) && this.populateAddable($$addable$$7_$input$$, $value$$);
				else if ($$form$$ = $$form$$ || this.$form, $$addable$$7_$input$$ = _.isNumber($field$$) ? $$form$$.find(":input").first() : $$form$$.find("[name^=" + $field$$ + "]"), $$addable$$7_$input$$.is(":radio")) $$addable$$7_$input$$.filter('[value="' + $value$$ + '"]').prop("checked",
				!0).trigger("change");
				else if ($$addable$$7_$input$$.is(":checkbox")) if (1 < $$addable$$7_$input$$.length) {
					var $values$$ = $value$$.split(",");
					$$addable$$7_$input$$.each(function() { - 1 != $values$$.indexOf($(this).val()) && $(this).prop("checked", !0).trigger("change")
					})
				} else $$addable$$7_$input$$.prop("checked", 0 != $value$$).trigger("change");
				else $$addable$$7_$input$$.is("select") ? $$addable$$7_$input$$.find('option[value="' + $value$$ + '"]').length ? $$addable$$7_$input$$.val($value$$).trigger("change", [!0]) : ($$addable$$7_$input$$.val("other").trigger("change"),
				$$addable$$7_$input$$.next("input.select-other").val($value$$)) : $$addable$$7_$input$$.val($value$$).trigger("change")
			},
			this)
		},
		reset: function($soft$$) {
			this.debug("resetting wizard");
			this.unsubscribe();
			$soft$$ ? (this.model = null, this.flagActive()) : (this.undelegateEvents(), $(document).off("change", "select.has-other"), this.$el.data("rendered", !1), this.$el.empty())
		},
		startRouting: function() {
			this._stoppedRouting && (this._stoppedRouting = !1, $("#Navigation li a").off("click.pf"), $("#Security li a").off("click.pf"),
			$("#NavSystem a").removeClass("disabled").off("click.pf"))
		},
		stopRouting: function() {
			this._stoppedRouting || (this._stoppedRouting = !0, $("#Navigation li a").on("click.pf", null, {
				trigger: !1
			},
			this.notifyRouting), $("#Security li a").on("click.pf", null, {
				trigger: !1
			},
			this.notifyRouting), $("#NavSystem a").addClass("disabled").on("click.pf", null, {
				trigger: !0,
				url: Backbone.history.fragment
			},
			this.notifyRouting))
		},
		collapse: function() {
			this.$form.find("fieldset.primary").each(function() {
				var $$fieldset$$ = $(this);
				$(this).find("legend.advance").after($('<label class="label-advance"><input type="checkbox" class="show-advance" name="show-advance" /><span>Show advanced options</span></label>'));
				var $advance$$ = $$fieldset$$.find(":checkbox.show-advance");
				$advance$$.on("change",
				function() {
					$this = $(this);
					$this.is(":checked") ? $$fieldset$$.find("div.advance-container").removeClass("hidden") : $$fieldset$$.find("div.advance-container").addClass("hidden")
				});
				$advance$$.prop("checked", !1);
				$advance$$.trigger("change")
			})
		},
		subscribe: function() {
			if (!this.subscribed) {
				this.subscribed = !0;
				var $pfsubs$$ = {
					name: "pf-stats",
					sub_id: "pfstats"
				};
				this.stats.subscribe([$pfsubs$$]);
				this.containSubscribe($pfsubs$$) || this.appdata.subscribe.push($pfsubs$$)
			}
		},
		containSubscribe: function($sub$$) {
			for (var $i$$ = 0; $i$$ < this.appdata.subscribe.length; $i$$++) if (this.appdata.subscribe[$i$$].name == $sub$$.name) return ! 0;
			return ! 1
		},
		unsubscribe: function() {
			this.subscribed && (this.subscribed = !1, this.stats.unsubscribe([{
				name: "pf-stats",
				sub_id: "pfstats"
			}]))
		}
	});
	EDGE.Routers.Services = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Services",
		routes: {
			Services: "index",
			"Services/DHCP": "dhcp",
			"Services/DHCP/:page": "dhcp",
			"Services/DNS": "dns",
			"Services/PPPoE": "pppoe",
			"Services*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize services router");
			if ("object" != typeof EDGE.Views.Services) throw "Missing services views";
			this.app = $data$$.app;
			this.views = {};
			this.views._container = new EDGE.Views.Services.Container
		},
		showTab: function($subtab$$) {
			var $$tab$$ =
			$("li#NavServices");
			$$tab$$.hasClass("ui-state-active") || ($$tab$$.find("a").trigger("click"), null != $subtab$$ && this.views._container.$(".section-tabs").tabslite("show", $subtab$$))
		},
		index: function() {
			this.debug("forwarding to the DHCP page");
			this.navigate("Services/DHCP", !0);
			this.views._container.$(".section-tabs").tabslite("show", 0)
		},
		dhcp: function($page$$) {
			if (!$page$$) return this.navigate("Services/DHCP/Server", !0);
			this.views._dhcp ? this.views._dhcp.render() : this.views._dhcp = new EDGE.Views.Services.Dhcp.Container;
			switch ($page$$) {
			case "Server":
				this.dhcpServer();
				break;
			case "Relay":
				this.dhcpRelay()
			}
		},
		dhcpServer: function() {
			this.showTab(0);
			this.views.dhcpServer ? this.views.dhcpServer.render() : this.views.dhcpServer = new EDGE.Views.Services.Dhcp.Server.Default ({
				model: this.app.data.view.get("services").filterByType("dhcp-server")
			});
			this.views._dhcp && this.views._dhcp.filter("dhcp-server")
		},
		dns: function() {
			this.showTab(1);
			this.views.dns ? this.views.dns.render() : this.views.dns = new EDGE.Views.Services.Dns.Default ({
				model: this.app.data.view.get("services").filterByType("dns"),
				interfaces: this.app.data.view.get("interfaces")
			});
			this.views.ddns ? this.views.ddns.render() : this.views.ddns = new EDGE.Views.Services.Dns.Ddns;
			this.views.ddns && this.views.ddns.filter("feature", ".DDns")
		},
		pppoe: function() {
			this.showTab(2);
			this.views.pppoe ? this.views.pppoe.render() : this.views.pppoe = new EDGE.Views.Services.Pppoe.Default ({
				model: this.app.data.view.get("services").filterByType("pppoe-server"),
				interfaces: this.app.data.view.get("interfaces")
			})
		}
	});
	EDGE.Views.Services = EDGE.Views.Services || {};
	EDGE.Views.Services.Dhcp = {};
	EDGE.Views.Services.Container = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Container",
		initialize: function() {
			this.setElement($("#Services"));
			this.render()
		},
		render: function() {
			this.$el.data("rendered") || (this.$(".section-tabs").tabslite({
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$9_anchor$$) {
						var $$anchor$$9_anchor$$ = $($$anchor$$9_anchor$$),
						$location$$ = window.location.hash;
						$$anchor$$9_anchor$$.attr("href") == $location$$.split("/").slice(0, 2).join("/") && $$anchor$$9_anchor$$.trigger("show")
					})
				},
				content: function($$anchor$$) {
					return $("#" + $$anchor$$.data("container"))
				}
			}), this.$el.data("rendered", !0));
			return this
		},
		reset: function() {
			this.debug("resetting services container");
			this.$el.data("rendered", !1)
		}
	});
	EDGE.Views.Services.Dhcp.Container = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Container",
		initialize: function() {
			this.setElement($("#ServicesDhcp"));
			this.render()
		},
		render: function() {
			this.$el.data("rendered") || (this.$filters = this.$(".filters").tabslite({
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$11_anchor$$) {
						var $$anchor$$11_anchor$$ = $($$anchor$$11_anchor$$),
						$location$$ = window.location.hash;
						$$anchor$$11_anchor$$.attr("href") == $location$$.split("/").slice(0,
						2).join("/") && $$anchor$$11_anchor$$.trigger("show")
					})
				},
				content: function($$anchor$$) {
					return $("#" + $$anchor$$.data("container"))
				}
			}), this.$el.data("rendered", !0));
			return this
		},
		filter: function($page$$) {
			this.$filters.find("li." + $page$$ + " a").trigger("show")
		},
		reset: function() {
			this.debug("resetting services dhcp container");
			this.$el.data("rendered", !1)
		}
	});
	EDGE.Views.Services.Dhcp.Server = {};
	EDGE.Views.Services.Dhcp.Server.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.Default",
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection = this.model.get("networks");
			this.collection.bind("add", this.add, this);
			this.rows = {};
			this.creates = [];
			this.setElement($("#Services .section-container #ServicesDhcp #ServicesDhcpServer"));
			this.template = _.template($("#ServicesDhcpServerTemplate").html());
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template({
					filters: ""
				})).data("rendered", !0);
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No DHCP servers configured.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "name"
					},
					{
						sClass: "subnet"
					},
					{
						sClass: "poolsize"
					},
					{
						sClass: "leased"
					},
					{
						sClass: "available"
					},
					{
						sClass: "static"
					},
					{
						sClass: "buttons",
						bSortable: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[0, "asc"]],
					sScrollY: 1,
					bScrollCollapse: !0,
					sDom: '<"H"fr>t<"F"ip>'
				},
				this.options.options || {}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			return this
		},
		add: function($server$$) {
			this.rows[$server$$.cid] = new EDGE.Views.Services.Dhcp.Server.Row({
				model: $server$$,
				dhcp_servers: this,
				dataTable: this.dataTable
			});
			var $self$$ = this;
			this.lazyResize();
			this.rows[$server$$.cid].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		create: function() {
			this.creates.push(new EDGE.Views.Services.Dhcp.Server.Create({
				id: this.creates.length,
				dhcp_servers: this
			}))
		},
		set_server_enable: function($did_smod$$, $en$$, $row$$) {
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.unset("get");
			$batch$$.unset("generic");
			var $did_smod$$ = $did_smod$$.get("id"),
			$p$$ = ["service", "dhcp-server", "shared-network-name"];
			$batch$$.get("gget").put($p$$, null);
			$batch$$.get($en$$ ? "gdelete": "gset").put($p$$, $did_smod$$, "disable", null);
			this.disableActions();
			var $self$$ = this;
			$row$$.$el.find(".drop-down-button button").button("showWorkingIndicator",
			"secondary", "ui-icon-spinner");
			$batch$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.enableActions();
					$row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		response: function($m$$7_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $m$$7_resp$$),
			$m$$7_resp$$ = EDGE.getObjProp($m$$7_resp$$,
			["GET", "service", "dhcp-server"]);
			void 0 !== $m$$7_resp$$ ? (this.dataTable.fnClearTable(), this.rows = {},
			this.collection.reset(), null !== $m$$7_resp$$ && void 0 !== $m$$7_resp$$["shared-network-name"] && (this.collection["import"]($m$$7_resp$$["shared-network-name"]), this.collection.loadData()), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ =
				this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.$table.fnDraw();
				$settings$$.oScroll.sY = this.$table.parents(".main-section").height() - this.$table.parents(".main-section").find(".section-tabs").height() - this.$table.parents(".table-container").height();
				this.$table.fnDraw()
			}
		},
		reset: function($soft$$) {
			this.debug("resetting services dhcp server");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$table.data("open-dialog-counter") ? 0: this.$table.data("open-dialog-counter") - 1;
			this.$table.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions &&
				(this.$actions.enableAction("delete"), this.$actions.enableAction("status"))
			})
		},
		enableRestrictions: function() {
			var $counter$$ = this.$table.data("open-dialog-counter") ? this.$table.data("open-dialog-counter") + 1: 1;
			this.$table.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && (this.$actions.disableAction("delete"), this.$actions.disableAction("status"))
			})
		},
		enableActions: function() {
			$("#ServicesDhcpServer .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".dhcpserver-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".dhcpserver-config .actions button.delete").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".dhcpserver-config .mappings button.create").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".dhcpserver-config .leases button.add-to-static").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = $("#ServicesDhcpServerAdd button");
			$$button$$.button("option",
			"disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$("#ServicesDhcpServer .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".dhcpserver-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".dhcpserver-config .actions button.delete").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".dhcpserver-config .mappings button.create").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".dhcpserver-config .leases button.add-to-static").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$ = $("#ServicesDhcpServerAdd button"); ! 1 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Services.Dhcp.Server.DropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.Row.DropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#ServicesDhcpServerRowDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			var $events$$ = {};
			return $events$$ = this.readonly ? {
				"click .action-leases": "actionViewLeases",
				"click .action-mappings-readonly": "actionViewMappings",
				"click .action-details": "actionViewDetails"
			}: {
				"click .action-leases": "actionLeases",
				"click .action-mappings": "actionMappings",
				"click .action-details": "actionDetails",
				"click .action-delete": "actionDelete",
				"click .action-status": "actionStatus"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			var $$actionList$$ = this.$el.children(".action-list");
			if (this.readonly) $$actionList$$.find(".action-mappings").parent().remove(),
			$$actionList$$.find(".action-delete").parent().remove(),
			$$actionList$$.find(".action-status").parent().remove();
			else {
				$$actionList$$.find(".action-mappings-readonly").parent().remove();
				var $en$$ = void 0 === this.row.model.get("disable");
				$$actionList$$.find(".action-status").html($en$$ ? "Disable": "Enable")
			}
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionDelete: function() {
			var $self$$ = this.row,
			$id$$ = $self$$.model.get("id");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete this DHCP server " + $id$$ + " ?",
				confirm: function() {
					$self$$["delete"]()
				}
			});
			return ! 1
		},
		actionStatus: function() {
			var $self$$ = this.row,
			$en$$ = void 0 === $self$$.model.get("disable"),
			$id$$ = $self$$.model.get("id");
			window.app.dialogs.confirmationDialog.open({
				title: ($en$$ ? "Disable": "Enable") + " DHCP Server Confirmation",
				message: "Are you sure you would like to " + ($en$$ ? "disable":
				"enable") + " this DHCP server " + $id$$ + " ?",
				confirm: function() {
					$self$$.dhcp_servers.set_server_enable($self$$.model, !$en$$, $self$$)
				}
			});
			return ! 1
		},
		actionViewLeases: function() {
			this.row.config(!0, 0);
			return ! 1
		},
		actionViewMappings: function() {
			this.row.config(!0, 1);
			return ! 1
		},
		actionViewDetails: function() {
			this.row.config(!0, 2);
			return ! 1
		},
		actionLeases: function() {
			this.row.config(!1, 0);
			return ! 1
		},
		actionMappings: function() {
			this.row.config(!1, 1);
			return ! 1
		},
		actionDetails: function() {
			this.row.config(!1, 2);
			return ! 1
		}
	});
	EDGE.Views.Services.Dhcp.Server.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.Row",
		initialize: function($args$$) {
			this.dhcp_servers = $args$$.dhcp_servers;
			this.model.bind("change", this.render, this);
			this.specialColumns = [6];
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			var $pool_size$$ = Number(this.model.get("stats").get("pool_size") || "") - this.taken(),
			$leased$$ = Number(this.model.get("stats").get("leased") || ""),
			$subnet$$ =
			this.model.get("subnets").length ? this.model.get("subnets").first() : null;
			return [this.model.get("id"), this.model.get("subnets").length ? this.model.get("subnets").first().get("id") : "", $pool_size$$, $leased$$, $pool_size$$ - $leased$$, $subnet$$ && $subnet$$.get("mappings") ? $subnet$$.get("mappings").size() : "0", ""]
		},
		taken: function() {
			var $count$$ = 0,
			$self$$ = this,
			$subnet$$ = this.model.get("subnets").first();
			$subnet$$.get("mappings").each(function($mapping$$) {
				$subnet$$.get("start") && ($count$$ += $self$$._ipInRange($mapping$$.get("ip-address"),
				_.first(_.keys($subnet$$.get("start"))), _.first(_.values($subnet$$.get("start"))).stop))
			});
			return $count$$
		},
		_ipInRange: function($ip$$, $start$$, $end$$) {
			if (!$ip$$ || !$start$$ || !$end$$) return 0;
			var $i32$$ = new Uint32Array(new ArrayBuffer(12));
			_.each([$ip$$, $start$$, $end$$],
			function($x$$, $i$$) {
				var $iparray$$ = $x$$.split(".").map(function($a$$) {
					return parseInt($a$$)
				});
				$i32$$[$i$$] = ($iparray$$[0] << 24) + ($iparray$$[1] << 16) + ($iparray$$[2] << 8) + $iparray$$[3]
			});
			return - 1 < $i32$$[0] - $i32$$[1] && -1 < $i32$$[2] - $i32$$[0] ?
			1: 0
		},
		render: function() {
			this.$actions && this.$actions.remove();
			this.$actions = new EDGE.Views.Services.Dhcp.Server.DropDownButton({
				container: this.$(".buttons"),
				row: this
			});
			this.renderDisabled(void 0 !== this.model.get("disable"));
			0 < this.dhcp_servers.$table.data("open-dialog-counter") && (this.$actions.disableAction("delete"), this.$actions.disableAction("status"));
			this.trigger("render");
			return this
		},
		config: function($readonly$$, $activeTab$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) : this.dialogs.config =
			new EDGE.Views.Services.Dhcp.Server.Config({
				dhcp_servers: this.dhcp_servers,
				row: this,
				model: this.model,
				readonly: $readonly$$
			});
			$(this.dialogs.config.$("div.dialog-tabs").tabslite("tabs")[$activeTab$$ || 0]).trigger("click")
		},
		"delete": function() {
			this.dhcp_servers.disableActions();
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.unset("get");
			$batch$$.unset("generic");
			$batch$$.unset("gset");
			var $did$$ = this.model.get("id"),
			$p$$ = ["service", "dhcp-server"],
			$pn$$ = $p$$.concat(["shared-network-name"]);
			$batch$$.get("gget").put($p$$, null);
			2 > this.dhcp_servers.collection.length ? $batch$$.get("gdelete").put($p$$, null) : ($batch$$.get("gdelete").put($pn$$, $did$$, null), $batch$$.get("gdelete").put($pn$$, "__FORCE_ASSOC", !0));
			var $self$$ = this;
			this.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.dhcp_servers.response($resp$$)
				},
				error: function() {
					$self$$.dhcp_servers.enableActions();
					$(window).trigger("notify",
					new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.dhcp_servers.enableActions();
					$self$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		}
	});
	EDGE.Views.Services.Dhcp.Server.Create = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.Create",
		initialize: function($args$$) {
			this.template = _.template($("#ServicesDhcpServerCreateTemplate").html());
			this.id = "adddhcpserver" + $args$$.id;
			this.type = "dhcpserver";
			this.action = "create";
			this.title = "Create DHCP Server";
			this.dhcp_servers = $args$$.dhcp_servers;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ =
			this,
			$mids$$ = [];
			_.each(this.dhcp_servers.collection.models,
			function($m$$) {
				$mids$$.push($m$$.id)
			});
			return {
				submitHandler: function($form$$18_sname_start$$) {
					$form = $($form$$18_sname_start$$);
					var $form$$18_sname_start$$ = $form.find("input[name=range-start]").val(),
					$stop$$ = $form.find("input[name=range-stop]").val();
					$form$$18_sname_start$$ && !$stop$$ || !$form$$18_sname_start$$ && $stop$$ ? $(window).trigger("dialog", ["Must have both start and stop when using an allocation range", "Validation error"]) : ($form$$18_sname_start$$ =
					$form.find("input[name=name]").val(), _.contains($mids$$, $form$$18_sname_start$$) ? $(window).trigger("dialog", ["DHCP Name " + $form$$18_sname_start$$ + " already exists", "Validation error"]) : $self$$.save())
				},
				rules: {
					name: {
						required: !0,
						noWhiteSpace: !0,
						dhcpServerName: !0,
						noQuotes: !0
					},
					subnet: {
						required: !0,
						noWhiteSpace: !0,
						ipv4net: !0,
						ipv4NetBoundary: !0
					},
					"range-start": {
						noWhiteSpace: !0,
						ipv4: !0,
						dhcpInSubnet: !0
					},
					"range-stop": {
						noWhiteSpace: !0,
						ipv4: !0,
						dhcpInSubnet: !0,
						dhcpStartStop: !0
					},
					router: {
						noWhiteSpace: !0,
						ipv4: !0
					},
					dns1: {
						noWhiteSpace: !0,
						ipv4: !0
					},
					dns2: {
						noWhiteSpace: !0,
						ipv4: !0
					},
					"unifi-controller": {
						noWhiteSpace: !0,
						ipv4: !0
					}
				}
			}
		},
		render: function() {
			this.dhcp_servers.enableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this);
			this.show();
			this.$el.infotip();
			return this
		},
		prepareSave: function($batch$$) {
			var $collection$$15_model$$ = $batch$$.get("set").get("services").filterByType("dhcp-server").get("networks");
			$collection$$15_model$$.add({
				id: this.$("input[name=name]").val()
			});
			var $collection$$15_model$$ =
			$collection$$15_model$$.last(),
			$attrs$$ = {};
			$collection$$15_model$$.clear({
				silent: !0
			});
			this.$("input[name=enabled]").is(":checked") || ($attrs$$.disable = !0);
			var $subnets$$ = $collection$$15_model$$.get("subnet") || {};
			$subnets$$[this.$("input[name=subnet]").val()] = {};
			var $subnet$$ = $subnets$$[this.$("input[name=subnet]").val()],
			$i$$215_router$$2_start$$ = this.$("input[name=range-start]").val();
			if ($i$$215_router$$2_start$$) {
				$subnet$$.start = $subnet$$.start || {};
				$subnet$$.start[$i$$215_router$$2_start$$] = {};
				var $dns_stop$$ =
				this.$("input[name=range-stop]").val();
				$dns_stop$$ && ($subnet$$.start[$i$$215_router$$2_start$$].stop = $dns_stop$$)
			} ($i$$215_router$$2_start$$ = this.$("input[name=router]").val()) && ($subnet$$["default-router"] = $i$$215_router$$2_start$$); ($i$$215_router$$2_start$$ = this.$("input[name=unifi-controller]").val()) && ($subnet$$["unifi-controller"] = $i$$215_router$$2_start$$);
			for ($i$$215_router$$2_start$$ = 1; 2 >= $i$$215_router$$2_start$$; $i$$215_router$$2_start$$++) if ($dns_stop$$ = this.$("input[name=dns" + $i$$215_router$$2_start$$ +
			"]").val()) $subnet$$["dns-server"] = $subnet$$["dns-server"] || [],
			$subnet$$["dns-server"].push($dns_stop$$);
			_.isEmpty($subnet$$) && ($subnets$$[this.$("input[name=subnet]").val()] = null);
			$attrs$$.subnet = $subnets$$;
			$collection$$15_model$$.set($attrs$$, {
				silent: !0
			});
			$batch$$.get("gget").put(["service", "dhcp-server", "shared-network-name"], null)
		},
		save: function($batch$$56_e$$) {
			$batch$$56_e$$ && $batch$$56_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$56_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$56_e$$);
			$batch$$56_e$$.get("set").get("services").hasChanged() || $batch$$56_e$$.unset("set");
			$batch$$56_e$$.unset("delete");
			var $self$$ = this;
			$batch$$56_e$$.has("set") && (this.dialog.addClass("saving"), $self$$.dhcp_servers.disableActions(), $batch$$56_e$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.dhcp_servers.enableActions();
					$self$$.dialog &&
					$self$$.dialog.removeClass("saving")
				}
			}))
		},
		response: function($resp$$106_s$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$106_s$$),
			$path$$ = ["GET", "service", "dhcp-server", "shared-network-name"];
			$response$$.results.COMMIT && (($resp$$106_s$$ = EDGE.getObjProp($resp$$106_s$$, $path$$)) ? (this.dhcp_servers.dataTable.fnClearTable(), this.dhcp_servers.rows = [], this.dhcp_servers.collection.reset(), this.dhcp_servers.collection["import"]($resp$$106_s$$), this.dhcp_servers.collection.loadData(this),
			this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			})));
			return $response$$
		},
		remove: function() {
			this.dhcp_servers.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Services.Dhcp.Server.Config = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.Config",
		events: {
			"submit form": "save",
			"click button.create": "create_static",
			"click button.delete": "delete"
		},
		initialize: function($args$$) {
			_(this).bindAll("rebuildTables");
			this.template = _.template($("#ServicesDhcpServerConfigTemplate").html());
			this.dhcp_servers = $args$$.dhcp_servers;
			this.row = $args$$.row;
			this.id = "dhcpserver" + this.model.get("id");
			this.type = "dhcpserver";
			this.action = "edit";
			this.title = "DHCP Server - " + this.model.get("id");
			this.leases = this.model.get("leases");
			this.leases.bind("add", this.addLease, this);
			var $self$$ = this;
			this.leases.bind("reset",
			function() {
				$self$$.resetLeases()
			});
			this.leaseRows = [];
			this.stats = this.model.get("stats");
			this.stats.bind("change", this.update, this);
			this.subnet = this.model.get("subnets").first();
			this.mappings = this.subnet.get("mappings");
			this.mappings.bind("add", this.addMapping, this);
			this.mappingRows = [];
			this.creates = [];
			var $lazyLayout$$ =
			_.debounce(this.rebuildTables, 200);
			$(window).resize($lazyLayout$$);
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		resetMappings: function() {
			this.dataTableMappings && (_.each(this.mappingRows,
			function($row$$) {
				$row$$.reset()
			}), this.mappingRows = [], this.dataTableMappings.fnClearTable(), this.addMappings(this.mappings))
		},
		resetLeases: function($soft$$) {
			this.dataTableLeases && (_.each(this.leaseRows,
			function($row$$) {
				$row$$.reset()
			}), this.leaseRows = [], $soft$$ || (this.dataTableLeases.fnClearTable(),
			this.addLeases(this.leases)))
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$19_subnet$$) {
					$form = $($form$$19_subnet$$);
					var $bcast$$6_hostBits$$5_net$$10_start$$ = $form.find("input[name=range-start]").val(),
					$hostStart$$5_ipDec$$10_stop$$ = $form.find("input[name=range-stop]").val();
					if ($bcast$$6_hostBits$$5_net$$10_start$$ && $hostStart$$5_ipDec$$10_stop$$) {
						var $domain$$1_msg$$17_startDec$$ = ipToDec($bcast$$6_hostBits$$5_net$$10_start$$),
						$stopDec$$ = ipToDec($hostStart$$5_ipDec$$10_stop$$);
						if ( + $domain$$1_msg$$17_startDec$$ > +$stopDec$$ && +$domain$$1_msg$$17_startDec$$ != $stopDec$$) {
							$(window).trigger("dialog", ["range-start must be less than or equal to range-stop", "Validation error"]);
							return
						}
					}
					if ($bcast$$6_hostBits$$5_net$$10_start$$ && !$hostStart$$5_ipDec$$10_stop$$ || !$bcast$$6_hostBits$$5_net$$10_start$$ && $hostStart$$5_ipDec$$10_stop$$) $(window).trigger("dialog", ["Must have both start and stop when using an allocation range", "Validation error"]);
					else {
						var $form$$19_subnet$$ = $form.find("input[name=subnet]").val(),
						$ipNetRe$$9_ipnet$$9_mask$$ = /^\s*((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/((?:[3][0-2]|[2][0-9]|[1][0-9]|[1-9]))\s*$/;
						if (($ipNetRe$$9_ipnet$$9_mask$$ = $form$$19_subnet$$ ? $form$$19_subnet$$.match($ipNetRe$$9_ipnet$$9_mask$$) : null) && $bcast$$6_hostBits$$5_net$$10_start$$ && $hostStart$$5_ipDec$$10_stop$$) {
							for (var $bcast$$6_hostBits$$5_net$$10_start$$ = $ipNetRe$$9_ipnet$$9_mask$$[2], $hostStart$$5_ipDec$$10_stop$$ = ipToDec($ipNetRe$$9_ipnet$$9_mask$$[1]),
							$bcast$$6_hostBits$$5_net$$10_start$$ = 32 - +$bcast$$6_hostBits$$5_net$$10_start$$, $hostStart$$5_ipDec$$10_stop$$ = +( + ( + $hostStart$$5_ipDec$$10_stop$$ >>> +$bcast$$6_hostBits$$5_net$$10_start$$) << +$bcast$$6_hostBits$$5_net$$10_start$$) >>> 0, $i$$ = $ipNetRe$$9_ipnet$$9_mask$$ = 0; $i$$ < +$bcast$$6_hostBits$$5_net$$10_start$$; $i$$++) $ipNetRe$$9_ipnet$$9_mask$$ <<= 1,
							$ipNetRe$$9_ipnet$$9_mask$$ |= 1;
							$bcast$$6_hostBits$$5_net$$10_start$$ = +( + $hostStart$$5_ipDec$$10_stop$$ | +$ipNetRe$$9_ipnet$$9_mask$$) >>> 0;
							if ( + $domain$$1_msg$$17_startDec$$ <
							+$hostStart$$5_ipDec$$10_stop$$ || +$domain$$1_msg$$17_startDec$$ > +$bcast$$6_hostBits$$5_net$$10_start$$) {
								$(window).trigger("dialog", ["range-start must be within subnet " + $form$$19_subnet$$, "Validation error"]);
								return
							}
							if ( + $stopDec$$ < +$hostStart$$5_ipDec$$10_stop$$ || +$stopDec$$ > +$bcast$$6_hostBits$$5_net$$10_start$$) {
								$(window).trigger("dialog", ["range-stop must be within subnet " + $form$$19_subnet$$, "Validation error"]);
								return
							}
						} ($domain$$1_msg$$17_startDec$$ = $form.find("input[name=domain]").val()) && 253 <
						$domain$$1_msg$$17_startDec$$.length ? ($domain$$1_msg$$17_startDec$$ = "domain must be less than 253 characters", $(window).trigger("dialog", [$domain$$1_msg$$17_startDec$$, "Validation error"])) : 126 < $domain$$1_msg$$17_startDec$$.split(".").length ? ($domain$$1_msg$$17_startDec$$ = "domain must be less than 126 levels", $(window).trigger("dialog", [$domain$$1_msg$$17_startDec$$, "Validation error"])) : $self$$.save()
					}
				},
				rules: {
					name: {
						required: !0,
						dhcpServerName: !0
					},
					"range-start": {
						noWhiteSpace: !0,
						ipv4: !0
					},
					"range-stop": {
						noWhiteSpace: !0,
						ipv4: !0
					},
					router: {
						ipv4: !0
					},
					"unifi-controller": {
						ipv4: !0
					},
					dns1: {
						ipv4: !0
					},
					dns2: {
						ipv4: !0
					},
					domain: {
						noWhiteSpace: !0,
						noQuotes: !0,
						domain: !0
					},
					lease: {
						required: !0,
						range: [0, 4294967296]
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this);
			var $$buttons$$ = this.$el.find("div.actions .right button"),
			$self$$ = this;
			this.$("div.dialog-tabs").tabslite("tabs").bind("show",
			function() {
				$$buttons$$.hide();
				var $button$$ = $(this).data("button");
				$button$$ && $$buttons$$.filter("." + $button$$).show();
				$self$$.dataTableMappings && $self$$.dataTableMappings.fnDraw(!0)
			}).first().trigger("show");
			this.$el.infotip();
			this.$el.data("rendered") ? (this.updateLeases(), this.updateMappings()) : ($self$$ = this, this.$("div.dialog-tabs ul li.leases").bind("show",
			function() {
				$self$$.dhcp_servers.collection.loadData($self$$)
			}), this.renderLeases(), this.renderMappings(), this.$el.data("rendered", !0));
			this.flaggable = !1;
			this.update(!0);
			this.flaggable = !0;
			this.dhcp_servers.enableRestrictions();
			return this
		},
		renderLeases: function() {
			"undefined" !==
			typeof this.dataTableLeases && this.dataTableLeases.fnDestroy();
			this.dataTableLeasesConfig = {
				oLanguage: {
					sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
					sSearch: "Search _INPUT_",
					sInfoEmpty: "",
					sEmptyTable: "No leases assigned."
				},
				aoColumns: [{
					sClass: "ip",
					sType: "ipv4-address",
					sWidth: "120px"
				},
				{
					sClass: "mac",
					sWidth: "120px"
				},
				{
					sClass: "lease",
					sWidth: "120px"
				},
				{
					sClass: "pool",
					sWidth: "120px"
				},
				{
					sClass: "hostname",
					sWidth: "120px"
				},
				{
					sClass: "static",
					bSortable: !1,
					sWidth: "120px"
				}],
				bPaginate: !1,
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				sScrollY: this.maxTableHeight(),
				bScrollCollapse: !0,
				sDom: '<"H"fr><"scrollable"t><"F"ip>'
			};
			this.$tableLeases = this.$("div.leases table");
			this.$tbodyLeases = this.$tableLeases.find("tbody");
			this.dataTableLeases = this.$tableLeases.dataTable(_.extend(this.dataTableLeasesConfig, this.options.options || {}));
			this.leases.length && this.$tbodyLeases.empty();
			this.addLeases(this.leases)
		},
		renderMappings: function() {
			"undefined" !== typeof this.dataTableMappings && this.dataTableMappings.fnDestroy();
			this.dataTableMappingsConfig = {
				oLanguage: {
					sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
					sSearch: "Search _INPUT_",
					sInfoEmpty: "",
					sEmptyTable: "No mappings available."
				},
				aoColumns: [{
					sClass: "name"
				},
				{
					sClass: "mac"
				},
				{
					sClass: "ip",
					sType: "ipv4-address"
				},
				{
					sClass: "buttons",
					bSortable: !1
				}],
				bPaginate: !1,
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				sScrollY: this.maxTableHeight(),
				bScrollCollapse: !0,
				sDom: '<"H"fr><"scrollable"t><"F"ip>'
			};
			this.$tableMappings = this.$("div.mappings table");
			this.$tbodyMappings = this.$tableMappings.find("tbody");
			this.dataTableMappings = this.$tableMappings.dataTable(_.extend(this.dataTableMappingsConfig, this.options.options || {}));
			this.mappings.length && this.$tbodyMappings.empty();
			this.addMappings(this.mappings);
			var $self$$ = this;
			this.$el.find(".dataTables_filter input").keyup(function() {
				$self$$.update()
			});
			$(this.$("div.dialog-tabs").tabslite("tabs")[1]).on("click",
			function() {
				$(this).trigger("show")
			}).trigger("click")
		},
		maxTableHeight: function() {
			var $siblings_surrounds$$ =
			this.$el.find(".dialog-stats, .dialog-tabs, .actions.grouped"),
			$header$$ = this.$el.closest(".dialog").find(".dialog-header"),
			$siblings_surrounds$$ = _($siblings_surrounds$$).reduce(function($memo$$, $el$$) {
				return $($el$$).outerHeight() + $memo$$
			},
			0) + $header$$.height() + 136;
			return 0.75 * $(document).height() - $siblings_surrounds$$
		},
		rebuildTables: function() {
			if (this.dataTableLeases || this.dataTableMappings) {
				var $sScrollY$$ = this.maxTableHeight();
				this.dataTableLeases && (this.dataTableLeases.fnDestroy(), this.dataTableLeasesConfig.sScrollY =
				$sScrollY$$, this.$tableLeases.dataTable(this.dataTableLeasesConfig));
				this.dataTableMappings && (this.dataTableMappings.fnDestroy(), this.dataTableMappingsConfig.sScrollY = $sScrollY$$, this.$tableMappings.dataTable(this.dataTableMappingsConfig))
			}
			return this
		},
		addLease: function($lease$$, $draw$$) {
			void 0 === $draw$$ && ($draw$$ = !0);
			this.leaseRows.push(new EDGE.Views.Services.Dhcp.Server.LeaseRow({
				model: $lease$$,
				server: this,
				subnet: this.subnet,
				draw: $draw$$,
				dataTable: this.dataTableLeases
			}))
		},
		addLeases: function($leases$$) {
			$leases$$.each(function($lease$$) {
				this.addLease($lease$$,
				!1)
			},
			this);
			this.dataTableLeases.fnDraw()
		},
		addMapping: function($mapping$$, $draw$$) {
			void 0 === $draw$$ && ($draw$$ = !0);
			this.mappingRows.push(new EDGE.Views.Services.Dhcp.Server.MappingRow({
				model: $mapping$$,
				server: this,
				subnet: this.subnet,
				draw: $draw$$,
				dataTable: this.dataTableMappings
			}))
		},
		addMappings: function($mappings$$) {
			$mappings$$.each(function($mapping$$) {
				this.addMapping($mapping$$, !1)
			},
			this);
			this.dataTableMappings.fnDraw()
		},
		updateLeases: function() {
			_.each(this.leaseRows,
			function($row$$) {
				$row$$.update()
			})
		},
		updateMappings: function() {
			_.each(this.mappingRows,
			function($row$$) {
				$row$$.update()
			})
		},
		update: function($soft$$) {
			var $subnet$$ = this.model.get("subnets").length ? this.model.get("subnets").first() : null,
			$$form$$ = this.$("div.dialog-stats"),
			$def_rtr_en$$5_pool_size$$ = Number(this.model.get("stats").get("pool_size") || "") - this.row.taken(),
			$dns1_leased$$ = Number(this.model.get("stats").get("leased") || "");
			$$form$$.find("dd.pool-size").html($def_rtr_en$$5_pool_size$$.toString() || "n/a");
			$$form$$.find("dd.leased").html($dns1_leased$$.toString() ||
			"n/a");
			$$form$$.find("dd.available").html(($def_rtr_en$$5_pool_size$$ - $dns1_leased$$).toString() || "n/a");
			$$form$$.find("dd.static").html($subnet$$ && $subnet$$.get("mappings") ? $subnet$$.get("mappings").size() : "0");
			$$form$$.find("dd.subnet").html($subnet$$ ? $subnet$$.get("id") : "n/a");
			$subnet$$.get("start") && ($$form$$.find("dd.range-start").html(_.first(_.keys($subnet$$.get("start"))) || "n/a"), $$form$$.find("dd.range-end").html(_.first(_.values($subnet$$.get("start"))).stop || "n/a"));
			var $dns2$$ = $dns1_leased$$ =
			$def_rtr_en$$5_pool_size$$ = "",
			$unifi_v$$ = "";
			if ($subnet$$) {
				$subnet$$.get("dns-server") && ($dns1_leased$$ = $subnet$$.get("dns-server")[0], $dns2$$ = $subnet$$.get("dns-server")[1] || "");
				var $rtr_unifi$$ = $subnet$$.get("default-router");
				$rtr_unifi$$ && ($def_rtr_en$$5_pool_size$$ = $rtr_unifi$$); ($rtr_unifi$$ = $subnet$$.get("unifi-controller")) && ($unifi_v$$ = $rtr_unifi$$)
			}
			$$form$$.find("dd.router").html($def_rtr_en$$5_pool_size$$);
			$$form$$.find("dd.dns1").html($dns1_leased$$);
			$$form$$.find("dd.dns2").html($dns2$$);
			$$form$$.find("dd.unifi-controller").html($unifi_v$$);
			$def_rtr_en$$5_pool_size$$ = void 0 === this.model.get("disable");
			$$form$$.find("dd.status").html($def_rtr_en$$5_pool_size$$ ? "Enabled": "Disabled");
			$$form$$ = this.$("form");
			$subnet$$.get("start") && (this.updateTextbox($$form$$.find("input[name=range-start]"), _.first(_.keys($subnet$$.get("start"))), $$form$$.find('label[for="' + $$form$$.find("input[name=range-start]").attr("id") + '"]')), this.updateTextbox($$form$$.find("input[name=range-stop]"), _.first(_.values($subnet$$.get("start"))).stop,
			$$form$$.find('label[for="' + $$form$$.find("input[name=range-stop]").attr("id") + '"]')));
			this.updateTextbox($$form$$.find("input[name=router]"), $subnet$$.get("default-router"), $$form$$.find('label[for="' + $$form$$.find("input[name=router]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=unifi-controller]"), $subnet$$.get("unifi-controller"), $$form$$.find('label[for="' + $$form$$.find("input[name=unifi-controller]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=dns1]"), _.values($subnet$$.get("dns-server"))[0],
			$$form$$.find('label[for="' + $$form$$.find("input[name=dns1]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=dns2]"), _.values($subnet$$.get("dns-server"))[1], $$form$$.find('label[for="' + $$form$$.find("input[name=dns2]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=domain]"), $subnet$$.get("domain-name"), $$form$$.find('label[for="' + $$form$$.find("input[name=domain]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=lease]"), $subnet$$.get("lease"), $$form$$.find('label[for="' +
			$$form$$.find("input[name=lease]").attr("id") + '"]'));
			this.updateCheckbox($$form$$.find("input[name=enabled]"), $def_rtr_en$$5_pool_size$$, $$form$$.find('label[for="' + $$form$$.find("input[name=enabled]").attr("id") + '"]'));
			$soft$$ && (this.resetLeases($soft$$), this.resetMappings());
			this.show()
		},
		templateVars: function() {
			return {
				name: this.model.get("id"),
				subnet: this.model.get("subnets").first().get("id")
			}
		},
		prepareSave: function($batch$$) {
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.unset("get");
			$batch$$.unset("generic");
			if (! (1 > this.model.get("subnets").length)) {
				var $o_domain_o_sub$$ = this.model.get("subnets").first(),
				$o_subid_sub_p$$ = $o_domain_o_sub$$.id,
				$did$$2_gset$$ = this.model.get("id"),
				$net$$ = ["service", "dhcp-server", "shared-network-name"],
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ = $net$$.concat([$did$$2_gset$$]),
				$o_subid_sub_p$$ = $n_dns_n_domain_n_lease_n_rtr_n_start$$.concat(["subnet", $o_subid_sub_p$$]);
				$batch$$.get("gget").put($n_dns_n_domain_n_lease_n_rtr_n_start$$, null);
				$batch$$.get("gget").put($net$$,
				"__FORCE_ASSOC", !0);
				var $did$$2_gset$$ = $batch$$.get("gset"),
				$gdel$$ = $batch$$.get("gdelete"),
				$en_old_n_stop$$ = void 0 === this.model.get("disable"),
				$dns_change_en_new_o_start$$ = this.$("input[name=enabled]").is(":checked");
				$en_old_n_stop$$ && !$dns_change_en_new_o_start$$ ? $did$$2_gset$$.put($n_dns_n_domain_n_lease_n_rtr_n_start$$, "disable", null) : !$en_old_n_stop$$ && $dns_change_en_new_o_start$$ && $gdel$$.put($n_dns_n_domain_n_lease_n_rtr_n_start$$, "disable", null);
				var $n_dns_n_domain_n_lease_n_rtr_n_start$$ =
				this.$("input[name=range-start]").val(),
				$en_old_n_stop$$ = this.$("input[name=range-stop]").val(),
				$i$$ = $dns_change_en_new_o_start$$ = "";
				$o_domain_o_sub$$.get("start") && ($dns_change_en_new_o_start$$ = _.first(_.keys($o_domain_o_sub$$.get("start"))), $i$$ = _.first(_.values($o_domain_o_sub$$.get("start"))).stop);
				if ($n_dns_n_domain_n_lease_n_rtr_n_start$$ !== $dns_change_en_new_o_start$$ || $en_old_n_stop$$ !== $i$$) $gdel$$.put($o_subid_sub_p$$, "start", null),
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ && $en_old_n_stop$$ &&
				$did$$2_gset$$.put($o_subid_sub_p$$, "start", $n_dns_n_domain_n_lease_n_rtr_n_start$$, "stop", $en_old_n_stop$$);
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ = this.$("input[name=lease]").val();
				$en_old_n_stop$$ = $o_domain_o_sub$$.get("lease");
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ !== $en_old_n_stop$$ && $did$$2_gset$$.put($o_subid_sub_p$$, "lease", $n_dns_n_domain_n_lease_n_rtr_n_start$$);
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ = ($n_dns_n_domain_n_lease_n_rtr_n_start$$ = this.$("input[name=router]").val()) ? $n_dns_n_domain_n_lease_n_rtr_n_start$$:
				"";
				$en_old_n_stop$$ = $o_domain_o_sub$$.get("default-router"); ($en_old_n_stop$$ ? $en_old_n_stop$$: "") !== $n_dns_n_domain_n_lease_n_rtr_n_start$$ && ($n_dns_n_domain_n_lease_n_rtr_n_start$$ ? $did$$2_gset$$.put($o_subid_sub_p$$, "default-router", $n_dns_n_domain_n_lease_n_rtr_n_start$$) : $gdel$$.put($o_subid_sub_p$$, "default-router", null));
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ = ($n_dns_n_domain_n_lease_n_rtr_n_start$$ = this.$("input[name=unifi-controller]").val()) ? $n_dns_n_domain_n_lease_n_rtr_n_start$$: "";
				$en_old_n_stop$$ =
				$o_domain_o_sub$$.get("unifi-controller"); ($en_old_n_stop$$ ? $en_old_n_stop$$: "") !== $n_dns_n_domain_n_lease_n_rtr_n_start$$ && ($n_dns_n_domain_n_lease_n_rtr_n_start$$ ? $did$$2_gset$$.put($o_subid_sub_p$$, "unifi-controller", $n_dns_n_domain_n_lease_n_rtr_n_start$$) : $gdel$$.put($o_subid_sub_p$$, "unifi-controller", null));
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ = _.compact([this.$("input[name=dns1]").val(), this.$("input[name=dns2]").val()]); ($en_old_n_stop$$ = $o_domain_o_sub$$.get("dns-server")) || ($en_old_n_stop$$ =
				[]);
				$dns_change_en_new_o_start$$ = $n_dns_n_domain_n_lease_n_rtr_n_start$$.length != $en_old_n_stop$$.length;
				if (!$dns_change_en_new_o_start$$) for ($i$$ = 0; $i$$ < $n_dns_n_domain_n_lease_n_rtr_n_start$$.length; $i$$++) if ($n_dns_n_domain_n_lease_n_rtr_n_start$$[$i$$] !== $en_old_n_stop$$[$i$$]) {
					$dns_change_en_new_o_start$$ = !0;
					break
				}
				$dns_change_en_new_o_start$$ && (0 < $en_old_n_stop$$.length && $gdel$$.put($o_subid_sub_p$$, "dns-server", null), 0 < $n_dns_n_domain_n_lease_n_rtr_n_start$$.length && $did$$2_gset$$.put($o_subid_sub_p$$,
				"dns-server", $n_dns_n_domain_n_lease_n_rtr_n_start$$));
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ = ($n_dns_n_domain_n_lease_n_rtr_n_start$$ = this.$("input[name=domain]").val()) ? $n_dns_n_domain_n_lease_n_rtr_n_start$$: "";
				$o_domain_o_sub$$ = $o_domain_o_sub$$.get("domain-name");
				$n_dns_n_domain_n_lease_n_rtr_n_start$$ !== ($o_domain_o_sub$$ ? $o_domain_o_sub$$: "") && ($n_dns_n_domain_n_lease_n_rtr_n_start$$ ? $did$$2_gset$$.put($o_subid_sub_p$$, "domain-name", $n_dns_n_domain_n_lease_n_rtr_n_start$$) : $gdel$$.put($o_subid_sub_p$$,
				"domain-name", null));
				$did$$2_gset$$.hasChanged() ? $did$$2_gset$$.put($net$$, "__FORCE_ASSOC", !0) : $batch$$.unset("gset");
				$gdel$$.hasChanged() ? $gdel$$.put($net$$, "__FORCE_ASSOC", !0) : $batch$$.unset("gdelete")
			}
		},
		save: function($batch$$58_e$$) {
			$batch$$58_e$$ && $batch$$58_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$58_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$58_e$$);
			var $self$$ = this;
			if ($batch$$58_e$$.has("gset") || $batch$$58_e$$.has("gdelete")) this.dialog.addClass("saving"),
			this.disableActions(),
			$batch$$58_e$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET &&
			$resp$$.GET.service && $resp$$.GET.service["dhcp-server"]["shared-network-name"] ? (this.dhcp_servers.collection["import"]($resp$$.GET.service["dhcp-server"]["shared-network-name"]), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		create_static: function() {
			this.creates.push(new EDGE.Views.Services.Dhcp.Server.MappingCreate({
				server: this,
				subnet: this.subnet
			}))
		},
		delete_mapping: function($mid$$) {
			this.dialog.removeClass("saved success error");
			var $batch$$ = new EDGE.Models.Batch;
			$batch$$.unset("set");
			$batch$$.unset("delete");
			$batch$$.unset("get");
			$batch$$.unset("generic");
			$batch$$.unset("gset");
			if (! (1 > this.model.get("subnets").length)) {
				var $p$$20_sid$$ = this.model.get("subnets").first().id,
				$did$$ = this.model.get("id"),
				$s$$ = ["service", "dhcp-server", "shared-network-name"],
				$p$$20_sid$$ = $s$$.concat([$did$$, "subnet", $p$$20_sid$$, "static-mapping"]);
				$batch$$.get("gget").put($p$$20_sid$$, null);
				$batch$$.get("gget").put($s$$, "__FORCE_ASSOC", !0);
				$batch$$.get("gdelete").put($p$$20_sid$$,
				$mid$$, null);
				$batch$$.get("gdelete").put($p$$20_sid$$, "__FORCE_ASSOC", !0);
				$batch$$.get("gdelete").put($s$$, "__FORCE_ASSOC", !0);
				var $self$$ = this;
				this.dialog.addClass("saving");
				this.disableActions();
				$batch$$.save(["services"], {
					success: function($model$$, $resp$$) {
						$self$$.response_m($resp$$)
					},
					error: function() {
						$(window).trigger("notify", new EDGE.Models.Notice({
							type: "error",
							notice: Msg.E_SaveFailed
						}))
					},
					complete: function() {
						$self$$.enableActions();
						$self$$.dialog && $self$$.dialog.removeClass("saving")
					}
				})
			}
		},
		response_m: function($m$$9_resp$$) {
			var $response$$ =
			EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $m$$9_resp$$),
			$mpath$$1_sid$$ = this.model.get("subnets").first().id,
			$mpath$$1_sid$$ = ["GET", "service", "dhcp-server", "shared-network-name", this.model.get("id"), "subnet", $mpath$$1_sid$$];
			if ($m$$9_resp$$ = EDGE.getObjProp($m$$9_resp$$, $mpath$$1_sid$$)) {
				this.dataTableMappings.fnClearTable();
				this.mappingRows = [];
				this.mappings.reset();
				if ($m$$9_resp$$["static-mapping"]) this.mappings["import"]($m$$9_resp$$["static-mapping"]);
				this.update();
				this.model.trigger("change")
			} else $(window).trigger("notify",
			new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		"delete": function() {
			var $self$$ = this.row,
			$id$$ = $self$$.model.get("id");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete this DHCP server " + $id$$ + " ?",
				confirm: function() {
					$self$$["delete"]()
				}
			});
			this.remove()
		},
		remove: function() {
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.leaseRows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTableLeases && this.dataTableLeases.fnClearTable();
			this.leaseRows = [];
			_.each(this.mappingRows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTableMappings && this.dataTableMappings.fnClearTable();
			this.mappingRows = [];
			this.row.dhcp_servers.disableRestrictions();
			this.$el.data("rendered", !1);
			this.$el.empty();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$tableMappings.data("open-dialog-counter") ? 0: this.$tableMappings.data("open-dialog-counter") -
			1;
			this.$tableMappings.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.mappingRows,
			function() {
				this.$actions && this.$actions.enableAction("delete")
			})
		},
		enableRestrictions: function() {
			var $counter$$ = this.$tableMappings.data("open-dialog-counter") ? this.$tableMappings.data("open-dialog-counter") + 1: 1;
			this.$tableMappings.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.mappingRows,
			function() {
				this.$actions && this.$actions.disableAction("delete")
			})
		},
		enableActions: function() {
			this.dhcp_servers.enableActions();
			$(".mapping-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".mappings .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled")
		},
		disableActions: function() {
			this.dhcp_servers.disableActions();
			$(".mapping-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".mappings .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled")
		}
	});
	EDGE.Views.Services.Dhcp.Server.LeaseRow = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.LeaseRow",
		initialize: function($args$$) {
			this.server = $args$$.server;
			this.subnet = $args$$.subnet;
			this.dataTable = $args$$.dataTable;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			return [this.model.get("ip"), this.model.get("mac"), this.model.get("expiration"), this.model.get("pool"), this.model.get("client-hostname") || "", ""]
		},
		render: function() { ! this.$("static").find("button").length &&
			"operator" != EDGE.Config.User.level && (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Services.Dhcp.Server.LeasesRowDropDownButton({
				container: this.$(".static"),
				row: this
			}));
			return this
		},
		addToStatic: function($readonly$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Services.Dhcp.Server.AddToStaticConfig({
				model: this.model,
				dataTable: this.dataTable,
				server: this.server,
				subnet: this.subnet,
				readonly: $readonly$$,
				row: this
			})
		}
	});
	EDGE.Views.Services.Dhcp.Server.AddToStaticConfig = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.AddToStaticConfig",
		initialize: function($args$$) {
			this.template = _.template($("#ServicesDhcpServerAddToStaticConfigTemplate").html());
			this.model = $args$$.model;
			this.id = "dhcpserveraddtostaticconfig" + this.model.get("ip");
			this.type = "addtostatic";
			this.action = "edit";
			this.title = "Add to Static MAC/IP Mapping";
			this.server = $args$$.server;
			this.subnet = $args$$.subnet;
			this.row =
			$args$$.row;
			this.dataTable = $args$$.dataTable;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this);
			this.server.enableRestrictions()
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=name]"), this.model.get("client-hostname"), $$form$$.find('label[for="' + $$form$$.find("input[name=name]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=ipaddress]"),
			this.model.get("ip"), $$form$$.find('label[for="' + $$form$$.find("input[name=ipaddress]").attr("id") + '"]'));
			this.show()
		},
		templateVars: function() {
			return {
				id: "dhcpserveraddtostaticconfig" + this.model.get("ip"),
				ip: this.model.get("ip"),
				mac: this.model.get("mac")
			}
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					var $valid$$ = !0,
					$newId$$ = $form.find("input[name=name]").val(),
					$newIp$$ = $form.find("input[name=ipaddress]").val(),
					$form$$ = $self$$.model.get("ip"),
					$newMac$$ =
					$self$$.model.get("mac"),
					$mappings$$ = $self$$.subnet.get("mappings"),
					$leases$$ = $self$$.server.model.get("leases");
					$mappings$$ && $mappings$$.each(function($mapping$$) {
						var $id$$ = $mapping$$.get("id"),
						$ip$$ = $mapping$$.get("ip-address"),
						$mac$$ = $mapping$$.get("mac-address");
						$newId$$ == $id$$ && ($(window).trigger("dialog", ["static ID [" + $newId$$ + "] already exists", "Validation error"]), $valid$$ = !1);
						$newIp$$ == $ip$$ && ($(window).trigger("dialog", ["static IP address [" + $newIp$$ + "] already in use by " + $id$$, "Validation error"]),
						$valid$$ = !1);
						$newMac$$ == $mac$$ && ($id$$ = $mapping$$.get("id"), $(window).trigger("dialog", ["mac address [" + $newMac$$ + "] already in use by " + $id$$, "Validation error"]), $valid$$ = !1)
					});
					$newIp$$ != $form$$ && $leases$$ && $leases$$.each(function($ip$$22_lease$$) {
						$ip$$22_lease$$ = $ip$$22_lease$$.get("ip");
						$newIp$$ == $ip$$22_lease$$ && ($(window).trigger("dialog", ["IP address [" + $newIp$$ + "] already in use in the lease", "Validation error"]), $valid$$ = !1)
					});
					$valid$$ && $self$$.save()
				},
				rules: {
					name: {
						required: !0,
						noQuotes: !0,
						noWhiteSpace: !0,
						noshellpunctuation: !0
					},
					ipaddress: {
						required: !0,
						ipv4: 1,
						dhcpInSubnet2: this.subnet.get("id")
					}
				}
			}
		},
		prepareSave: function($batch$$) {
			var $mapping$$ = {};
			$batch$$.unset("get");
			var $s$$ = ["service", "dhcp-server", "shared-network-name"];
			$batch$$.get("gget").put($s$$, this.server.model.id, "subnet", this.subnet.id, "static-mapping", null);
			$batch$$.get("gget").put($s$$, this.server.model.id, "subnet", this.subnet.id, "lease", null);
			$batch$$.get("gget").put($s$$, "__FORCE_ASSOC", !0);
			this.mapping_id = this.$("input[name=name]").val();
			_.each(["set", "delete"],
			function($type$$) {
				var $mappings$$3_networks$$4_subnets$$ = $batch$$.get($type$$).get("services").reset().filterByType("dhcp-server").get("networks");
				$mappings$$3_networks$$4_subnets$$.add({
					id: this.server.model.id
				},
				{
					silent: !0
				});
				$mappings$$3_networks$$4_subnets$$ = $mappings$$3_networks$$4_subnets$$.last().clear().get("subnets");
				$mappings$$3_networks$$4_subnets$$.add({
					id: this.subnet.id
				},
				{
					silent: !0
				});
				$mappings$$3_networks$$4_subnets$$ = $mappings$$3_networks$$4_subnets$$.last().clear().get("mappings");
				$mappings$$3_networks$$4_subnets$$.add({
					id: this.mapping_id
				},
				{
					silent: !0
				});
				$mapping$$[$type$$] = $mappings$$3_networks$$4_subnets$$.last().clear()
			},
			this);
			this.setProperty("mac-address", this.model.get("mac"), $mapping$$);
			this.setProperty("ip-address", this.$("input[name=ipaddress]").val(), $mapping$$)
		},
		save: function($batch$$61_e$$) {
			$batch$$61_e$$ && $batch$$61_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$61_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$61_e$$);
			$batch$$61_e$$.get("set").get("services").hasChanged() ||
			$batch$$61_e$$.unset("set");
			$batch$$61_e$$.get("delete").get("services").hasChanged() || $batch$$61_e$$.unset("delete");
			var $self$$ = this;
			if ($batch$$61_e$$.has("set") || $batch$$61_e$$.has("delete")) this.dialog.addClass("saving"),
			this.server.disableActions(),
			this.submit = this.$("button[type=submit]"),
			this.submit.attr("disabled", "disabled").addClass("ui-state-disabled"),
			this.submit.prop("disabled", !0),
			$batch$$61_e$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.server.enableActions();
					$self$$.submit.removeAttr("disabled").removeClass("ui-state-disabled");
					$self$$.submit.prop("disabled", !1);
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			this.server.dhcp_servers.collection.loadData();
			try {
				if ($resp$$.GET.service["dhcp-server"]["shared-network-name"][this.server.model.get("id")].subnet[this.subnet.get("id")]["static-mapping"][this.mapping_id]) this.server.mappings["import"]($resp$$.GET.service["dhcp-server"]["shared-network-name"][this.server.model.get("id")].subnet[this.subnet.get("id")]["static-mapping"]),
				this.server.update(),
				this.remove();
				else throw Msg.E_NoResponse;
			} catch($e$$) {
				0 == _.size($response$$.notices) && $(window).trigger("notify", new EDGE.Models.Notice({
					type: "error",
					notice: Msg.E_NoResponse
				}))
			}
			return $response$$
		},
		remove: function() {
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this);
			this.server.disableRestrictions()
		}
	});
	EDGE.Views.Services.Dhcp.Server.LeasesRowDropDownButton = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.LeasesRowDropDownButton",
		events: function() {
			return {
				"click button.add-to-static": "addToStatic"
			}
		},
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#ServicesDhcpServerLeasesRowDropDownButtonTemplate").html());
			this.row = $args$$.row;
			this.container = $args$$.container;
			_.bindAll(this);
			this.render()
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			var $$button$$ = this.$el.find("button");
			$$button$$.button({});
			$$button$$.css("width", "120px");
			return this
		},
		addToStatic: function() {
			this.row.addToStatic();
			return ! 1
		}
	});
	EDGE.Views.Services.Dhcp.Server.MappingRowDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.MappingRowDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#ServicesDhcpServerMappingRowDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionDelete: function() {
			var $row$$ = this.row,
			$id$$ = $row$$.model.get("id");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete this mapping " + $id$$ + " ?",
				confirm: function() {
					$row$$.$el.find(".drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
					$row$$["delete"]()
				}
			});
			return ! 1
		},
		actionConfig: function() {
			this.row.config();
			return ! 1
		}
	});
	EDGE.Views.Services.Dhcp.Server.MappingRow = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.MappingRow",
		initialize: function($args$$) {
			this.server = $args$$.server;
			this.subnet = $args$$.subnet;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			return [this.model.get("id"), this.model.get("mac-address") || "", this.model.get("ip-address") || "", ""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ = this.$(".buttons");
			$$buttons$$.find("button").length ||
			("operator" == EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Services.Dhcp.Server.MappingRowDropDownButton({
				container: this.$(".buttons"),
				row: this
			}), 0 < this.server.$tableMappings.data("open-dialog-counter") && (this.$actions.disableAction("delete"), this.$actions.disableAction("status"))));
			return this
		},
		config: function($readonly$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Services.Dhcp.Server.MappingConfig({
				model: this.model,
				server: this.server.model,
				subnet: this.subnet,
				readonly: $readonly$$,
				row: this
			})
		},
		"delete": function() {
			this.server.delete_mapping(this.model.get("id"))
		}
	});
	EDGE.Views.Services.Dhcp.Server.MappingConfig = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.MappingConfig",
		initialize: function($args$$) {
			this.template = _.template($("#ServicesDhcpServerMappingConfigTemplate").html());
			this.model = $args$$.model;
			this.id = "dhcpservermappingconfig" + this.model.get("id");
			this.type = "mapping";
			this.action = "edit";
			this.title = "Static MAC/IP Mapping";
			this.server = $args$$.server;
			this.subnet = $args$$.subnet;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this,
			$args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$21_mappings$$) {
					$form = $($form$$21_mappings$$);
					var $valid$$ = !0,
					$modelId$$ = $self$$.model.get("id"),
					$newIp$$ = $form.find("input[name=ipaddress]").val(),
					$newMac$$ = $form.find("input[name=macaddress]").val(); ($form$$21_mappings$$ = $self$$.subnet.get("mappings")) && $form$$21_mappings$$.each(function($mapping$$) {
						var $id$$ = $mapping$$.get("id"),
						$ip$$ = $mapping$$.get("ip-address"),
						$mac$$ = $mapping$$.get("mac-address");
						$newIp$$ ==
						$ip$$ && $modelId$$ != $id$$ && ($id$$ = $mapping$$.get("id"), $(window).trigger("dialog", ["static IP address [" + $newIp$$ + "] already in use by " + $id$$, "Validation error"]), $valid$$ = !1);
						$newMac$$ == $mac$$ && $modelId$$ != $id$$ && ($id$$ = $mapping$$.get("id"), $(window).trigger("dialog", ["mac address [" + $newMac$$ + "] already in use by " + $id$$, "Validation error"]), $valid$$ = !1)
					});
					$valid$$ && $self$$.save()
				},
				rules: {
					id: {
						required: !0,
						noQuotes: !0,
						noWhiteSpace: !0,
						noshellpunctuation: !0
					},
					macaddress: {
						required: !0,
						mac: !0
					},
					ipaddress: {
						required: !0,
						ipv4: !0
					}
				}
			}
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$(".actions").remove()
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this);
			this.row.server.enableRestrictions()
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=macaddress]"), this.model.get("mac-address"), $$form$$.find('label[for="' + $$form$$.find("input[name=macaddress]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=ipaddress]"),
			this.model.get("ip-address"), $$form$$.find('label[for="' + $$form$$.find("input[name=ipaddress]").attr("id") + '"]'));
			this.show()
		},
		templateVars: function() {
			return {
				id: this.model.get("id")
			}
		},
		prepareSave: function($batch$$) {
			var $mapping$$ = {};
			$batch$$.unset("get");
			_.each(["set", "delete"],
			function($type$$) {
				var $mappings$$5_networks$$5_subnets$$ = $batch$$.get($type$$).get("services").reset().filterByType("dhcp-server").get("networks");
				$mappings$$5_networks$$5_subnets$$.add({
					id: this.server.get("id")
				},
				{
					silent: !0
				});
				$mappings$$5_networks$$5_subnets$$ = $mappings$$5_networks$$5_subnets$$.last().clear().get("subnets");
				$mappings$$5_networks$$5_subnets$$.add({
					id: this.subnet.get("id")
				},
				{
					silent: !0
				});
				$mappings$$5_networks$$5_subnets$$ = $mappings$$5_networks$$5_subnets$$.last().clear().get("mappings");
				$mappings$$5_networks$$5_subnets$$.add({
					id: this.model.get("id")
				},
				{
					silent: !0
				});
				$mapping$$[$type$$] = $mappings$$5_networks$$5_subnets$$.last().clear()
			},
			this);
			this.setProperty("mac-address", this.$("input[name=macaddress]").val(),
			$mapping$$);
			this.setProperty("ip-address", this.$("input[name=ipaddress]").val(), $mapping$$);
			var $sname$$ = this.server.get("id"),
			$m$$ = this.server.get("subnets").last().get("id"),
			$mid$$ = this.model.get("id"),
			$s$$ = ["service", "dhcp-server", "shared-network-name"],
			$m$$ = ["subnet", $m$$, "static-mapping"];
			$batch$$.get("gget").put($s$$, $sname$$, $m$$, $mid$$, null);
			$batch$$.get("gget").put($s$$, $sname$$, $m$$, "__FORCE_ASSOC", !0);
			$batch$$.get("gget").put($s$$, "__FORCE_ASSOC", !0)
		},
		save: function($batch$$63_e$$) {
			$batch$$63_e$$ &&
			$batch$$63_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$63_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$63_e$$);
			$batch$$63_e$$.get("set").get("services").hasChanged() || $batch$$63_e$$.unset("set");
			$batch$$63_e$$.get("delete").get("services").hasChanged() || $batch$$63_e$$.unset("delete");
			var $self$$ = this;
			if ($batch$$63_e$$.has("set") || $batch$$63_e$$.has("delete")) this.dialog.addClass("saving"),
			this.row.server.disableActions(),
			$batch$$63_e$$.save(["services"], {
				success: function($model$$,
				$resp$$) {
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.row.server.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving");
					$self$$.row.server.row.update();
					$self$$.row.server.update()
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$.GET.service && $resp$$.GET.service["dhcp-server"]["shared-network-name"][this.server.get("id")].subnet[this.subnet.get("id")]["static-mapping"][this.model.get("id")] ?
			(this.model.collection["import"]($resp$$.GET.service["dhcp-server"]["shared-network-name"][this.server.get("id")].subnet[this.subnet.get("id")]["static-mapping"]), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		remove: function() {
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this);
			this.row.server.disableRestrictions()
		}
	});
	EDGE.Views.Services.Dhcp.Server.MappingCreate = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Server.MappingCreate",
		initialize: function($args$$) {
			this.template = _.template($("#ServicesDhcpServerMappingCreateTemplate").html());
			this.id = "dhcpservermappingconfig" + $args$$.id;
			this.type = "mapping";
			this.action = "edit";
			this.title = "Create Static MAC/IP Mapping";
			this.server = $args$$.server;
			this.subnet = $args$$.subnet;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this,
			$args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$22_mappings$$) {
					$form = $($form$$22_mappings$$);
					var $valid$$ = !0,
					$newId$$ = $form.find("input[name=id]").val(),
					$newIp$$ = $form.find("input[name=ipaddress]").val(),
					$newMac$$ = $form.find("input[name=macaddress]").val(); ($form$$22_mappings$$ = $self$$.subnet.get("mappings")) && $form$$22_mappings$$.each(function($mapping$$) {
						var $id$$ = $mapping$$.get("id"),
						$ip$$ = $mapping$$.get("ip-address"),
						$mac$$ = $mapping$$.get("mac-address");
						$newId$$ ==
						$id$$ && ($(window).trigger("dialog", ["static ID [" + $newId$$ + "] already exists", "Validation error"]), $valid$$ = !1);
						$newIp$$ == $ip$$ && ($(window).trigger("dialog", ["static IP address [" + $newIp$$ + "] already in use by " + $id$$, "Validation error"]), $valid$$ = !1);
						$newMac$$ == $mac$$ && ($id$$ = $mapping$$.get("id"), $(window).trigger("dialog", ["mac address [" + $newMac$$ + "] already in use by " + $id$$, "Validation error"]), $valid$$ = !1)
					});
					$valid$$ && $self$$.save()
				},
				rules: {
					id: {
						required: !0,
						noWhiteSpace: !0,
						noshellpunctuation: !0,
						noQuotes: !0
					},
					macaddress: {
						required: !0,
						mac: !0
					},
					ipaddress: {
						required: !0,
						ipv4: !0
					}
				}
			}
		},
		update: function() {
			this.show()
		},
		templateVars: function() {
			return {
				id: this.id
			}
		},
		prepareSave: function($batch$$) {
			var $mapping$$ = {};
			$batch$$.unset("get");
			var $s$$ = ["service", "dhcp-server", "shared-network-name"];
			$batch$$.get("gget").put($s$$, this.server.model.id, "subnet", this.subnet.id, "static-mapping", null);
			$batch$$.get("gget").put($s$$, "__FORCE_ASSOC", !0);
			this.mapping_id = this.$("input[name=id]").val();
			_.each(["set", "delete"],
			function($type$$) {
				var $mappings$$7_networks$$6_subnets$$ = $batch$$.get($type$$).get("services").reset().filterByType("dhcp-server").get("networks");
				$mappings$$7_networks$$6_subnets$$.add({
					id: this.server.model.id
				},
				{
					silent: !0
				});
				$mappings$$7_networks$$6_subnets$$ = $mappings$$7_networks$$6_subnets$$.last().clear().get("subnets");
				$mappings$$7_networks$$6_subnets$$.add({
					id: this.subnet.id
				},
				{
					silent: !0
				});
				$mappings$$7_networks$$6_subnets$$ = $mappings$$7_networks$$6_subnets$$.last().clear().get("mappings");
				$mappings$$7_networks$$6_subnets$$.add({
					id: this.mapping_id
				},
				{
					silent: !0
				});
				$mapping$$[$type$$] = $mappings$$7_networks$$6_subnets$$.last().clear()
			},
			this);
			this.setProperty("mac-address", this.$("input[name=macaddress]").val(), $mapping$$);
			this.setProperty("ip-address", this.$("input[name=ipaddress]").val(), $mapping$$)
		},
		save: function($batch$$65_e$$) {
			$batch$$65_e$$ && $batch$$65_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$65_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$65_e$$);
			$batch$$65_e$$.get("set").get("services").hasChanged() ||
			$batch$$65_e$$.unset("set");
			$batch$$65_e$$.get("delete").get("services").hasChanged() || $batch$$65_e$$.unset("delete");
			var $self$$ = this;
			if ($batch$$65_e$$.has("set") || $batch$$65_e$$.has("delete")) this.dialog.addClass("saving"),
			this.server.disableActions(),
			$batch$$65_e$$.save(["services"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.server.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			try {
				if ($resp$$.GET.service["dhcp-server"]["shared-network-name"][this.server.model.get("id")].subnet[this.subnet.get("id")]["static-mapping"][this.mapping_id]) this.server.mappings["import"]($resp$$.GET.service["dhcp-server"]["shared-network-name"][this.server.model.get("id")].subnet[this.subnet.get("id")]["static-mapping"]),
				this.server.update(),
				this.server.model.trigger("change"),
				this.remove();
				else throw Msg.E_NoResponse;
			} catch($e$$) {
				0 == _.size($response$$.notices) && $(window).trigger("notify", new EDGE.Models.Notice({
					type: "error",
					notice: Msg.E_NoResponse
				}))
			}
			return $response$$
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this);
			this.server.enableRestrictions()
		},
		remove: function() {
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this);
			this.server.disableRestrictions()
		}
	});
	EDGE.Views.Services.Dhcp.Relay = {};
	EDGE.Views.Services.Dhcp.Relay.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dhcp.Relay.Default",
		initialize: function() {
			this.debug("initialize services dhcp relay view");
			this.setElement($("#Services .section-container #ServicesDhcp #ServicesDhcpRelay"));
			this.template = $("#ToolsDefaultTemplate").html();
			this.render()
		},
		render: function() {
			this.debug("render services dhcp relay view");
			this.template && !this.$el.data("rendered") && this.$el.html(_.template(this.template, {
				time: (new Date).getTime()
			})).data("rendered",
			!0);
			return this
		}
	});
	EDGE.Views.Services.Dns = {};
	EDGE.Views.Services.Dns.Default = EDGE.Views.Global.Abstract.Form.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dns.Default",
		events: {
			"submit form": "save",
			"click button.cancel": "update",
			"click button.deleteDns": "delete"
		},
		initialize: function($args$$) {
			this.setElement($("#Services .section-container #ServicesDns"));
			this.template = _.template($("#ServicesDnsDefaultTemplate").html());
			this.interfaces = $args$$.interfaces;
			$args$$.readonly = "admin" != EDGE.Config.User.level;
			EDGE.Views.Global.Abstract.Form.prototype.initialize.call(this,
			$args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					var $valid$$ = !0;
					$form.find("input[name=cache-size]").val();
					var $icount$$ = 0,
					$h$$ = {},
					$msg$$;
					$form.find("div.interfaces select").each(function() {
						if ($valid$$) {
							var $intf$$ = $(this).find("option:selected").val();
							"other" == $intf$$ && ($intf$$ = $(this).next().children(":first").val());
							$intf$$ && "" != $intf$$ && ($icount$$++, $h$$[$intf$$] ? ($valid$$ = !1, $msg$$ = "Interface " + $intf$$ + " has already been selected") : $h$$[$intf$$] =
							1)
						}
					});
					$valid$$ ? $self$$.save() : $(window).trigger("dialog", [$msg$$])
				},
				rules: {
					"cache-size": {
						noWhiteSpace: !0,
						range: [0, 1E4]
					},
					"interface": {
						required: !0
					}
				}
			}
		},
		render: function() {
			if (!this.$el.data("rendered")) {
				this.$el.html(this.template()).data("rendered", !0);
				var $$select$$ = this.$("div.interfaces div.inputs").find("select[name=interface]");
				this.interfaces.each(function($iface$$) {
					$$select$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
				});
				$$select$$.each(function() {
					$(this).append('<option value="other">other</option>').on("change",
					function() {
						var $$this$$ = $(this);
						"other" == $$this$$.val() ? $$this$$.next().show() : $$this$$.next("span.other").hide()
					}).trigger("change").next().children(":first").addClass("interface-other")
				});
				this.readonly ? (this.renderView(), this.renderAddables()) : (this.renderAddables(), this.$("form").form({
					validation: _.extend(this.validation() || {},
					{
						errorElement: "span"
					})
				}), this.$saveButton = this.$("button[type=submit]").button({
					icons: {
						primary: "ui-icon-disk"
					}
				}), this.$("button.cancel").button({
					icons: {
						primary: "ui-icon-cancel"
					}
				}),
				this.$deleteButton = this.$("button.deleteDns").button({
					icons: {
						primary: "ui-icon-close"
					}
				}));
				this.flaggable = !1;
				this.update();
				this.flaggable = !0;
				this.readonly || this.$el.infotip()
			}
			return this
		},
		renderAddables: function() {
			function $addUniqueId$$($$el$$) {
				var $id$$ = "Interface" + (new Date).getTime();
				$$el$$.attr("id", $id$$)
			}
			function $addUniqueName$$($$el$$) {
				var $name$$ = "other-interface" + (new Date).getTime();
				$$el$$.attr("name", $name$$)
			}
			var $self$$ = this,
			$$interfaces$$ = this.$("div.interfaces div.inputs");
			$$interfaces$$.find("select").each(function() {
				$addUniqueId$$($(this))
			});
			$$interfaces$$.find("input").each(function() {
				$addUniqueName$$($(this))
			});
			$$interfaces$$.addable({
				template: $$interfaces$$.find("div").clone(),
				add: this.readonly ? null: $('<span class="addable">Add Listen Interface</span>').button({
					icons: {
						primary: "ui-icon-plus"
					}
				}),
				added: function() {
					var $$inserted$$ = this.inserted;
					$$inserted$$.infotip();
					$addUniqueId$$($$inserted$$.find("select"));
					$addUniqueName$$($$inserted$$.find("input"));
					$$inserted$$.find("select").on("change",
					function() {
						$this = $(this);
						"other" == $this.val() ?
						$this.next().show() : $this.next("span.other").hide()
					}).trigger("change"); ! $self$$.readonly && !$$inserted$$.is(":first-child") && ($remove = $('<span class="remove" /></span>').button({
						icons: {
							primary: "ui-icon-minus"
						},
						label: "Remove"
					}).on("click",
					function() {
						$$inserted$$.remove()
					}), $$inserted$$.append($remove))
				}
			})
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$$interfaces$$ = $$form$$.find("div.interfaces div.inputs"),
			$forwarding_lintfs$$ = this.model.get("forwarding"),
			$csize$$ = EDGE.getObjProp($forwarding_lintfs$$,
			["cache-size"]),
			$forwarding_lintfs$$ = ($forwarding_lintfs$$ = EDGE.getObjProp($forwarding_lintfs$$, ["listen-on"])) ? $forwarding_lintfs$$: [];
			this.updateTextbox($$form$$.find("input[name=cache-size]"), $csize$$ ? $csize$$: "", $$form$$.find("label[for=" + $$form$$.find("input[name=cache-size]").attr("id") + "]"));
			0 < $forwarding_lintfs$$.length ? ($$interfaces$$.find("div").remove(), _.each($forwarding_lintfs$$,
			function($iface$$) {
				if (this.readonly) $$interfaces$$.addable("add").addable("last").find("span.readonly").html($iface$$);
				else {
					var $$input$$ = $$interfaces$$.addable("add").addable("last").find("select");
					$$input$$.find('option[value="' + $iface$$ + '"]').length ? $$input$$.val($iface$$).trigger("change") : ($$input$$.val("other").trigger("change"), $$input$$.next().children(":first").val($iface$$))
				}
			},
			this)) : ($div = $$interfaces$$.find("div:first").clone(!0), $$interfaces$$.find("div").remove(), $$interfaces$$.prepend($div), $div.find("select").val(""))
		},
		reset: function($soft$$) {
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		prepareSave: function($batch$$) {
			var $services$$ = {},
			$interfaces$$ = [],
			$diff1_forwarding$$ = this.model.get("forwarding"),
			$csize$$ = EDGE.getObjProp($diff1_forwarding$$, ["cache-size"]),
			$dfor_lintfs$$ = EDGE.getObjProp($diff1_forwarding$$, ["listen-on"]),
			$dfor_lintfs$$ = $dfor_lintfs$$ ? $dfor_lintfs$$: [];
			_.each(["set", "delete", "get"],
			function($type$$) {
				var $collection$$ = $batch$$.get($type$$).get("services");
				$collection$$.reset(null, {
					clear: {
						dns: !0
					}
				});
				$services$$[$type$$] = $collection$$.filterByType("dns")
			},
			this);
			$services$$.get.set({
				forwarding: null
			},
			{
				silent: !0
			});
			this.$("div.interfaces select").each(function() {
				var $iface$$ = $(this).find("option:selected").val();
				"other" == $iface$$ && ($iface$$ = $(this).next().children(":first").val());
				$interfaces$$ && $iface$$.length && $interfaces$$.push($iface$$)
			});
			var $diff1_forwarding$$ = _.difference($interfaces$$, $dfor_lintfs$$),
			$diff2$$ = _.difference($dfor_lintfs$$, $interfaces$$),
			$dfor_lintfs$$ = {},
			$sfor$$ = {},
			$dchange$$ = !1,
			$schange$$ = !1;
			if ($diff1_forwarding$$.length || $diff2$$.length) $dfor_lintfs$$["listen-on"] = $diff2$$,
			$dchange$$ = !0,
			0 < $interfaces$$.length && ($sfor$$["listen-on"] = $interfaces$$, $schange$$ = !0);
			$diff1_forwarding$$ = this.$("input[name=cache-size]").val();
			$diff1_forwarding$$ != $csize$$ && ("" == $diff1_forwarding$$ ? ($dfor_lintfs$$["cache-size"] = null, $dchange$$ = !0) : ($sfor$$["cache-size"] = $diff1_forwarding$$, $schange$$ = !0));
			0 == $interfaces$$.length && "" == $diff1_forwarding$$ ? $services$$["delete"].set({
				forwarding: null
			},
			{
				silent: !0
			}) : $dchange$$ && $services$$["delete"].set({
				forwarding: $dfor_lintfs$$
			},
			{
				silent: !0
			});
			$schange$$ &&
			$services$$.set.set({
				forwarding: $sfor$$
			},
			{
				silent: !0
			})
		},
		"delete": function() {
			var $self$$ = this;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to DELETE all configurations for DNS Forwarding?",
				confirm: function() {
					$self$$.deleteDns()
				}
			})
		},
		deleteDns: function($batch$$67_e$$) {
			$batch$$67_e$$ && $batch$$67_e$$.preventDefault();
			this.$el.removeClass("saved success error");
			this.$deleteButton.button("showWorkingIndicator");
			this.$("button").prop("disabled", !0).addClass("ui-state-disabled");
			$batch$$67_e$$ = new EDGE.Models.Batch;
			$batch$$67_e$$.unset("set");
			$batch$$67_e$$.unset("get");
			$batch$$67_e$$.unset("delete");
			$batch$$67_e$$.unset("generic");
			var $cpfx$$ = ["service", "dns", "forwarding"];
			$batch$$67_e$$.get("gget").put($cpfx$$, null);
			$batch$$67_e$$.get("gdelete").put($cpfx$$, null);
			var $self$$ = this;
			$batch$$67_e$$.save(["service"], {
				success: function($model$$, $resp$$) {
					$self$$.$deleteButton.button("hideWorkingIndicator", {
						primary: "ui-icon-check"
					});
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$self$$.$deleteButton.button("hideWorkingIndicator", {
						primary: "ui-icon-notice"
					});
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.$el.removeClass("saving");
					$self$$.$("button").prop("disabled", !1).removeClass("ui-state-disabled");
					$self$$.$("span.error").remove();
					$self$$.$(":input.error").removeClass("error")
				}
			})
		},
		save: function($batch$$68_e$$) {
			if (!$batch$$68_e$$ || $($batch$$68_e$$.target).hasClass("dns")) {
				$batch$$68_e$$ &&
				$batch$$68_e$$.preventDefault();
				this.$el.removeClass("saved success error");
				this.$saveButton.button("showWorkingIndicator");
				$batch$$68_e$$ = new EDGE.Models.Batch;
				this.prepareSave($batch$$68_e$$);
				$batch$$68_e$$.get("set").get("services").hasChanged() || $batch$$68_e$$.unset("set");
				$batch$$68_e$$.get("delete").get("services").hasChanged() || $batch$$68_e$$.unset("delete");
				var $self$$ = this;
				$batch$$68_e$$.has("set") || $batch$$68_e$$.has("delete") ? ($self$$.$el.addClass("saving"), this.$("button").prop("disabled",
				!0).addClass("ui-state-disabled"), $batch$$68_e$$.save(["services"], {
					success: function($model$$, $resp$$) {
						$self$$.$saveButton.button("hideWorkingIndicator", {
							primary: "ui-icon-check"
						});
						$self$$.response($resp$$);
						$self$$.flagErrors()
					},
					error: function() {
						$self$$.$saveButton.button("hideWorkingIndicator", {
							primary: "ui-icon-notice"
						});
						$(window).trigger("notify", new EDGE.Models.Notice({
							type: "error",
							notice: Msg.E_SaveFailed
						}));
						$self$$.flagErrors()
					},
					complete: function() {
						$self$$.$el.removeClass("saving");
						$self$$.$("button").prop("disabled",
						!1).removeClass("ui-state-disabled")
					}
				})) : this.$saveButton.button("hideWorkingIndicator")
			}
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$response$$.success ? this.$el.addClass("saved success") : this.$el.addClass("saved error");
			$resp$$ && $resp$$.GET && $resp$$.GET.service && !_empty($resp$$.GET.service.dns) || $resp$$ && $resp$$.DELETE && $resp$$.DELETE.success ? (this.model.clear({
				silent: !0,
				defaults: !0
			}).set(this.model.parse($resp$$.GET.service.dns)),
			this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		}
	});
	EDGE.Views.Services.Dns.Ddns = EDGE.Views.Global.WizardBase.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Dns.Ddns",
		initialize: function($args$$) {
			this.setElement($("#Services .section-container #ServicesDns div.ddns"));
			this.template = _.template($("#ServicesDnsDDnsTemplate").html());
			this.$el.html(this.template);
			EDGE.Views.Global.WizardBase.prototype.initialize.call(this, $args$$);
			this.render();
			this.loadCollection();
			this.addLabel = "Add Service"
		},
		setContent: function() {
			this.$form = this.$("form")
		},
		render: function() {
			$(document).off("change",
			"select.has-other");
			EDGE.Views.Global.WizardBase.prototype.render.call(this);
			return this
		},
		onChange: function() {
			$(document).on("change", "select[name^=services]",
			function() {
				$this = $(this);
				var $$protocol$$ = $this.closest(".multi").find("select[name^=protocol]");
				"other" === $this.val() ? $$protocol$$.prop("disabled", !1) : ($$protocol$$.val(""), $$protocol$$.prop("disabled", !0))
			})
		},
		reset: function($soft$$) {
			this.debug("resetting wizard");
			$soft$$ ? (this.model = null, this.flagActive()) : (this.undelegateEvents(), $(document).off("change",
			"select.has-other"), this.$el.data("rendered", !1), this.$el.empty())
		},
		startRouting: function() {
			this._stoppedRouting && (this._stoppedRouting = !1, $("#Navigation li a").off("click.ddns"), $("#NavSystem a").removeClass("disabled").off("click.ddns"))
		},
		stopRouting: function() {
			this._stoppedRouting || (this._stoppedRouting = !0, $("#Navigation li a").on("click.ddns", null, {
				trigger: !1
			},
			this.notifyRouting), $("#NavSystem a").addClass("disabled").on("click.ddns", null, {
				trigger: !0,
				url: Backbone.history.fragment
			},
			this.notifyRouting))
		},
		validate2: function() {
			var $valid$$ = !0,
			$msgs$$ = [],
			$intfs$$ = [],
			$servs$$ = [];
			this.$form.find("select[name^=interfaces]").each(function() {
				var $$this$$ = $(this),
				$val$$ = $$this$$.val();
				"other" == $val$$ && ($val$$ = $$this$$.next().val());
				_.contains($intfs$$, $val$$) ? ($valid$$ = !1, $msgs$$.push("Duplicate interface " + $val$$)) : $intfs$$.push($val$$)
			});
			this.$form.find("div.addable-template[data-parent=ddns]").each(function() {
				$servs$$ = [];
				$(this).find("div.addable-template[data-parent=service]").each(function() {
					var $$servtemp$$ =
					$(this);
					$$servtemp$$.find("select[name^=services]").each(function() {
						var $$this$$ = $(this),
						$val$$ = $$this$$.val(),
						$cust$$ = !1;
						"other" == $val$$ && ($val$$ = $$this$$.next().val(), $cust$$ = !0, $$servtemp$$.find("select[name^=protocol]").each(function() {
							"" == $(this).val() && ($valid$$ = !1, $msgs$$.push("Must specify a protocol for custom service"))
						}));
						_.contains($servs$$, $val$$) ? ($valid$$ = !1, $cust$$ ? $msgs$$.push("Duplicate services custom-" + $val$$) : $msgs$$.push("Duplicate services " + $val$$)) : $servs$$.push($val$$)
					})
				})
			});
			return ! $valid$$ ? ($(window).trigger("dialog", [$msgs$$.join("<br />"), "Validation error"]), !1) : !0
		}
	});
	EDGE.Views.Services.Pppoe = {};
	EDGE.Views.Services.Pppoe.Default = EDGE.Views.Global.Abstract.Form.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Services.Pppoe.Default",
		events: {
			"submit form": "save",
			"click button.cancel": "update",
			"click button.delete": "delete"
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$self$$.save()
				},
				rules: {
					"client-ip-start": {
						required: !0,
						noWhiteSpace: !0,
						ipv4: !0
					},
					"client-ip-stop": {
						required: !0,
						noWhiteSpace: !0,
						ipv4: !0
					},
					"radius-server-ip": {
						required: !0,
						noWhiteSpace: !0,
						ipv4: !0
					},
					"radius-server-key": {
						required: !0,
						noQuotes: !0
					},
					mtu: {
						range: [68, 9E3]
					}
				}
			}
		},
		initialize: function($args$$) {
			this.setElement($("#Services .section-container #ServicesPppoe"));
			this.template = _.template($("#ServicesPppoeDefaultTemplate").html());
			this.interfaces = $args$$.interfaces;
			$args$$.readonly = "admin" != EDGE.Config.User.level;
			EDGE.Views.Global.Abstract.Form.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			if (!this.$el.data("rendered")) {
				this.$el.html(this.template()).data("rendered", !0);
				var $$select$$ =
				this.$("div.interfaces div.inputs").find("select[name=interface]");
				this.interfaces.each(function($iface$$) {
					$$select$$.append('<option value="' + $iface$$.get("id") + '">' + $iface$$.get("id") + "</option>")
				});
				var $authentication$$ = this.model.get("authentication");
				$authentication$$ && "local" == $authentication$$.mode && (this.readonly = !0, this.$("fieldset.pppoe legend").after($('<div class="notice">' + Msg.N_PppoeCli + "</div>")));
				this.readonly ? (this.renderView(), this.renderAddables()) : (this.renderAddables(), this.$("form").form({
					validation: _.extend(this.validation() ||
					{},
					{
						errorElement: "span"
					})
				}), this.$("select[name=authentication]").bind("change",
				function() {
					var $$this$$ = $(this),
					$selected$$ = $$this$$.find("option:selected").val();
					$$this$$.siblings(".nested").hide();
					$selected$$ && $$this$$.siblings("." + $selected$$).show()
				}), this.$saveButton = this.$("button[type=submit]").button({
					icons: {
						primary: "ui-icon-disk"
					}
				}), this.$("button.cancel").button({
					icons: {
						primary: "ui-icon-cancel"
					}
				}), this.$deleteButton = this.$("button.delete").button({
					icons: {
						primary: "ui-icon-close"
					}
				}));
				this.flaggable =
				!1;
				this.update();
				this.flaggable = !0;
				this.readonly || this.$el.infotip()
			}
			return this
		},
		renderAddables: function() {
			function $addUniqueIdAndName$$($$el$$) {
				var $id$$ = "Interface" + (new Date).getTime();
				$$el$$.attr("id", $id$$)
			}
			var $self$$ = this,
			$$interfaces$$ = this.$("div.interfaces div.inputs");
			$$interfaces$$.find("select").each(function() {
				$addUniqueIdAndName$$($(this))
			});
			$$interfaces$$.addable({
				template: $$interfaces$$.find("div").clone(),
				add: this.readonly ? null: $('<span class="addable">Add Listen Interface</span>').button({
					icons: {
						primary: "ui-icon-plus"
					}
				}),
				added: function() {
					var $$inserted$$ = this.inserted;
					$addUniqueIdAndName$$($$inserted$$.find("select")); ! $self$$.readonly && !$$inserted$$.is(":first-child") && ($remove = $('<span class="remove" /></span>').button({
						icons: {
							primary: "ui-icon-minus"
						},
						label: "Remove"
					}).on("click",
					function() {
						$$inserted$$.remove()
					}), $$inserted$$.append($remove))
				}
			})
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$$interfaces$$ = $$form$$.find("div.interfaces div.inputs"),
			$auth$$ = this.model.get("authentication");
			EDGE.getObjProp($auth$$,
			["mode"]);
			var $$e$$ = EDGE.getObjProp($auth$$, ["radius-server"]),
			$cip_cip_stop$$ = this.model.get("client-ip-pool"),
			$auth$$ = EDGE.getObjProp($cip_cip_stop$$, ["start"]),
			$cip_cip_stop$$ = EDGE.getObjProp($cip_cip_stop$$, ["stop"]),
			$dns$$2_dns2$$ = this.model.get("dns-servers"),
			$dns1$$ = EDGE.getObjProp($dns$$2_dns2$$, ["server-1"]),
			$dns$$2_dns2$$ = EDGE.getObjProp($dns$$2_dns2$$, ["server-2"]),
			$mtu$$ = this.model.get("mtu"),
			$interfaces$$ = this.model.get("interface") || [],
			$rserv_ip$$ = "",
			$rserv_key$$ = "";
			$$e$$ && _.each($$e$$,
			function($v$$, $k$$) {
				$rserv_ip$$ = $k$$;
				$rserv_key$$ = EDGE.getObjProp($v$$, ["key"])
			});
			$$e$$ = $$form$$.find("input[name=client-ip-start]");
			this.updateTextbox($$e$$, $auth$$ ? $auth$$: "", $$form$$.find("label[for=" + $$e$$.attr("id") + "]"));
			$$e$$ = $$form$$.find("input[name=client-ip-stop]");
			this.updateTextbox($$e$$, $cip_cip_stop$$ ? $cip_cip_stop$$: "", $$form$$.find("label[for=" + $$e$$.attr("id") + "]"));
			$$e$$ = $$form$$.find("input[name=radius-server-ip]");
			this.updateTextbox($$e$$, $rserv_ip$$ ? $rserv_ip$$: "", $$form$$.find("label[for=" +
			$$e$$.attr("id") + "]"));
			$$e$$ = $$form$$.find("input[name=radius-server-key]");
			this.updateTextbox($$e$$, $rserv_key$$ ? $rserv_key$$: "", $$form$$.find("label[for=" + $$e$$.attr("id") + "]"));
			$$e$$ = $$form$$.find("input[name=mtu]");
			this.updateTextbox($$e$$, $mtu$$ ? $mtu$$: "", $$form$$.find("label[for=" + $$e$$.attr("id") + "]"));
			$$e$$ = $$form$$.find("input[name=dns1]");
			this.updateTextbox($$e$$, $dns1$$ ? $dns1$$: "", $$form$$.find("label[for=" + $$e$$.attr("id") + "]"));
			$$e$$ = $$form$$.find("input[name=dns2]");
			this.updateTextbox($$e$$,
			$dns$$2_dns2$$ ? $dns$$2_dns2$$: "", $$form$$.find("label[for=" + $$e$$.attr("id") + "]"));
			0 < $interfaces$$.length ? ($$interfaces$$.find("div").remove(), _.each($interfaces$$,
			function($iface$$) {
				this.readonly ? $$interfaces$$.addable("add").addable("last").find("span.readonly").html($iface$$) : $$interfaces$$.addable("add").addable("last").find("select").val($iface$$)
			},
			this)) : ($div = $$interfaces$$.find("div:first"), $$interfaces$$.find("div").remove(), $$interfaces$$.prepend($div), $div.find("select").val(""))
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$("fieldset.actions").remove()
		},
		reset: function($soft$$) {
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		prepareSave: function($batch$$69_gdel$$) {
			$batch$$69_gdel$$.unset("set");
			$batch$$69_gdel$$.unset("delete");
			$batch$$69_gdel$$.unset("get");
			$batch$$69_gdel$$.unset("generic");
			var $auth$$3_cip_start$$ = this.model.get("authentication"),
			$a$$56_mode$$ = EDGE.getObjProp($auth$$3_cip_start$$, ["mode"]),
			$cpfx$$1_rserv$$ = EDGE.getObjProp($auth$$3_cip_start$$, ["radius-server"]),
			$cip$$1_dns1$$ = this.model.get("client-ip-pool"),
			$auth$$3_cip_start$$ = EDGE.getObjProp($cip$$1_dns1$$, ["start"]),
			$cip_stop$$ = EDGE.getObjProp($cip$$1_dns1$$, ["stop"]),
			$dns$$3_dns2$$ = this.model.get("dns-servers"),
			$cip$$1_dns1$$ = EDGE.getObjProp($dns$$3_dns2$$, ["server-1"]),
			$dns$$3_dns2$$ = EDGE.getObjProp($dns$$3_dns2$$, ["server-2"]),
			$mtu$$ = this.model.get("mtu"),
			$rserv_ip$$ = "",
			$rserv_key$$ = "",
			$newIfaces$$ = [];
			$cpfx$$1_rserv$$ && _.each($cpfx$$1_rserv$$,
			function($v$$, $k$$) {
				$rserv_ip$$ = $k$$;
				$rserv_key$$ = EDGE.getObjProp($v$$, ["key"])
			});
			$cpfx$$1_rserv$$ = ["service",
			"pppoe-server"];
			$batch$$69_gdel$$.get("gget").put($cpfx$$1_rserv$$, null);
			var $gset$$ = $batch$$69_gdel$$.get("gset"),
			$batch$$69_gdel$$ = $batch$$69_gdel$$.get("gdelete");
			n_start = this.$("input[name=client-ip-start]").val();
			n_stop = this.$("input[name=client-ip-stop]").val();
			n_ip = this.$("input[name=radius-server-ip]").val();
			n_key = this.$("input[name=radius-server-key]").val();
			n_mtu = this.$("input[name=mtu]").val();
			n_dns1 = this.$("input[name=dns1]").val();
			n_dns2 = this.$("input[name=dns2]").val();
			n_start != $auth$$3_cip_start$$ &&
			$gset$$.put($cpfx$$1_rserv$$, "client-ip-pool", "start", n_start);
			n_stop != $cip_stop$$ && $gset$$.put($cpfx$$1_rserv$$, "client-ip-pool", "stop", n_stop);
			"radius" != $a$$56_mode$$ && $gset$$.put($cpfx$$1_rserv$$, "authentication", "mode", "radius");
			if (n_ip != $rserv_ip$$ || n_key != $rserv_key$$) $a$$56_mode$$ = ["authentication", "radius-server"],
			$batch$$69_gdel$$.put($cpfx$$1_rserv$$, $a$$56_mode$$, null),
			$gset$$.put($cpfx$$1_rserv$$, $a$$56_mode$$, n_ip, "key", n_key);
			n_mtu != $mtu$$ && ("" != n_mtu ? $gset$$.put($cpfx$$1_rserv$$, "mtu",
			n_mtu) : $batch$$69_gdel$$.put($cpfx$$1_rserv$$, "mtu", null));
			n_dns1 != $cip$$1_dns1$$ && ("" != n_dns1 ? $gset$$.put($cpfx$$1_rserv$$, "dns-servers", "server-1", n_dns1) : $batch$$69_gdel$$.put($cpfx$$1_rserv$$, "dns-servers", "server-1", null));
			n_dns2 != $dns$$3_dns2$$ && ("" != n_dns2 ? $gset$$.put($cpfx$$1_rserv$$, "dns-servers", "server-2", n_dns2) : $batch$$69_gdel$$.put($cpfx$$1_rserv$$, "dns-servers", "server-2", null));
			this.$("div.interfaces select").each(function() {
				var $iface$$ = $(this).find("option:selected").val();
				$iface$$ &&
				$newIfaces$$.push($iface$$)
			});
			try {
				var $currentIfaces$$ = this.model.get("interface")
			} catch($e$$) {
				$currentIfaces$$ = []
			}
			if (_.difference($newIfaces$$, $currentIfaces$$).length || _.difference($currentIfaces$$, $newIfaces$$).length) $batch$$69_gdel$$.put($cpfx$$1_rserv$$, "interface", null),
			$gset$$.put($cpfx$$1_rserv$$, "interface", $newIfaces$$)
		},
		"delete": function() {
			var $self$$ = this;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to DELETE all configurations for PPPoE?",
				confirm: function() {
					$self$$.deletePppoe()
				}
			})
		},
		deletePppoe: function($batch$$70_e$$) {
			$batch$$70_e$$ && $batch$$70_e$$.preventDefault();
			this.$el.removeClass("saved success error");
			this.$deleteButton.button("showWorkingIndicator");
			this.$("button").prop("disabled", !0).addClass("ui-state-disabled");
			$batch$$70_e$$ = new EDGE.Models.Batch;
			$batch$$70_e$$.unset("set");
			$batch$$70_e$$.unset("get");
			$batch$$70_e$$.unset("delete");
			$batch$$70_e$$.unset("generic");
			var $cpfx$$ = ["service", "pppoe-server"];
			$batch$$70_e$$.get("gget").put($cpfx$$,
			null);
			$batch$$70_e$$.get("gdelete").put($cpfx$$, null);
			var $self$$ = this;
			$batch$$70_e$$.save(["service"], {
				success: function($model$$, $resp$$) {
					$self$$.$deleteButton.button("hideWorkingIndicator", {
						primary: "ui-icon-check"
					});
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$self$$.$deleteButton.button("hideWorkingIndicator", {
						primary: "ui-icon-notice"
					});
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.$el.removeClass("saving");
					$self$$.$("button").prop("disabled", !1).removeClass("ui-state-disabled");
					$self$$.$("span.error").remove();
					$self$$.$(":input.error").removeClass("error")
				}
			})
		},
		save: function($batch$$71_e$$) {
			$batch$$71_e$$ && $batch$$71_e$$.preventDefault();
			this.$el.removeClass("saved success error");
			this.$saveButton.button("showWorkingIndicator");
			this.$("button").prop("disabled", !0).addClass("ui-state-disabled");
			$batch$$71_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$71_e$$);
			var $self$$ = this; ($batch$$71_e$$.has("gset") ||
			$batch$$71_e$$.has("gdelete")) && $batch$$71_e$$.save(["service"], {
				success: function($model$$, $resp$$) {
					$self$$.$saveButton.button("hideWorkingIndicator", {
						primary: "ui-icon-check"
					});
					$self$$.response($resp$$);
					$self$$.flagErrors()
				},
				error: function() {
					$self$$.$saveButton.button("hideWorkingIndicator", {
						primary: "ui-icon-notice"
					});
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.$el.removeClass("saving");
					$self$$.$("button").prop("disabled",
					!1).removeClass("ui-state-disabled")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$response$$.success ? this.$el.addClass("saved success") : this.$el.addClass("saved error");
			$resp$$ && $resp$$.GET && $resp$$.GET.service && !_empty($resp$$.GET.service["pppoe-server"]) || $resp$$ && $resp$$.DELETE && $resp$$.DELETE.success ? (this.model.clear({
				silent: !0,
				defaults: !0
			}).set(this.model.parse($resp$$.GET.service["pppoe-server"])), this.update()) : $(window).trigger("notify",
			new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		}
	});
	EDGE.Routers.Vpn = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Vpn",
		routes: {
			Vpn: "index",
			"Vpn/PPTP": "pptp",
			"Vpn/IPSec": "ipSec"
		},
		initialize: function($data$$) {
			this.debug("initialize vpn router");
			if ("object" != typeof EDGE.Views.Vpn) throw "Missing vpn views";
			this.app = $data$$.app;
			this.views = {};
			this.views._container = new EDGE.Views.Vpn.Container
		},
		showTab: function($subtab$$) {
			var $$tab$$ = $("li#NavVpn");
			$$tab$$.hasClass("ui-state-active") || ($$tab$$.find("a").trigger("click"), null != $subtab$$ &&
			this.views._container.$(".section-tabs").tabslite("show", $subtab$$))
		},
		index: function() {
			this.debug("forwarding to the PPTP page");
			this.navigate("Vpn/PPTP", !0);
			this.views._container.$(".section-tabs").tabslite("show", 0)
		},
		pptp: function() {
			this.showTab(0);
			this.views.pptp ? this.views.pptp.render() : this.views.pptp = new EDGE.Views.Vpn.Pptp.Default ({
				model: this.app.data.view.get("vpn")
			})
		},
		ipSec: function() {
			this.showTab(1);
			this.views.ipsec ? this.views.ipsec.render() : this.views.ipsec = new EDGE.Views.Vpn.IpSec.Default;
			this.views.ipsec && this.views.ipsec.filter("feature", ".Vpn2")
		}
	});
	EDGE.Views.Vpn = EDGE.Views.Vpn || {};
	EDGE.Views.Vpn.Pptp = {};
	EDGE.Views.Vpn.IpSec = {};
	EDGE.Views.Vpn.Container = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Vpn.Container",
		initialize: function() {
			this.setElement($("#Vpn"));
			this.render()
		},
		render: function() {
			this.$el.data("rendered") || (this.$(".section-tabs").tabslite({
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$13_anchor$$) {
						var $$anchor$$13_anchor$$ = $($$anchor$$13_anchor$$),
						$location$$ = window.location.hash,
						$filtered$$ = $location$$.indexOf("/filter/"); - 1 != $filtered$$ && ($location$$ = $location$$.substring(0, $filtered$$));
						$$anchor$$13_anchor$$.attr("href") == $location$$ && $$anchor$$13_anchor$$.trigger("show")
					})
				},
				content: function($$anchor$$) {
					return $("#" + $$anchor$$.data("container"))
				}
			}), this.$el.data("rendered", !0));
			return this
		},
		reset: function() {
			this.debug("resetting vpn container")
		}
	});
	EDGE.Views.Vpn.Pptp.Default = EDGE.Views.Global.Abstract.Form.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Vpn.Pptp.Default",
		events: {
			"submit form": "save",
			"click button.cancel": "update",
			"click button.delete": "delete"
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$self$$.save()
				},
				rules: {
					"client-ip-start": {
						required: !0,
						noWhiteSpace: !0,
						ipv4: !0
					},
					"client-ip-stop": {
						required: !0,
						noWhiteSpace: !0,
						ipv4: !0
					},
					"server-outside-address": {
						required: !0,
						noWhiteSpace: !0,
						ipv4: !0
					},
					"radius-server-ip": {
						required: !0,
						noWhiteSpace: !0,
						ipv4: !0
					},
					"radius-server-key": {
						required: !0,
						noQuotes: !0
					},
					mtu: {
						range: [68, 9E3]
					}
				}
			}
		},
		initialize: function($args$$) {
			this.setElement($("#Vpn .section-container #VpnPptp"));
			this.template = _.template($("#VpnPptpTemplate").html());
			$args$$.readonly = "admin" != EDGE.Config.User.level;
			EDGE.Views.Global.Abstract.Form.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			if (!this.$el.data("rendered")) {
				this.$el.html(this.template()).data("rendered", !0);
				var $pptp$$ = this.model.get("pptp");
				$pptp$$ && ($pptp$$["remote-access"] && $pptp$$["remote-access"].authentication && "local" == $pptp$$["remote-access"].authentication.mode) && (this.readonly = !0, this.$("fieldset.pptp").prepend($('<div class="notice">' + Msg.N_PptpVpnCli + "</div>")));
				this.readonly ? this.renderView() : (this.$("form").form({
					validation: _.extend(this.validation() || {},
					{
						errorElement: "span"
					})
				}), this.$saveButton = this.$("button[type=submit]").button({
					icons: {
						primary: "ui-icon-disk"
					}
				}), this.$deleteButton = this.$("button.delete").button({
					icons: {
						primary: "ui-icon-close"
					}
				}),
				this.$("button.cancel").button({
					icons: {
						primary: "ui-icon-cancel"
					}
				}));
				this.flaggable = !1;
				this.update();
				this.flaggable = !0;
				if (!this.readonly) {
					var $$el$$ = this.$el;
					_.delay(function() {
						$$el$$.infotip()
					},
					30)
				}
			}
			return this
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$auth$$4_cip_start$$2_pptp$$ = this.model.get("pptp"),
			$out$$ = EDGE.getObjProp($auth$$4_cip_start$$2_pptp$$, ["remote-access"]),
			$auth$$4_cip_start$$2_pptp$$ = EDGE.getObjProp($out$$, ["authentication"]);
			EDGE.getObjProp($auth$$4_cip_start$$2_pptp$$, ["mode"]);
			var $$e$$3_rserv$$ = EDGE.getObjProp($auth$$4_cip_start$$2_pptp$$, ["radius-server"]),
			$cip$$2_cip_stop$$ = EDGE.getObjProp($out$$, ["client-ip-pool"]),
			$auth$$4_cip_start$$2_pptp$$ = EDGE.getObjProp($cip$$2_cip_stop$$, ["start"]),
			$cip$$2_cip_stop$$ = EDGE.getObjProp($cip$$2_cip_stop$$, ["stop"]),
			$dns$$4_dns2$$ = EDGE.getObjProp($out$$, ["dns-servers"]),
			$dns1$$ = EDGE.getObjProp($dns$$4_dns2$$, ["server-1"]),
			$dns$$4_dns2$$ = EDGE.getObjProp($dns$$4_dns2$$, ["server-2"]),
			$mtu$$ = EDGE.getObjProp($out$$, ["mtu"]),
			$out$$ = EDGE.getObjProp($out$$,
			["outside-address"]),
			$rserv_ip$$ = "",
			$rserv_key$$ = "";
			$$e$$3_rserv$$ && _.each($$e$$3_rserv$$,
			function($v$$, $k$$) {
				$rserv_ip$$ = $k$$;
				$rserv_key$$ = EDGE.getObjProp($v$$, ["key"])
			});
			$$e$$3_rserv$$ = $$form$$.find("input[name=client-ip-start]");
			this.updateTextbox($$e$$3_rserv$$, $auth$$4_cip_start$$2_pptp$$ ? $auth$$4_cip_start$$2_pptp$$: "", $$form$$.find("label[for=" + $$e$$3_rserv$$.attr("id") + "]"));
			$$e$$3_rserv$$ = $$form$$.find("input[name=client-ip-stop]");
			this.updateTextbox($$e$$3_rserv$$, $cip$$2_cip_stop$$ ? $cip$$2_cip_stop$$:
			"", $$form$$.find("label[for=" + $$e$$3_rserv$$.attr("id") + "]"));
			$$e$$3_rserv$$ = $$form$$.find("input[name=server-outside-address]");
			this.updateTextbox($$e$$3_rserv$$, $out$$ ? $out$$: "", $$form$$.find("label[for=" + $$e$$3_rserv$$.attr("id") + "]"));
			$$e$$3_rserv$$ = $$form$$.find("input[name=radius-server-ip]");
			this.updateTextbox($$e$$3_rserv$$, $rserv_ip$$ ? $rserv_ip$$: "", $$form$$.find("label[for=" + $$e$$3_rserv$$.attr("id") + "]"));
			$$e$$3_rserv$$ = $$form$$.find("input[name=radius-server-key]");
			this.updateTextbox($$e$$3_rserv$$,
			$rserv_key$$ ? $rserv_key$$: "", $$form$$.find("label[for=" + $$e$$3_rserv$$.attr("id") + "]"));
			$$e$$3_rserv$$ = $$form$$.find("input[name=mtu]");
			this.updateTextbox($$e$$3_rserv$$, $mtu$$ ? $mtu$$: "", $$form$$.find("label[for=" + $$e$$3_rserv$$.attr("id") + "]"));
			$$e$$3_rserv$$ = $$form$$.find("input[name=dns1]");
			this.updateTextbox($$e$$3_rserv$$, $dns1$$ ? $dns1$$: "", $$form$$.find("label[for=" + $$e$$3_rserv$$.attr("id") + "]"));
			$$e$$3_rserv$$ = $$form$$.find("input[name=dns2]");
			this.updateTextbox($$e$$3_rserv$$, $dns$$4_dns2$$ ?
			$dns$$4_dns2$$: "", $$form$$.find("label[for=" + $$e$$3_rserv$$.attr("id") + "]"))
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$("fieldset.actions").remove()
		},
		reset: function($soft$$) {
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		prepareSave: function($batch$$72_gdel$$) {
			$batch$$72_gdel$$.unset("set");
			$batch$$72_gdel$$.unset("delete");
			$batch$$72_gdel$$.unset("get");
			$batch$$72_gdel$$.unset("generic");
			var $a$$57_auth$$5_cip_start$$3_pptp$$ = this.model.get("pptp"),
			$out$$5_ra$$ = EDGE.getObjProp($a$$57_auth$$5_cip_start$$3_pptp$$, ["remote-access"]),
			$a$$57_auth$$5_cip_start$$3_pptp$$ = EDGE.getObjProp($out$$5_ra$$, ["authentication"]);
			EDGE.getObjProp($a$$57_auth$$5_cip_start$$3_pptp$$, ["mode"]);
			var $cpfx$$3_rserv$$ = EDGE.getObjProp($a$$57_auth$$5_cip_start$$3_pptp$$, ["radius-server"]),
			$cip$$3_dns1$$ = EDGE.getObjProp($out$$5_ra$$, ["client-ip-pool"]),
			$a$$57_auth$$5_cip_start$$3_pptp$$ = EDGE.getObjProp($cip$$3_dns1$$, ["start"]),
			$cip_stop$$ = EDGE.getObjProp($cip$$3_dns1$$,
			["stop"]),
			$dns$$5_dns2$$ = EDGE.getObjProp($out$$5_ra$$, ["dns-servers"]),
			$cip$$3_dns1$$ = EDGE.getObjProp($dns$$5_dns2$$, ["server-1"]),
			$dns$$5_dns2$$ = EDGE.getObjProp($dns$$5_dns2$$, ["server-2"]),
			$mtu$$ = EDGE.getObjProp($out$$5_ra$$, ["mtu"]),
			$out$$5_ra$$ = EDGE.getObjProp($out$$5_ra$$, ["outside-address"]),
			$rserv_ip$$ = "",
			$rserv_key$$ = "";
			$cpfx$$3_rserv$$ && _.each($cpfx$$3_rserv$$,
			function($v$$, $k$$) {
				$rserv_ip$$ = $k$$;
				$rserv_key$$ = EDGE.getObjProp($v$$, ["key"])
			});
			$cpfx$$3_rserv$$ = ["vpn", "pptp", "remote-access"];
			$batch$$72_gdel$$.get("gget").put($cpfx$$3_rserv$$, null);
			var $gset$$ = $batch$$72_gdel$$.get("gset"),
			$batch$$72_gdel$$ = $batch$$72_gdel$$.get("gdelete"),
			$n_start$$ = this.$("input[name=client-ip-start]").val(),
			$n_stop$$ = this.$("input[name=client-ip-stop]").val(),
			$n_out$$ = this.$("input[name=server-outside-address]").val(),
			$n_ip$$ = this.$("input[name=radius-server-ip]").val(),
			$n_key$$ = this.$("input[name=radius-server-key]").val(),
			$n_mtu$$ = this.$("input[name=mtu]").val(),
			$n_dns1$$ = this.$("input[name=dns1]").val(),
			$n_dns2$$ = this.$("input[name=dns2]").val();
			$gset$$.put($cpfx$$3_rserv$$, "authentication", "mode", "radius");
			$n_start$$ != $a$$57_auth$$5_cip_start$$3_pptp$$ && $gset$$.put($cpfx$$3_rserv$$, "client-ip-pool", "start", $n_start$$);
			$n_stop$$ != $cip_stop$$ && $gset$$.put($cpfx$$3_rserv$$, "client-ip-pool", "stop", $n_stop$$);
			$n_out$$ != $out$$5_ra$$ && $gset$$.put($cpfx$$3_rserv$$, "outside-address", $n_out$$);
			if ($n_ip$$ != $rserv_ip$$ || $n_key$$ != $rserv_key$$) $a$$57_auth$$5_cip_start$$3_pptp$$ = ["authentication", "radius-server"],
			$batch$$72_gdel$$.put($cpfx$$3_rserv$$, $a$$57_auth$$5_cip_start$$3_pptp$$, null),
			$gset$$.put($cpfx$$3_rserv$$, $a$$57_auth$$5_cip_start$$3_pptp$$, $n_ip$$, "key", $n_key$$);
			$n_mtu$$ != $mtu$$ && ("" != $n_mtu$$ ? $gset$$.put($cpfx$$3_rserv$$, "mtu", $n_mtu$$) : $batch$$72_gdel$$.put($cpfx$$3_rserv$$, "mtu", null));
			$n_dns1$$ != $cip$$3_dns1$$ && ("" != $n_dns1$$ ? $gset$$.put($cpfx$$3_rserv$$, "dns-servers", "server-1", $n_dns1$$) : $batch$$72_gdel$$.put($cpfx$$3_rserv$$, "dns-servers", "server-1", null));
			$n_dns2$$ != $dns$$5_dns2$$ &&
			("" != $n_dns2$$ ? $gset$$.put($cpfx$$3_rserv$$, "dns-servers", "server-2", $n_dns2$$) : $batch$$72_gdel$$.put($cpfx$$3_rserv$$, "dns-servers", "server-2", null))
		},
		"delete": function() {
			var $self$$ = this;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to DELETE all configurations for PPTP Remote Access?",
				confirm: function() {
					$self$$.deletePptp()
				}
			})
		},
		deletePptp: function($batch$$73_e$$) {
			$batch$$73_e$$ && $batch$$73_e$$.preventDefault();
			this.$el.removeClass("saved success error");
			this.$deleteButton.button("showWorkingIndicator");
			this.$("button").prop("disabled", !0).addClass("ui-state-disabled");
			$batch$$73_e$$ = new EDGE.Models.Batch;
			$batch$$73_e$$.unset("set");
			$batch$$73_e$$.unset("get");
			$batch$$73_e$$.unset("delete");
			$batch$$73_e$$.unset("generic");
			var $cpfx$$ = ["vpn", "pptp"];
			$batch$$73_e$$.get("gget").put($cpfx$$, null);
			$batch$$73_e$$.get("gdelete").put($cpfx$$, null);
			var $self$$ = this;
			$batch$$73_e$$.save(["service"], {
				success: function($model$$, $resp$$) {
					$self$$.$deleteButton.button("hideWorkingIndicator",
					{
						primary: "ui-icon-check"
					});
					$self$$.response($resp$$);
					$self$$.flagErrors();
					$self$$.update()
				},
				error: function() {
					$self$$.$deleteButton.button("hideWorkingIndicator", {
						primary: "ui-icon-notice"
					});
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.$el.removeClass("saving");
					$self$$.$("button").prop("disabled", !1).removeClass("ui-state-disabled");
					$self$$.$("span.error").remove();
					$self$$.$(":input.error").removeClass("error")
				}
			})
		},
		save: function($batch$$74_e$$) {
			$batch$$74_e$$ && $batch$$74_e$$.preventDefault();
			this.$el.removeClass("saved success error");
			this.$saveButton.button("showWorkingIndicator");
			this.$("button").prop("disabled", !0).addClass("ui-state-disabled");
			$batch$$74_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$74_e$$);
			var $self$$ = this; ($batch$$74_e$$.has("gset") || $batch$$74_e$$.has("gdelete")) && $batch$$74_e$$.save(["vpn"], {
				success: function($model$$, $resp$$) {
					$self$$.$saveButton.button("hideWorkingIndicator", {
						primary: "ui-icon-check"
					});
					$self$$.response($resp$$);
					$self$$.model && $self$$.flagErrors()
				},
				error: function() {
					$self$$.$saveButton.button("hideWorkingIndicator", {
						primary: "ui-icon-notice"
					});
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.model && $self$$.flagErrors()
				},
				complete: function() {
					$self$$.$el.removeClass("saving");
					$self$$.$("button").prop("disabled", !1).removeClass("ui-state-disabled")
				}
			})
		},
		response: function($resp$$136_response$$) {
			$resp$$136_response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this,
			$resp$$136_response$$);
			$resp$$136_response$$.success ? this.$el.addClass("saved success") : this.$el.addClass("saved error");
			return $resp$$136_response$$
		}
	});
	EDGE.Views.Vpn.IpSec.Default = EDGE.Views.Global.WizardBase.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Vpn.IpSec.Default",
		initialize: function($args$$) {
			this.setElement($("#Vpn .section-container #VpnIpsec"));
			this.template = _.template($("#VpnIpsecTemplate").html());
			this.$el.html(this.template);
			this.$el.prepend('<div class="loading"></div>');
			EDGE.Views.Global.WizardBase.prototype.initialize.call(this, $args$$);
			this.render();
			this.loadCollection();
			this.addLabel = "Add Subnets"
		},
		render: function() {
			$(document).off("change",
			"select.has-other");
			EDGE.Views.Global.WizardBase.prototype.render.call(this);
			return this
		},
		infotip: function($elem$$) {
			$elem$$.infotip({
				position: {
					left: 0,
					top: 3
				}
			})
		},
		setContent: function() {
			this.$form = this.$("form")
		},
		reset: function($soft$$) {
			this.debug("resetting VPN");
			$soft$$ ? (this.model = null, this.flagActive()) : (this.undelegateEvents(), $(document).off("change", "select.has-other"), this.$el.data("rendered", !1), this.$el.empty())
		},
		startRouting: function() {
			this._stoppedRouting && (this._stoppedRouting = !1, $("#Navigation li a").off("click.vpn2"),
			$("#Security li a").off("click.vpn2"), $("#NavSystem a").removeClass("disabled").off("click.vpn2"))
		},
		stopRouting: function() {
			this._stoppedRouting || (this._stoppedRouting = !0, $("#Navigation li a").on("click.vpn2", null, {
				trigger: !1
			},
			this.notifyRouting), $("#Security li a").on("click.vpn2", null, {
				trigger: !1
			},
			this.notifyRouting), $("#NavSystem a").addClass("disabled").on("click.vpn2", null, {
				trigger: !0,
				url: Backbone.history.fragment
			},
			this.notifyRouting))
		},
		collapse: function() {
			this.$form.find("fieldset.primary").each(function() {
				var $$fieldset$$ =
				$(this);
				$$fieldset$$.prepend($('<label class="label-advance"><input type="checkbox" class="show-advance" name="show-advance" /><span>Show advanced options</span></label>'));
				var $advance$$ = $$fieldset$$.find(":checkbox.show-advance");
				$advance$$.on("change",
				function() {
					$this = $(this);
					$this.is(":checked") ? $$fieldset$$.find("div.advance-container").removeClass("hidden") : $$fieldset$$.find("div.advance-container").addClass("hidden")
				});
				$advance$$.prop("checked", !1);
				$advance$$.trigger("change")
			})
		}
	});
	EDGE.Routers.Users = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Users",
		routes: {
			Users: "index",
			"Users/Local": "local",
			"Users/Local/filter/:filter": "local",
			"Users/Remote": "remote",
			"Users/Remote/filter/:filter": "remote",
			"Users*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize users router");
			if ("object" != typeof EDGE.Views.Users) throw "Missing users views";
			this.app = $data$$.app;
			this.views = {};
			this.views._container = new EDGE.Views.Users.Container
		},
		showTab: function($subtab$$) {
			var $$tab$$ =
			$("li#NavUsers");
			$$tab$$.hasClass("ui-state-active") || ($$tab$$.find("a").trigger("click"), null != $subtab$$ && this.views._container.$(".section-tabs").tabslite("show", $subtab$$))
		},
		index: function() {
			this.debug("forwarding to the local users page");
			this.navigate("Users/Local", !0);
			this.views._container.$(".section-tabs").tabslite("show", 0)
		},
		local: function() {
			this.showTab(0);
			this.views.local ? this.views.local.render() : this.views.local = new EDGE.Views.Users.Local.Default ({
				collection: this.app.data.view.get("system").get("users")
			})
		},
		remote: function($filter$$) {
			this.showTab(1);
			this.views.remote ? this.views.remote.render() : this.views.remote = new EDGE.Views.Users.Remote.Default ({
				collection: this.app.data.view.get("system").get("remote")
			});
			this.views.remote && this.views.remote.filter($filter$$ ? $filter$$: "all")
		}
	});
	EDGE.Views.Users = EDGE.Views.Users || {};
	EDGE.Views.Users.Local = {};
	EDGE.Views.Users.Remote = {};
	EDGE.Views.Users.Container = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Container",
		initialize: function() {
			this.setElement($("#Users"));
			this.render()
		},
		render: function() {
			this.$el.data("rendered") || (this.$(".section-tabs").tabslite({
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$15_anchor$$) {
						var $$anchor$$15_anchor$$ = $($$anchor$$15_anchor$$),
						$location$$ = window.location.hash,
						$filtered$$ = $location$$.indexOf("/filter/"); - 1 != $filtered$$ && ($location$$ = $location$$.substring(0,
						$filtered$$));
						$$anchor$$15_anchor$$.attr("href") == $location$$ && $$anchor$$15_anchor$$.trigger("show")
					})
				},
				content: function($$anchor$$) {
					return $("#" + $$anchor$$.data("container"))
				}
			}), this.$el.data("rendered", !0));
			return this
		},
		reset: function() {
			this.debug("resetting users container")
		}
	});
	EDGE.Views.Users.Config = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Config",
		events: {
			"submit form": "save",
			"click button.delete": "delete",
			"click button.disable": "disable",
			"click button.disconnect": "disconnect",
			"click button.cancel": "remove"
		},
		validation: function() {
			return {
				rules: {
					username: {
						required: !0,
						noWhiteSpace: !0,
						noshellpunctuation: !0,
						minlength: 2,
						maxlength: 32,
						validUserId: !0
					},
					fullname: {
						validUserId: !0
					},
					password: {
						required: !0,
						minlength: 4,
						noQuotes: !0
					},
					confirm: {
						required: !0,
						minlength: 4,
						noQuotes: !0,
						equalTo: "#" + this.$("input[name=password]").attr("id")
					}
				},
				messages: {
					username: {
						required: Msg.V_UsernameRequired,
						minlength: Msg.V_UsernameLength
					},
					password: {
						required: Msg.V_PasswordRequired,
						minlength: Msg.V_PasswordLength
					},
					confirm: {
						required: Msg.V_ConfirmRequired,
						minlength: Msg.V_ConfirmLength,
						equalTo: Msg.V_ConfirmEquals
					}
				}
			}
		},
		initialize: function($args$$) {
			this.template = _.template($("#UsersConfigTemplate").html());
			this.id = "user" + this.model.get("username").replace(/[^a-z0-9_-]/ig, "_");
			this.type =
			"user";
			this.action = "edit";
			this.row = $args$$.row;
			this.items = 15;
			this.updateTitle();
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$);
			this.collection = this.model.get("stats").get("rates");
			this.collection.bind("add", this.updateStats, this)
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			var $$form$$ = this.$("form");
			$$form$$.find("div.swapped.password").each(function() {
				var $$this$$ = $(this),
				$$button$$ = $$this$$.find("button");
				$$button$$.bind("click",
				function() {
					$$this$$.siblings("div.swapped.password").show();
					$$this$$.hide();
					$$form$$.find("div.scrollable:visible").css("height", "auto")
				});
				$$this$$.hasClass("default") || $$button$$.trigger("click")
			});
			this.row.users.enableRestrictions();
			this.delegateEvents();
			this.flaggable = !1;
			this.update();
			this.flaggable = !0
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$(".actions").remove()
		},
		updateTitle: function() {
			this.title = this.model.get("full-name") || this.model.get("username")
		},
		update: function() {
			var $$form$$44_connected$$ = this.$("form");
			this.updateTextbox($$form$$44_connected$$.find("input[name=fullname]"), this.model.get("full-name"), $$form$$44_connected$$.find("label[for=" + $$form$$44_connected$$.find("input[name=fullname]").attr("id") + "]"));
			this.updateSelect($$form$$44_connected$$.find("select[name=level]"), this.model.get("level"), $$form$$44_connected$$.find("label[for=" + $$form$$44_connected$$.find("select[name=level]").attr("id") + "]"));
			$$form$$44_connected$$ = this.model.get("stats").get("connected");
			this.$(".status")[$$form$$44_connected$$ ? "addClass": "removeClass"]("connected").find("span").html($$form$$44_connected$$ ? "Connected": "Disconnected");
			this.show()
		},
		updateStats: function() {
			var $rx$$ = [],
			$tx$$ = [];
			_.each(this.collection.getRx(this.items, !0),
			function($value$$, $key$$) {
				$rx$$.push([$key$$, $value$$])
			});
			_.each(this.collection.getTx(this.items, !0),
			function($value$$, $key$$) {
				$tx$$.push([$key$$, $value$$])
			});
			var $data$$ = this.plot.getData();
			this.plot.setData([{
				data: $rx$$,
				color: $data$$[0].color
			},
			{
				data: $tx$$,
				color: $data$$[1].color
			}]);
			this.plot.draw()
		},
		templateVars: function() {
			return {
				username: this.model.get("username")
			}
		},
		prepareSave: function($batch$$) {
			var $collection$$17_model$$ = $batch$$.get("set").get("system").get("users");
			$collection$$17_model$$.add({
				username: this.model.get("username"),
				type: "local"
			});
			var $collection$$17_model$$ = $collection$$17_model$$.last(),
			$attrs$$ = {};
			$collection$$17_model$$.clear();
			var $fullname_level$$11_password$$ = this.$("input[name=fullname]").val();
			$fullname_level$$11_password$$ !=
			this.model.get("full-name") && ($attrs$$["full-name"] = $fullname_level$$11_password$$);
			$fullname_level$$11_password$$ = this.$("select[name=level] option:selected").val();
			$fullname_level$$11_password$$ != this.model.get("level") && ($attrs$$.level = $fullname_level$$11_password$$);
			if (($fullname_level$$11_password$$ = this.$("input[name=password]").val()) && this.$("div.swapped.password.changed").is(":visible")) $attrs$$.authentication = {
				"plaintext-password": $fullname_level$$11_password$$
			};
			$attrs$$ && $collection$$17_model$$.set($attrs$$,
			{
				silent: !0
			});
			$batch$$.get("get").get("system").get("users").add({
				username: $collection$$17_model$$.get("username"),
				type: "local"
			});
			$batch$$.get("get").get("system").get("users").last().clear({
				silent: !0
			})
		},
		save: function($e$$) {
			$e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			var $batch$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$, $($e$$.target).parents("button").data("section"));
			$batch$$.get("set").get("system").hasChanged() || $batch$$.unset("set");
			$batch$$.unset("delete");
			var $self$$ =
			this;
			$batch$$.has("set") && (this.dialog.addClass("saving"), this.row.users.disableActions(), $batch$$.save(["system"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.flagErrors()
				},
				complete: function() {
					$self$$.row.users.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving");
					$self$$.updateTitle()
				}
			}))
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this,
			$resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.system && $resp$$.GET.system.login && $resp$$.GET.system.login.user ? (this.model.collection["import"]($resp$$.GET.system.login.user, "local"), this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		"delete": function($e$$) {
			var $self$$ = this,
			$user$$ = $self$$.model.get("username");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete this user " +
				$user$$ + " ?",
				confirm: function() {
					$($e$$.target).parents("button").data("section");
					$self$$.row.udelete()
				}
			})
		},
		disable: function() {
			alert("TODO disable remote user")
		},
		disconnect: function() {
			alert("TODO disconnect remote user")
		},
		remove: function() {
			this.row.users.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this);
			this.collection && this.collection.reset()
		}
	});
	EDGE.Views.Users.Local = {};
	EDGE.Views.Users.Local.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Local.Default",
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.creates = [];
			this.setElement($("#Users .section-container #UsersLocal"));
			this.template = _.template($("#UsersLocalTemplate").html());
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No users available.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "username"
					},
					{
						sClass: "name"
					},
					{
						sClass: "level"
					},
					{
						sClass: "sessions"
					},
					{
						sClass: "date"
					},
					{
						sClass: "uptime"
					},
					{
						sClass: "status"
					},
					{
						sClass: "buttons",
						bSortable: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[0, "asc"]],
					sScrollY: 1,
					bScrollCollapse: !0,
					sDom: '<"H"fr>t<"F"ip>'
				},
				this.options.options || {}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			this.lazyResize();
			return this
		},
		add: function($user$$) {
			this.rows[$user$$.get("username")] = new EDGE.Views.Users.Local.Row({
				model: $user$$,
				users: this,
				dataTable: this.dataTable
			});
			var $self$$ = this;
			this.lazyResize();
			this.rows[$user$$.get("username")].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			})
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() >
				$settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.dataTable.fnDraw();
				$settings$$.oScroll.sY = this.$table.parents(".main-section").height() - this.$table.parents(".main-section").find(".section-tabs").height() - this.$table.parents(".table-container").height();
				this.dataTable.fnDraw()
			}
		},
		delete_user: function($u$$, $row$$) {
			var $batch$$ = new EDGE.Models.Batch;
			_.each(["set",
			"delete", "get", "generic", "gset"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $p$$ = ["system", "login", "user"];
			$batch$$.get("gget").put($p$$, null);
			$batch$$.get("gdelete").put($p$$, $u$$, null);
			this.disableActions();
			var $self$$ = this;
			$row$$.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			$batch$$.save(["system"], {
				success: function($model$$, $resp$$) {
					if ($resp$$.DELETE && $resp$$.DELETE.success && !($resp$$.COMMIT && 1 == $resp$$.COMMIT.failure)) {
						var $user$$ = $self$$.collection.filterByUsername($u$$,
						!0);
						if ($user$$) {
							$self$$.collection.remove($user$$);
							return
						}
					}
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.enableActions();
					$row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$); ($resp$$ = EDGE.getObjProp($resp$$, ["GET", "system", "login", "user"])) ? (this.reset(!0),
			this.collection["import"]($resp$$, "local"), this.update()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		create: function() {
			this.creates.push(new EDGE.Views.Users.Local.Create({
				id: this.creates.length,
				collection: this.collection,
				users: this
			}))
		},
		remove: function($user$$4_username$$) {
			if (this.dataTable) {
				var $user$$4_username$$ = $user$$4_username$$.get("username"),
				$row$$ = this.rows[$user$$4_username$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)),
				delete this.rows[$user$$4_username$$], this.lazyResize())
			}
		},
		reset: function($soft$$) {
			this.debug("resetting users local");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		},
		disableRestrictions: function() {
			var $counter$$ = 0 == this.$tbody.data("open-dialog-counter") ? 0: this.$tbody.data("open-dialog-counter") -
			1;
			this.$tbody.data("open-dialog-counter", $counter$$);
			0 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && this.$actions.enableAction("delete")
			})
		},
		enableRestrictions: function() {
			var $counter$$ = this.$tbody.data("open-dialog-counter") ? this.$tbody.data("open-dialog-counter") + 1: 1;
			this.$tbody.data("open-dialog-counter", $counter$$);
			1 == $counter$$ && $.each(this.rows,
			function() {
				this.$actions && this.$actions.disableAction("delete")
			})
		},
		enableActions: function() {
			$("#UsersLocal .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".user-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = $("#UserLocalAdd button");
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$("#UsersLocal .drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".user-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$ = $("#UserLocalAdd button"); ! 1 == $$button$$.button("option",
			"disabled") && $$button$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Users.Local.DropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Local.DropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#UsersLocalDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return events = {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionDelete: function() {
			var $self$$ = this.row,
			$user$$ = $self$$.model.get("username");
			$user$$ == EDGE.Config.User.username ? window.app.dialogs.alertDialog.open({
				title: "Delete User Warning",
				message: "Can not delete the user you are logged in as"
			}) : window.app.dialogs.confirmationDialog.open({
				title: "Delete User Confirmation",
				message: "Are you sure you would like to delete this user " + $user$$ + " ?",
				confirm: function() {
					$self$$.$el.find(".drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
					$self$$.udelete()
				}
			});
			return ! 1
		},
		actionConfig: function() {
			this.row.config();
			return ! 1
		}
	});
	EDGE.Views.Users.Local.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Local.Row",
		initialize: function($args$$) {
			this.users = $args$$.users;
			this.specialColumns = [9];
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			var $sessions$$ = this.model.get("sessions"),
			$session$$ = $sessions$$.last(),
			$connected$$,
			$uptime$$,
			$seconds$$ = 0,
			$status$$ = "Inactive";
			$sessions$$ && ($session$$ && ($uptime$$ = $session$$.get("uptime").replace(/([a-z]{1}(?=[0-9]+))/g,
			"$1 "), _.each($uptime$$.split(/\s/),
			function($pieces_time$$) {
				$pieces_time$$ = $pieces_time$$.match(/([0-9]+)([dhms])/);
				switch ($pieces_time$$[2]) {
				case "d":
					$seconds$$ += 86400 * parseInt($pieces_time$$[1], 10);
					break;
				case "h":
					$seconds$$ += 3600 * parseInt($pieces_time$$[1], 10);
					break;
				case "m":
					$seconds$$ += 60 * parseInt($pieces_time$$[1], 10);
					break;
				case "s":
					$seconds$$ += parseInt($pieces_time$$[1], 10)
				}
			}), $connected$$ = new Date((new Date).getTime() - 1E3 * $seconds$$), $status$$ = "Idle"), $sessions$$.each(function($session$$) {
				$session$$.get("idle") <
				90 && ($status$$ = "Active")
			},
			this));
			return ['<span class="user-icon ' + $status$$.toLowerCase() + '"></span>' + this.model.get("username"), this.model.get("full-name") || "", this.model.get("level") || "admin", this.model.get("sessions").length, $connected$$ ? Msg.D_Months[$connected$$.getMonth() + 1] + " " + $connected$$.getDate() + ", " + $connected$$.getFullYear() : "", $uptime$$ || "", $status$$, ""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ = this.$(".buttons");
			$$buttons$$.find("button").length || ("operator" == EDGE.Config.User.level ?
			$$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Users.Local.DropDownButton({
				container: this.$(".buttons"),
				row: this
			}), 1 < this.users.$tbody.data("open-dialog-counter") && this.$actions.disableAction("delete")));
			this.trigger("render");
			return this
		},
		config: function($readonly$$) {
			this.dialogs.config ? this.dialogs.config.show(!0) :
			this.dialogs.config = new EDGE.Views.Users.Config({
				model: this.model,
				tab: "local",
				readonly: $readonly$$,
				row: this
			})
		},
		udelete: function() {
			this.users.delete_user(this.model.get("username"), this)
		}
	});
	EDGE.Views.Users.Local.Create = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Local.Create",
		initialize: function($args$$) {
			this.template = _.template($("#UsersLocalCreateTemplate").html());
			this.id = "addlocaluser" + $args$$.id;
			this.type = "user";
			this.action = "create";
			this.title = "Create New Local User";
			this.users = $args$$.users;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			return {
				rules: {
					username: {
						required: !0,
						noWhiteSpace: !0,
						noshellpunctuation: !0,
						minlength: 2,
						maxlength: 32,
						validUserId: !0
					},
					fullname: {
						validUserId: !0
					},
					password: {
						required: !0,
						minlength: 4,
						noQuotes: !0
					},
					confirm: {
						required: !0,
						minlength: 4,
						noQuotes: !0,
						equalTo: "#" + this.$("input[name=password]").attr("id")
					}
				},
				messages: {
					username: {
						required: Msg.V_UsernameRequired,
						minlength: Msg.V_UsernameLength
					},
					password: {
						required: Msg.V_PasswordRequired,
						minlength: Msg.V_PasswordLength
					},
					confirm: {
						required: Msg.V_ConfirmRequired,
						minlength: Msg.V_ConfirmLength,
						equalTo: Msg.V_ConfirmEquals
					}
				}
			}
		},
		prepareSave: function($batch$$) {
			var $collection$$18_model$$ =
			$batch$$.get("set").get("system").get("users");
			$collection$$18_model$$.add({
				username: this.$("input[name=username]").val(),
				type: "local",
				level: this.$("select[name=level] option:selected").val()
			});
			var $collection$$18_model$$ = $collection$$18_model$$.last(),
			$attrs$$ = {};
			$collection$$18_model$$.clear({
				silent: !0
			});
			var $fullname$$1_password$$ = this.$("input[name=fullname]").val();
			$fullname$$1_password$$ && ($attrs$$["full-name"] = $fullname$$1_password$$);
			if ($fullname$$1_password$$ = this.$("input[name=password]").val()) $attrs$$.authentication =
			{
				"plaintext-password": $fullname$$1_password$$
			};
			$collection$$18_model$$.set($attrs$$, {
				silent: !0
			});
			$batch$$.get("get").get("system").get("users").add({
				username: $collection$$18_model$$.get("username"),
				type: "local"
			});
			$batch$$.get("get").get("system").get("users").last().clear({
				silent: !0
			})
		},
		save: function($batch$$79_e$$) {
			$batch$$79_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			$batch$$79_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$79_e$$);
			$batch$$79_e$$.get("set").get("system").hasChanged() ||
			$batch$$79_e$$.unset("set");
			$batch$$79_e$$.get("get").get("system").hasChanged() || $batch$$79_e$$.unset("get");
			$batch$$79_e$$.unset("delete");
			var $self$$ = this;
			$batch$$79_e$$.has("set") && (this.dialog.addClass("saving"), this.users.disableActions(), $batch$$79_e$$.save(["system"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.users.enableActions();
					$self$$.dialog &&
					$self$$.dialog.removeClass("saving")
				}
			}))
		},
		response: function($resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
			$resp$$ && $resp$$.GET && $resp$$.GET.system && $resp$$.GET.system.login && $resp$$.GET.system.login.user ? (this.collection["import"]($resp$$.GET.system.login.user, "local"), this.remove()) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		render: function() {
			this.users.enableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this)
		},
		remove: function() {
			this.users.disableRestrictions();
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this)
		}
	});
	EDGE.Views.Users.Remote = {};
	EDGE.Views.Users.Remote.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Remote.Default",
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("reset", this.reset, this);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.creates = [];
			this.setElement($("#Users .section-container #UsersRemote"));
			this.template = _.template($("#UsersRemoteTemplate").html());
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$filters = this.$("#UsersRemoteFilters").tabslite();
				this.$table = this.$("table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No users available.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "name"
					},
					{
						sClass: "type"
					},
					{
						sClass: "time"
					},
					{
						sClass: "interface"
					},
					{
						sClass: "remote"
					},
					{
						sClass: "tx-packets",
						bSortable: !1
					},
					{
						sClass: "tx-bytes",
						bSortable: !1
					},
					{
						sClass: "rx-packets",
						bSortable: !1
					},
					{
						sClass: "rx-bytes",
						bSortable: !1
					},
					{
						sClass: "buttons",
						bSortable: !1,
						bVisible: !1
					}],
					iDisplayLength: 100,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					aaSorting: [[0, "asc"]],
					sScrollY: 1,
					bScrollCollapse: !0,
					sDom: '<"H"fr>t<"F"ip>'
				},
				this.options.options || {}));
				var $self$$ =
				this;
				this.$("div.add button").button({
					icons: {
						primary: "ui-icon-plus"
					}
				}).bind("click",
				function() {
					$self$$.create()
				});
				this.collection.length && this.$tbody.empty();
				this.collection.each(this.add)
			}
			this.lazyResize();
			return this
		},
		filter: function($filter$$) {
			this.$filters.find("li." + $filter$$ + " a").trigger("show");
			this.dataTable.fnFilter("all" == $filter$$ ? "": $filter$$, 1)
		},
		add: function($user$$) {
			this.rows[$user$$.cid] = new EDGE.Views.Users.Remote.Row({
				model: $user$$,
				dataTable: this.dataTable
			});
			var $self$$ = this;
			this.lazyResize();
			this.rows[$user$$.cid].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			})
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY =
				1;
				this.$table.fnDraw();
				$settings$$.oScroll.sY = this.$table.parents(".main-section").height() - this.$table.parents(".main-section").find(".section-tabs").height() - this.$table.parents(".table-container").height();
				this.$table.fnDraw()
			}
		},
		create: function() {
			this.creates.push(new EDGE.Views.Users.Remote.Create({
				id: this.creates.length
			}))
		},
		remove: function($id$$94_user$$) {
			if (this.dataTable) {
				var $id$$94_user$$ = $id$$94_user$$.cid,
				$row$$ = this.rows[$id$$94_user$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)),
				delete this.rows[$id$$94_user$$], this.lazyResize())
			}
		},
		reset: function($soft$$) {
			this.debug("resetting users remote");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			_.each(this.rows,
			function($row$$) {
				$row$$.reset()
			});
			this.dataTable && this.dataTable.fnClearTable();
			this.rows = {};
			this.collection.reset();
			$soft$$ || (this.$el.data("rendered", !1), this.$el.empty())
		}
	});
	EDGE.Views.Users.Remote.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Remote.Row",
		initialize: function($args$$) {
			this.specialColumns = [6];
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			var $rates$$;
			try {
				$rates$$ = this.model.get("stats").get("rates").last()
			} catch($e$$) {}
			var $tp$$ = "",
			$tb$$ = "",
			$rp$$ = "",
			$rb$$ = "";
			$rates$$ && ($tp$$ = EDGE.getNumWithUnit($rates$$.get("tx").packets, ""), $tb$$ = EDGE.getNumWithUnit($rates$$.get("tx").bytes,
			"B"), $rp$$ = EDGE.getNumWithUnit($rates$$.get("rx").packets, ""), $rb$$ = EDGE.getNumWithUnit($rates$$.get("rx").bytes, "B"));
			return [this.model.get("full-name") || this.model.get("username"), this.model.get("type"), this.model.get("uptime").replace(/([0-9]+)([dhms])/g, "$1$2 "), this.model.get("interface"), this.model.get("remote-ip"), $tp$$, $tb$$, $rp$$, $rb$$, ""]
		},
		render: function() {
			EDGE.Views.Global.Abstract.Row.prototype.render.call(this);
			this.trigger("render");
			return this
		},
		config: function() {
			this.dialogs.config ?
			this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Users.Config({
				model: this.model,
				tab: "remote"
			})
		},
		udelete: function() {
			alert("TODO delete remote user")
		},
		disable: function() {
			alert("TODO disable remote user")
		},
		disconnect: function() {
			alert("TODO disconnect remote user")
		}
	});
	EDGE.Views.Users.Remote.Create = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Users.Remote.Create",
		initialize: function($args$$) {
			this.template = _.template($("#UsersRemoteCreateTemplate").html());
			this.id = "addremoteuser" + $args$$.id;
			this.type = "user";
			this.action = "create";
			this.title = "Create New Remote Access User";
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$26_pppoe$$) {
					$form =
					$($form$$26_pppoe$$);
					var $form$$26_pppoe$$ = $form.find("input[type=checkbox][name=pppoe]:checked").val(),
					$l2tp$$ = $form.find("input[type=checkbox][name=l2tp]:checked").val(),
					$pptp$$ = $form.find("input[type=checkbox][name=pptp]:checked").val(); ! $form$$26_pppoe$$ && !$l2tp$$ && !$pptp$$ ? $(window).trigger("dialog", ["Must select at least 1 service for remote access user.", "Validation error"]) : $self$$.save()
				},
				rules: {
					username: {
						required: !0,
						noWhiteSpace: !0,
						noshellpunctuation: !0,
						minlength: 2,
						maxlength: 32,
						validUserId: !0
					},
					fullname: {
						validUserId: !0
					},
					password: {
						required: !0,
						minlength: 4,
						noQuotes: !0
					},
					confirm: {
						required: !0,
						minlength: 4,
						noQuotes: !0,
						equalTo: "#" + this.$("input[name=password]").attr("id")
					}
				},
				messages: {
					username: {
						required: Msg.V_UsernameRequired,
						minlength: Msg.V_UsernameLength
					},
					password: {
						required: Msg.V_PasswordRequired,
						minlength: Msg.V_PasswordLength
					},
					confirm: {
						required: Msg.V_ConfirmRequired,
						minlength: Msg.V_ConfirmLength,
						equalTo: Msg.V_ConfirmEquals
					}
				}
			}
		}
	});
	EDGE.Routers.Wizard = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Wizard",
		routes: {
			Wizard: "index",
			"Wizard/:type/:key": "index",
			"Wizard*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize wizard router");
			if ("object" != typeof EDGE.Views.Wizard) throw "Missing wizard views";
			this.app = $data$$.app;
			this.views = {}
		},
		index: function($type$$, $key$$) {
			this.views.index ? this.views.index.render() : this.views.index = new EDGE.Views.Wizard.Default;
			this.views.index && this.views.index.filter($type$$,
			$key$$)
		}
	});
	EDGE.Views.Wizard = EDGE.Views.Wizard || {};
	EDGE.Views.Wizard.Default = EDGE.Views.Global.WizardBase.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Wizard.Default",
		initialize: function() {
			_.bindAll(this);
			this.lazyUpdateList = _.debounce(this.updateList, 10);
			this.lazyUpdateLocked = _.debounce(this.updateLocked, 10);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize",
			function() {
				this.lazyResize
			});
			this.creates = [];
			this.collection = new EDGE.Collections.Wizards;
			this.collection.bind("add", this.lazyUpdateList, this);
			this.collection.bind("remove", this.lazyUpdateList,
			this);
			this.collection.bind("change", this.lazyUpdateList, this);
			this.collection.bind("reset", this.lazyUpdateList, this);
			this["default"] = new EDGE.Models.Data({
				type: "default_config"
			});
			this["default"].bind("change", this.lazyUpdateLocked, this);
			this["default"].bind("reset", this.lazyUpdateLocked, this);
			this.templates = {
				wrapper: _.template($("#WizardTemplate").html()),
				list: _.template($("#WizardListTemplate").html()),
				instructions: _.template($("#WizardInstructionsTemplate").html()),
				locked: _.template($("#WizardLockedTemplate").html()),
				buttons: _.template($("#WizardButtonsTemplate").html())
			};
			this.setElement($("#Wizard .section-container"));
			$("#Wizard").show();
			this.render();
			this.loadCollection()
		},
		resize: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && _.defer(this.layout.resizeAll)
		},
		loadCollection: function() {
			$.when(this.collection.fetch({
				async: !1
			}), this["default"].fetch({
				async: !1
			})).then($.proxy(function() {
				this.$el.find(".loading").hide();
				this.trigger("loaded")
			},
			this))
		},
		removeLoading: function() {},
		loadAdditionalButtons: function() {
			var $self$$ =
			this,
			$model$$ = this.collection.filterByTypeAndKey("feature", this.model.get("key"));
			$model$$ && ("feature" == $model$$.get("type") && $model$$.get("custom")) && (this.$form.find("button.remove").removeClass("hidden"), this.$form.find("fieldset.actions button.remove").button({
				icons: {
					primary: "ui-icon-close"
				}
			}).on("click",
			function() {
				$self$$.removeFromList()
			}))
		},
		removeFromList: function() {
			var $self$$ = this;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to DELETE wizard " +
				$self$$.model.get("key") + " from the router?",
				confirm: function() {
					$.ajax({
						url: EDGE.Config.Api.base + "wizard/remove/" + $self$$.model.get("key") + ".json",
						success: function($data$$) {
							$data$$.success ? ($self$$.loadCollection(), $(window).trigger("notify", new EDGE.Models.Notice({
								type: "success",
								notice: Msg.N_WizardDeleteSuccess
							})), $self$$.cancel(event)) : $(window).trigger("notify", new EDGE.Models.Notice({
								type: "error",
								notice: Msg.E_WizardDeleteFailed + " (" + ($data$$.errors ? $data$$.errors.join("\n") : "Unspecified error") +
								")"
							}))
						},
						error: function($errors$$5_responseJSON$$3_xhr$$) {
							$errors$$5_responseJSON$$3_xhr$$ = JSON.parse($errors$$5_responseJSON$$3_xhr$$.responseText);
							$errors$$5_responseJSON$$3_xhr$$ = $errors$$5_responseJSON$$3_xhr$$.errors ? $errors$$5_responseJSON$$3_xhr$$.errors.join("\n") : "";
							$(window).trigger("notify", new EDGE.Models.Notice({
								type: "error",
								notice: Msg.E_WizardDeleteFailed + " (" + ($errors$$5_responseJSON$$3_xhr$$ ? $errors$$5_responseJSON$$3_xhr$$: "Unspecified error") + ")"
							}))
						}
					})
				}
			})
		},
		setContent: function() {
			this.$el.html(this.templates.wrapper).data("rendered",
			!0);
			this.$content = this.$el.find("div.wizards");
			this.$list = this.$content.find(".list");
			this.$form = this.$content.find(".form form");
			this.layout = this.$content.layout({
				west: {
					size: 200,
					maxSize: 200,
					spacing_open: 5,
					spacing_closed: 5,
					resizeWithWindow: !1,
					onresize: this.resize,
					onopen: this.resize,
					onclose: this.resize
				}
			})
		},
		render: function() {
			EDGE.Views.Global.WizardBase.prototype.render.call(this);
			$(window).trigger("resize");
			this.$form.find("button.remove").removeClass("hidden");
			return this
		},
		collapse: function() {
			this.$form.find("fieldset.primary").each(function() {
				var $$fieldset$$ =
				$(this),
				$$legend$$ = $(this).find("legend");
				$$legend$$.prepend($('<span class="ui-icon ui-icon-triangle-1-s"></span>'));
				$$legend$$.on("click",
				function() {
					$$fieldset$$.hasClass("collapsed") ? $$fieldset$$.trigger("expand") : $$fieldset$$.trigger("collapse")
				});
				if ($$legend$$.hasClass("advance")) {
					$$legend$$.after($('<label class="label-advance"><input type="checkbox" class="show-advance" name="show-advance" /><span>Show advanced options</span></label>'));
					var $advance$$ = $$fieldset$$.find(":checkbox.show-advance");
					$advance$$.on("change",
					function() {
						$this = $(this);
						$this.is(":checked") ? $$fieldset$$.find("div.advance-container").removeClass("hidden") : $$fieldset$$.find("div.advance-container").addClass("hidden")
					});
					$advance$$.prop("checked", !1);
					$advance$$.trigger("change")
				}
				$$fieldset$$.addClass("toggled").on("expand",
				function($event$$, $immediate$$) {
					$$fieldset$$.removeClass("collapsed", $immediate$$ ? 0: 200);
					$$legend$$.find("span").addClass("ui-icon-triangle-1-s").removeClass("ui-icon-triangle-1-e")
				}).on("collapse",
				function($event$$,
				$immediate$$) {
					$$fieldset$$.addClass("collapsed", $immediate$$ ? 0: 100);
					$$legend$$.find("span").addClass("ui-icon-triangle-1-e").removeClass("ui-icon-triangle-1-s")
				})
			}).not(".expanded").trigger("collapse", !0)
		},
		updateList: function() {
			if (this.$el.data("rendered")) {
				var $sections$$ = {
					setup: "Setup Wizards",
					feature: "Feature Wizards"
				};
				this.$list.data("rendered") ? this.$list.find("li").remove() : (this.$list.empty(), _.each($sections$$,
				function($title$$, $type$$) {
					this.$list.append(this.templates.list({
						type: $type$$,
						title: $title$$
					}));
					"setup" != $type$$ && this.getTitle($type$$).append($('<div class="ui-icon ui-icon-plus"></div>').bind("click", $.proxy(function() {
						this.creates.push(new EDGE.Views.Wizard.Upload({
							id: this.creates.length,
							wizard: $type$$,
							collection: this.collection,
							route: this
						}))
					},
					this)))
				},
				this), this.$list.data("rendered", !0));
				_.each($sections$$,
				function($title$$, $type$$) {
					var $$list$$ = this.$list.find(".section-container." + $type$$ + " ul");
					this.collection.filterByType($type$$).each($.proxy(function($model$$) {
						if (!$model$$.get("key").match(/^\./)) {
							$item =
							$('<li class="' + this.keyClass($model$$.get("key")) + '"><a href="#Wizard/' + $model$$.get("type") + "/" + $model$$.get("key") + '">' + $model$$.get("name") + "</a></li>");
							$$list$$.append($item)
						}
					},
					this))
				},
				this);
				this.flagActive()
			}
		},
		updateLocked: function() {
			if (this.$el.data("rendered")) {
				var $isDefault$$ = 1 == this["default"].get("is_default");
				this.getTitle("setup"); ! $isDefault$$ && this.model && "setup" === this.model.get("type") && this.$form.find("div.instructions").data("lock-screen") ? this.$form.find("div.locked").length ||
				(this.$form.append(this.templates.locked), this.$form.find("div.locked button").button({
					icons: {
						primary: "ui-icon-disk"
					}
				}).bind("click",
				function() {
					$("#ResetButton").trigger("click")
				})) : this.$form.find("div.locked").remove();
				this.model || (this.$form.find(".isnt-default").remove(), this.$form.find(".is-default").remove())
			}
		},
		flagActive: function() {
			$items = this.$list.find("li");
			$items.removeClass("active");
			this.model && $items.filter("." + this.keyClass(this.model.get("key"))).addClass("active")
		},
		keyClass: function($key$$) {
			return $key$$.replace(/[^a-zA-Z0-9_-]/,
			"_")
		},
		preSave: function() {
			this.$form = this.$el.find(".form form");
			this.validate()
		},
		stopRouting: function($locked$$) {
			this._alertLocked = this._alertLocked || $locked$$;
			this._stoppedRouting || (this._stoppedRouting = !0, $("#Navigation li a").on("click.wizard", null, {
				trigger: !1
			},
			this.notifyRouting), this.$list.on("click.wizard", null, {
				trigger: !1
			},
			this.notifyRouting), $("#NavSystem a").addClass("disabled").on("click.wizard", null, {
				trigger: !0,
				url: this._alertLocked ? "Wizard": Backbone.history.fragment
			},
			this.notifyRouting))
		},
		startRouting: function() {
			this._alertLocked = !1;
			this._stoppedRouting && (this._stoppedRouting = !1, $("#Navigation li a").off("click.wizard"), this.$list.off("click.wizard"), $("#NavSystem a").removeClass("disabled").off("click.wizard"))
		},
		getTitle: function($type$$) {
			return this.$list.find(".section-container." + $type$$).prev(".section-title")
		},
		destroy: function($replace$$) {
			this.undelegateEvents();
			this.$form.find("input[type=radio]").off();
			this.$form.find("fieldset").off();
			this.$form.find("legend").off();
			this.$form.find(".addable").off();
			this.$form.find(".addable-add").off();
			this.$form.find(".addable-remove").off();
			this.$form.html($replace$$ ? $replace$$: $('<div class="loading"></div>'));
			this.flagActive()
		},
		cancel: function($event$$) {
			$event$$.preventDefault();
			parent.location.hash = "Wizard"
		},
		reset: function($soft$$) {
			this.debug("resetting wizard");
			_.each(this.creates,
			function($create$$) {
				$create$$.remove()
			});
			this.creates = [];
			$soft$$ ? (this.destroy(this.templates.instructions), this.model = null, this.flagActive()) : (this.undelegateEvents(), $(document).off("change",
			"select.has-other"), this.$el.data("rendered", !1), this.layout.destroy(), this.$el.empty())
		}
	});
	EDGE.Views.Wizard.Upload = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Wizard.Upload",
		initialize: function($args$$) {
			this.template = _.template($("#WizardUploadTemplate").html());
			this.id = "addwizard" + $args$$.id;
			this.type = "wizard";
			this.wizard = $args$$.wizard;
			this.route = $args$$.route;
			this.title = "Upload new " + this.wizard + " wizard";
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		templateVars: function() {
			return {
				type: this.wizard
			}
		},
		validation: function() {
			var $self$$ =
			this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$self$$.save()
				},
				rules: {
					"wizard-name": {
						required: !0
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.uploadedPath = null;
			this.$saveButton = this.$el.find("button[type=submit]");
			this.uploader = new qq.FileUploader({
				element: this.$el.find(".wizard-files")[0],
				action: "/api/wizard/upload.json",
				params: {
					header: "text/html",
					noraw: 1
				},
				debug: !0,
				onSubmit: function() {
					window.app.heartbeat && window.app.heartbeat.interfere(1)
				},
				onCancel: function() {
					window.app.heartbeat && window.app.heartbeat.interfere( - 1)
				},
				onError: function($errors$$6_id$$100_responseJSON$$, $fileName$$, $xhr$$) {
					$errors$$6_id$$100_responseJSON$$ = JSON.parse($xhr$$.response);
					$errors$$6_id$$100_responseJSON$$ = $errors$$6_id$$100_responseJSON$$.errors ? "<br />" + $errors$$6_id$$100_responseJSON$$.errors.join("<br />") : "";
					$(window).trigger("dialog", [Msg.E_WizardUploadFailed + $errors$$6_id$$100_responseJSON$$, "Wizard Upload Failed"])
				},
				onComplete: $.proxy(function($id$$,
				$fileName$$, $responseJSON$$) {
					window.app.heartbeat && window.app.heartbeat.interfere( - 1);
					1 == $responseJSON$$.success && (this.$el.find(".wizard-files .qq-upload-button").hide(), this.uploadedPath = $responseJSON$$.path);
					this.show()
				},
				this)
			});
			this.delegateEvents();
			this.flaggable = !1;
			this.model ? this.update() : this.show();
			this.flaggable = !0
		},
		save: function($e$$) {
			$e$$ && $e$$.preventDefault();
			this.uploadedPath ? (this.$el.removeClass("saved success error"), this.$saveButton.button("showWorkingIndicator"), $.ajax({
				url: EDGE.Config.Api.base +
				"wizard/create.json",
				type: "POST",
				data: {
					name: this.$el.find("input[name=wizard-name]").val(),
					type: this.wizard,
					path: this.uploadedPath
				},
				success: $.proxy(function($data$$) {
					if ($data$$.success) {
						$(window).trigger("notify", new EDGE.Models.Notice({
							type: "success",
							notice: Msg.N_WizardCreateSuccess
						}));
						var $data$$ = $data$$.wizard,
						$oldWizard$$ = this.collection.filterByTypeAndKey($data$$.type, $data$$.key);
						$oldWizard$$ ? ($oldWizard$$.set("updated", !0), this.route.update()) : this.collection.add([$data$$]);
						this.route.loadCollection();
						this.remove()
					} else $(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_WizardCreateFailed + " (" + ($data$$.errors ? $data$$.errors.join("\n") : "Unspecified error") + ")"
					}))
				},
				this),
				error: function($errors$$7_responseJSON$$6_xhr$$) {
					$errors$$7_responseJSON$$6_xhr$$ = JSON.parse($errors$$7_responseJSON$$6_xhr$$.responseText);
					$errors$$7_responseJSON$$6_xhr$$ = $errors$$7_responseJSON$$6_xhr$$.errors ? $errors$$7_responseJSON$$6_xhr$$.errors.join("\n") : "";
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_WizardCreateFailed + " (" + ($errors$$7_responseJSON$$6_xhr$$ ? $errors$$7_responseJSON$$6_xhr$$: "Unspecified error") + ")"
					}))
				},
				complete: $.proxy(function() {
					this.$saveButton.button("hideWorkingIndicator")
				},
				this)
			})) : $(window).trigger("dialog", [Msg.E_WizardMissingFiles, "Missing Wizard Files"])
		}
	});
	EDGE.Routers.ConfigTree = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.ConfigTree",
		routes: {
			ConfigTree: "index",
			"Tree*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize config tree router");
			if ("object" != typeof EDGE.Views.ConfigTree) throw "Missing config tree views";
			this.app = $data$$.app;
			this.views = {}
		},
		index: function() {
			this.views.index ? this.views.index.render() : this.views.index = new EDGE.Views.ConfigTree.Default
		}
	});
	EDGE.Views.ConfigTree = EDGE.Views.ConfigTree || {};
	EDGE.Views.ConfigTree.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.ConfigTree.Default",
		events: {
			"click button.submit": "save",
			"click button.discard": "discard"
		},
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize",
			function() {
				this.lazyResize
			});
			this.tmp = {};
			this.layouts = {};
			this.deleted = {};
			this.sets = [];
			this.dels = [];
			this.EQUAL = 1;
			this.NOT_EQUAL = 2;
			this.DELETED = 3;
			this.replaceRegex = /[\s\<\>\.\/\:\;\[\]\=\+\)\(\*\&\!\@\#\$\%\^\"\'\~]/g;
			var $keys$$ =
			[],
			$vals$$ = {};
			this.cachedTracks = {
				push: function $this$cachedTracks$push$($k$$, $v$$) {
					$vals$$[$k$$] && _.each($keys$$,
					function($kk$$) {
						$k$$ === $kk$$ && ($keys$$ = _.without($keys$$, $kk$$))
					});
					$keys$$.push($k$$);
					$vals$$[$k$$] = $v$$
				},
				val: function $this$cachedTracks$val$($k$$) {
					return $vals$$[$k$$]
				},
				values: function $this$cachedTracks$values$() {
					return $vals$$
				},
				keys: function $this$cachedTracks$keys$() {
					return $keys$$
				},
				clear: function $this$cachedTracks$clear$() {
					$keys$$ = [];
					$vals$$ = {}
				}
			};
			this.url = EDGE.Config.Api.base + "edge/getcfg.json";
			this.batch = new EDGE.Models.ConfigBatch;
			this.templates = {
				wrapper: _.template($("#ConfigTreeTemplate").html()),
				list: _.template($("#ConfigTreeListTemplate").html()),
				item: _.template($("#ConfigTreeListItemTemplate").html()),
				form: _.template($("#ConfigTreeFormTemplate").html()),
				text: _.template($("#ConfigTreeContentTextTemplate").html()),
				addable: _.template($("#ConfigTreeContentAddableTemplate").html()),
				buttons: _.template($("#ConfigTreeActionsTemplate").html()),
				cmd: _.template($("#ConfigTreeCommitConfirmTemplate").html())
			};
			this.setElement($("#ConfigTree .section-container"));
			$("#ConfigTree").show();
			this.render();
			this.loadList();
			this.loadForm();
			this.updateActions()
		},
		setContent: function() {
			this.$el.html(this.templates.wrapper).data("rendered", !0);
			this.$content = this.$el.find("div.tree");
			this.$list = this.$content.find(".list");
			this.$form = this.$content.find(".form form");
			this.$actions = this.$content.find(".actions-container");
			this.layouts.outer = this.$content.layout({
				west: {
					size: 200,
					spacing_open: 5,
					spacing_closed: 5,
					resizeWithWindow: !1
				}
			});
			this.layouts.content = this.$("#content").layout({
				south: {
					size: 50,
					spacing_open: 5,
					spacing_close: 5,
					resizeWithWindow: !1
				}
			})
		},
		setSelected: function($$elem$$) {
			_.each(this.$list.find(".selected"),
			function($sl$$) {
				$($sl$$).removeClass("selected")
			});
			$$elem$$.addClass("selected")
		},
		clickNode: function($clone_track$$, $$node$$, $$icon$$, $value$$) {
			var $self$$ = this;
			if ((!$$node$$.hasClass("tag") || !$$node$$.children(".readonly").hasClass("deleted")) && $self$$.validation()) $self$$.resetValidation(),
			$self$$.$form.find("input").each(function() {
				var $$this$$ =
				$(this);
				$$this$$.hasClass("multi") && ($$this$$.attr("name", $$this$$.attr("name_multi")), $$this$$.removeAttr("name_multi"))
			}),
			$$node$$.hasClass("collapsed") ? ($clone_track$$ = _.clone($clone_track$$), $value$$ && $clone_track$$.push($value$$), $self$$.buildList($clone_track$$, $$node$$.parent()).then(function() {
				$self$$.sub_tree ? $$node$$.addClass("sub_tree") : $$node$$.removeClass("sub_tree");
				$$node$$.hasClass("sub_tree") && ($$node$$.removeClass("collapsed"), $$icon$$.addClass("ui-icon-triangle-1-s").removeClass("ui-icon-triangle-1-e"))
			})) :
			($$node$$.addClass("collapsed"), $$icon$$.addClass("ui-icon-triangle-1-e").removeClass("ui-icon-triangle-1-s"), $$node$$.siblings().hide())
		},
		render: function() {
			this.$el.data("rendered") || (this.setContent(), this.validator = this.$form.validate({
				debug: !0,
				onfocusout: !1,
				focusInvalid: !1,
				ignore: ":hidden",
				errorElement: "span",
				errorClass: "error",
				errorPlacement: function($error$$, $element$$) {
					var $$next$$ = $element$$.next();
					$error$$.css("max-width", $element$$.parent().width() - 12);
					$error$$.css("margin-top", "5px");
					$element$$.hasClass("multi") ?
					$error$$.insertAfter($element$$.parent().next()) : $$next$$.hasClass("ui-icon-info") ? $error$$.insertAfter($$next$$) : $element$$.is(":checkbox") ? $element$$.parent().append($error$$) : $element$$.is(":radio") ? ($error$$.wrap("<label></label>"), $error$$.css("margin-left", "0px"), $element$$.closest(".group").append($error$$.parent())) : $error$$.insertAfter($element$$)
				}
			}));
			return this
		},
		resetValidation: function() {
			this.$form.find("input").each(function() {
				var $$this$$ = $(this);
				$$this$$.hasClass("multi") && ($$this$$.attr("name",
				$$this$$.attr("name_multi")), $$this$$.removeAttr("name_multi"))
			})
		},
		enumType: function($type$$) {
			var $rule$$;
			if (!$type$$) return $rule$$;
			switch ($type$$) {
			case "u32":
				$rule$$ = {
					digits: !0,
					maxlength: 32
				};
				break;
			case "ipv4":
				$rule$$ = {
					ipv4: 1
				};
				break;
			case "ipv6":
				$rule$$ = {
					ipv6: 1
				};
				break;
			case "bool":
				$rule$$ = {
					enumeration: ["true", "false"]
				};
				break;
			case "macaddr":
				$rule$$ = {
					mac: 1
				};
				break;
			case "ipv4net":
				$rule$$ = {
					ipv4netOrDefault: 1
				};
				break;
			case "ipv6net":
				$rule$$ = {
					ipv6net: 1
				}
			}
			return $rule$$
		},
		validation: function() {
			var $counter$$ =
			0,
			$self$$ = this;
			this.$form.find("input").each(function() {
				var $$this$$ = $(this),
				$rule$$22_type$$ = $(this).data("type"),
				$type2$$ = $(this).data("type2"),
				$rule$$22_type$$ = $self$$.enumType($rule$$22_type$$);
				rule2 = $self$$.enumType($type2$$);
				if ($rule$$22_type$$) {
					if (rule2) {
						for (k in rule2) $rule$$22_type$$[k] = rule2[k];
						if ($rule$$22_type$$.ipv4 && ($rule$$22_type$$.ipv6 && ($rule$$22_type$$.ipv4OrIpv6 = 1, delete $rule$$22_type$$.ipv6, delete $rule$$22_type$$.ipv4), $rule$$22_type$$.ipv4netOrDefault)) $rule$$22_type$$.ipv4OrIpv4netOrDefault =
						1,
						delete $rule$$22_type$$.ipv4,
						delete $rule$$22_type$$.ipv4netOrDefault;
						if ($rule$$22_type$$.ipv6net && ($rule$$22_type$$.ipv4netOrDefault && ($rule$$22_type$$.ipv4OrIpv6NetOrDefault = 1, delete $rule$$22_type$$.ipv4netOrDefault, delete $rule$$22_type$$.ipv6net), $rule$$22_type$$.ipv6)) $rule$$22_type$$.ipv6OrIpv6net = 1,
						delete $rule$$22_type$$.ipv6net,
						delete $rule$$22_type$$.ipv6
					}
				} else rule2 && ($rule$$22_type$$ = rule2);
				$rule$$22_type$$ && ("undefined" != typeof $$this$$.attr("name_multi") && $$this$$.attr("name", $$this$$.attr("name_multi")),
				$$this$$.hasClass("multi") && ($$this$$.attr("name_multi", $$this$$.attr("name")), $$this$$.attr("name", $$this$$.attr("name_multi") + "__" + $counter$$++)), $$this$$.rules("remove"), $$this$$.rules("add", $rule$$22_type$$))
			});
			return this.$form.valid()
		},
		m_mark: function($equal$$, $$span$$, $$act_$li$$, $key$$, $$parent$$) {
			if (!$$span$$ && void 0 !== typeof $key$$ && $$parent$$ && $$parent$$.parent().hasClass("tag-parent")) {
				var $self$$ = this,
				$$act_$li$$ = $("<li></li>").data("node", $key$$).addClass($key$$.replace($self$$.replaceRegex,
				"-")).appendTo($$parent$$),
				$$span$$ = $(this.templates.item()).clone(!0).addClass("collapsed").addClass("tag").appendTo($$act_$li$$),
				$$icon$$ = $$span$$.children("span:first");
				$$span$$.find("span.readonly").html($.xss($key$$));
				var $track$$ = [];
				$$parent$$.parentsUntil(this.$list, "li").each(function() {
					$track$$.unshift($(this).data("node"))
				});
				$$icon$$.off().on("click",
				function() {
					$self$$.clickNode($track$$, $$span$$, $$icon$$, $key$$)
				})
			}
			$$span$$ && ($$icon$$ = $$span$$.children(":first"), $$parent$$ = $$span$$.children(".readonly"),
			$$act_$li$$ = $$span$$.children(".act"), $equal$$ == this.EQUAL ? ($$parent$$.removeClass("edited").removeClass("deleted").addClass("branch"), $$act_$li$$.hasClass("ui-icon-plus") && ($$act_$li$$.removeClass("ui-icon-plus"), $$act_$li$$.addClass("ui-icon-minus"))) : $equal$$ == this.NOT_EQUAL ? ($$parent$$.removeClass("deleted").removeClass("branch").addClass("edited"), $$act_$li$$.hasClass("ui-icon-plus") && ($$act_$li$$.removeClass("ui-icon-plus"), $$act_$li$$.addClass("ui-icon-minus")), $$icon$$.hasClass("ui-icon-triangle-1-e") &&
			$$span$$.parent().hasClass("tag-parent") && $$span$$.next().is(":visible") && $$icon$$.trigger("click")) : ($$span$$.hasClass("tag") && $$icon$$.hasClass("ui-icon-triangle-1-s") && $$icon$$.trigger("click"), $$parent$$.removeClass("branch").removeClass("edited").addClass("deleted"), $$act_$li$$.hasClass("ui-icon-minus") && ($$act_$li$$.removeClass("ui-icon-minus"), $$act_$li$$.addClass("ui-icon-plus"))))
		},
		mark: function($a$$, $b$$, $track$$, $$tree$$, $$span$$, $mkey$$, $$parent$$) {
			var $self$$ = this,
			$equal$$;
			$a$$ === $b$$ ?
			$equal$$ = $self$$.process_equal($equal$$, $self$$.EQUAL) : null === $a$$ && void 0 === $b$$ ? $equal$$ = $self$$.process_equal($equal$$, $self$$.DELETED) : void 0 === $a$$ && null === $b$$ ? $equal$$ = $self$$.process_equal($equal$$, $self$$.NOT_EQUAL) : (_.isObject($a$$) && _.each(_.keys($a$$),
			function($key$$) {
				var $$subtree$$,
				$$subspan$$;
				$$tree$$ && $$tree$$.children("li." + $key$$.replace($self$$.replaceRegex, "-")).each(function() {
					$(this).children("ul.tree").each(function() {
						$$subtree$$ = $(this)
					});
					$(this).children("span").each(function() {
						$$subspan$$ =
						$(this)
					})
				});
				if (void 0 === $b$$) $equal$$ = $self$$.process_equal($equal$$, $self$$.DELETED),
				$track$$.push($key$$),
				$self$$.mark($a$$[$key$$], void 0, $track$$, $$subtree$$, $$subspan$$, $key$$, $$tree$$),
				$track$$.pop();
				else if (null == $b$$) $equal$$ = $self$$.process_equal($equal$$, $self$$.NOT_EQUAL),
				$track$$.push($key$$),
				$self$$.mark($a$$[$key$$], void 0, $track$$, $$subtree$$, $$subspan$$, $key$$, $$tree$$),
				$track$$.pop();
				else if (_.has($b$$, $key$$)) {
					if ($a$$[$key$$] instanceof Array && $b$$[$key$$] instanceof Array && (!_.isEmpty(_.difference($a$$[$key$$],
					$b$$[$key$$])) || !_.isEmpty(_.difference($b$$[$key$$], $a$$[$key$$])))) $equal$$ = $self$$.NOT_EQUAL;
					if ($a$$[$key$$] !== $b$$[$key$$]) {
						var $typeA$$ = typeof $a$$[$key$$],
						$typeB$$ = typeof $b$$[$key$$];
						$a$$[$key$$] && $b$$[$key$$] && ("object" == $typeA$$ || "function" == $typeA$$) && ("object" == $typeB$$ || "function" == $typeB$$) ? ($track$$.push($key$$), $equal$$ = $self$$.process_equal($equal$$, $self$$.mark($a$$[$key$$], $b$$[$key$$], $track$$, $$subtree$$, $$subspan$$, $key$$, $$tree$$)), $track$$.pop()) : null == $a$$[$key$$] || null == $b$$[$key$$] ?
						($track$$.push($key$$), $equal$$ = $self$$.process_equal($equal$$, $self$$.mark($a$$[$key$$], $b$$[$key$$], $track$$, $$subtree$$, $$subspan$$, $key$$, $$tree$$)), $track$$.pop()) : $equal$$ = $self$$.isUserLoginForm && "encrypted-password" == $key$$ ? $self$$.process_equal($equal$$, $self$$.EQUAL) : $self$$.process_equal($equal$$, $self$$.NOT_EQUAL)
					} else null == $a$$[$key$$] && ($track$$.push($key$$), $self$$.mark($a$$[$key$$], $b$$[$key$$], $track$$, $$subtree$$, $$subspan$$, $key$$, $$tree$$), $track$$.pop()),
					$equal$$ = $self$$.process_equal($equal$$,
					$self$$.EQUAL)
				} else $equal$$ = $self$$.process_equal($equal$$, $self$$.DELETED),
				$track$$.push($key$$),
				$self$$.mark($a$$[$key$$], void 0, $track$$, $$subtree$$, $$subspan$$, $key$$, $$tree$$),
				$track$$.pop()
			}), _.isObject($b$$) && _.each(_.keys($b$$),
			function($key$$) {
				var $$subtree$$,
				$$subspan$$;
				$$tree$$ && $$tree$$.children("li." + $key$$.replace($self$$.replaceRegex, "-")).each(function() {
					$(this).children("ul.tree").each(function() {
						$$subtree$$ = $(this)
					});
					$(this).children("span").each(function() {
						$$subspan$$ = $(this)
					})
				});
				if (null == $a$$ || !_.has($a$$, $key$$)) $equal$$ = $self$$.process_equal($equal$$, $self$$.NOT_EQUAL),
				$track$$.push($key$$),
				$self$$.mark(void 0, $b$$[$key$$], $track$$, $$subtree$$, $$subspan$$, $key$$, $$tree$$),
				$track$$.pop()
			}));
			$self$$.m_mark($equal$$, $$span$$, $$tree$$, $mkey$$, $$parent$$);
			return $equal$$
		},
		process_equal: function($a$$, $b$$) {
			return "undefined" == typeof $a$$ ? $b$$: $a$$ === $b$$ ? $a$$: this.NOT_EQUAL
		},
		resetTree: function() {
			this.$list.find(".section-container > ul.tree").each(function() {
				$(this).find("li").each(function() {
					$(this).children("span").each(function() {
						$(this).children(".readonly").each(function() {
							$(this).removeClass("branch").removeClass("edited").removeClass("deleted")
						})
					})
				})
			})
		},
		traverse: function() {
			var $$tree$$ = this.$list.find(".section-container > ul.tree");
			this.mark(this.batch.get("get"), this.tmp, [], $$tree$$);
			this.cleanupTabs()
		},
		cleanupTabs: function() {
			this.$list.find(".section-container > ul.tree").each(function() {
				$(this).find("li").each(function() {
					$(this).children("span").each(function() {
						$(this).children(".readonly").each(function() {
							var $$span$$2_$this$$ = $(this),
							$$icon$$ = $$span$$2_$this$$.prev(),
							$$span$$2_$this$$ = $$span$$2_$this$$.parent(),
							$$ul$$ = $$span$$2_$this$$.next();
							$$span$$2_$this$$.parent().hasClass("tag-parent") && (!$$ul$$.length || !$$ul$$.children().length) && $$icon$$.hasClass("ui-icon-triangle-1-s") && $$icon$$.trigger("click")
						})
					})
				})
			})
		},
		buildList: function($track$$, $$tree$$) {
			var $self$$ = this,
			$$branch$$ = $("<ul></ul>").addClass("tree");
			_.isEmpty($track$$) ? $track$$ = [""] : "" == $track$$[0] && ($track$$ = _.rest($track$$));
			return $.ajax(this.url, {
				timeout: 1E4,
				data: {
					node: $track$$
				},
				success: $.proxy(function($data$$) {
					if ($data$$ = $data$$.GETCFG) {
						var $nodes$$ = [],
						$leaves$$ = {},
						$branches$$ =
						{},
						$tags$$ = [];
						_.each($data$$.defs,
						function($v$$, $k$$) {
							_.isObject($v$$) && ($v$$.type && !$v$$.tag ? ($leaves$$[$k$$] = $v$$, _.each($data$$.children,
							function($e$$) {
								_.isObject($e$$) && _.contains(_.keys($e$$), $k$$) && ($leaves$$[$k$$].value = $e$$[$k$$])
							})) : ($nodes$$.push($k$$), $v$$.tag && $tags$$.push($k$$)))
						});
						1 == $track$$.length && "" == $track$$[0] && ($track$$ = []);
						var $bget_leaves_buildTag$$;
						if ($data$$.chidren || $data$$.defs || $data$$.tags) $bget_leaves_buildTag$$ = $self$$.prepareGet($track$$, $data$$, $$tree$$);
						_.each($data$$.children,
						function($child$$) {
							_.isString($child$$) && ($branches$$[$child$$] = !0)
						});
						var $editable$$ = !1,
						$it$$ = !1;
						$data$$.tags ? ($nodes$$ = $data$$.tags, $it$$ = !0) : "" == $data$$.tags ? ($data$$.tags = [], $nodes$$ = [], $it$$ = !0) : $editable$$ = !0;
						_.each($nodes$$,
						function($value$$) {
							var $$li$$ = $("<li></li>").data("node", $value$$).addClass($value$$.replace($self$$.replaceRegex, "-")),
							$$span$$ = $($self$$.templates.item()).clone(true).addClass("collapsed"),
							$$icon$$ = $$span$$.children("span:first"),
							$$item$$ = $$span$$.find("span.readonly").html($.xss($value$$));
							$it$$ && $$span$$.addClass("tag");
							if ($data$$.defs && $data$$.defs[$value$$] && $data$$.defs[$value$$].help) {
								$$li$$.data("infotip", $data$$.defs[$value$$].help);
								$$item$$.data("infotip", $data$$.defs[$value$$].help);
								$data$$.defs[$value$$].type && $$li$$.data("type", $data$$.defs[$value$$].type);
								$data$$.defs[$value$$].type2 && $$li$$.data("type2", $data$$.defs[$value$$].type2);
								window.app.tooltip.addElement($$item$$,
								function() {
									return $("<div></div>").html($$item$$.data("infotip")).addClass("infotip")
								},
								{
									topOffset: 32
								})
							} ($branches$$[$value$$] ||
							!_.isEmpty($data$$.tags)) && $$item$$.addClass("branch");
							if ($editable$$ && !_.contains($tags$$, $value$$)) {
								$$li$$.addClass("editable");
								var $$action$$ = $("<span></span>").addClass("ui-icon").addClass("act").appendTo($$span$$).on("click",
								function($event$$, $keepForm$$) {
									var $$this$$ = $(this),
									$tmp$$ = $self$$.tmp;
									if ($$this$$.hasClass("ui-icon-plus")) {
										$$this$$.removeClass("ui-icon-plus");
										$$this$$.addClass("ui-icon-minus");
										_.each($track$$,
										function($t$$) {
											if (typeof $tmp$$[$t$$] === "undefined" || $tmp$$[$t$$] === null) $tmp$$[$t$$] =
											{};
											$tmp$$ = $tmp$$[$t$$]
										});
										typeof $tmp$$[$value$$] == "undefined" && ($tmp$$[$value$$] = null);
										$$icon$$.off().on("click",
										function() {
											$self$$.clickNode($track$$, $$span$$, $$icon$$, $value$$)
										})
									} else if ($$this$$.hasClass("ui-icon-minus")) {
										$$this$$.removeClass("ui-icon-minus");
										$$this$$.addClass("ui-icon-plus");
										$$span$$.removeClass("collapsed");
										$$icon$$.trigger("click");
										$$span$$.next().remove();
										for (var $toDel_tot$$ = true, $i$$ = 0; $i$$ < $track$$.length; $i$$++) {
											var $t$$0$$ = $track$$[$i$$],
											$tmp$$ = $tmp$$[$t$$0$$];
											if ($tmp$$ ==
											null || typeof $tmp$$ == "undefined") {
												$toDel_tot$$ = false;
												break
											}
										}
										if ($toDel_tot$$) {
											delete $tmp$$[$value$$];
											$toDel_tot$$ = $self$$.tmp;
											for ($i$$ = 0; $i$$ < $track$$.length; $i$$++) {
												$t$$0$$ = $track$$[$i$$];
												if ($i$$ == $track$$.length - 1 && $toDel_tot$$[$t$$0$$] && _.isEmpty($toDel_tot$$[$t$$0$$])) {
													$toDel_tot$$[$t$$0$$] = null;
													break
												}
												$toDel_tot$$ = $toDel_tot$$[$t$$0$$]
											}
										}
										$keepForm$$ || $self$$.destroyForm()
									}
									$$this$$.siblings(".readonly").removeClass("branch").removeClass("deleted").removeClass("edited");
									$self$$.traverse()
								});
								$$item$$.hasClass("branch") ?
								$$action$$.addClass("ui-icon-minus") : $$action$$.addClass("ui-icon-plus")
							}
							$$li$$.append($$span$$);
							$$branch$$.append($$li$$)
						});
						$self$$.$form.find(":input.multi").each(function() {
							$this = $(this);
							$this.val().trim() == "" && $this.parent().next().find("button.addable-remove").trigger("click")
						});
						$self$$.$form.find(".addable.tags").length ? $self$$.prepareTagData($self$$.$form) : $self$$.prepareData($self$$.$form);
						$self$$.setSelected($$tree$$);
						if ("undefined" !== typeof $data$$.tags) {
							var $current_tmp$$ = $.extend(!0, {},
							$self$$.tmp);
							_.each($track$$,
							function($t$$) {
								if ($current_tmp$$[$t$$] == null || typeof $current_tmp$$[$t$$] == "undefined") $current_tmp$$[$t$$] = {};
								$current_tmp$$ = $current_tmp$$[$t$$]
							});
							$data$$.tags = _.isEmpty($current_tmp$$) ? [] : _.keys($current_tmp$$);
							$self$$.buildForm($track$$, $leaves$$, $data$$.tags, $bget_leaves_buildTag$$)
						} else _.isEmpty($leaves$$) ? $self$$.buildForm($track$$) : $self$$.buildForm($track$$, $leaves$$, null, $bget_leaves_buildTag$$);
						$$branch$$.css("display", "none");
						$bget_leaves_buildTag$$ = !1;
						0 ==
						$$tree$$.children("ul.tree").length ? $$tree$$.append($$branch$$) : ($$branch$$ = $$tree$$.children("ul.tree"), $$branch$$.children("li").length && ($bget_leaves_buildTag$$ = !0));
						$it$$ && $$tree$$.addClass("tag-parent");
						$self$$.sub_tree = !_.isEmpty($nodes$$) || $bget_leaves_buildTag$$;
						$$branch$$.show(200);
						$$branch$$.find("> li > span").each(function() {
							var $$this$$ = $(this),
							$value$$ = $$this$$.find("span:nth-child(2)").html(),
							$$icon$$ = $$this$$.find("span:first");
							$$icon$$.off().on("click",
							function() {
								$self$$.clickNode($track$$,
								$$this$$, $$icon$$, $value$$)
							})
						});
						$self$$.traverse()
					} else $self$$.sub_tree = !1
				})
			})
		},
		destroyForm: function() {
			this.$form.data("track", "");
			this.$form.find("fieldset.form").empty();
			this.$form.find("fieldset.actions").remove();
			this.$content.find("legend.track").empty().html("root")
		},
		prepareTagInputs: function() {
			var $inputs$$ = this.$form.find(":input[name=atags]").serializeObject();
			return $inputs$$ = $inputs$$.atags ? "string" == typeof $inputs$$.atags ? [$inputs$$.atags] : $inputs$$.atags: []
		},
		buildForm: function($$field$$3_track$$,
		$leaves$$, $tags$$0$$, $bget_leaves$$) {
			this.$form.data("track", $$field$$3_track$$);
			this.$form.removeClass("initial");
			var $self$$ = this,
			$tb$$ = this.tmp,
			$avail$$ = !0,
			$$buttons$$12_$track_i$$219_node$$,
			$$form$$ = this.$form.find("fieldset.form").empty(),
			$$selected_t$$ = this.$list.find(".selected");
			this.$form.find("fieldset.actions").each(function() {
				$(this).remove()
			});
			$$buttons$$12_$track_i$$219_node$$ = _.isEmpty($$field$$3_track$$) ? this.$content.find("legend.track").empty().html("root") : this.$content.find("legend.track").empty().html($.xss($$field$$3_track$$.join(" / ")));
			$$selected_t$$.data("infotip") && $$buttons$$12_$track_i$$219_node$$.html($.xss($$buttons$$12_$track_i$$219_node$$.html() + " : " + $$selected_t$$.data("infotip")));
			if ($leaves$$ || $tags$$0$$) {
				for ($$buttons$$12_$track_i$$219_node$$ = 0; $$buttons$$12_$track_i$$219_node$$ < $$field$$3_track$$.length; $$buttons$$12_$track_i$$219_node$$++) {
					$$selected_t$$ = $$field$$3_track$$[$$buttons$$12_$track_i$$219_node$$];
					if ("undefined" == typeof $tb$$[$$selected_t$$]) {
						$avail$$ = !1;
						break
					}
					if ($$buttons$$12_$track_i$$219_node$$ != $$field$$3_track$$.length -
					1 && null == $tb$$[$$selected_t$$]) {
						$avail$$ = !1;
						break
					}
					$tb$$ = $tb$$[$$selected_t$$]
				}
				$self$$.$form.find("fieldset.actions").each(function() {
					$(this).remove()
				});
				if ($tags$$0$$) {
					$self$$.$form.find(":input[name=atags]").serializeObject();
					$$buttons$$12_$track_i$$219_node$$ = _.last($$field$$3_track$$);
					var $btags$$ = $bget_leaves$$ ? _.keys($bget_leaves$$) : [],
					$$field$$3_track$$ = $($self$$.templates.addable()).clone(),
					$$title$$ = $$field$$3_track$$.find("span.text").html($.xss($$buttons$$12_$track_i$$219_node$$)).attr("for",
					$$buttons$$12_$track_i$$219_node$$),
					$$add$$0$$ = $$field$$3_track$$.find("button.addable-add").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}),
					$$container$$0$$ = $$field$$3_track$$.find(".addable-container"),
					$$text$$ = $$field$$3_track$$.find(".addable-template").remove().find(".text-template").on("change",
					function() {
						var $inputs$$ = $self$$.prepareTagInputs();
						_.isEmpty(_.difference($inputs$$, $btags$$)) && _.isEmpty(_.difference($btags$$, $inputs$$)) ? $$title$$.removeClass("updated") : $$title$$.addClass("updated")
					});
					$$buttons$$12_$track_i$$219_node$$ = $($self$$.templates.buttons()).clone();
					$$buttons$$12_$track_i$$219_node$$.find("button.cancel").button({
						icons: {
							primary: "ui-icon-cancel"
						}
					}).addClass("hidden");
					$$buttons$$12_$track_i$$219_node$$.find("button.apply").button({
						icons: {
							primary: "ui-icon-disk"
						},
						label: "Update List"
					}).addClass("update").removeClass("apply").on("click",
					function() {
						if ($self$$.validation()) {
							$self$$.resetValidation();
							var $old_tags$$ = [];
							$self$$.$list.find("li.selected").each(function() {
								$(this).children("ul.tree").each(function() {
									$(this).children("li").each(function() {
										$(this).children("span").children(".readonly").hasClass("deleted") ||
										$old_tags$$.push($(this).data("node"))
									})
								})
							});
							$self$$.$form.find(":input.multi").each(function() {
								$this = $(this);
								"" == $this.val().trim() && $this.parent().next().find("button.addable-remove").trigger("click")
							});
							var $inputs$$ = $self$$.prepareTagInputs(),
							$tags$$ = {};
							$tags$$.atags = $inputs$$;
							$self$$.prepareTagTmp($self$$.$form.data("track"), $tags$$);
							$self$$.traverse();
							$$text$$.trigger("change")
						}
					});
					$self$$.$form.append($$buttons$$12_$track_i$$219_node$$);
					$$add$$0$$.on("click",
					function($event$$, $value$$) {
						var $$clone$$ =
						$$text$$.clone(!0).appendTo($$container$$0$$),
						$$input$$ = $$clone$$.find("input[type=text]").attr("name", "atags").removeAttr("data-infotip").addClass("multi");
						$$clone$$.find("button.addable-remove").button({
							icons: {
								primary: "ui-icon-minus"
							}
						}).on("click",
						function() {
							$$clone$$.remove();
							$$text$$.trigger("change")
						});
						var $$selected$$ = $self$$.$list.find(".selected");
						$$selected$$.data("type") && $$input$$.data("type", $$selected$$.data("type"));
						$$selected$$.data("type2") && $$input$$.data("type2", $$selected$$.data("type2"));
						$value$$ && $$input$$.val($value$$)
					});
					_.each($tags$$0$$,
					function($tag$$) {
						$$add$$0$$.trigger("click", $tag$$)
					});
					$$field$$3_track$$.appendTo($$form$$);
					$$form$$.find(".addable").addClass("tags");
					$$text$$.trigger("change")
				}
				_.each($leaves$$,
				function($v$$, $k$$) {
					$avail$$ || ($tb$$ = {});
					$tb$$ && $tb$$[$k$$] ? "encrypted-password" != $k$$ && ($v$$.value = $tb$$[$k$$]) : delete $v$$.value;
					if ($v$$.multi) {
						var $$field$$ = $($self$$.templates.addable()).clone(),
						$$title$$ = $$field$$.find("span.text").html($.xss($k$$)).attr("for", $k$$),
						$$add$$ = $$field$$.find("button.addable-add").button({
							icons: {
								primary: "ui-icon-plus"
							}
						}),
						$$container$$ = $$field$$.find(".addable-container"),
						$$addable$$9_$input$$10_value$$171_values$$ = $$field$$.find(".addable-template").remove();
						$$addable$$9_$input$$10_value$$171_values$$.find(".select-template");
						var $$text$$ = $$addable$$9_$input$$10_value$$171_values$$.find(".text-template").on("change",
						function() {
							if ($bget_leaves$$) {
								var $vals$$ = [];
								$$container$$.find("input[name=" + $k$$ + "]").each(function() {
									$vals$$.push($(this).val())
								});
								_.isEmpty(_.difference($vals$$, $bget_leaves$$[$k$$])) && _.isEmpty(_.difference($bget_leaves$$[$k$$], $vals$$)) ? $$title$$.removeClass("updated") : $$title$$.addClass("updated")
							}
						});
						$v$$.allowed || ($$addable$$9_$input$$10_value$$171_values$$ = $v$$.value, $$add$$.on("click",
						function($event$$, $value$$) {
							var $$clone$$ = $$text$$.clone(true).appendTo($$container$$),
							$$input$$ = $$clone$$.find("input[type=text]").attr("name", $k$$).data("type", $v$$.type).addClass("multi");
							$$clone$$.find("button.addable-remove").button({
								icons: {
									primary: "ui-icon-minus"
								}
							}).on("click",
							function() {
								$$clone$$.remove();
								$$text$$.trigger("change")
							});
							$v$$.type2 && $$input$$.data("type2", $v$$.type2);
							$value$$ && $$input$$.val($value$$);
							if ($v$$.help) {
								$$input$$.data("infotip", $v$$.help);
								$$clone$$.infotip()
							}
						}), "" !== $$addable$$9_$input$$10_value$$171_values$$ && _.each($$addable$$9_$input$$10_value$$171_values$$,
						function($value$$) {
							$$add$$.trigger("click", $value$$)
						}), $$field$$.appendTo($$form$$));
						$$text$$.trigger("change")
					} else $v$$.allowed || ($$field$$ = $($self$$.templates.text()).clone(), $$addable$$9_$input$$10_value$$171_values$$ =
					$v$$.value, $$title$$ = $$field$$.find("span.text").html($.xss($k$$)).attr("for", $k$$), $$addable$$9_$input$$10_value$$171_values$$ = $$field$$.find("input").val($$addable$$9_$input$$10_value$$171_values$$).attr("name", $k$$).data("type", $v$$.type), $v$$.type2 && $$addable$$9_$input$$10_value$$171_values$$.data("type2", $v$$.type2), "encrypted-password" == $k$$ && $$addable$$9_$input$$10_value$$171_values$$.attr("disabled", !0), $v$$.help && $$addable$$9_$input$$10_value$$171_values$$.data("infotip", $v$$.help), $$field$$.appendTo($$form$$)),
					$$addable$$9_$input$$10_value$$171_values$$.on("change",
					function() {
						if ($bget_leaves$$) {
							var $bvv$$ = $bget_leaves$$[$k$$];
							$(this).val() == $bvv$$ || typeof $bvv$$ === "undefined" && $(this).val() == "" ? $$title$$.removeClass("updated") : $$title$$.addClass("updated")
						}
					}).trigger("change")
				});
				$$form$$.infotip("position")
			}
		},
		loadList: function() {
			if (this.$el.data("rendered")) {
				this.$list.empty();
				this.$list.append(this.templates.list());
				this.$list.data("rendered") || this.$list.data("rendered", !0);
				var $$list$$ = this.$list.find("div.section-container");
				this.buildList([], $$list$$)
			}
		},
		loadForm: function() {
			this.$el.data("rendered") && !this.$form.data("rendered") && (this.$form.data("rendered", !0), this.$form.empty(), this.$form.append(this.templates.form()))
		},
		updateActions: function() {
			var $$buttons$$ = $(this.templates.buttons()).clone();
			this.$discard = $$buttons$$.find("button.cancel").button({
				icons: {
					primary: "ui-icon-cancel"
				},
				label: "Discard"
			}).addClass("discard").removeClass("cancel");
			this.$apply = $$buttons$$.find("button.apply").button({
				icons: {
					primary: "ui-icon-disk"
				}
			}).addClass("submit");
			this.$actions.append($$buttons$$)
		},
		isUserLoginForm: function($track$$) {
			return 5 == $track$$.length && "system" == $track$$[0] && "login" == $track$$[1] && "user" == $track$$[2] && "authentication" == $track$$[4]
		},
		prepareData: function($$form$$, $multi_inputs_tmp$$, $batch$$) {
			if (!$$form$$.hasClass("initial")) {
				$multi_inputs_tmp$$ || ($multi_inputs_tmp$$ = this.tmp);
				$batch$$ || ($batch$$ = this.batch);
				$batch$$.get("get");
				var $multi_inputs_tmp$$ = $$form$$.find(":input.multi"),
				$tmp_form$$ = $$form$$.find(":input").serializeObject();
				_.each($tmp_form$$,
				function($v$$, $k$$) {
					$v$$ == "" && delete $tmp_form$$[$k$$]
				});
				$$form$$.data("track");
				this.isUserLoginForm && ($$form$$.find("input[name=encrypted-password]").each(function() {
					$tmp_form$$["encrypted-password"] = $(this).val()
				}), $$form$$.find("input[name=plaintext-password]").each(function() {
					$tmp_form$$["plaintext-password"] = $(this).val()
				}), $tmp_form$$["plaintext-password"] && ($tmp_form$$["encrypted-password"] = ""));
				$multi_inputs_tmp$$.length && $multi_inputs_tmp$$.each(function() {
					var $k$$ = $(this).attr("name");
					typeof $tmp_form$$[$k$$] ==
					"string" && ($tmp_form$$[$k$$] = [$(this).val()])
				});
				this.prepareTmp($$form$$.data("track"), $tmp_form$$)
			}
		},
		prepareTagData: function($$form$$, $updateList$$) {
			var $tags$$ = {};
			$tags$$.atags = this.prepareTagInputs();
			this.prepareTagTmp($$form$$.data("track"), $tags$$);
			$updateList$$ || this.traverse()
		},
		prepareGet: function($track$$, $data$$, $$tree$$4_bgetkeys_i$$, $batch$$, $tmp$$) {
			$batch$$ || ($batch$$ = this.batch);
			$tmp$$ || ($tmp$$ = this.tmp);
			var $bget$$ = $batch$$.get("get"),
			$deleted_isEmpty$$;
			$$tree$$4_bgetkeys_i$$ && ($deleted_isEmpty$$ =
			$$tree$$4_bgetkeys_i$$.children("span").children(".readonly").hasClass("deleted"));
			1 == $track$$.length && "" == $track$$[0] && ($track$$ = []);
			var $available_bbget$$ = !0;
			if (!_.isEmpty($track$$)) {
				for ($$tree$$4_bgetkeys_i$$ = 0; $$tree$$4_bgetkeys_i$$ < $track$$.length; $$tree$$4_bgetkeys_i$$++) {
					$t$$0$$ = $track$$[$$tree$$4_bgetkeys_i$$];
					if ("undefined" === typeof $bget$$[$t$$0$$]) {
						$available_bbget$$ = !1;
						break
					}
					if (null === $bget$$[$t$$0$$] && $$tree$$4_bgetkeys_i$$ != $track$$.length - 1) {
						$available_bbget$$ = !1;
						break
					}
					$bget$$ = $bget$$[$t$$0$$]
				}
				$bget$$ =
				$batch$$.get("get");
				if (!$available_bbget$$ && "undefined" !== typeof $deleted_isEmpty$$) return
			}
			_.each($track$$,
			function($t$$) {
				if (typeof $bget$$[$t$$] === "undefined" || $bget$$[$t$$] === null) $bget$$[$t$$] = {};
				$bget$$ = $bget$$[$t$$]
			});
			for ($$tree$$4_bgetkeys_i$$ = 0; $$tree$$4_bgetkeys_i$$ < $track$$.length; $$tree$$4_bgetkeys_i$$++) {
				var $t$$0$$ = $track$$[$$tree$$4_bgetkeys_i$$];
				if ($$tree$$4_bgetkeys_i$$ == $track$$.length - 1) {
					if ($deleted_isEmpty$$) break;
					if ("undefined" === typeof $tmp$$[$t$$0$$] || null === $tmp$$[$t$$0$$]) $tmp$$[$t$$0$$] =
					{}
				} else if ("undefined" === typeof $tmp$$[$t$$0$$] || null === $tmp$$[$t$$0$$]) break;
				$tmp$$ = $tmp$$[$t$$0$$]
			}
			if (void 0 !== $data$$.tags) if (void 0 !== $deleted_isEmpty$$ && _.isEmpty($bget$$) && !$deleted_isEmpty$$ && _.each($data$$.tags,
			function($t$$) {
				$tmp$$[$t$$] = null
			}), $$tree$$4_bgetkeys_i$$ = _.keys($bget$$), _.isObject && _.each($data$$.tags,
			function($t$$) {
				$bget$$[$t$$] || ($bget$$[$t$$] = null)
			}), "" === $data$$.tags) {
				$available_bbget$$ = $batch$$.get("get");
				for ($$tree$$4_bgetkeys_i$$ = 0; $$tree$$4_bgetkeys_i$$ < $track$$.length; $$tree$$4_bgetkeys_i$$++) $t$$0$$ =
				$track$$[$$tree$$4_bgetkeys_i$$],
				$$tree$$4_bgetkeys_i$$ < $track$$.length - 1 ? $available_bbget$$ = $available_bbget$$[$t$$0$$] : delete $available_bbget$$[$t$$0$$]
			} else _.each(_.difference($$tree$$4_bgetkeys_i$$, $data$$.tags),
			function($t$$) {
				delete $bget$$[$t$$]
			});
			else if (void 0 !== $data$$.children) {
				void 0 !== $deleted_isEmpty$$ ? _.isEmpty($bget$$) && !$deleted_isEmpty$$ ? _.each($data$$.children,
				function($c$$) {
					if (typeof $c$$ === "object") for (k in $c$$) $tmp$$[k] = $c$$[k];
					else $tmp$$[$c$$] = null
				}) : _.each($data$$.children,
				function($c$$) {
					if (typeof $c$$ === "object") for (k in $c$$) k === "encrypted-password" && ($tmp$$[k] = $c$$[k])
				}) : _.isEmpty($bget$$) && _.each($data$$.children,
				function($c$$) {
					if (typeof $c$$ === "object") for (k in $c$$) if (k === "plaintext-password" && $c$$[k] === "" || k === "encrypted-password") $tmp$$[k] = $c$$[k]
				});
				var $cks$$ = [];
				_.each($data$$.children,
				function($c$$) {
					if (typeof $c$$ === "object") for (k in $c$$) {
						$cks$$.push(k);
						typeof $bget$$[k] === "undefined" || typeof $bget$$[k] === "string" ? $bget$$[k] = $c$$[k] : $bget$$[k] instanceof Array &&
						($bget$$[k] = _.clone($c$$[k]))
					} else {
						$cks$$.push($c$$);
						typeof $bget$$[$c$$] === "undefined" && ($bget$$[$c$$] = null)
					}
				});
				if ("" === $data$$.children) {
					$available_bbget$$ = $batch$$.get("get");
					for ($$tree$$4_bgetkeys_i$$ = 0; $$tree$$4_bgetkeys_i$$ < $track$$.length; $$tree$$4_bgetkeys_i$$++) $t$$0$$ = $track$$[$$tree$$4_bgetkeys_i$$],
					$$tree$$4_bgetkeys_i$$ < $track$$.length - 1 ? $available_bbget$$ = $available_bbget$$[$t$$0$$] : $available_bbget$$[$t$$0$$] = null
				} else _.each(_.difference(_.keys($bget$$), $cks$$),
				function($key$$) {
					delete $bget$$[$key$$]
				})
			}
			for (var $batch$$ =
			$batch$$.get("get"), $tt$$ = this.tmp, $$tree$$4_bgetkeys_i$$ = 0; $$tree$$4_bgetkeys_i$$ < $track$$.length; $$tree$$4_bgetkeys_i$$++) {
				$t$$0$$ = $track$$[$$tree$$4_bgetkeys_i$$];
				if ($$tree$$4_bgetkeys_i$$ == $track$$.length - 1) _.isEmpty($tt$$[$t$$0$$]) && "undefined" != typeof $tt$$[$t$$0$$] && ($tt$$[$t$$0$$] = null);
				else if ("undefined" == typeof $tt$$[$t$$0$$] || null == $tt$$[$t$$0$$]) break;
				$tt$$ = $tt$$[$t$$0$$]
			}
			for ($$tree$$4_bgetkeys_i$$ = 0; $$tree$$4_bgetkeys_i$$ < $track$$.length; $$tree$$4_bgetkeys_i$$++) {
				$t$$0$$ = $track$$[$$tree$$4_bgetkeys_i$$];
				if (null === $batch$$) break;
				_.isObject($batch$$[$t$$0$$]) && _.isEmpty($batch$$[$t$$0$$]) && ($batch$$[$t$$0$$] = null);
				$batch$$ = $batch$$[$t$$0$$]
			}
			if (void 0 === $deleted_isEmpty$$) {
				var $tt$$ = this.tmp,
				$defs$$ = $data$$.defs,
				$data$$ = !0;
				$deleted_isEmpty$$ = !1;
				for ($$tree$$4_bgetkeys_i$$ = 0; $$tree$$4_bgetkeys_i$$ < $track$$.length; $$tree$$4_bgetkeys_i$$++) {
					$t$$0$$ = $track$$[$$tree$$4_bgetkeys_i$$];
					if (void 0 === $tt$$[$t$$0$$]) {
						$data$$ = !1;
						break
					}
					if (null === $tt$$[$t$$0$$]) if ($$tree$$4_bgetkeys_i$$ != $track$$.length - 1) {
						$data$$ =
						!1;
						break
					} else $tt$$[$t$$0$$] = {},
					$deleted_isEmpty$$ = !0;
					$tt$$ = $tt$$[$t$$0$$]
				}
				$data$$ && $defs$$ && _.isObject($tt$$) && $bget$$ && _.isObject($bget$$) && _.each($bget$$,
				function($v$$, $k$$) {
					$v$$ === $defs$$[$k$$]["default"] && !$tt$$[$k$$] && ($tt$$[$k$$] = $defs$$[$k$$]["default"])
				});
				if ($deleted_isEmpty$$) {
					$tt$$ = this.tmp;
					for ($$tree$$4_bgetkeys_i$$ = 0; $$tree$$4_bgetkeys_i$$ < $track$$.length; $$tree$$4_bgetkeys_i$$++) $t$$0$$ = $track$$[$$tree$$4_bgetkeys_i$$],
					$$tree$$4_bgetkeys_i$$ != $track$$.length - 1 ? $tt$$ = $tt$$[$t$$0$$] : _.isEmpty($tt$$[$t$$0$$]) &&
					($tt$$[$t$$0$$] = null)
				}
			}
			return $bget$$
		},
		prepareTagTmp: function($track$$0$$, $inputs$$, $tmp$$0$$) {
			$tmp$$0$$ || ($tmp$$0$$ = this.tmp);
			var $self$$ = this,
			$$selected$$ = this.$list.find(".selected"),
			$tmp_get$$ = $.extend(!0, {},
			$self$$.batch.get("get")),
			$avail$$ = !0;
			if ($inputs$$.atags) {
				for (var $i$$ = 0; $i$$ < $track$$0$$.length; $i$$++) {
					var $t$$0$$ = $track$$0$$[$i$$];
					if ($i$$ != $track$$0$$.length - 1 && null == $tmp_get$$[$t$$0$$]) {
						$avail$$ = !1;
						break
					}
					$tmp_get$$ = $tmp_get$$[$t$$0$$]
				}
				if (!$$selected$$.children("span").children(".readonly").hasClass("deleted") ||
				!$avail$$ || $inputs$$.atags) {
					for ($i$$ = 0; $i$$ < $track$$0$$.length; $i$$++) {
						$t$$0$$ = $track$$0$$[$i$$];
						if ("undefined" === typeof $tmp$$0$$[$t$$0$$] || null === $tmp$$0$$[$t$$0$$]) {
							if (_.isEmpty($inputs$$.atags)) return;
							$tmp$$0$$[$t$$0$$] = {}
						}
						$tmp$$0$$ = $tmp$$0$$[$t$$0$$]
					}
					$tmp$$0$$.atags = _.isEmpty($inputs$$.atags) ? {}: $inputs$$.atags;
					var $avail$$ = _.without(_.keys($tmp$$0$$), "atags"),
					$list$$ = [];
					$$selected$$.children("ul").children("li").each(function() {
						$list$$.push($(this).data("node"))
					});
					if (null === $tmp_get$$ || void 0 ===
					$tmp_get$$) $tmp_get$$ = {};
					var $l$$ = _.intersection(_.difference($list$$, _.keys($tmp_get$$)), _.difference($list$$, $inputs$$.atags));
					_.each($l$$,
					function() {
						$$selected$$.children("ul").children("li").each(function() {
							var $$this$$ = $(this);
							_.contains($l$$, $$this$$.data("node")) && $$this$$.remove()
						})
					});
					_.each(_.difference($inputs$$.atags, $avail$$),
					function($key$$) {
						$tmp$$0$$[$key$$] = null
					});
					_.each(_.difference($avail$$, $inputs$$.atags),
					function($key$$) {
						delete $tmp$$0$$[$key$$]
					});
					delete $tmp$$0$$.atags;
					var $processEmpty$$ =
					function $$processEmpty$$$($tmp$$, $track$$, $index$$) {
						var $t$$ = $track$$[$index$$];
						if ($index$$ == $track$$.length - 1) {
							if (_.isEmpty($tmp$$[$t$$])) {
								delete $tmp$$[$t$$];
								$self$$.$list.find("li.selected").each(function() {
									var $$this$$ = $(this);
									$$this$$.hasClass($t$$) && $$this$$.children("span").each(function() {
										$(this).children("span.readonly").each(function() {
											$(this).removeClass("edited")
										})
									})
								})
							}
						} else {
							$processEmpty$$($tmp$$[$t$$], $track$$, $index$$ + 1);
							_.isEmpty($tmp$$[$t$$]) && ($tmp$$[$t$$] = null)
						}
					};
					$processEmpty$$($self$$.tmp,
					$track$$0$$, 0)
				}
			}
		},
		prepareTmp: function($track$$, $inputs$$, $tmp$$) {
			$tmp$$ || ($tmp$$ = this.tmp);
			for (var $i$$0$$ = 0; $i$$0$$ < $track$$.length; $i$$0$$++) {
				var $t$$0$$ = $track$$[$i$$0$$];
				if ("undefined" === typeof $tmp$$[$t$$0$$] || null === $tmp$$[$t$$0$$]) {
					if (_.isEmpty($inputs$$)) return;
					$tmp$$[$t$$0$$] = {}
				}
				$tmp$$ = $tmp$$[$t$$0$$]
			}
			_.each($inputs$$,
			function($v$$, $k$$) {
				$v$$ && ($tmp$$[$k$$] = $v$$)
			});
			_.each($tmp$$,
			function($v$$, $k$$) { (typeof $v$$ === "string" || $v$$ instanceof Array) && !_.has($inputs$$, $k$$) && delete $tmp$$[$k$$]
			});
			var $tt$$ = this.tmp;
			_.each($track$$,
			function($t$$, $i$$) {
				$i$$ == $track$$.length - 1 && _.isEmpty($tt$$[$t$$]) && ($tt$$[$t$$] = null);
				$tt$$ = $tt$$[$t$$]
			})
		},
		prepareBatch: function($a$$, $b$$, $track$$) {
			if ($a$$ === $b$$) return ! 0;
			var $self$$ = this,
			$equal$$ = !0;
			_.each(_.keys($a$$),
			function($key$$) {
				if (_.has($b$$, $key$$)) if ($a$$[$key$$] instanceof Array && $b$$[$key$$] instanceof Array) {
					if (!_.isEmpty(_.difference($a$$[$key$$], $b$$[$key$$])) || !_.isEmpty(_.difference($b$$[$key$$], $a$$[$key$$]))) $equal$$ = !1,
					$self$$.cacheChanges($track$$),
					$self$$.updateBatch($track$$, $a$$, $key$$, !0),
					$self$$.updateBatch($track$$, $b$$, $key$$)
				} else {
					if ($a$$[$key$$] !== $b$$[$key$$]) {
						var $typeA$$ = typeof $a$$[$key$$],
						$typeB$$ = typeof $b$$[$key$$];
						$a$$[$key$$] && $b$$[$key$$] && ("object" == $typeA$$ || "function" == $typeA$$) && ("object" == $typeB$$ || "function" == $typeB$$) ? ($track$$.push($key$$), $key$$ = $self$$.prepareBatch($a$$[$key$$], $b$$[$key$$], $track$$), $track$$.pop(), !1 == $key$$ && ($equal$$ = !1)) : ($equal$$ = !1, null === $b$$[$key$$] || _.isObject($b$$[$key$$]) && !($b$$[$key$$] instanceof
						 Array) ? $self$$.cacheChanges($track$$, $b$$, $key$$) : $self$$.cacheChanges($track$$), $self$$.updateBatch($track$$, $a$$, $key$$, !0), $self$$.updateBatch($track$$, $b$$, $key$$))
					}
				} else $equal$$ = !1,
				$self$$.cacheChanges($track$$),
				$self$$.updateBatch($track$$, $a$$, $key$$, !0)
			});
			_.each(_.keys($b$$),
			function($key$$) {
				_.has($a$$, $key$$) || ($equal$$ = !1, _.isObject($b$$[$key$$]) && !($b$$[$key$$] instanceof Array) ? $self$$.cacheChanges($track$$, $b$$, $key$$) : $self$$.cacheChanges($track$$), $self$$.updateBatch($track$$, $b$$,
				$key$$))
			});
			return $equal$$
		},
		cacheChanges: function($track$$, $obj$$, $key$$) {
			var $self$$ = this,
			$tclone$$ = _.clone($track$$);
			if ($obj$$ && $key$$) {
				$tclone$$.push($key$$);
				var $ttclone$$ = _.clone($tclone$$),
				$travObj$$ = function $$travObj$$$($o$$, $t$$) {
					if ($o$$ && "string" !== typeof $o$$ && !($o$$ instanceof Array)) for (k in $o$$) if ($o$$[k] && "string" !== typeof $o$$[k] && !($o$$[k] instanceof Array)) {
						$t$$.push(k);
						var $tc$$ = _.clone($t$$);
						$travObj$$($o$$[k], $t$$);
						$t$$.pop();
						$self$$.cachedTracks.push($tc$$.join(","), $tc$$)
					}
				};
				$travObj$$($obj$$[$key$$], $tclone$$);
				$self$$.cachedTracks.push($ttclone$$.join(","), $ttclone$$)
			}
			$self$$.cachedTracks.push($track$$.join(","), _.clone($track$$))
		},
		updateGet: function() {
			var $tracks$$ = [],
			$self$$ = this;
			_.each(this.cachedTracks.keys(),
			function($key$$) {
				$tracks$$.push($self$$.cachedTracks.val($key$$))
			});
			0 < $tracks$$.length && this.getCfg($tracks$$, 0)
		},
		getCfg: function($tracks$$, $index$$) {
			var $self$$ = this,
			$track$$ = $tracks$$[$index$$];
			return $.ajax(this.url, {
				timeout: 1E4,
				data: {
					node: $track$$
				},
				success: function($data$$) {
					$self$$.prepareGet($track$$,
					$data$$.GETCFG)
				},
				complete: function() {
					$index$$ + 1 < $tracks$$.length ? $self$$.getCfg($tracks$$, $index$$ + 1) : ($self$$.resetTree(), $self$$.traverse(), $self$$.enableButtons("apply"), $self$$.cachedTracks.clear())
				}
			})
		},
		updateBatch: function($sc_track$$, $setting$$, $key$$, $toDelete$$) {
			var $btodo$$;
			$btodo$$ = $toDelete$$ ? this.batch.get("delete") : this.batch.get("set");
			_.each($sc_track$$,
			function($t$$) {
				if ("undefined" == typeof $btodo$$[$t$$] || null == $btodo$$[$t$$]) $btodo$$[$t$$] = {};
				"0" == $t$$ && ($btodo$$.__FORCE_ASSOC = !0);
				$btodo$$ = $btodo$$[$t$$]
			});
			_.isEmpty($setting$$[$key$$]) ? ("__FORCE_ASSOC" != $key$$ && ($btodo$$[$key$$] = null), "0" == $key$$ && ($btodo$$.__FORCE_ASSOC = !0)) : $toDelete$$ && "string" != typeof $setting$$[$key$$] && !($setting$$[$key$$] instanceof Array) ? "__FORCE_ASSOC" != $key$$ && ($btodo$$[$key$$] = null) : ($sc_track$$ = $.extend(!0, {},
			$setting$$), this.addForce($sc_track$$), $btodo$$[$key$$] = $sc_track$$[$key$$], "0" == $key$$ && ($btodo$$.__FORCE_ASSOC = !0))
		},
		addForce: function($settings$$) {
			var $self$$ = this;
			_.each($settings$$,
			function($v$$,
			$k$$) {
				"0" == $k$$ && ($settings$$.__FORCE_ASSOC = !0);
				_.isObject($v$$) && !($v$$ instanceof Array) && $self$$.addForce($settings$$[$k$$])
			})
		},
		disableButtons: function($$status_action$$) {
			this.$el.find("button").attr("disabled", "disabled").addClass("ui-state-disabled");
			this.$el.find("button." + $$status_action$$).button("showWorkingIndicator", "primary", "ui-icon-spinner");
			this.stopRouting();
			$$status_action$$ = this.$actions.find("span.status");
			$$status_action$$.length && $$status_action$$.remove()
		},
		enableButtons: function($action$$) {
			this.$el.find("button").removeAttr("disabled").removeClass("ui-state-disabled");
			this.$el.find("button." + $action$$).button("hideWorkingIndicator")
		},
		notifyStatus: function($error$$) {
			var $$status$$ = $("<span></span>").addClass("status");
			$error$$ ? ($$status$$.addClass("error"), $$status$$.html($error$$)) : ($$status$$.addClass("ok"), $$status$$.html(Msg.N_WizardApplySuccess));
			this.$actions.find("fieldset.actions").append($$status$$)
		},
		cleanupTree: function() {
			this.m_cleanupTree(this.batch.get("get"), this.$list.find(".section-container > ul.tree"));
			this.$list.find("li").each(function() {
				var $$li$$ =
				$(this);
				$$li$$.children("span").each(function() {
					var $$span$$ = $(this);
					$$span$$.children(".readonly").each(function() {
						var $$readonly$$ = $(this);
						$$readonly$$.hasClass("deleted") && ($$span$$.hasClass("tag") ? $$li$$.remove() : $$readonly$$.removeClass("deleted"))
					})
				})
			})
		},
		m_cleanupTree: function($bget$$, $$tree$$) {
			var $self$$ = this;
			_.each($bget$$,
			function($v$$, $k$$) {
				"__FORCE_ASSOC" != $k$$ && (null == $v$$ || _.isObject($v$$) && !_.isArray($v$$)) && $$tree$$.children("." + $k$$.replace($self$$.replaceRegex, "-")).each(function() {
					var $$li$$ =
					$(this);
					$$li$$.children("span").each(function() {
						$(this).children(".readonly").each(function() {
							var $$readonly$$ = $(this);
							$$readonly$$.removeClass("edited").addClass("branch");
							$$readonly$$.next().each(function() {
								$(this).hasClass("ui-icon-plus")
							})
						})
					});
					_.isObject($v$$) && !_.isArray($v$$) && $self$$.m_cleanupTree($bget$$[$k$$], $$li$$.children("ul.tree"))
				})
			})
		},
		result: function($empty$$) {
			var $self$$ = this;
			if (!$empty$$) {
				var $cmdsContainer$$ = "";
				_.each($self$$.dels,
				function($d$$) {
					$cmdsContainer$$ += "<li>delete " +
					$.xss($d$$.join(" ")) + "</li>"
				});
				_.each($self$$.sets,
				function($s$$) {
					$cmdsContainer$$ += "<li>set " + $.xss($s$$.join(" ")) + "</li>"
				});
				$self$$.notify = new EDGE.Views.Global.Takeover({
					title: "Commands to commit",
					content: $self$$.templates.cmd({
						cmds: $cmdsContainer$$
					}),
					options: {
						style: {
							width: "500px",
							"margin-left": "-250px",
							"font-size": "14px"
						}
					},
					buttons: [{
						title: "Apply",
						icons: {
							secondary: "ui-icon-check"
						},
						bindings: {
							click: {
								action: function() {
									$self$$.commitCmds()
								},
								close: !0
							}
						}
					},
					{
						title: "Not Now",
						icons: {
							secondary: "ui-icon-close"
						},
						bindings: {
							click: {
								close: !0
							}
						}
					}]
				})
			}
		},
		commitCmds: function() {
			var $err$$ = {},
			$backup$$ = $.extend(!0, {},
			this.batch.get("get")),
			$self$$ = this;
			this.batch.unset("get");
			_.isEmpty(this.batch.get("set")) && this.batch.unset("set");
			_.isEmpty(this.batch.get("delete")) && this.batch.unset("delete");
			this.disableButtons("apply");
			this.batch.save([], {
				success: function($model$$, $resp$$) {
					var $r$$ = new EDGE.Models.Response($resp$$);
					$r$$.notices.length ? $r$$.notices.each(function($a$$62_n$$) {
						$a$$62_n$$ = [$a$$62_n$$, !1];
						$(window).trigger("notify",
						$a$$62_n$$)
					}) : $self$$.notifyStatus()
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					_.isEmpty($err$$) ? ($self$$.processAuth(), $self$$.batch.set({
						get: $.extend(!0, {},
						$backup$$),
						set: {},
						"delete": {}
					}), $self$$.cleanupTree()) : $self$$.batch.set({
						get: $.extend(!0, {},
						$backup$$),
						set: {},
						"delete": {}
					});
					$self$$.destroyForm();
					$self$$.updateGet()
				}
			})
		},
		processAuth: function() {
			for (var $btmp$$ = $.extend(!0, {},
			this.tmp), $tmp$$ = $btmp$$, $sys$$ =
			["system", "login", "user"], $i$$ = 0; $i$$ < $sys$$.length && !($tmp$$ = $tmp$$[$sys$$[$i$$]], void 0 === $tmp$$ || null === $tmp$$); $i$$++);
			_.isObject($tmp$$) && _.each($tmp$$,
			function($v$$) {
				$v$$ && $v$$.authentication && $v$$.authentication["encrypted-password"] && ($v$$.authentication["plaintext-password"] = "")
			});
			this.tmp = $btmp$$
		},
		prepareCmd: function() {
			this.m_prepareCmd(this.batch.get("set"), [], this.sets);
			this.m_prepareCmd(this.batch.get("delete"), [], this.dels)
		},
		m_prepareCmd: function($settings$$, $array$$, $final_list$$) {
			var $self$$ =
			this;
			_.each($settings$$,
			function($v$$, $k$$) {
				var $new_a$$ = _.clone($array$$); - 1 < $k$$.indexOf(" ") && ($k$$ = '"' + $k$$ + '"');
				$new_a$$.push($k$$);
				"__FORCE_ASSOC" != $k$$ && (null == $v$$ ? $final_list$$.push($new_a$$) : _.isObject($v$$) ? $v$$ instanceof Array ? _.each($v$$,
				function($n$$) {
					var $new_b$$ = _.clone($new_a$$); - 1 < $n$$.indexOf(" ") && ($n$$ = '"' + $n$$ + '"');
					$new_b$$.push($n$$);
					$final_list$$.push($new_b$$)
				}) : $self$$.m_prepareCmd($v$$, $new_a$$, $final_list$$) : ( - 1 < $v$$.indexOf(" ") && ($v$$ = '"' + $v$$ + '"'), $new_a$$.push($v$$),
				$final_list$$.push($new_a$$)))
			})
		},
		save: function($event$$) {
			$event$$.preventDefault();
			this.validation() && (this.resetValidation(), this.$form.find(".addable.tags").length ? this.prepareTagData(this.$form) : this.prepareData(this.$form), this.batch.set({
				"delete": {},
				set: {}
			}), this.prepareBatch(this.batch.get("get"), this.tmp, []), this.prepareCmd(), !_.isEmpty(this.batch.get("set")) || !_.isEmpty(this.batch.get("delete")) ? (this.result(), this.sets = [], this.dels = []) : this.result(!0))
		},
		discard: function() {
			var $isTag$$ = this.$form.find(".addable.tags").length,
			$url$$ = Backbone.history.fragment;
			$isTag$$ ? this.prepareTagData(this.$form) : this.prepareData(this.$form);
			this.prepareBatch(this.batch.get("get"), this.tmp, []); (!_.isEmpty(this.batch.get("set")) || !_.isEmpty(this.batch.get("delete"))) && window.app.dialogs.confirmationDialog.open({
				title: "Discard Confirmation",
				message: "All changes that are not applied will be discarded. Are you sure you want to continue?",
				confirm: function() {
					window.app.reload($url$$)
				}
			})
		},
		startRouting: function() {
			this._stoppedRouting && (this._stoppedRouting =
			!1, $("#Navigation li a").off("click.pf"), $("#Security li a").off("click.pf"), $("#NavSystem a").removeClass("disabled").off("click.pf"))
		},
		stopRouting: function() {
			this._stoppedRouting || (this._stoppedRouting = !0, $("#Navigation li a").on("click.pf", null, {
				trigger: !1
			},
			this.notifyRouting), $("#Security li a").on("click.pf", null, {
				trigger: !1
			},
			this.notifyRouting), $("#NavSystem a").addClass("disabled").on("click.pf", null, {
				trigger: !0,
				url: Backbone.history.fragment
			},
			this.notifyRouting))
		},
		notifyRouting: function($event$$) {
			if ("A" ==
			$event$$.target.nodeName) {
				$event$$.preventDefault();
				$event$$.stopPropagation();
				var $trigger$$ = $event$$.data.trigger,
				$url$$ = $event$$.data.url || $($event$$.target).attr("href");
				this.startRouting();
				$trigger$$ && $($event$$.target).trigger("click");
				window.app.reload($url$$)
			}
		},
		resize: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && _.each(this.layouts,
			function($layout$$) {
				$layout$$.resizeAll()
			},
			this)
		},
		reset: function() {
			this.undelegateEvents();
			$(document).off("change", "select.has-other");
			this.$el.data("rendered",
			!1);
			this.layouts.outer.removePane("west", !0, !0, !0);
			this.layouts.content.removePane("south", !0, !0, !0);
			this.layouts.outer.destroy();
			delete this.layouts.outer;
			delete this.layouts.content;
			this.sets = [];
			this.dels = [];
			this.$el.empty()
		}
	});
	EDGE.Routers.TrafficAnalysis = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.TrafficAnalysis",
		routes: {
			TrafficAnalysis: "index",
			"TrafficAnalysis*actions": "catchall"
		},
		initialize: function($data$$) {
			this.debug("initialize traffic analysis router");
			if ("object" != typeof EDGE.Views.TrafficAnalysis) throw "Missing traffic analysis views";
			this.app = $data$$.app;
			this.views = {}
		},
		index: function() {
			this.views.index ? this.views.index.render() : this.views.index = new EDGE.Views.TrafficAnalysis.Default ({
				collection: this.app.data.view.get("tastats"),
				mapping: this.app.data.view.get("system").get("static-host-mapping"),
				dpi: this.app.data.view.get("system").get("dpi"),
				servers: this.app.data.view.get("services").filterByType("dhcp-server").get("networks"),
				rulesets: this.app.data.view.get("firewall").get("rulesets")
			})
		}
	});
	EDGE.Views.TrafficAnalysis = EDGE.Views.TrafficAnalysis || {};
	EDGE.Views.TrafficAnalysis.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.TrafficAnalysis.Default",
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			this.lazyUpdateServers = _.debounce(this.updateServers, 10);
			$(window).bind("resize", this.lazyResize);
			this.setElement($("#TrafficAnalysis .section-container"));
			this.template = _.template($("#TrafficAnalysisDefaultTemplate").html());
			$("#TrafficAnalysis").show();
			$("#TrafficAnalysisContainer").show();
			this.servers =
			$args$$.servers;
			this.mapping = $args$$.mapping;
			this.dpi = $args$$.dpi;
			this.rulesets = $args$$.rulesets;
			this.layouts = {};
			this.views = {};
			this.leases = {};
			this.lazyUpdateServers();
			this.render()
		},
		render: function() {
			this.$el.data("rendered") ? (_.each(this.views,
			function($view$$) {
				$view$$.update()
			}), this.lazyResize()) : (this.$el.html(this.template).data("rendered", !0), $(window).trigger("resize"), this.layouts.north = this.$el.layout({
				scrollToBookmarkOnLoad: !1,
				north: {
					size: 31,
					spacing_open: 5,
					spacing_closed: 5,
					resizeWithWindow: !1,
					onresize: this.lazyResize,
					onopen: this.lazyResize,
					onclose: this.lazyResize
				}
			}), this.layouts.west = this.$("#TrafficAnalysisContainer").layout({
				scrollToBookmarkOnLoad: !1,
				west: {
					size: 600,
					minSize: 600,
					spacing_open: 5,
					spacing_closed: 5,
					resizeWithWindow: !1,
					onresize: this.lazyResize,
					onopen: this.lazyResize,
					onclose: this.lazyResize
				}
			}), this.layouts.northwest = this.$("#TrafficAnalysisGraphAndCategory").layout({
				scrollToBookmarkOnLoad: !1,
				north: {
					size: 380,
					spacing_open: 5,
					spacing_closed: 5,
					resizeWithWindow: !1,
					onresize: this.lazyResize,
					onopen: this.lazyResize,
					onclose: this.lazyResize
				}
			}), this.views.status = new EDGE.Views.TrafficAnalysis.UserTrafficStatus({
				el: this.$("#TrafficAnalysisUserStatus"),
				container: this,
				dpi: this.dpi
			}), this.views.category = new EDGE.Views.TrafficAnalysis.AppCategory({
				el: this.$("#TrafficAnalysisCategoryContainer"),
				dpi: this.dpi,
				rulesets: this.rulesets
			}), this.views.data = new EDGE.Views.TrafficAnalysis.UserTrafficData({
				el: this.$("#TrafficAnalysisUserData"),
				collection: this.collection,
				container: this,
				dpi: this.dpi
			}), this.views.graph =
			new EDGE.Views.TrafficAnalysis.UserTrafficGraph({
				el: this.$("#TrafficAnalysisUserGraph"),
				collection: this.collection,
				container: this
			}));
			return this
		},
		_sortApps: function($apps_result$$, $orderBy$$, $top$$) {
			function $putLast$$($array$$, $label$$) {
				for (var $index$$ = -1, $i$$ = 0; $i$$ < $array$$.length; $i$$++) if ($array$$[$i$$].label == $label$$) {
					$index$$ = $i$$;
					break
				}
				return - 1 == $index$$ ? $array$$: $array$$.splice(0, $index$$).concat($array$$.splice(1, $array$$.length - 1).concat($array$$))
			}
			$orderBy$$ || ($orderBy$$ = "total_bytes");
			_.map($apps_result$$,
			function($d$$) {
				$d$$.label = $d$$.name;
				$d$$.tx_bytes = Number($d$$.tx.bytes);
				$d$$.rx_bytes = Number($d$$.rx.bytes);
				$d$$.total_bytes = $d$$.tx_bytes + $d$$.rx_bytes;
				delete $d$$.rx;
				delete $d$$.tx;
				delete $d$$.name
			});
			var $total$$ = _.reduce($apps_result$$,
			function($t$$, $d$$) {
				return $t$$ + $d$$[$orderBy$$]
			},
			0),
			$apps_result$$ = $putLast$$(_.sortBy($apps_result$$,
			function($app$$) {
				return $app$$[$orderBy$$]
			}).reverse(), "Web - Other"),
			$apps_result$$ = $putLast$$($apps_result$$, "Other"),
			$apps_result$$ = $top$$ ?
			$apps_result$$.splice(0, $top$$) : $apps_result$$;
			_.map($apps_result$$,
			function($r$$) {
				$r$$.percentage = (100 * ($r$$[$orderBy$$] / $total$$)).toFixed(2) + "%"
			});
			return $apps_result$$
		},
		updateServers: function() {
			this.leases = {};
			var $json$$8_leases$$ = new EDGE.Models.Data({
				type: "dhcp_leases"
			}),
			$self$$ = this;
			$json$$8_leases$$.fetch({
				async: !1
			});
			$json$$8_leases$$ = $json$$8_leases$$.toJSON();
			$json$$8_leases$$["dhcp-server-leases"] && (_.each($json$$8_leases$$["dhcp-server-leases"],
			function($leases$$) {
				_.each($leases$$,
				function($lease$$,
				$ip$$) {
					$self$$.leases[$ip$$] = $lease$$["client-hostname"]
				})
			}), $self$$.servers.each(function($server$$) {
				$server$$.get("subnets").first().get("mappings").each(function($mapping$$) {
					$self$$.leases[$mapping$$.get("ip-address")] = $mapping$$.get("id")
				})
			}));
			this.mapping && this.mapping["host-name"] && _.each(this.mapping["host-name"],
			function($v$$, $hostname$$) {
				$v$$ && ($v$$.inet && $v$$.inet[0]) && ($self$$.leases[$v$$.inet[0]] = $hostname$$)
			})
		},
		resize: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && _.each(this.views,
			function($view$$) {
				$view$$.lazyResize && $view$$.lazyResize()
			})
		},
		reset: function() {
			this.$el.data("rendered", !1);
			_.each(this.views,
			function($view$$) {
				$view$$.reset()
			});
			this.layouts.northwest.removePane("north", !0, !0, !0);
			this.layouts.north.removePane("north", !0, !0, !0);
			this.layouts.west.removePane("west", !0, !0, !0);
			this.layouts.west.destroy();
			this.layouts.north.destroy();
			delete this.layouts.northwest;
			delete this.layouts.north;
			delete this.layouts.west;
			this.$el.empty()
		},
		update: function() {
			this.updateServers();
			_.each(this.views,
			function($view$$) {
				$view$$.update()
			})
		},
		wipe: function() {
			this.collection.reset();
			_.each(this.views,
			function($view$$) {
				$view$$.wipe && $view$$.wipe()
			})
		}
	});
	EDGE.Views.TrafficAnalysis.AppCategory = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.TrafficAnalysis.AppCategory",
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.template = _.template($("#TrafficAnalysisCategoryTemplate").html());
			this.dpi = $args$$.dpi;
			this.category_collection = this.dpi.get("categories");
			this.category_collection.bind("add", this.add, this);
			this.category_collection.bind("remove", this.remove, this);
			this.rows = [];
			this.creates = [];
			this.toEnable = !0;
			this.rulesets = $args$$.rulesets;
			this.render()
		},
		render: function() {
			if (!this.$el.data("rendered")) {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$table = this.$("table").addClass("ip-table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No categories found.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "category"
					},
					{
						sClass: "apps"
					},
					{
						sClass: "buttons",
						bSortable: !1,
						sWidth: "12em"
					}],
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					bPaginate: !1,
					bScrollCollapse: !0,
					sScrollY: 100,
					aaSorting: [[0, "asc"]],
					sDom: '<"H"fr>t<"F"ip>',
					fnDrawCallback: function() {
						$(".dataTables_filter  input").attr("id", "traffic_analysis_category_table_search_box")
					}
				},
				this.options.options || {}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$("div.add button").button({
						icons: {
							primary: "ui-icon-plus"
						}
					}).bind("click",
					function() {
						$self$$.create()
					})
				} else this.$("div.add button").hide();
				$self$$ = this;
				_.each(this.category_collection.models,
				function($category$$) {
					$self$$.rows[$category$$.get("name")] || ($self$$.add($category$$), $self$$.lazyResize())
				})
			}
			return this
		},
		create: function() {
			this.creates.push(new EDGE.Views.TrafficAnalysis.AppCategory.Config({
				id: this.creates.length,
				table: this,
				category_collection: this.category_collection
			}))
		},
		add: function($category$$) {
			this.rows[$category$$.get("name")] = new EDGE.Views.TrafficAnalysis.AppCategory.Row({
				model: $category$$,
				dataTable: this.dataTable,
				table: this,
				rulesets: this.rulesets
			});
			var $self$$ = this;
			this.rows[$category$$.get("name")].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		remove: function($category$$2_name$$) {
			if (this.dataTable) {
				var $category$$2_name$$ = $category$$2_name$$.get("name"),
				$row$$ = this.rows[$category$$2_name$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$category$$2_name$$], this.lazyResize())
			}
		},
		resize: function() {
			if (this.dataTable &&
			this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.$table.fnStandingRedraw();
				$settings$$.oScroll.sY = this.$table.parents(".ui-layout-pane").height() - this.$table.parents(".table-container").height();
				this.$table.fnStandingRedraw();
				this.toEnable ?
				this.enableActions() : this.disableActions()
			}
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		delete_category: function($category$$, $row$$) {
			var $batch$$ = new EDGE.Models.Batch,
			$self$$ = this;
			this.disableActions();
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $name$$ = $category$$.get("name");
			$batch$$.get("gdelete").put(["system", "traffic-analysis", "custom-category"], $name$$, null);
			$batch$$.save(["system"], {
				success: function($model$$,
				$resp$$) {
					$self$$.response($resp$$, $name$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.enableActions();
					$row$$ && $row$$.$el.find(".drop-down-button button").button("hideWorkingIndicator", {
						secondary: "ui-icon-triangle-1-s"
					})
				}
			})
		},
		response: function($resp$$, $name$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$),
			$cat$$1_cs$$ = $resp$$.COMMIT && $resp$$.COMMIT.success && 1 != $resp$$.COMMIT.failure;
			if ($resp$$.DELETE && $resp$$.DELETE.success && $cat$$1_cs$$ && ($cat$$1_cs$$ = this.category_collection.filterByName($name$$))) {
				this.category_collection.remove($cat$$1_cs$$);
				return
			}
			return $response$$
		},
		disableActions: function() {
			this.$el.find(".drop-down-button button").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".traffic_analysis_category-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$ = $("#TrafficAnalysisCategoryAdd button"); ! 1 ==
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		},
		enableActions: function() {
			this.$el.find(".drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".traffic_analysis_category-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = $("#TrafficAnalysisCategoryAdd button"); ! 0 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		setAction: function($toEnable$$) {
			this.toEnable = $toEnable$$
		},
		reset: function() {}
	});
	EDGE.Views.TrafficAnalysis.AppCategory.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.TrafficAnalysis.AppCategory.Row",
		initialize: function($args$$) {
			this.table = $args$$.table;
			this.rulesets = $args$$.rulesets;
			this.model.bind("change", this.modelChange, this);
			this.bind("render",
			function() {
				this.unbind("render");
				this.table.lazyResize()
			});
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$);
			this.specialColumns = [2]
		},
		data: function() {
			return [this.model.get("name"), this.model.get("apps").join("<br />"),
			""]
		},
		validateDelete: function() {
			var $self$$ = this,
			$msg$$ = "";
			this.rulesets.each(function($ruleset$$) {
				$ruleset$$.get("rules").each(function($app$$2_rule$$) { ($app$$2_rule$$ = $app$$2_rule$$.get("application")) && ($app$$2_rule$$["custom-category"] && $app$$2_rule$$["custom-category"] === $self$$.model.get("name")) && ($msg$$ = "Category " + $self$$.model.get("name") + " is in use.")
				})
			});
			$msg$$ && $(window).trigger("dialog", [$msg$$, "Validation error"]);
			return $msg$$ ? !1: !0
		},
		render: function() {
			var $$buttons$$ = this.$(".buttons"),
			$self$$ = this;
			$$buttons$$.find("button").length || ("operator" == EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.TrafficAnalysis.AppCategory.DropDownButton({
				container: this.$(".buttons"),
				row: this,
				rulesets: this.rulesets
			})));
			this.trigger("render");
			return this
		},
		config: function($readonly$$, $activeTab$$) {
			this.dialogs.config &&
			delete this.dialogs.config;
			this.dialogs.config = new EDGE.Views.TrafficAnalysis.AppCategory.Config({
				model: this.model,
				category_collection: this.table.category_collection,
				apps: this.model.get("apps"),
				readonly: $readonly$$,
				table: this.table,
				row: this
			});
			$(this.dialogs.config.$("div.dialog-tabs").tabslite("tabs")[$activeTab$$ || 0]).trigger("click")
		},
		"delete": function() {
			this.table.delete_category(this.model, this)
		}
	});
	EDGE.Views.TrafficAnalysis.AppCategory.DropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.TrafficAnalysis.AppCategory.DropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#TrafficAnalysisCategoryDropDownButtonTemplate").html());
			this.container = $args$$.container;
			this.rulesets = $args$$.rulesets;
			this.row = $args$$.row;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			this.$el.children(".action-list");
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionConfig: function() {
			this.row.config(!1, 0);
			return ! 1
		},
		actionDelete: function() {
			var $self$$ = this.row;
			if (!$self$$.validateDelete()) return ! 1;
			$self$$.$el.find(".drop-down-button button").button("showWorkingIndicator",
			"secondary", "ui-icon-spinner");
			var $name$$ = $self$$.model.get("name");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Category Confirmation",
				message: "Are you sure you want to delete category " + $name$$ + " ?",
				confirm: $self$$["delete"],
				deny: function() {
					$self$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			});
			return ! 1
		}
	});
	EDGE.Views.TrafficAnalysis.AppCategory.Config = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.TrafficAnalysis.AppCategory.Config",
		initialize: function($args$$) {
			this.template = _.template($("#TrafficAnalysisCategoryConfigTemplate").html());
			this.id = "cat" + (this.model ? this.model.get("name") : "-new" + $args$$.id);
			this.type = "traffic_analysis_category";
			this.action = "combo";
			this.title = this.model ? "Category Configuration": "Create Category";
			this.apps = $args$$.apps;
			this.category_collection =
			$args$$.category_collection;
			this.row = $args$$.row || null;
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $all_cats$$ = [];
			this.category_collection.each(function($cat$$) {
				this.model && this.model.get("name") == $cat$$.get("name") || $all_cats$$.push($cat$$.get("name"))
			},
			this);
			return {
				rules: {
					category: {
						required: !0,
						noWhiteSpace: !0,
						noQuotes: !0,
						notAmong: $all_cats$$,
						validCategory: !0,
						maxlength: 31
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this,
			!0);
			this.model && this.update();
			return this
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$("fieldset.actions").remove()
		},
		update: function() {
			var $$form$$ = this.$("form"),
			$n$$ = this.model.get("name");
			this.updateTextbox($$form$$.find("input[name=category]"), $n$$, $$form$$.find('label[for="' + $$form$$.find("input[name=category]").attr("id") + '"]'));
			var $$apps$$ = $$form$$.find("fieldset.apps");
			this.apps.length && _.each(this.apps,
			function($app$$) {
				var $$added$$ = $$apps$$.addable("add").addable("last"),
				$$input$$ = $$added$$.find("input");
				this.readonly ? $$added$$.find("span.readonly").html($app$$) : $$input$$.val($app$$)
			},
			this)
		},
		renderAddables: function() {
			var $self$$ = this,
			$$apps$$ = this.$("fieldset.apps"),
			$$template$$ = $$apps$$.find("div.app").remove();
			$$apps$$.addable({
				template: $$template$$.clone(!0),
				add: this.readonly ? null: $('<span class="addable">Add App</span>').button({
					icons: {
						primary: "ui-icon-plus"
					}
				}),
				added: function() {
					var $$inserted$$ = this.inserted,
					$$remove$$ = this.inserted.find("span.remove");
					if ($self$$.readonly) $$remove$$.remove();
					else $$remove$$.button({
						icons: {
							primary: "ui-icon-minus"
						},
						label: "Remove"
					}).on("click",
					function() {
						$$inserted$$.remove()
					});
					$self$$.show()
				}
			})
		},
		prepareSave: function($batch$$) {
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $$form$$ = this.$("form"),
			$p$$ = ["system", "traffic-analysis", "custom-category"],
			$old_cat$$ = this.model ? this.model.get("name") : "",
			$old_apps_toDel$$ = this.model ? this.model.get("apps") : [],
			$new_cat$$ = $$form$$.find("input[name=category]").val(),
			$new_apps$$ = [],
			$changed$$ = !0,
			$name_changed$$ = $new_cat$$ !== $old_cat$$;
			$old_cat$$ && $old_cat$$ !== $new_cat$$ && (this.row.validateDelete() || ($changed$$ = !1), $batch$$.get("gdelete").put($p$$, $old_cat$$, null));
			$$form$$.find("fieldset.apps .app input").each(function() {
				var $val$$ = $(this).val();
				$val$$ && $new_apps$$.push($val$$)
			});
			$$form$$ = $name_changed$$ ? $new_apps$$: _.difference($new_apps$$, $old_apps_toDel$$);
			$old_apps_toDel$$ = $name_changed$$ ? [] : _.difference($old_apps_toDel$$, $new_apps$$);
			_.each($$form$$,
			function($a$$) {
				$batch$$.get("gset").put($p$$,
				$new_cat$$, "name", $a$$, null)
			},
			this);
			_.each($old_apps_toDel$$,
			function($d$$) {
				$batch$$.get("gdelete").put($p$$, $new_cat$$, "name", $d$$, null)
			},
			this);
			_.isEmpty($$form$$) && (_.isEmpty($old_apps_toDel$$) && !$name_changed$$) && ($changed$$ = !1);
			_.isEmpty($new_apps$$) && $batch$$.get("gset").put($p$$, $new_cat$$, null);
			return $changed$$
		},
		save: function($batch$$85_e$$) {
			$batch$$85_e$$ && $batch$$85_e$$.preventDefault();
			var $self$$ = this;
			this.dialog.removeClass("saved success error");
			$batch$$85_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$85_e$$) && (this.dialog.addClass("saving"), $batch$$85_e$$.save(["system"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.dialog.addClass("error")
				},
				complete: function() {
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		},
		response: function($category$$4_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $category$$4_resp$$),
			$new_cat$$ = this.$("form").find("input[name=category]").val(),
			$p$$24_s$$ = $category$$4_resp$$.SET && $category$$4_resp$$.SET.success,
			$d$$ = $category$$4_resp$$.DELETE && $category$$4_resp$$.DELETE.success;
			$category$$4_resp$$.COMMIT && 1 != $category$$4_resp$$.COMMIT.failure && ($p$$24_s$$ || !$category$$4_resp$$.SET) && ($d$$ || !$category$$4_resp$$.DELETE) ? ($p$$24_s$$ = EDGE.getObjProp($category$$4_resp$$, ["GET", "system", "traffic-analysis", "custom-category"]), this.model ? ($p$$24_s$$ = EDGE.getObjProp($category$$4_resp$$,
			["GET", "system", "traffic-analysis", "custom-category", $new_cat$$]), $category$$4_resp$$ = {
				name: $new_cat$$
			},
			$p$$24_s$$ && ($category$$4_resp$$.apps = $p$$24_s$$.name), this.model.set(this.model.parse($category$$4_resp$$), {
				silent: !0
			}), this.model.change(), this.dialog.addClass("saved success"), this.remove()) : $p$$24_s$$ && (this.category_collection["import"]($p$$24_s$$), this.dialog.addClass("saved success"), this.remove())) : this.dialog.addClass("error");
			return $response$$
		}
	});
	EDGE.Views.TrafficAnalysis.UserTrafficStatus = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.readonly = "admin" != EDGE.Config.User.level;
			this.section = $args$$.section || "TrafficAnalysis";
			this.setElement($args$$.el || $("#TrafficAnalysisUserStatus"));
			this.template = _.template($("#TrafficAnalysisUserStatusTemplate").html());
			this.container = $args$$.container;
			this.dpi = $args$$.dpi;
			this.confirms = {};
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.lazyResize();
			else {
				this.$el.html(this.template).data("rendered", !0);
				$(window).trigger("resize");
				var $self$$ = this;
				this.$form = this.$(".form");
				this.$status = this.$form.find("input:radio[name=status]");
				this.status = "neither";
				this.status = "enable" == this.dpi.get("export") ? "enable" == this.dpi.get("dpi") ? "both": "traffic": "neither";
				var $$radios$$ = this.$form.find("input:radio[name=status]");
				this.$form.find("input:radio[name=status][value=" + $self$$.status + "]").prop("checked",
				!0);
				$$radios$$.change(function() {
					window.app.dialogs.confirmationDialog.open({
						title: "Change Traffic Analysis Operational Status",
						message: $self$$.message($self$$.$form.find("input:radio[name=status]:checked").val()),
						confirm: function($e$$) {
							$$radios$$.prop("disabled", !0);
							$self$$.save($e$$)
						},
						deny: function() {
							$self$$.$form.find("input:radio[name=status][value=" + $self$$.status + "]").prop("checked", !0)
						}
					})
				});
				this.$("span.clear-data").on("click",
				function() {
					window.app.dialogs.confirmationDialog.open({
						title: "Clear Data in Traffic Analysis",
						message: "All data in traffic analysis will be removed. Continue?",
						confirm: function() {
							$.ajax({
								url: EDGE.Config.Api.base + "edge/operation/clear-traffic-analysis.json",
								type: "POST",
								success: function($data$$) {
									$data$$ = $data$$.OPERATION || {};
									$data$$.success ? ($(window).trigger("notify", new EDGE.Models.Notice({
										type: "success",
										notice: "Traffic analysis data has been cleared successfully."
									})), $self$$.container.wipe()) : $(window).trigger("notify", new EDGE.Models.Notice({
										type: "error",
										notice: Msg.E_TrafficAnalysisDataClearFailed
									}))
								},
								error: function() {
									$(window).trigger("notify", new EDGE.Models.Notice({
										type: "error",
										notice: Msg.E_TrafficAnalysisDataClearFailed
									}))
								}
							})
						}
					})
				});
				this.readonly && $$radios$$.prop("disabled", !0)
			}
			return this
		},
		message: function($val$$) {
			var $msg$$ = "";
			"both" == $val$$ && ($msg$$ = "Enable traffic analysis with application identification using Deep Packet Inspection (DPI)?");
			"traffic" == $val$$ && ($msg$$ = 'Enable traffic analysis without Deep Packet Inspection (DPI), i.e., traffic will only be seen at the "hosts" level without application identification?');
			"neither" == $val$$ && ($msg$$ = "Disable the traffic analysis feature?");
			return $msg$$
		},
		resize: function() {},
		reset: function() {},
		update: function() {},
		prepareSave: function($batch$$) {
			$batch$$.unset("delete");
			$batch$$.unset("get");
			var $p$$ = ["system", "traffic-analysis"],
			$status$$ = this.$form.find("input:radio[name=status]:checked").val();
			"both" == $status$$ && ($batch$$.get("gset").put($p$$, "export", "enable"), $batch$$.get("gset").put($p$$, "dpi", "enable"));
			"traffic" == $status$$ && ($batch$$.get("gset").put($p$$, "export",
			"enable"), $batch$$.get("gset").put($p$$, "dpi", "disable"));
			"neither" == $status$$ && ($batch$$.get("gset").put($p$$, "export", "disable"), $batch$$.get("gset").put($p$$, "dpi", "disable"))
		},
		save: function($batch$$87_e$$) {
			$batch$$87_e$$ && $batch$$87_e$$.preventDefault();
			var $self$$ = this,
			$batch$$87_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$87_e$$);
			$batch$$87_e$$.save([], {
				success: function() {
					$self$$.status = $self$$.$form.find("input:radio[name=status]:checked").val();
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "success",
						notice: "Traffic analysis operational status was changed successfully."
					}))
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: "Cannot change traffic analysis operational status at this time."
					}))
				},
				complete: function() {
					$self$$.$form.find("input:radio[name=status]").prop("disabled", !1)
				}
			})
		}
	});
	EDGE.Views.TrafficAnalysis.UserTrafficGraph = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("graphchange", this.update, this);
			this.section = $args$$.section || "TrafficAnalysis";
			this.setElement($args$$.el || $("#TrafficAnalysisUserGraph"));
			this.components = {};
			this.template = _.template($("#TrafficAnalysisUserD3Template").html());
			this.shades = 11;
			this.percent = 0.1;
			this.container = $args$$.container;
			this.width = 340;
			this.height = 320;
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.lazyResize();
			else {
				this.$el.html(this.template).data("rendered", !0);
				$(window).trigger("resize");
				this.$container = this.$el.find(".section");
				this.$legend = this.$container.find(".legend");
				this.$summaryContainer = this.$container.find(".summary table");
				this.renderGraph();
				var $cookie$$ = UBNT.Utils.Cookies.get("ip_address_top_user_option");
				this.pie = $cookie$$ ? $cookie$$: "total_bytes";
				this.$(":radio[name=bytes][value=" +
				this.pie + "]").prop("checked", !0);
				this.$(":radio[name=bytes]").on("change", this.updateCategory).trigger("change")
			}
			this.update(!0);
			return this
		},
		resize: function() {},
		reset: function() {},
		renderGraph: function() {
			var $config$$ = this.config(),
			$components$$ = this.components;
			$components$$.container = d3.select(this.$container[0]).select("div.graph").append("svg").attr("width", $config$$.width).attr("height", $config$$.height);
			$components$$.graph = $components$$.container.append("g").attr("class", "graph").attr("transform",
			"translate(" + ($config$$.margin.left + $config$$.width / 2.5) + "," + ($config$$.margin.top + $config$$.height / 2.5) + ")");
			$components$$.graph.append("g").attr("class", "slices");
			$components$$.pie = d3.layout.pie().sort(null).value(this.pie_value);
			$components$$.arc = d3.svg.arc().outerRadius(0.9 * $config$$.radius).innerRadius(0.7 * $config$$.radius)
		},
		pie_value: function($d$$) {
			return $d$$[this.pie]
		},
		update: function($load$$) {
			$load$$ ? this.collection.length || (this.$container.find(".loading").show(), this.$container.find("svg").hide(),
			this.$container.find(".details").hide(), this.$container.find(".summary").hide()) : (this.$container.find(".loading").hide(), this.$container.find("svg").show(), this.generateData(), this.graph(), this.legend(), this.$container.find(".details").show(), this.$container.find(".summary").show())
		},
		wipe: function() {
			this.generateData();
			this.graph();
			this.legend()
		},
		key: function($d$$) {
			return $d$$.data.label
		},
		legend: function() {
			var $self$$ = this,
			$hash$$ = {};
			this.$legend.find(".host").each(function() {
				var $$this$$ = $(this);
				$hash$$[$$this$$.text()] = $$this$$.parent().css("font-weight")
			});
			this.$legend.empty();
			_.each(this.data,
			function($d$$) {
				var $$notation_l$$ = d3.select($self$$.$legend[0]).append("div").attr("class", "entry");
				$$notation_l$$.append("div").attr("class", "color").style("background-color", $d$$.color);
				$$notation_l$$ = $("<div>").attr("class", "notation").css("font-weight",
				function() {
					return _.has($hash$$, $d$$.label) ? $hash$$[$d$$.label] : "normal"
				}).appendTo($$notation_l$$);
				$("<span>").attr("class", "host").text($d$$.label).appendTo($$notation_l$$);
				$("<span>").attr("class", "percentage").text("No data available" == $d$$.label ? "": " (" + (100 * ($d$$[$self$$.pie] / $self$$.sum)).toFixed(2) + "%)").appendTo($$notation_l$$)
			})
		},
		updateLegend: function($data$$) {
			$data$$ ? this.$legend.find(".host").each(function() {
				var $$this$$ = $(this);
				$$this$$.html() == $data$$.label && $$this$$.parent().css("font-weight", "bold")
			}) : this.$legend.find(".notation").css("font-weight", "normal")
		},
		updateDetails: function($apps$$1_data$$) {
			var $$detailsContainer$$ = this.$container.find(".details table");
			if ($apps$$1_data$$) {
				"No data available" == $apps$$1_data$$.label && ($apps$$1_data$$[this.pie] = 0);
				var $host$$ = $apps$$1_data$$.label.split(" - "),
				$ip$$ = 1 < $host$$.length ? $host$$[1] : $apps$$1_data$$.label,
				$host$$ = 1 < $host$$.length ? $host$$[0] : "",
				$bytes$$ = _.map(this.pie.split("_"),
				function($w$$) {
					return $w$$.charAt(0).toUpperCase() + $w$$.slice(1)
				});
				this.$summaryContainer.hide();
				$$detailsContainer$$.find(".host").append("<td>" + $host$$ + "</td>");
				$$detailsContainer$$.find(".ip").append("<td>" + $ip$$ + "</td>");
				$$detailsContainer$$.find(".bytes").append("<td>" +
				$bytes$$.join(" ") + "  " + EDGE.getNumWithUnit($apps$$1_data$$[this.pie], "bytes") + "</td>");
				"Other" !== $apps$$1_data$$.label && "Web - Other" !== $apps$$1_data$$.label ? ($apps$$1_data$$ = [], this.collection.filterByIp($ip$$) && ($apps$$1_data$$ = this.collection.filterByIp($ip$$).get("apps").toJSON(), $apps$$1_data$$ = _.filter(this.container._sortApps($apps$$1_data$$, this.pie, 5),
				function($app$$) {
					return "Other" !== $app$$.label && "Web - Other" !== $app$$.label
				})), $apps$$1_data$$.length) ? ($$detailsContainer$$.find(".apps").append("<td>Top " +
				$apps$$1_data$$.length + " Apps</td>"), _.each($apps$$1_data$$,
				function($app$$) {
					var $$app$$ = $("<tr>").addClass("topapp").addClass("title").appendTo($$detailsContainer$$);
					$("<td>").html($app$$.label + "(" + $app$$.percentage + ")").appendTo($$app$$)
				}), $$detailsContainer$$.find(".apps").addClass("subline")) : $$detailsContainer$$.find(".bytes").addClass("subline") : $$detailsContainer$$.find(".bytes").addClass("subline")
			} else $$detailsContainer$$.find("tr").empty(),
			$$detailsContainer$$.find("tr.topapp").remove(),
			$$detailsContainer$$.find(".subline").removeClass("subline"),
			this.$summaryContainer.show()
		},
		graph: function() {
			var $components$$ = this.components,
			$config$$ = this.config(),
			$self$$ = this;
			this.data.length || this.data.push({
				label: "No data available",
				rx_bytes: 1,
				tx_bytes: 1,
				total_bytes: 1
			});
			$components$$.slice = $components$$.graph.select(".slices").selectAll("path.slice").data($components$$.pie(this.data), this.key);
			$components$$.slice.enter().insert("path").attr("class", "slice");
			$components$$.details = $components$$.graph.select(".details").select("text");
			$components$$.slice.style("fill",
			function($d$$, $i$$) {
				$self$$.data[$i$$].color = $config$$.colors($i$$);
				return $d$$.color = $config$$.colors($i$$)
			}).style("stroke",
			function() {
				return "#eaeaea"
			}).style("stroke-width", 2).style("cursor", "pointer").on("mouseover",
			function($d$$) {
				d3.select(this).style("fill", d3.rgb($d$$.color).brighter(0.2));
				$self$$.updateDetails($d$$.data);
				$self$$.updateLegend($d$$.data)
			}).on("click",
			function($d$$) {
				"Other" !== $d$$.data.label && "No data available" !== $d$$.data.label && $self$$.container.views.data.filter($d$$.data.label)
			}).on("mouseout",
			function($d$$) {
				$d$$.color != d3.rgb(d3.select(this).style("fill")).toString().toUpperCase() && d3.select(this).style("fill", d3.rgb($d$$.color).darker(0.2));
				$self$$.updateDetails();
				$self$$.updateLegend()
			}).transition().duration(1E3).attrTween("d",
			function($d$$) {
				this._current = this._current || $d$$;
				var $interpolate$$ = d3.interpolate(this._current, $d$$);
				this._current = $interpolate$$(0);
				return function($t$$) {
					return $components$$.arc($interpolate$$($t$$))
				}
			});
			$components$$.slice.exit().remove();
			this.$summaryContainer.find("th").html(_.map(this.pie.split("_"),
			function($w$$) {
				return $w$$.charAt(0).toUpperCase() + $w$$.slice(1)
			}).join(" "));
			this.$summaryContainer.find("td").html(EDGE.getNumWithUnit(this.sum ? this.sum: 0, "bytes"))
		},
		generateData: function() {
			var $data$$ = this.collection.toJSON(),
			$self$$ = this,
			$leases$$ = this.container.leases ? this.container.leases: [];
			this.data = [];
			if ($data$$.length) {
				_.map($data$$,
				function($d$$) {
					$d$$.label = $d$$.ip;
					$d$$.tx_bytes = Number($d$$.stats.get("tx").bytes);
					$d$$.rx_bytes = Number($d$$.stats.get("rx").bytes);
					$d$$.total_bytes = $d$$.tx_bytes +
					$d$$.rx_bytes;
					delete $d$$.stats;
					delete $d$$.ip;
					delete $d$$.apps
				});
				var $data$$ = _.sortBy($data$$, this.pie).reverse(),
				$other$$ = {
					label: "Other"
				},
				$rest$$ = [];
				$data$$.length > this.shades && ($rest$$ = $data$$.slice(this.shades - 1), $data$$ = $data$$.slice(0, this.shades - 1));
				var $combined$$ = {
					tx_bytes: _.reduce($data$$,
					function($total$$, $d$$) {
						return $total$$ + $d$$.tx_bytes
					},
					0),
					rx_bytes: _.reduce($data$$,
					function($total$$, $d$$) {
						return $total$$ + $d$$.rx_bytes
					},
					0),
					total_bytes: _.reduce($data$$,
					function($total$$, $d$$) {
						return $total$$ +
						$d$$.total_bytes
					},
					0)
				},
				$sum$$ = 0,
				$other_cand$$ = [],
				$back_to_data$$ = [];
				if ($data$$.length > this.shades / 2) for (var $i$$ = 0; $i$$ < $data$$.length; $i$$++) {
					var $d$$0$$ = $data$$[$data$$.length - 1 - $i$$];
					if (0 > $d$$0$$[$self$$.pie] / $combined$$[$self$$.pie] - ($self$$.percent - $sum$$)) $sum$$ += $d$$0$$[$self$$.pie],
					$other_cand$$.push($d$$0$$),
					$rest$$.length && 0 < $rest$$[$rest$$.length - 1][$self$$.pie] / $combined$$[$self$$.pie] - $self$$.percent / 3 && $back_to_data$$.push($rest$$.pop());
					else if ($d$$0$$[$self$$.pie] / $combined$$[$self$$.pie] <
					$self$$.percent / 3) $other_cand$$.push($d$$0$$);
					else break
				} else $other_cand$$ = _.filter($data$$,
				function($d$$) {
					return $d$$[$self$$.pie] / $combined$$[$self$$.pie] < $self$$.percent / 3
				});
				$rest$$ = _.union($rest$$, $other_cand$$);
				if (1 < $rest$$.length) {
					for ($i$$ = 0; $i$$ < $other_cand$$.length; $i$$++) $data$$.pop();
					for ($i$$ = 0; $i$$ < $back_to_data$$.length; $i$$++) $data$$.push($back_to_data$$.pop());
					$other$$.tx_bytes = _.reduce($rest$$,
					function($total$$, $d$$) {
						return $total$$ + $d$$.tx_bytes
					},
					0);
					$other$$.rx_bytes = _.reduce($rest$$,
					function($total$$, $d$$) {
						return $total$$ + $d$$.rx_bytes
					},
					0);
					$other$$.total_bytes = _.reduce($rest$$,
					function($total$$, $d$$) {
						return $total$$ + $d$$.total_bytes
					},
					0);
					$data$$.push($other$$)
				}
				this.data = _.filter($data$$,
				function($d$$) {
					return $d$$[$self$$.pie] > 0
				});
				_.map(this.data,
				function($d$$) {
					if (_.has($leases$$, $d$$.label)) $d$$.label = $leases$$[$d$$.label] + " - " + $d$$.label
				});
				this.sum = _.reduce(this.data,
				function($memo$$, $d$$) {
					return $memo$$ + $d$$[$self$$.pie]
				},
				0)
			} else this.sum = 0
		},
		colors: function($initial$$4_reset$$) {
			if (!this._colors ||
			$initial$$4_reset$$) {
				this.collection.size();
				var $initial$$4_reset$$ = [["#BD1550", "#E97F02"], ["#E97F02", "#FFCC00"], ["#FFCC00", "#B0C135"], ["#B0C135", "#1693A7"], ["#1693A7", "#7930AA"]],
				$result$$ = [];
				_.each($initial$$4_reset$$,
				function($colors$$3_scale$$) {
					for (var $colors$$3_scale$$ = d3.scale.linear().domain([0, 2]).range($colors$$3_scale$$), $i$$ = 0; 2 > $i$$; $i$$++) $result$$.push($colors$$3_scale$$($i$$))
				},
				this);
				$result$$.push($initial$$4_reset$$[$initial$$4_reset$$.length - 1][1]);
				$result$$ = "#BD1550 #E97F02 #FFCC00 #B0C135 #1693A7 #7930AA #A3A3A3 #A37434 #8A001D #B64C00 #4862A9".split(" ");
				this._colors = function $this$_colors$($index$$) {
					return void 0 !== $index$$ ? $result$$[$index$$] : $result$$
				}
			}
			return this._colors
		},
		updateCategory: function() {
			this.pie = this.$(":radio[name=bytes]:checked").val();
			UBNT.Utils.Cookies.set("ip_address_top_user_option", this.pie, 365);
			this.update()
		},
		config: function() {
			var $width$$ = this.width,
			$height$$ = this.height;
			return {
				width: $width$$,
				height: $height$$,
				radius: Math.min($width$$, $height$$) / 2,
				margin: {
					top: 30,
					right: 0,
					bottom: 10,
					left: 60
				},
				colors: this.colors()
			}
		}
	});
	EDGE.Views.TrafficAnalysis.UserTrafficData = Backbone.View.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = {};
			this.adds = [];
			this.container = $args$$.container;
			this.section = $args$$.section || "TrafficAnalysis";
			this.setElement($args$$.el || $("#TrafficAnalysisUserData"));
			this.template = _.template($("#TrafficAnalysisUserDataTemplate").html());
			this.dpi = $args$$.dpi;
			this.render()
		},
		render: function() {
			if (this.$el.data("rendered")) this.update();
			else {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template({
					section: this.section
				})).data("rendered", !0);
				this.$table = this.$("table").addClass("ip-table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "Search _INPUT_",
						sEmptyTable: "No users found.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						mDataProp: null,
						mData: null,
						sClass: "center",
						sWidth: "3em",
						sDefaultContent: '<span class="ui-button-icon-primary ui-icon ui-icon-triangle-1-e drill-down-control"></span>',
						bSortable: !1
					},
					{
						sClass: "ip",
						sWidth: "110px",
						sType: "ipv4-address-host",
						bRegex: !0
					},
					{
						sClass: "tx",
						sType: "num-unit",
						sWidth: "100px"
					},
					{
						sClass: "rx",
						sType: "num-unit",
						sWidth: "100px"
					},
					{
						sClass: "tx_bytes",
						sType: "num-unit",
						sWidth: "100px"
					},
					{
						sClass: "rx_bytes",
						sType: "num-unit",
						sWidth: "100px"
					}],
					iDisplayLength: 10,
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					bPaginate: !0,
					bScrollCollapse: !0,
					sScrollY: 100,
					aaSorting: [[1, "asc"]],
					sDom: '<"H"fr>t<"F"ip>',
					fnDrawCallback: function() {
						$(".dataTables_filter  input").attr("id", "traffic_analysis_table_search_box")
					}
				},
				this.options.options || {}));
				var $self$$ = this;
				_.each(this.collection.models,
				function($user$$) {
					$self$$.rows[$user$$.ip] || ($self$$.add($user$$), $self$$.lazyResize())
				})
			}
			return this
		},
		filter: function($filter$$) {
			this.$("#traffic_analysis_table_search_box").val($filter$$);
			this.$("#traffic_analysis_table_search_box").trigger("keyup")
		},
		add: function($user$$) {
			var $self$$ = this;
			this.rows[$user$$.get("ip")] = new EDGE.Views.TrafficAnalysis.UserTrafficData.Row({
				model: $user$$,
				draw: !1,
				container: this.container,
				dataTable: this.dataTable,
				adds: this.adds,
				table: this,
				dpi: this.dpi
			});
			this.rows[$user$$.get("ip")].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		remove: function($row$$58_user$$) {
			if (this.dataTable) {
				var $id$$ = $row$$58_user$$.get("ip");
				if ($row$$58_user$$ = this.rows[$id$$]) {
					$row$$58_user$$.reset();
					this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$58_user$$.el));
					delete this.rows[$id$$];
					var $self$$ = this;
					_.each($self$$.rows,
					function($row$$) {
						$row$$.model.get("parent") == $id$$ && ($row$$.reset(), $self$$.dataTable.fnDeleteRow($self$$.dataTable.fnGetPosition($row$$.el)), delete $self$$.rows[$id$$])
					});
					this.lazyResize()
				}
			}
		},
		wipe: function() {
			this.$table.fnClearTable()
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") :
				this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.$table.fnStandingRedraw();
				$settings$$.oScroll.sY = this.$table.parents(".ui-layout-pane").height() - this.$table.parents(".table-container").height();
				this.$table.fnStandingRedraw()
			}
		},
		reset: function() {},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		}
	});
	EDGE.Views.TrafficAnalysis.UserTrafficData.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.TrafficAnalysis.UserTrafficData.Row",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.dpi = $args$$.dpi;
			this.table = $args$$.table;
			this.drillDownTemplate = _.template($("#TrafficAnalysisUserDrillDownTemplate").html());
			this.isDrillDownOpen = !1;
			this.adds = $args$$.adds;
			this.container = $args$$.container;
			this.model.bind("change", this.updateGraph, this);
			this.bind("render",
			function() {
				this.unbind("render");
				this.table.lazyResize()
			});
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$);
			this.specialColumns = [0]
		},
		data: function() {
			var $tx$$ = this.model.get("stats").get("tx").bps,
			$rx$$ = this.model.get("stats").get("rx").bps,
			$tx_bytes$$ = this.model.get("stats").get("tx").bytes,
			$rx_bytes$$ = this.model.get("stats").get("rx").bytes,
			$ip$$ = this.model.get("ip");
			leases = this.container.leases ? this.container.leases: [];
			return ["", _.has(leases, $ip$$) ? leases[$ip$$] + " - " + $ip$$:
			$ip$$, EDGE.getNumWithUnit(8 * $tx$$, "bps"), EDGE.getNumWithUnit(8 * $rx$$, "bps"), EDGE.getNumWithUnit($tx_bytes$$, "bytes"), EDGE.getNumWithUnit($rx_bytes$$, "bytes")]
		},
		render: function() {
			this.$el.data("rendered") || (this.$el.html(this.template).data("rendered", !0), this.$el.bind("click", this._controlClickHandler));
			this.$arrow = this.$("span.drill-down-control");
			this.trigger("render");
			return this
		},
		_controlClickHandler: function() {
			var $$target$$ = this.$arrow,
			$row$$ = $$target$$[0].parentNode.parentNode,
			$self$$ = this;
			this.components = {};
			this.isDrillDownOpen ? (this.detailsRow = null, $$target$$.removeClass("ui-icon-triangle-1-s"), $(".inner-details", $($row$$).next()[0]).slideUp(200,
			function() {
				$self$$.dataTable.fnClose($row$$);
				$self$$.dataTable.fnDraw(!1);
				$self$$.isDrillDownOpen = !1
			})) : ($$target$$.addClass("ui-icon-triangle-1-s"), this.detailsRow = this.dataTable.fnOpen($row$$, this._renderDetails(), "details"), $(".inner-details", this.detailsRow).show(), this.dataTable.fnDraw(!1), $(".inner-details", this.detailsRow).hide().slideDown(200,
			function() {
				$self$$.isDrillDownOpen = !0;
				$self$$.addListenerToTicks()
			}))
		},
		removeConfig: function($config$$) {
			_.each(this.adds,
			function($a$$, $i$$) {
				$a$$.id === $config$$.id && this.adds.splice($i$$, 1)
			},
			this)
		},
		config: function() {
			return {
				graph: {
					height: 15,
					width: 400
				},
				margin: {
					top: 5,
					right: 0,
					bottom: 0,
					left: 20
				},
				axis: {
					width: 100
				},
				colors: ["#BD1550", "#E97F02"]
			}
		},
		updateGraph: function() {
			this.isDrillDownOpen && (this.processData(), this._renderGraph($(this.detailsRow)), this.addListenerToTicks())
		},
		_renderDetails: function() {
			var $$innerDetails$$ =
			$(this.drillDownTemplate(this.model.attributes));
			this.processData();
			$$innerDetails$$.addClass(this.$el.attr("class"));
			this._renderGraph($$innerDetails$$);
			return $("<div>").append($$innerDetails$$).html()
		},
		addListenerToTicks: function() {
			var $self$$ = this;
			$(this.detailsRow).find(".tick text").each(function() {
				var $$this$$ = $(this);
				if ("link" == d3.select(this).attr("class")) $$this$$.off().on("click",
				function() {
					var $$tick_config$$ = $(this);
					$$tick_config$$.data("label");
					$$tick_config$$ = {
						id: $$tick_config$$.data("label").split(" ").join("") +
						"__" + $self$$.adds.length,
						app: $$tick_config$$.data("label"),
						dpi: $self$$.dpi,
						readonly: $self$$.readonly,
						row: $self$$
					};
					$self$$.adds.push(new EDGE.Views.TrafficAnalysis.AddApplicationDialog($$tick_config$$));
					$self$$.container.views.category.disableActions();
					$self$$.container.views.category.setAction(!1)
				})
			})
		},
		_renderGraph: function($$container$$) {
			this._renderBars($$container$$, "topapps")
		},
		_renderBars: function($$container$$, $className$$) {
			var $$div$$1_column$$ = $$container$$.find("." + $className$$),
			$components$$ =
			this.components,
			$config$$ = this.config(),
			$height$$ = this[$className$$].length * $config$$.graph.height,
			$totalHeight$$ = $height$$ + $config$$.margin.top + $config$$.margin.bottom,
			$data$$ = this[$className$$],
			$total_bytes$$ = this.model.get("stats").get("tx").bytes + this.model.get("stats").get("rx").bytes;
			$components$$.mapAxis = function $$components$$$mapAxis$($d$$) {
				return $d$$.label + " (" + ($total_bytes$$ ? (100 * (($d$$.tx_bytes + $d$$.rx_bytes) / $total_bytes$$)).toFixed(2) : "0") + "%) "
			};
			var $longest$$ = _.reduce($data$$,
			function($memo$$,
			$d$$) {
				return Math.max($components$$.mapAxis($d$$).length, $memo$$)
			},
			0);
			$config$$.axis.width = 5.5 * $longest$$;
			$components$$.yScale = d3.scale.ordinal().rangeRoundBands([0, $height$$]).domain($data$$.map(function($d$$) {
				return $components$$.mapAxis($d$$)
			}));
			$components$$.labelMapping = {};
			_.each($data$$,
			function($d$$) {
				$components$$.labelMapping[$components$$.mapAxis($d$$)] = $d$$.label
			});
			$components$$.yAxis = d3.svg.axis().scale($components$$.yScale).outerTickSize(0).orient("left");
			$$div$$1_column$$.find("svg").length &&
			$$div$$1_column$$.find("svg").remove();
			$components$$.container = d3.select($$div$$1_column$$[0]).append("svg").attr("width", $config$$.graph.width + $config$$.margin.left + $config$$.margin.right + $config$$.axis.width).attr("height", $totalHeight$$);
			$$div$$1_column$$ = $data$$[0].tx_bytes + $data$$[0].rx_bytes;
			$data$$[$data$$.length - 1] && ($$div$$1_column$$ = Math.max($$div$$1_column$$, $data$$[$data$$.length - 1].tx_bytes + $data$$[$data$$.length - 1].rx_bytes));
			$data$$[$data$$.length - 2] && ($$div$$1_column$$ = Math.max($$div$$1_column$$,
			$data$$[$data$$.length - 2].tx_bytes + $data$$[$data$$.length - 2].rx_bytes));
			$components$$.xScale = d3.scale.linear().range([0, $config$$.graph.width - 150]).domain([0, $$div$$1_column$$]);
			$components$$.graph = $components$$.container.append("g").attr("class", "graph").attr("transform", "translate(" + ($config$$.axis.width + $config$$.margin.left) + "," + $config$$.margin.top + ")");
			$components$$.graph.append("g").attr("class", "y axis").attr("transform", "translate(0,0)").call($components$$.yAxis).selectAll(".tick text").attr("data-label",
			function($d$$) {
				return $components$$.labelMapping[$d$$]
			}).attr("class",
			function($d$$54_label$$) {
				$d$$54_label$$ = $components$$.labelMapping[$d$$54_label$$];
				return "Other" == $d$$54_label$$ || "Web - Other" == $d$$54_label$$ ? "": "link"
			});
			$components$$.datasets = $components$$.graph.append("g").attr("class", "datasets").attr("transform", "translate(0, 0)");
			$$div$$1_column$$ = $components$$.datasets.append("g").attr("class", "column");
			$$div$$1_column$$.selectAll(".tx").data($data$$).enter().append("rect").attr("class",
			"tx").attr("x", 0).attr("y",
			function($d$$) {
				return $components$$.yScale($components$$.mapAxis($d$$))
			}).attr("height",
			function() {
				return $config$$.graph.height - 1
			}).attr("width",
			function($d$$) {
				return $components$$.xScale($d$$.tx_bytes)
			}).style("fill",
			function() {
				return $config$$.colors[0]
			});
			$$div$$1_column$$.selectAll(".rx").data($data$$).enter().append("rect").attr("class", "rx").attr("x",
			function($d$$) {
				return $components$$.xScale($d$$.tx_bytes)
			}).attr("y",
			function($d$$) {
				return $components$$.yScale($components$$.mapAxis($d$$))
			}).attr("height",
			function() {
				return $config$$.graph.height - 1
			}).attr("width",
			function($d$$) {
				return $components$$.xScale($d$$.rx_bytes)
			}).style("fill",
			function() {
				return $config$$.colors[1]
			});
			$$div$$1_column$$.selectAll(".bytes").data($data$$).enter().append("text").attr("class", "bytes").attr("text-anchor", "start").attr("x",
			function($d$$) {
				return $components$$.xScale($d$$.tx_bytes + $d$$.rx_bytes) + 5
			}).attr("y",
			function($d$$) {
				return $components$$.yScale($components$$.mapAxis($d$$)) + $config$$.graph.height / 2 + 2
			}).attr("font-size",
			"10px").text(function($d$$) {
				return EDGE.getNumWithUnit($d$$.tx_bytes, "bytes") + "/" + EDGE.getNumWithUnit($d$$.rx_bytes, "bytes")
			})
		},
		processData: function() {
			var $apps$$ = this.model.get("apps").toJSON();
			this.topapps = this.container._sortApps($apps$$)
		}
	});
	EDGE.Views.TrafficAnalysis.AddApplicationDialog = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			this.template = _.template($("#TrafficAnalysisAddApplicationTemplate").html());
			this.id = "addapp" + $args$$.id;
			this.app = $args$$.app;
			this.dpi = $args$$.dpi;
			this.row = $args$$.row;
			this.title = "App Configuration";
			this.type = "traffic_analysis_app";
			this.category_collection = this.dpi.get("categories");
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		templateVars: function() {
			return {
				app: this.app
			}
		},
		validation: function() {
			var $all_cats$$ = [];
			this.category_collection.each(function($cat$$) {
				$all_cats$$.push($cat$$.get("name"))
			});
			return {
				rules: {
					existing: {
						required: !0
					},
					"new-cat": {
						required: !0,
						noWhiteSpace: !0,
						noQuotes: !0,
						notAmong: $all_cats$$,
						validCategory: !0,
						maxlength: 31
					}
				}
			}
		},
		render: function() {
			var $self$$ = this;
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.$form = this.$el.find("form");
			this.$select = this.$el.find("select[name=existing]");
			this.old_cat = "";
			this.category_collection.each(function($cat$$) {
				var $cat_name$$ =
				$cat$$.get("name");
				this.$select.append($("<option></option>").attr("value", $cat_name$$).text($cat_name$$));
				_.each($cat$$.get("apps"),
				function($app$$) {
					$app$$.toLowerCase() === this.app.toLowerCase() && (this.old_cat = $cat$$.get("name"), this.$select.val($cat_name$$))
				},
				this)
			},
			this);
			this.$select.on("change",
			function() {
				var $$this$$ = $(this);
				"create-new-category" == $$this$$.val() ? ($$this$$.after($("<input />").attr("type", "text").attr("name", "new-cat").addClass("new-line")), $self$$.$newCat = $$this$$.next()) : ($$this$$.next("input[name=new-cat]").remove(),
				$$this$$.next(".error").remove(), $self$$.$newCat = null)
			}).trigger("change");
			this.readonly && (this.$(".select.readonly").text(this.old_cat), this.$("input[name=new-cat]").remove())
		},
		prepareSave: function($batch$$) {
			this.new_cat = "";
			var $changed$$ = !0;
			this.new_cat = this.$newCat ? this.$newCat.val() : this.$select.val();
			this.old_cat == this.new_cat && ($changed$$ = !1);
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			this.p = ["system", "traffic-analysis", "custom-category"];
			var $app$$ = this.app;
			this.old_cat && (this.p.push(this.old_cat), this.p.push("name"), $batch$$.get("gdelete").put(this.p, $app$$, null), this.p.pop(), this.p.pop());
			this.p.push(this.new_cat);
			this.p.push("name");
			$batch$$.get("gset").put(this.p, $app$$, null);
			this.p.pop();
			this.p.pop();
			return $changed$$
		},
		save: function($batch$$89_e$$) {
			$batch$$89_e$$ && $batch$$89_e$$.preventDefault();
			var $self$$ = this;
			this.dialog.removeClass("saved success error");
			$batch$$89_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$89_e$$) && (this.dialog.addClass("saving"),
			$batch$$89_e$$.save(["system"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.dialog.addClass("error")
				},
				complete: function() {
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		},
		response: function($p$$26_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $p$$26_resp$$),
			$c$$ = $p$$26_resp$$.COMMIT && 1 != $p$$26_resp$$.COMMIT.failure;
			$p$$26_resp$$.SET &&
			$p$$26_resp$$.SET.success && $c$$ ? (this.p.unshift("GET"), $p$$26_resp$$ = EDGE.getObjProp($p$$26_resp$$, this.p), this.p.shift(), $p$$26_resp$$ && (this.category_collection["import"]($p$$26_resp$$), this.dialog.addClass("saved success"), this.remove())) : this.dialog.addClass("error");
			return $response$$
		},
		remove: function() {
			EDGE.Views.Global.Abstract.Config.prototype.remove.call(this);
			this.row.removeConfig(this);
			_.isEmpty(this.row.adds) && (this.row.container.views.category.enableActions(), this.row.container.views.category.setAction(!0))
		}
	});
	EDGE.Routers.Qos = EDGE.Routers.Global.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Routers.Qos",
		routes: {
			QoS: "index",
			"QoS/SmartQueue": "smartQueue",
			"QoS/AdvancedQueue": "advancedQueue"
		},
		initialize: function($data$$) {
			this.debug("initialize QoS router");
			if ("object" != typeof EDGE.Views.Qos) throw "Missing QoS views";
			this.app = $data$$.app;
			this.views = {};
			this.views._container = new EDGE.Views.Qos.Container
		},
		showTab: function($subtab$$) {
			var $$tab$$ = $("li#NavQos");
			$$tab$$.hasClass("ui-state-active") || ($$tab$$.find("a").trigger("click"),
			null != $subtab$$ && this.views._container.$(".section-tabs").tabslite("show", $subtab$$))
		},
		index: function() {
			this.debug("forwarding to the smart queue page");
			this.navigate("QoS/SmartQueue", !0);
			this.views._container.$(".section-tabs").tabslite("show", 0)
		},
		smartQueue: function() {
			this.showTab(0);
			this.views.smartQueue ? this.views.smartQueue.render() : this.views.smartQueue = new EDGE.Views.Qos.SmartQueue;
			this.views.smartQueue && this.views.smartQueue.filter("feature", ".Sql")
		},
		advancedQueue: function() {
			this.showTab(1);
			this.views.advancedQueue ? this.views.advancedQueue.render() : this.views.advancedQueue = new EDGE.Views.Qos.AdvancedQueue.Default ({
				model: this.app.data.view.get("qos").get("advanced"),
				dpicategories: this.app.data.view.get("system").get("dpi").get("categories"),
				interfaces: this.app.data.view.get("interfaces")
			})
		}
	});
	EDGE.Views.Qos = EDGE.Views.Qos || {};
	EDGE.Views.Qos.AdvancedQueue = {};
	EDGE.Views.Qos.Container = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.Container",
		initialize: function() {
			this.setElement($("#Qos"));
			this.render()
		},
		render: function() {
			this.$el.data("rendered") || (this.$(".section-tabs").tabslite({
				init: function($anchors$$) {
					_.each($anchors$$,
					function($$anchor$$17_anchor$$) {
						var $$anchor$$17_anchor$$ = $($$anchor$$17_anchor$$),
						$location$$ = window.location.hash,
						$filtered$$ = $location$$.indexOf("/filter/"); - 1 != $filtered$$ && ($location$$ = $location$$.substring(0, $filtered$$));
						$$anchor$$17_anchor$$.attr("href") == $location$$ && $$anchor$$17_anchor$$.trigger("show")
					})
				},
				content: function($$anchor$$) {
					return $("#" + $$anchor$$.data("container"))
				}
			}), this.$el.data("rendered", !0));
			return this
		},
		reset: function() {
			this.debug("resetting QoS container")
		}
	});
	EDGE.Views.Qos.SmartQueue = EDGE.Views.Global.WizardBase.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.SmartQueue",
		initialize: function($args$$) {
			this.setElement($("#Qos .section-container #QosSmartQueue"));
			this.template = _.template($("#QosSmartQueueTemplate").html());
			this.$el.html(this.template());
			this.$el.prepend('<div class="loading"></div>');
			EDGE.Views.Global.WizardBase.prototype.initialize.call(this, $args$$);
			this.render();
			this.loadCollection();
			this.addLabel = "Add Interface"
		},
		render: function() {
			$(document).off("change",
			"select.has-other");
			EDGE.Views.Global.WizardBase.prototype.render.call(this);
			return this
		},
		setContent: function() {
			this.$form = this.$("form")
		},
		infotip: function($elem$$) {
			$elem$$.infotip({
				position: {
					left: 0,
					top: 7
				}
			})
		},
		reset: function($soft$$) {
			this.debug("resetting smart queue");
			$soft$$ ? (this.model = null, this.flagActive()) : (this.undelegateEvents(), $(document).off("change", "select.has-other"), this.$el.data("rendered", !1), this.$el.empty())
		},
		populateAddable: function($$addable$$, $data$$) {
			for (var $$add$$ = $$addable$$.children("button.addable-add"),
			$$container$$ = $$addable$$.children(".addable-container"), $size$$ = $data$$.length, $i$$ = 0; $i$$ < $size$$; $i$$++) $$add$$.trigger("click", !0);
			_.each($$container$$.children(".addable-template"),
			function($item$$, $num$$) {
				var $d$$ = $data$$[$num$$];
				if (_.isObject($d$$)) {
					if (_.has($d$$, "rate-up")) {
						var $matches$$ = $d$$["rate-up"].match(/^([0-9]*\.?[0-9]+)(\*8)$/);
						$matches$$ && ($d$$["rate-up"] = 8 * Number($matches$$[1]))
					}
					_.has($d$$, "rate-down") && ($matches$$ = $d$$["rate-down"].match(/^([0-9]*\.?[0-9]+)(\*)([0-9]+)$/)) && ($d$$["rate-down"] =
					Number($matches$$[1]) * $matches$$[3])
				}
				this.populateForm(_.isObject($d$$) ? $d$$: [$d$$], $($item$$))
			},
			this)
		},
		collapse: function() {
			this.$form.find("fieldset.primary").each(function() {
				var $$fieldset$$ = $(this);
				$(this).find("legend.advance").after($('<label class="label-advance"><input type="checkbox" class="show-advance" name="show-advance" /><span>Show advanced options</span></label>'));
				var $advance$$ = $$fieldset$$.find(":checkbox.show-advance");
				$advance$$.on("change",
				function() {
					$this = $(this);
					$this.is(":checked") ?
					$$fieldset$$.find("div.advance-container").removeClass("hidden") : $$fieldset$$.find("div.advance-container").addClass("hidden")
				});
				$advance$$.prop("checked", !1);
				$advance$$.trigger("change")
			})
		},
		cloneTrigger: function($$clone$$) {
			EDGE.Views.Global.WizardBase.prototype.cloneTrigger.apply(this, arguments);
			var $$up$$ = $$clone$$.find("input[name^=up]"),
			$$down$$ = $$clone$$.find("input[name^=down]");
			$$up$$.on("change", this._restrictionHandler).trigger("change");
			$$down$$.on("change", this._restrictionHandler).trigger("change")
		},
		_restrictionHandler: function($$this$$48_event$$) {
			var $$this$$48_event$$ = $($$this$$48_event$$.target),
			$$content$$ = $$this$$48_event$$.parent().next();
			$$this$$48_event$$.is(":checked") ? ($$content$$.find("span.ui-icon-info").remove(), $$content$$.show(), this.infotip($$content$$)) : $$content$$.hide()
		},
		startRouting: function() {
			this._stoppedRouting && (this._stoppedRouting = !1, $("#Navigation li a").off("click.smartQueue"), $("#Qos li a").off("click.smartQueue"), $("#NavSystem a").removeClass("disabled").off("click.smartQueue"))
		},
		stopRouting: function() {
			this._stoppedRouting || (this._stoppedRouting = !0, $("#Navigation li a").on("click.smartQueue", null, {
				trigger: !1
			},
			this.notifyRouting), $("#Qos li a").on("click.smartQueue", null, {
				trigger: !1
			},
			this.notifyRouting), $("#NavSystem a").addClass("disabled").on("click.smartQueue", null, {
				trigger: !0,
				url: Backbone.history.fragment
			},
			this.notifyRouting))
		},
		validate2: function() {
			var $valid$$ = !0,
			$msgs$$ = [],
			$prtcls$$ = [],
			$intfs$$ = [];
			this.$form.find("input[name^=protocol]").each(function() {
				var $val$$ = $(this).val();
				_.contains($prtcls$$, $val$$) ? ($valid$$ = !1, $msgs$$.push("Duplicate policy name: " + $val$$)) : $prtcls$$.push($val$$)
			});
			this.$form.find("select[name^=interfaces]").each(function() {
				var $$this$$ = $(this),
				$val$$ = $$this$$.val();
				"other" == $val$$ && ($val$$ = $$this$$.next().val());
				_.contains($intfs$$, $val$$) ? ($valid$$ = !1, $msgs$$.push("Interface conflicts: Cannot assign interface " + $val$$ + " to more than one smart-queue.")) : $intfs$$.push($val$$)
			});
			return ! $valid$$ ? ($(window).trigger("dialog", [$msgs$$.join("<br />"),
			"Validation error"]), !1) : !0
		}
	});
	EDGE.Views.Qos.AdvancedQueue.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.Default",
		initialize: function($args$$) {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.intfs_collection = $args$$.interfaces;
			this.dpicategories = $args$$.dpicategories;
			this.setElement($("#Qos #QosAdvancedQueue"));
			this.template = _.template($("#QosAdvancedQueueTemplate").html());
			this.layouts = {};
			this.views = {};
			this.render()
		},
		render: function() {
			this.$el.data("rendered") ?
			this.lazyResize() : (this.$el.html(this.template).data("rendered", !0), $(window).trigger("resize"), this.layouts.east = this.$el.layout({
				scrollToBookmarkOnLoad: !1,
				east: {
					size: 300,
					spacing_open: 5,
					spacing_closed: 5,
					resizeWithWindow: !1,
					onresize: this.lazyResize,
					onopen: this.lazyResize,
					onclose: this.lazyResize
				}
			}), this.views.qTree = new EDGE.Views.Qos.AdvancedQueue.Qtree({
				el: this.$("#QosAdvancedQueueCanvas .canvas"),
				config: this.config(),
				model: this.model,
				dpicategories: this.dpicategories,
				intfs_collection: this.intfs_collection
			}),
			this.views.qTypes = new EDGE.Views.Qos.AdvancedQueue.QTypes.Default ({
				el: this.$("#QosAdvancedQueueTypes"),
				model: this.model
			}));
			return this
		},
		config: function() {
			return {
				margin: {
					left: 20,
					right: 150,
					top: 20,
					bottom: 20
				}
			}
		},
		resize: function() {
			this.$el.data("rendered") && this.$el.is(":visible") && _.each(this.views,
			function($view$$) {
				$view$$.lazyResize && $view$$.lazyResize()
			})
		},
		reset: function() {
			this.$el.data("rendered", !1);
			_.each(this.views,
			function($view$$) {
				$view$$.reset()
			});
			this.layouts.east.removePane("east", !0, !0, !0);
			this.layouts.east.destroy();
			delete this.layouts.east;
			this.$el.empty()
		}
	});
	EDGE.Views.Qos.AdvancedQueue.QTypes = {};
	EDGE.Views.Qos.AdvancedQueue.QTypes.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.QTypes.Default",
		initialize: function() {
			_.bindAll(this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			this.template = _.template($("#QosAdvancedQueueTypesTemplate").html());
			this.collection = this.model.get("queueTypes");
			this.nodes_collection = this.model.get("nodes");
			this.collection.bind("add", this.add, this);
			this.collection.bind("remove", this.remove, this);
			this.rows = [];
			this.creates = [];
			this.render()
		},
		qtypeName: function($qtype$$) {
			return $qtype$$.replace("-", "_").toUpperCase()
		},
		render: function() {
			if (!this.$el.data("rendered")) {
				"undefined" !== typeof this.dataTable && this.dataTable.fnDestroy();
				this.$el.html(this.template).data("rendered", !0);
				this.$table = this.$("table").addClass("ip-table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
						sSearch: "_INPUT_",
						sEmptyTable: "No queue type found.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						sClass: "name"
					},
					{
						sClass: "type"
					},
					{
						sClass: "buttons",
						bSortable: !1,
						sWidth: "5em"
					}],
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					bPaginate: !1,
					bScrollCollapse: !0,
					sScrollY: 100,
					aaSorting: [[0, "asc"]],
					sDom: '<"H"fr>t<"F"ip>',
					fnDrawCallback: function() {
						$("#QosAdvancedQueueTypes .dataTables_filter input").attr("id", "qos_advanced_queue_types_table_search_box");
						$("#QosAdvancedQueueTypes .dataTables_filter input").attr("placeholder", "Search queue types")
					}
				},
				this.options.options || {}));
				if ("admin" == EDGE.Config.User.level) {
					var $self$$ = this;
					this.$adds && this.$adds.remove();
					this.$adds = new EDGE.Views.Qos.AdvancedQueue.QTypes.AddDropDownButton({
						container: this.$(".add"),
						table: this
					})
				} else this.$("div.add button").hide();
				$self$$ = this;
				_.each(this.collection.models,
				function($model$$) {
					$self$$.rows[$model$$.get("qid")] || ($self$$.add($model$$), $self$$.lazyResize())
				})
			}
			return this
		},
		create: function($qtype$$) {
			this.creates.push(new EDGE.Views.Qos.AdvancedQueue.QTypes.Config({
				id: this.creates.length,
				table: this,
				qtype: $qtype$$,
				collection: this.collection
			}))
		},
		add: function($model$$) {
			this.rows[$model$$.get("qid")] = new EDGE.Views.Qos.AdvancedQueue.QTypes.Row({
				model: $model$$,
				collection: this.collection,
				nodes_collection: this.nodes_collection,
				dataTable: this.dataTable,
				table: this
			});
			var $self$$ = this;
			this.rows[$model$$.get("qid")].bind("render",
			function() {
				this.unbind("render");
				$self$$.lazyResize()
			})
		},
		remove: function($model$$) {
			if (this.dataTable) {
				var $model$$ = $model$$.get("qid"),
				$row$$ = this.rows[$model$$];
				$row$$ &&
				($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$model$$], this.lazyResize())
			}
		},
		resize: function() {
			if (this.dataTable && this.$el.data("rendered") && this.$el.is(":visible")) {
				var $settings$$ = this.$table.fnSettings();
				$settings$$.fnRecordsDisplay() > $settings$$._iDisplayLength ? this.$table.parents(".dataTables_wrapper").removeClass("onepage") : this.$table.parents(".dataTables_wrapper").addClass("onepage");
				$settings$$.oScroll.sY = 1;
				this.$table.fnStandingRedraw();
				$settings$$.oScroll.sY = this.$table.parents(".ui-layout-pane").height() - this.$table.parents(".table-container").height();
				this.$table.fnStandingRedraw()
			}
		},
		update: function() {
			_.each(this.rows,
			function($row$$) {
				$row$$.update()
			});
			this.lazyResize()
		},
		enableActions: function() {
			this.$("button").removeAttr("disabled").removeClass("ui-state-disabled")
		},
		disableActions: function() {
			this.$("button").attr("disabled", "disabled").addClass("ui-state-disabled")
		},
		reset: function() {}
	});
	EDGE.Views.Qos.AdvancedQueue.QTypes.AddDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.QTypes.AddDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#QosAdvancedQueueTypesAddDropDownTemplate").html());
			this.container = $args$$.container;
			this.table = $args$$.table;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .add-fq-codel": "addFqCodel",
				"click .add-hfq": "addHfq",
				"click .add-sfq": "addSfq",
				"click .add-pfifo": "addPfifo"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			this.$el.children(".add-list");
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		addFqCodel: function() {
			this.table.create("fq-codel")
		},
		addHfq: function() {
			this.table.create("hfq")
		},
		addSfq: function() {
			this.table.create("sfq")
		},
		addPfifo: function() {
			this.table.create("pfifo")
		}
	});
	EDGE.Views.Qos.AdvancedQueue.QTypes.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.QTypes.Row",
		initialize: function($args$$) {
			this.table = $args$$.table;
			this.nodes_collection = $args$$.nodes_collection;
			this.bind("render",
			function() {
				this.unbind("render");
				this.table.lazyResize()
			});
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$);
			this.specialColumns = [2]
		},
		data: function() {
			return [this.model.get("qid"), this.table.qtypeName(this.model.get("subType")),
			""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ = this.$(".buttons");
			$$buttons$$.find("button").length || ("operator" == EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Qos.AdvancedQueue.QTypes.RowDropDownButton({
				container: this.$(".buttons"),
				row: this
			})));
			this.trigger("render");
			return this
		},
		config: function($readonly$$) {
			this.dialogs.config ?
			this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Qos.AdvancedQueue.QTypes.Config({
				model: this.model,
				collection: this.collection,
				readonly: $readonly$$,
				container: this.$(".buttons"),
				row: this,
				table: this.table
			})
		},
		deleteRow: function() {
			var $self$$ = this,
			$id$$ = $self$$.model.get("qid"),
			$valid$$ = !0,
			$node_id$$ = null;
			this.nodes_collection.each(function($node$$) {
				"leaf" === $node$$.get("type") && $node$$.get("queue-type") === $id$$ && ($valid$$ = !1, $node_id$$ = $node$$.get("qid"))
			});
			$valid$$ ? window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete queue type " + $id$$ + " ?",
				confirm: function() {
					$self$$["delete"]()
				}
			}) : $(window).trigger("dialog", [$id$$ + " is in use by leaf " + $node_id$$, "Validation error"]);
			return ! 1
		},
		"delete": function() {
			this.table.disableActions();
			var $batch$$ = new EDGE.Models.Batch;
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $self$$ = this;
			this.$el.find(".drop-down-button button").button("showWorkingIndicator", "secondary", "ui-icon-spinner");
			var $qid$$ = this.model.get("qid"),
			$p$$ = ["traffic-control", "advanced-queue", "queue-type", this.model.get("subType")];
			$batch$$.get("gdelete").put($p$$, $qid$$, null);
			$batch$$.save(["traffic-control"], {
				success: function($model$$, $resp$$) {
					EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
					var $c$$ = $resp$$.COMMIT && $resp$$.COMMIT.success && 1 != $resp$$.COMMIT.failure; (!$resp$$.DELETE || $resp$$.DELETE.success) && $c$$ ? $self$$.collection.remove($self$$.model) : $self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify",
					new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.table.enableActions();
					$self$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		}
	});
	EDGE.Views.Qos.AdvancedQueue.QTypes.RowDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.QTypes.RowDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#QosAdvancedQueueTypesDropDownTemplate").html());
			this.row = $args$$.row;
			this.container = $args$$.container;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionDelete: function() {
			this.row.deleteRow()
		},
		actionConfig: function() {
			this.row.config(!1);
			return ! 1
		}
	});
	EDGE.Views.Qos.AdvancedQueue.QTypes.Config = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.QTypes.Config",
		initialize: function($args$$) {
			_.bindAll(this);
			this.readonly = $args$$.readonly;
			this.template = _.template($("#QosAdvancedQueueTypeConfigTemplate").html());
			this.subType = this.model ? this.model.get("subType") : $args$$.qtype;
			this.table = $args$$.table;
			this.model ? (this.id = "qosadvancedconfig" + this.model.get("qid"), this.action = "edit", this.title = "Configuration for queue type " +
			this.model.get("qid")) : (this.id = "qosadvancedcreate", this.action = "create", this.title = "Create queue type " + this.table.qtypeName(this.subType));
			this.type = "qos-queue-type";
			this.multiplier = {
				bit: 1,
				bps: 8,
				k: 1E3,
				ki: 1024,
				m: 1E6,
				mi: 1048576,
				g: 1E9,
				gi: 1073741824,
				t: 1E12,
				ti: 8796093022208
			};
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		qtypeName: function($qtype$$) {
			return $qtype$$.replace("-", "_").toUpperCase()
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this,
			!0);
			this.$el.data("rendered") || (this.$el.data("rendered", !0), this.show(), this.delegateEvents());
			this.model ? this.$("form").find("input[name=qid]").remove() : this.$("form").find("span.qid").remove();
			this.flaggable = !1;
			this.model && this.update();
			this.flaggable = !0;
			return this
		},
		templateVars: function() {
			return {
				qid: this.model ? this.model.get("qid") : "",
				subType: this.table.qtypeName(this.subType)
			}
		},
		updatePropertyWithUnitBit: function($$form$$, $property$$) {
			EDGE.Views.Qos.AdvancedQueue.NodeConfig.prototype.updatePropertyWithUnit.call(this,
			$$form$$, $property$$)
		},
		updatePropertyWithUnitSec: function($$form$$, $property$$) {
			var $$unitSelect$$ = $$form$$.find("select[name=" + ($property$$ + "-unit") + "]"),
			$$property$$ = $$form$$.find("input[name=" + $property$$ + "]"),
			$$label$$ = $$form$$.find('label[for="' + $$property$$.attr("id") + '"]'),
			$unit$$3_val$$ = this.model.get($property$$);
			if (void 0 === $unit$$3_val$$) this.updateTextbox($$property$$, "", $$label$$),
			this.updateSelect($$unitSelect$$, "ms", $$label$$);
			else {
				var $matchUnit_num$$ = $unit$$3_val$$.match(/^([0-9]*(\.)?[0-9]+)(s|secs|ms|us)?$/);
				$matchUnit_num$$ && ($unit$$3_val$$ = $matchUnit_num$$[3], $matchUnit_num$$ = $matchUnit_num$$[1], $unit$$3_val$$ = $unit$$3_val$$ ? "s" === $unit$$3_val$$ ? "secs": $unit$$3_val$$: "ms", this.updateTextbox($$property$$, $matchUnit_num$$, $$label$$), this.updateSelect($$unitSelect$$, $unit$$3_val$$, $$label$$))
			}
		},
		comparePropertyWithUnit: function($v1$$, $v2$$) {
			EDGE.Views.Qos.AdvancedQueue.NodeConfig.prototype.comparePropertyWithUnit.call(this, $v1$$, $v2$$)
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=limit]"),
			this.model.get("limit"), $$form$$.find('label[for="' + $$form$$.find("input[name=limit]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=description]"), $.xss(this.model.get("description")), $$form$$.find('label[for="' + $$form$$.find("input[name=description]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=hash-interval]"), this.model.get("hash-interval"), $$form$$.find('label[for="' + $$form$$.find("input[name=hash-interval]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=queue-limit]"),
			this.model.get("queue-limit"), $$form$$.find('label[for="' + $$form$$.find("input[name=queue-limit]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=subnet]"), this.model.get("subnet"), $$form$$.find('label[for="' + $$form$$.find("input[name=subnet]").attr("id") + '"]'));
			this.updateSelect($$form$$.find("select[name=host-identifier]"), this.model.get("host-identifier"), $$form$$.find('label[for="' + $$form$$.find("select[name=host-identifier]").attr("id") + '"]'));
			this.updatePropertyWithUnitBit($$form$$,
			"max-rate");
			this.updateCheckbox($$form$$.find("input[name=ecn]"), "disable" != this.model.get("ecn"), $$form$$.find('label[for="' + $$form$$.find("input[name=ecn]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=flows]"), this.model.get("flows"), $$form$$.find('label[for="' + $$form$$.find("input[name=flows]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=quantum]"), this.model.get("quantum"), $$form$$.find('label[for="' + $$form$$.find("input[name=quantum]").attr("id") + '"]'));
			this.updatePropertyWithUnitSec($$form$$, "interval");
			this.updatePropertyWithUnitSec($$form$$, "target")
		},
		validation: function() {
			return {
				rules: {
					qid: {
						required: !0,
						notAmong: this.collection.map(function($m$$) {
							return $m$$.get("qid")
						}),
						noWhiteSpace: !0,
						noQuotes: !0
					},
					limit: {
						digits: !0,
						range: [1, 1E6]
					},
					"hash-interval": {
						digits: !0,
						range: [0, 4294967295]
					},
					"queue-limit": {
						digits: !0,
						range: [1, 127]
					},
					subnet: {
						required: !0,
						ipv4net: 1
					},
					"max-rate": {
						digits: !0
					},
					flows: {
						digits: !0,
						range: [1, 65535]
					},
					interval: {
						number: !0,
						rangeWithUnit: ["1m",
						"20", "s", -1]
					},
					quantum: {
						digits: !0,
						range: [256, 65535]
					},
					target: {
						number: !0,
						rangeWithUnit: ["10u", "10", "s", -1]
					}
				},
				messages: {
					interval: {
						rangeWithUnit: "Allowed interval range: 1ms - 20s"
					},
					target: {
						rangeWithUnit: "Allowed target range: 10us - 10s"
					}
				}
			}
		},
		prepareSave: function($batch$$) {
			function $changedAttrVal$$($attr$$, $hasUnit$$) {
				var $$a_val$$ = $$form$$.find("input[name=" + $attr$$ + "]"),
				$$a_val$$ = $hasUnit$$ && "" !== $$a_val$$.val() ? $$a_val$$.val() + $$form$$.find("select[name=" + $attr$$ + "-unit]").val() : $$a_val$$.val();
				if (!$self$$.model ||
				!($self$$.model.get($attr$$) === $$a_val$$ || "undefined" === typeof $self$$.model.get($attr$$) && "" === $$a_val$$)) return $self$$.changed = !0,
				$$a_val$$
			}
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $self$$ = this,
			$$form$$ = this.$("form"),
			$$qid_changedAttrs$$ = $$form$$.find("input[name=qid]");
			this.changed = !1;
			var $p$$ = this.model ? ["traffic-control", "advanced-queue", "queue-type", this.subType, this.model.get("qid")] : ["traffic-control", "advanced-queue", "queue-type", this.subType, $$qid_changedAttrs$$.val()],
			$$qid_changedAttrs$$ = {};
			if ("fq-codel" === this.subType) if ($$qid_changedAttrs$$.target = $changedAttrVal$$("target", !0), $$qid_changedAttrs$$.interval = $changedAttrVal$$("interval", !0), $$qid_changedAttrs$$.flows = $changedAttrVal$$("flows"), $$qid_changedAttrs$$.limit = $changedAttrVal$$("limit"), $$qid_changedAttrs$$.quantum = $changedAttrVal$$("quantum"), $$qid_changedAttrs$$.ecn = $$form$$.find("input[name=ecn]").is(":checked") ? "enable": "disable", this.model) {
				var $old_ecn$$ = this.model.get("ecn") || "enable";
				$$qid_changedAttrs$$.ecn ===
				$old_ecn$$ ? delete $$qid_changedAttrs$$.ecn: this.changed = !0
			} else this.changed = !0;
			else "hfq" === this.subType ? ($$qid_changedAttrs$$.description = $changedAttrVal$$("description"), $$qid_changedAttrs$$["max-rate"] = $changedAttrVal$$("max-rate", !0), $$qid_changedAttrs$$.subnet = $changedAttrVal$$("subnet"), $$qid_changedAttrs$$["host-identifier"] = $$form$$.find("select[name=host-identifier]").val(), this.model ? (this.model.get("host-identifier") || "sip") === $$qid_changedAttrs$$["host-identifier"] ? delete $$qid_changedAttrs$$["host-identifier"] :
			this.changed = !0: this.changed = !0) : "sfq" === this.subType ? ($$qid_changedAttrs$$.description = $changedAttrVal$$("description"), $$qid_changedAttrs$$["hash-interval"] = $changedAttrVal$$("hash-interval"), $$qid_changedAttrs$$["queue-limit"] = $changedAttrVal$$("queue-limit")) : "pfifo" === this.subType && ($$qid_changedAttrs$$.limit = $changedAttrVal$$("limit"));
			this.model || $batch$$.get("gset").put($p$$, null);
			$batch$$.get("gget").put($p$$, null);
			_.each($$qid_changedAttrs$$,
			function($val$$, $attr$$) {
				"undefined" !== typeof $val$$ &&
				("" === $val$$ ? $batch$$.get("gdelete").put($p$$, $attr$$, null) : ($batch$$.get("gset").put($p$$, $attr$$, $val$$, null), $batch$$.get("gset").put($p$$, $attr$$, "__FORCE_ASSOC", !0)))
			});
			return this.changed
		},
		save: function($batch$$92_e$$) {
			$batch$$92_e$$ && $batch$$92_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			var $self$$ = this,
			$batch$$92_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$92_e$$) && (this.dialog.addClass("saving"), this.disableActions(), this.table.disableActions(), $batch$$92_e$$.save(["traffic-control"],
			{
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.dialog.addClass("error")
				},
				complete: function() {
					$self$$.dialog && $self$$.dialog.removeClass("saving");
					$self$$.enableActions();
					$self$$.table.enableActions()
				}
			}))
		},
		response: function($p$$29_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $p$$29_resp$$),
			$c$$ = $p$$29_resp$$.COMMIT && $p$$29_resp$$.COMMIT.success &&
			1 != $p$$29_resp$$.COMMIT.failure;
			if ($p$$29_resp$$.SET && !$p$$29_resp$$.SET.success || !$c$$) return $response$$;
			$p$$29_resp$$ = EDGE.getObjProp($p$$29_resp$$, ["GET", "traffic-control", "advanced-queue"]);
			this.collection["import"]($p$$29_resp$$);
			this.dialog.addClass("saved success");
			this.remove();
			return $response$$
		},
		enableActions: function() {
			this.$("button").removeAttr("disabled").removeClass("ui-state-disabled")
		},
		disableActions: function() {
			this.$("button").attr("disabled", "disabled").addClass("ui-state-disabled")
		}
	});
	EDGE.Views.Qos.AdvancedQueue.Qtree = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.Qtree",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.lazyResize = _.debounce(this.resize, 10);
			this.intfs_collection = $args$$.intfs_collection;
			this.config = _.extend($args$$.config, {
				width: this.$el.width(),
				height: this.$el.height() - 20
			});
			this.nodes_collection = this.model.get("nodes");
			this.filters_collection = this.model.get("filters");
			this.queue_types_collection = this.model.get("queueTypes");
			this.dpicategories = $args$$.dpicategories;
			this.nodes_collection.on("change", this.update, this);
			this.nodes_collection.on("add", this.add, this);
			this.nodes_collection.on("remove", this.remove, this);
			this.components = {};
			this.panSpeed = 200;
			this.dragIsValid = !0;
			this.buildTreeData();
			this.render()
		},
		_collapse: function($d$$) {
			$d$$.children && ($d$$._children = $d$$.children, $d$$._children.forEach(this._collapse, this), $d$$.children = null)
		},
		_expand: function($d$$) {
			$d$$._children && ($d$$.children = $d$$._children, $d$$.children.forEach(this._expand,
			this), $d$$._children = null)
		},
		buildTreeData: function() {
			this.intfs_array = _.map(this.intfs_collection.toArray(),
			function($intf$$) {
				return $intf$$.get("id")
			});
			this.intfs_array.push("global");
			this.trees = this.nodes_collection.toTreeJSON();
			var $roots$$ = this.nodes_collection.filterByType("root");
			this.avail_intfs = _.map($roots$$.toArray(),
			function($root$$) {
				return $root$$.get("attach-to")
			});
			this.treeData = {
				qid: "config",
				undraggable: !0,
				children: []
			};
			_.each($roots$$.toArray(),
			function($root$$) {
				var $intf_obj_root_obj$$ =
				_.filter(this.trees,
				function($tree$$) {
					return $tree$$.qid === $root$$.get("qid")
				},
				this),
				$intf_obj_root_obj$$ = {
					qid: $root$$.get("attach-to"),
					undraggable: !0,
					children: $intf_obj_root_obj$$
				};
				$intf_obj_root_obj$$.children.forEach(this._collapse, this);
				this.treeData.children.push($intf_obj_root_obj$$)
			},
			this)
		},
		update: function($diffAttrs_options$$) {
			var $model$$ = $diffAttrs_options$$[0],
			$type$$ = $model$$.get("type"),
			$diffAttrs_options$$ = $diffAttrs_options$$[1];
			"root" === $type$$ ? this.updateRoot($model$$, $diffAttrs_options$$) :
			("branch" === $type$$ || "leaf" === $type$$) && this.updateBranch($model$$, $diffAttrs_options$$)
		},
		updateNode: function($trace$$, $node$$, $tree$$, $cb1$$, $cb2$$) {
			for (var $updated$$ = !1; ! _.isEmpty($trace$$);) {
				$trace$$.shift();
				if ($tree$$.children) var $children$$ = $tree$$.children;
				else $tree$$._children && ($children$$ = $tree$$._children);
				if ($children$$) _.each($children$$,
				function($child$$, $index$$) {
					_.isEmpty($trace$$) ? $child$$.qid === $node$$ && ($cb1$$ && $cb1$$($child$$, $index$$, $children$$, $tree$$), $updated$$ = !0) : $child$$.qid ===
					$trace$$[0] && ($tree$$ = $children$$[$index$$])
				});
				else break
			} ! $updated$$ && $cb2$$ && $cb2$$($tree$$);
			return $tree$$
		},
		updateBranch: function($model$$, $diffAttrs$$) {
			if ($diffAttrs$$.parent) {
				var $newTreeNode_oldTreeNode_p$$ = $diffAttrs$$.parent.old,
				$old_parent_param_parentModel_trace$$ = this.nodes_collection.filterById($newTreeNode_oldTreeNode_p$$);
				if ("root" === $old_parent_param_parentModel_trace$$.get("type")) var $old_trace$$ = ["config", $old_parent_param_parentModel_trace$$.get("attach-to"), $newTreeNode_oldTreeNode_p$$];
				else $old_parent_param_parentModel_trace$$ = this._traceNode(this.nodes_collection.filterById($newTreeNode_oldTreeNode_p$$)),
				$old_parent_param_parentModel_trace$$.trace.push($newTreeNode_oldTreeNode_p$$),
				$old_trace$$ = $old_parent_param_parentModel_trace$$.trace
			}
			var $node$$8_param$$ = this._traceNode($model$$),
			$old_parent_param_parentModel_trace$$ = $node$$8_param$$.trace,
			$node$$8_param$$ = $node$$8_param$$.node;
			$newTreeNode_oldTreeNode_p$$ && ($newTreeNode_oldTreeNode_p$$ = this.updateNode($old_trace$$, $node$$8_param$$,
			this.treeData,
			function($child$$, $index$$, $children$$, $tree$$) {
				$children$$.splice($index$$, 1);
				$children$$.length || (delete $tree$$._children, $tree$$.children = null)
			}), this.updateGraph($newTreeNode_oldTreeNode_p$$));
			$newTreeNode_oldTreeNode_p$$ = this.updateNode($old_parent_param_parentModel_trace$$, $node$$8_param$$, this.treeData,
			function($child$$) {
				_.each($diffAttrs$$,
				function($v$$, $k$$) {
					$child$$[$k$$] = $v$$["new"]
				})
			},
			function($children$$4_tree$$) {
				if ($children$$4_tree$$.children) $children$$4_tree$$ = $children$$4_tree$$.children;
				else if ($children$$4_tree$$._children) $children$$4_tree$$ = $children$$4_tree$$._children;
				else {
					$children$$4_tree$$.children = [];
					$children$$4_tree$$ = $children$$4_tree$$.children
				}
				var $obj$$ = $model$$.toTreeJSON();
				$obj$$.children = null;
				$children$$4_tree$$.push($obj$$)
			});
			this.updateGraph($newTreeNode_oldTreeNode_p$$)
		},
		updateRoot: function($model$$, $diffAttrs$$) {
			var $intf$$ = $diffAttrs$$["attach-to"] ? $diffAttrs$$["attach-to"].old: $model$$.get("attach-to"),
			$root$$ = this.treeData;
			if ($root$$.children) var $children$$ =
			$root$$.children;
			else $root$$._children && ($children$$ = $root$$._children);
			var $inTheTree$$ = !1;
			if ($children$$ && (_.each($children$$,
			function($child$$) {
				if ($child$$.qid == $intf$$) {
					$inTheTree$$ = !0;
					$diffAttrs$$["attach-to"] && ($child$$.qid = $diffAttrs$$["attach-to"]["new"]);
					if ($child$$.children) var $gc$$ = $child$$.children[0];
					else $child$$._children && ($gc$$ = $child$$._children[0]);
					$gc$$ && _.each($diffAttrs$$,
					function($v$$, $k$$) {
						$gc$$[$k$$] = $v$$["new"]
					})
				}
			}), !$inTheTree$$)) {
				var $intf_obj$$1_obj$$ = $model$$.toTreeJSON();
				$intf_obj$$1_obj$$.children = null;
				$intf_obj$$1_obj$$ = {
					qid: $model$$.get("attach-to"),
					children: [$intf_obj$$1_obj$$]
				};
				$children$$.push($intf_obj$$1_obj$$)
			}
			$root$$.x0 = this._calDimension().height / 2;
			$root$$.y0 = 0;
			this.updateGraph($root$$)
		},
		add: function($model$$) {
			var $param$$ = this._traceNode($model$$),
			$param$$ = this.updateNode($param$$.trace, $param$$.node, this.treeData, null,
			function($children$$6_tree$$) {
				$children$$6_tree$$.children || ($children$$6_tree$$._children ? ($children$$6_tree$$.children = $children$$6_tree$$._children,
				$children$$6_tree$$._children = null) : $children$$6_tree$$.children = []);
				var $children$$6_tree$$ = $children$$6_tree$$.children,
				$intf_obj$$2_obj$$ = $model$$.toTreeJSON();
				$intf_obj$$2_obj$$.children = null;
				"root" === $model$$.get("type") && ($intf_obj$$2_obj$$ = {
					qid: $model$$.get("attach-to"),
					children: [$intf_obj$$2_obj$$]
				});
				$children$$6_tree$$.push($intf_obj$$2_obj$$)
			});
			this.updateGraph($param$$)
		},
		remove: function($model$$151_param$$10_treeNode$$) {
			$model$$151_param$$10_treeNode$$ = this._traceNode($model$$151_param$$10_treeNode$$);
			$model$$151_param$$10_treeNode$$ = this.updateNode($model$$151_param$$10_treeNode$$.trace, $model$$151_param$$10_treeNode$$.node, this.treeData,
			function($child$$, $index$$, $children$$, $tree$$) {
				$children$$.splice($index$$, 1);
				$children$$.length || (delete $tree$$._children, $tree$$.children = null)
			});
			this.updateGraph($model$$151_param$$10_treeNode$$)
		},
		_traceNode: function($model$$152_node$$) {
			var $trace$$ = ["config"];
			if ("root" == $model$$152_node$$.get("type")) $model$$152_node$$ = $model$$152_node$$.get("attach-to");
			else {
				var $ancestors$$ = this.nodes_collection.findAncestors($model$$152_node$$);
				$trace$$.push($ancestors$$[0].get("attach-to"));
				_.each($ancestors$$,
				function($a$$) {
					$trace$$.push($a$$.get("qid"))
				},
				this);
				$model$$152_node$$ = $model$$152_node$$.get("qid")
			}
			return {
				trace: $trace$$,
				node: $model$$152_node$$
			}
		},
		deleteNode: function($nodeModel$$) {
			this.loadingAction(d3.select("g.q" + $nodeModel$$.get("qid") + " .ghostCircle"));
			var $offsprings_toDel$$ = this.nodes_collection.findOffsprings($nodeModel$$);
			_.map($offsprings_toDel$$,
			function($offspring$$) {
				return $offspring$$.get("qid")
			});
			var $nodesToDel$$ = _.union([$nodeModel$$], $offsprings_toDel$$),
			$filtersToDel$$ = _.union(this.filters_collection.filterByAttachTo($nodeModel$$.get("qid")).toArray(), this.filters_collection.filterByTarget($nodeModel$$.get("qid")).toArray(), this.filters_collection.filterByAttachTo(_.map($offsprings_toDel$$,
			function($offspring$$) {
				return $offspring$$.get("qid")
			})).toArray(), this.filters_collection.filterByTarget(_.map($offsprings_toDel$$,
			function($offspring$$) {
				return $offspring$$.get("qid")
			})).toArray()),
			$offsprings_toDel$$ = _.union($nodesToDel$$, $filtersToDel$$),
			$self$$ = this,
			$batch$$ = new EDGE.Models.Batch;
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			_.each($offsprings_toDel$$,
			function($modelToDel_p$$) {
				$modelToDel_p$$ = ["traffic-control", "advanced-queue", $modelToDel_p$$.get("type"), $modelToDel_p$$.get("subType"), $modelToDel_p$$.get("qid")];
				$batch$$.get("gdelete").put($modelToDel_p$$, null)
			},
			this);
			$batch$$.save(["traffic-control"], {
				success: function($model$$, $resp$$) {
					EDGE.Views.Global.Abstract.Config.prototype.response.call(this,
					$resp$$);
					var $c$$ = $resp$$.COMMIT && $resp$$.COMMIT.success && 1 != $resp$$.COMMIT.failure;
					if ((!$resp$$.DELETE || $resp$$.DELETE.success) && $c$$) $self$$.nodes_collection.remove($nodesToDel$$, {
						silent: !0
					}),
					$self$$.nodes_collection.trigger("remove", $nodeModel$$),
					$self$$.filters_collection.remove($filtersToDel$$, {
						silent: !0
					})
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.clearLoading()
				}
			})
		},
		response: function($p$$32_resp$$) {
			var $response$$ =
			EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $p$$32_resp$$);
			$p$$32_resp$$ && $p$$32_resp$$.GET && $p$$32_resp$$.GET["traffic-control"] ? ($p$$32_resp$$ = EDGE.getObjProp($p$$32_resp$$, ["GET", "traffic-control", "advanced-queue"]), this.nodes_collection["import"]($p$$32_resp$$)) : $(window).trigger("notify", new EDGE.Models.Notice({
				type: "error",
				notice: Msg.E_NoResponse
			}));
			return $response$$
		},
		render: function() {
			this.rendered || (this.renderGraph(), this.rendered = !0)
		},
		_calDimension: function() {
			var $config$$ =
			this.config;
			return {
				height: $config$$.height - $config$$.margin.top - $config$$.margin.bottom,
				width: $config$$.width - $config$$.margin.left - $config$$.margin.right
			}
		},
		validDrag: function() {
			var $components$$ = this.components;
			if ($components$$.draggingNode) {
				var $node$$ = $components$$.draggingNode.parent.qid;
				$components$$.selectedNode && $components$$.selectedNode.qid === $node$$ && ($components$$.selectedNode = null);
				$components$$.filtersToDel = [];
				var $node$$ = this.nodes_collection.filterById($components$$.draggingNode.qid),
				$node_ids$$ = [$components$$.draggingNode.qid];
				_.each(this.nodes_collection.findOffsprings($node$$),
				function($offspring$$) {
					$node_ids$$.push($offspring$$.get("qid"))
				});
				this.filters_collection.filterByTarget($node_ids$$).each(function($filter$$) {
					var $p$$ = $filter$$.get("attach-to");
					_.contains($node_ids$$, $p$$) || $components$$.filtersToDel.push($filter$$.get("qid"))
				})
			}
		},
		renderGraph: function() {
			var $components$$ = this.components,
			$config$$35_root$$ = this.config,
			$self$$ = this;
			$components$$.index = 0;
			$components$$.duration =
			500;
			$components$$.panBoundary = 20;
			$components$$.canvas = d3.select(this.$el[0]).append("svg");
			$components$$.container = $components$$.canvas.append("g").attr("transform", "translate(" + $config$$35_root$$.margin.left + "," + $config$$35_root$$.margin.top + ")");
			$components$$.tree = d3.layout.tree();
			$config$$35_root$$ = this.treeData;
			$config$$35_root$$.x0 = this._calDimension().height / 2;
			$config$$35_root$$.y0 = 0;
			$components$$.selectedNode = null;
			$components$$.draggingNode = null;
			$components$$.zoomListener = d3.behavior.zoom().scaleExtent([0.1,
			3]).on("zoom",
			function() {
				$self$$.components.container.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")")
			});
			$components$$.dragListener = d3.behavior.drag().on("dragstart",
			function($d$$) {
				$d$$.undraggable || "root" === $d$$.type || ($components$$.dragStarted = !0, $components$$.nodes = $components$$.tree.nodes($d$$), d3.event.sourceEvent.stopPropagation())
			}).on("drag",
			function($d$$) {
				if (! ($d$$.undraggable || "root" === $d$$.type)) {
					$components$$.dragStarted && ($components$$.domNode = this, $self$$.initiateDrag($d$$,
					$components$$.domNode));
					var $$canvas$$ = $($components$$.canvas[0]),
					$relCoords$$ = d3.mouse($$canvas$$.get(0));
					if ($relCoords$$[0] < $components$$.panBoundary) $components$$.panTimer = !0,
					$self$$._pan(this, "left");
					else if ($relCoords$$[0] > $$canvas$$.width() - $components$$.panBoundary) $components$$.panTimer = !0,
					$self$$._pan(this, "right");
					else if ($relCoords$$[1] < $components$$.panBoundary) componets.panTimer = !0,
					$self$$._pan(this, "up");
					else if ($relCoords$$[1] > $$canvas$$.height() - $components$$.panBoundary) $components$$.panTimer =
					!0,
					$self$$._pan(this, "down");
					else try {
						clearTimeout($components$$.panTimer)
					} catch($e$$) {}
					$d$$.x0 += d3.event.dy;
					$d$$.y0 += d3.event.dx;
					d3.select(this).attr("transform", "translate(" + $d$$.y0 + "," + $d$$.x0 + ")");
					$self$$.updateTempConnector()
				}
			}).on("dragend",
			function() {
				$self$$.validDrag();
				$components$$.domNode = this;
				if ($components$$.selectedNode) {
					$components$$.showConfirm = !0;
					var $$msg$$ = $("<div></div>").addClass("filter").append($("<div>Are you sure to attach node " + $components$$.draggingNode.qid + " to node " +
					$components$$.selectedNode.qid + "?</div>")).append("<br />");
					if (!_.isEmpty($components$$.filtersToDel)) {
						$$msg$$.append($("<div>Following filters will be deleted:</div>"));
						var $$ul$$ = $("<ul></ul>").appendTo($$msg$$);
						_.each($components$$.filtersToDel,
						function($filter$$) {
							$("<li></li>").text($filter$$).appendTo($$ul$$)
						})
					}
					window.app.dialogs.confirmationDialog.open({
						title: "Change Confirmation",
						message: $$msg$$,
						confirm: function() {
							this.loadingAction(d3.select($components$$.targetCircle));
							this.saveDrag()
						}.bind($self$$),
						deny: function() {
							$components$$.showConfirm = !1;
							this.endDrag()
						}.bind($self$$)
					})
				} else $self$$.endDrag()
			});
			$components$$.canvas.call($components$$.zoomListener);
			this.resize();
			this.updateGraph($config$$35_root$$);
			this.centerNode($config$$35_root$$)
		},
		loadingAction: function($domNode$$) {
			$domNode$$.attr("class", "ghostCircle show");
			var $colors$$ = ["#d8c71b", "#d34a29", "#63aa6e"],
			$i$$ = 0;
			this.intervalId = setInterval(function() {
				$i$$ %= 3;
				$domNode$$.style("fill", $colors$$[$i$$]);
				$i$$++
			},
			300);
			d3.selectAll("g.node").attr("pointer-events",
			"none")
		},
		clearLoading: function($domNode$$) {
			clearInterval(this.intervalId);
			$domNode$$ && $domNode$$.style("fill", "red");
			d3.selectAll("g.node").attr("pointer-events", "")
		},
		saveDrag: function() {
			var $self$$ = this,
			$components$$ = this.components,
			$batch$$ = new EDGE.Models.Batch;
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $p$$ = ["traffic-control", "advanced-queue", $components$$.draggingNode.type, "queue", $components$$.draggingNode.qid];
			$batch$$.get("gget").put($p$$, null);
			$batch$$.get("gset").put($p$$,
			"parent", $components$$.selectedNode.qid, null);
			if (!_.isEmpty($components$$.filtersToDel)) {
				var $filter_p$$ = ["traffic-control", "advanced-queue", "filters", "match"];
				_.each($components$$.filtersToDel,
				function($filter$$) {
					$batch$$.get("gdelete").put($filter_p$$, $filter$$, null)
				})
			}
			$batch$$.save(["traffic-control"], {
				success: function($model$$, $resp$$) {
					$self$$.responseDrag($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$components$$.showConfirm =
					!1;
					$components$$.filtersToDel = [];
					$self$$.clearLoading(d3.select($components$$.targetCircle))
				}
			})
		},
		responseDrag: function($p$$35_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $p$$35_resp$$),
			$c$$ = $p$$35_resp$$.COMMIT && $p$$35_resp$$.COMMIT.success && 1 != $p$$35_resp$$.COMMIT.failure,
			$d$$ = !$p$$35_resp$$.DELETE || $p$$35_resp$$.DELETE.success;
			if ($p$$35_resp$$.SET && !$p$$35_resp$$.SET.success || !$c$$ || !$d$$) return $response$$;
			$p$$35_resp$$ = EDGE.getObjProp($p$$35_resp$$, ["GET",
			"traffic-control", "advanced-queue"]);
			this.nodes_collection["import"]($p$$35_resp$$);
			_.each(this.components.filtersToDel,
			function($fid$$) {
				this.filters_collection.remove(this.filters_collection.filterById($fid$$))
			},
			this);
			this.confirmDrag();
			return $response$$
		},
		confirmDrag: function() {
			var $components$$ = this.components,
			$index$$ = $components$$.draggingNode.parent.children.indexOf($components$$.draggingNode); - 1 < $index$$ && $components$$.draggingNode.parent.children.splice($index$$, 1);
			"undefined" !== typeof $components$$.selectedNode.children ?
			(null === $components$$.selectedNode.children && ($components$$.selectedNode.children = []), $components$$.selectedNode.children.push($components$$.draggingNode)) : "undefined" !== typeof $components$$.selectedNode._children ? (null === $components$$.selectedNode._children && ($components$$.selectedNode._children = []), $components$$.selectedNode._children.push($components$$.draggingNode)) : ($components$$.selectedNode.children = [], $components$$.selectedNode.children.push($components$$.draggingNode));
			this._expand($components$$.selectedNode);
			this.sortTree();
			this.endDrag()
		},
		initiateDrag: function($d$$0$$, $domNode$$) {
			var $components$$ = this.components;
			$components$$.draggingNode = $d$$0$$;
			d3.select($domNode$$).select(".ghostCircle").attr("pointer-events", "none");
			d3.selectAll(".ghostCircle").attr("class", "ghostCircle show");
			var $domClass$$ = d3.select($domNode$$).attr("class");
			d3.select($domNode$$).attr("class", $domClass$$ + " activeDrag");
			d3.selectAll("g.node").sort(function($a$$) {
				return $a$$.id != $components$$.draggingNode.id ? 1: -1
			});
			1 < $components$$.nodes.length &&
			($components$$.links = $components$$.tree.links($components$$.nodes), $components$$.container.selectAll("g.link").data($components$$.links,
			function($d$$) {
				return $d$$.target.id
			}).remove(), $components$$.container.selectAll("g.node").data($components$$.nodes,
			function($d$$) {
				return $d$$.id
			}).filter(function($d$$) {
				return $d$$.id == $components$$.draggingNode.id ? !1: !0
			}).remove());
			$components$$.tree.links($components$$.tree.nodes($components$$.draggingNode.parent));
			$components$$.container.selectAll("g.link").filter(function($d$$) {
				return $d$$.target.id ==
				$components$$.draggingNode.id ? true: false
			}).remove();
			$components$$.dragStarted = null
		},
		endDrag: function() {
			var $components$$ = this.components;
			$components$$.selectedNode = null;
			d3.selectAll(".ghostCircle").attr("class", "ghostCircle");
			var $domClass$$ = d3.select($components$$.domNode).attr("class");
			d3.select($components$$.domNode).attr("class", $domClass$$.replace(" activeDrag", ""));
			d3.select($components$$.domNode).select(".ghostCircle").attr("pointer-events", "");
			this.updateTempConnector();
			null !== $components$$.draggingNode &&
			(this.updateGraph(this.treeData), this.centerNode($components$$.draggingNode), $components$$.draggingNode = null)
		},
		_clickCircle: function($d$$) {
			if (!d3.event.defaultPrevented) {
				if ($d$$.children || $d$$._children) $d$$.children ? ($d$$._children = $d$$.children, $d$$.children = null) : $d$$._children && ($d$$.children = $d$$._children, $d$$._children = null),
				this.updateGraph($d$$);
				this.centerNode($d$$)
			}
		},
		_clickNodeText: function($d$$83_node$$) {
			if (!d3.event.defaultPrevented) {
				this.centerNode($d$$83_node$$);
				var $position_type$$ =
				{
					left: 10 * this.components.scale + this.config.width / 2,
					top: this.config.height / 2 + ($d$$83_node$$.children || $d$$83_node$$._children ? 0: 8 * this.components.scale)
				};
				isNaN($d$$83_node$$.qid) ? "config" == $d$$83_node$$.qid && "admin" == EDGE.Config.User.level && (this.dropdown && (this.dropdown.reset(), delete this.dropdown), this.dropdown = new EDGE.Views.Qos.AdvancedQueue.DropDown({
					qtree: this,
					collection: this.nodes_collection,
					intfs_collection: this.intfs_collection,
					queue_types_collection: this.queue_types_collection,
					position: $position_type$$
				})) :
				($d$$83_node$$ = this.nodes_collection.filterById($d$$83_node$$.qid), "admin" == EDGE.Config.User.level ? (this.dropdown && (this.dropdown.reset(), delete this.dropdown), this.dropdown = new EDGE.Views.Qos.AdvancedQueue.DropDown({
					model: $d$$83_node$$,
					qtree: this,
					collection: this.nodes_collection,
					intfs_collection: this.intfs_collection,
					queue_types_collection: this.queue_types_collection,
					filters_collection: this.filters_collection,
					dpicategories: this.dpicategories,
					position: $position_type$$
				})) : ($position_type$$ = $d$$83_node$$.get("type"),
				"root" === $position_type$$ ? this.readonlyView = new EDGE.Views.Qos.AdvancedQueue.RootConfig({
					readonly: !0,
					model: $d$$83_node$$,
					intfs_collection: this.intfs_collection,
					qtree: this
				}) : "branch" === $position_type$$ ? this.readonlyView = new EDGE.Views.Qos.AdvancedQueue.BranchConfig({
					readonly: !0,
					model: $d$$83_node$$,
					collection: this.nodes_collection,
					qtree: this
				}) : "leaf" === $position_type$$ && (this.readonlyView = new EDGE.Views.Qos.AdvancedQueue.LeafConfig({
					readonly: !0,
					model: $d$$83_node$$,
					collection: this.nodes_collection,
					queue_types_collection: this.queue_types_collection,
					qtree: this
				}))))
			}
		},
		_transitionElbow: function($d$$) {
			return "M" + $d$$.source.y + "," + $d$$.source.x + "H" + $d$$.source.y + "V" + $d$$.source.x + "H" + $d$$.source.y
		},
		_elbow: function($d$$) {
			return "M" + (5 + $d$$.source.y) + "," + $d$$.source.x + "H" + ($d$$.source.y + ($d$$.target.y - $d$$.source.y) / 2) + "V" + $d$$.target.x + "H" + ($d$$.target.y - 5)
		},
		_overCircle: function($d$$) {
			this.components.selectedNode = $d$$;
			this.updateTempConnector()
		},
		_outCircle: function() {
			this.components.selectedNode = null;
			this.updateTempConnector()
		},
		sortTree: function() {
			this.components.tree.sort(function($a$$,
			$b$$) {
				return 1 == $a$$.depth && ("global" == $a$$.qid || "global" == $b$$.qid) ? "global" == $a$$.qid ? -1: 1: $b$$.qid < $a$$.qid ? 1: -1
			})
		},
		updateTempConnector: function() {
			var $data$$87_link$$ = [],
			$components$$ = this.components;
			null !== $components$$.draggingNode && null !== $components$$.selectedNode && ($data$$87_link$$ = [{
				source: {
					x: $components$$.selectedNode.y0,
					y: $components$$.selectedNode.x0
				},
				target: {
					x: $components$$.draggingNode.y0,
					y: $components$$.draggingNode.x0
				}
			}]);
			$data$$87_link$$ = $components$$.container.selectAll(".templink").data($data$$87_link$$);
			$data$$87_link$$.enter().append("path").attr("class", "templink").attr("d", d3.svg.diagonal()).attr("pointer-events", "none");
			$data$$87_link$$.attr("d", d3.svg.diagonal());
			$data$$87_link$$.exit().remove()
		},
		centerNode: function($source$$) {
			var $components$$ = this.components,
			$config$$ = this.config;
			$components$$.scale = $components$$.zoomListener.scale();
			x = -$source$$.y0;
			y = -$source$$.x0;
			x = x * $components$$.scale + $config$$.width / 2;
			y = y * $components$$.scale + $config$$.height / 2;
			$components$$.container.transition().duration($components$$.duration).attr("transform",
			"translate(" + x + "," + y + ")scale(" + $components$$.scale + ")");
			$components$$.zoomListener.scale($components$$.scale);
			$components$$.centerTranslate = [x, y];
			$components$$.zoomListener.translate($components$$.centerTranslate)
		},
		_pan: function($domNode$$, $direction$$) {
			var $speed$$ = this.panSpeed,
			$components$$ = this.components,
			$self$$ = this;
			if ($components$$.panTimer) {
				clearTimeout($components$$.panTimer);
				var $translateCoords$$ = d3.transform($components$$.container.attr("transform"));
				if ("left" == $direction$$ || "right" ==
				$direction$$) $components$$.translateX = "left" == $direction$$ ? $translateCoords$$.translate[0] + $speed$$: $translateCoords$$.translate[0] - $speed$$,
				$components$$.translateY = $translateCoords$$.translate[1];
				else if ("up" == $direction$$ || "down" == $direction$$) $components$$.translateX = $translateCoords$$.translate[0],
				$components$$.translateY = "up" == $direction$$ ? $translateCoords$$.translate[1] + $speed$$: $translateCoords$$.translate[1] - $speed$$;
				$components$$.scaleX = $translateCoords$$.scale[0];
				$components$$.scaleY = $translateCoords$$.scale[1];
				$components$$.scale = $components$$.zoomListener.scale();
				$components$$.container.transition().attr("transform", "translate(" + $components$$.translateX + "," + $components$$.translateY + ")scale(" + $components$$.scale + ")");
				d3.select($domNode$$).select("g.node").attr("transform", "translate(" + $components$$.translateX + "," + $components$$.translateY + ")");
				$components$$.zoomListener.scale($components$$.zoomListener.scale());
				$components$$.zoomListener.translate([$components$$.translateX, $components$$.translateY]);
				$components$$.panTimer =
				setTimeout(function() {
					$self$$._pan($domNode$$, $speed$$, $direction$$)
				},
				50)
			}
		},
		updateGraph: function($source$$) {
			this.sortTree();
			var $components$$ = this.components,
			$nodes$$ = $components$$.tree.nodes(this.treeData).reverse(),
			$links$$ = $components$$.tree.links($nodes$$),
			$self$$ = this;
			$components$$.node = $components$$.container.selectAll("g.node").data($nodes$$,
			function($d$$) {
				return $d$$.id || ($d$$.id = ++$components$$.index)
			});
			$components$$.nodeEnter = $components$$.node.enter().append("g").attr("class",
			function($d$$) {
				var $classname$$ =
				"node ";
				return $classname$$ = $d$$.type ? $classname$$ + ($d$$.type + " q" + $d$$.qid) : "config" === $d$$.qid ? $classname$$ + $d$$.qid: $classname$$ + "interface"
			}).attr("transform",
			function() {
				return "translate(" + $source$$.y0 + "," + $source$$.x0 + ")"
			});
			this.readonly || $components$$.nodeEnter.call($components$$.dragListener);
			$components$$.nodeEnter.append("circle").attr("r", 1E - 6).attr("class",
			function($d$$) {
				return $d$$._children ? "active": ""
			}).on("click", this._clickCircle.bind(this));
			$components$$.nodeEnter.append("text").attr("x",
			function() {
				return 10
			}).attr("dy",
			function($d$$) {
				return $d$$.children || $d$$._children ? "-.35em": ".35em"
			}).attr("text-anchor", "start").on("click", this._clickNodeText.bind(this));
			$components$$.nodeEnter.append("circle").attr("class", "ghostCircle").attr("r", 30).attr("opacity",
			function($d$$) {
				return "leaf" === $d$$.type || 0 === $d$$.depth || 1 === $d$$.depth ? 0: 0.2
			}).style("fill", "red").attr("pointer-events", "mouseover").on("mouseover",
			function($node$$) {
				"0" != $(this).attr("opacity") && !$self$$.components.showConfirm &&
				($self$$._overCircle($node$$), $components$$.targetCircle = this)
			}).on("mouseout",
			function($node$$) {
				"0" != $(this).attr("opacity") && !$self$$.components.showConfirm && $self$$._outCircle($node$$)
			});
			$components$$.nodeUpdate = $components$$.node.transition().duration($components$$.duration).attr("transform",
			function($d$$) {
				return "translate(" + $d$$.y + "," + $d$$.x + ")"
			});
			$components$$.nodeUpdate.select("circle").attr("r", 4.5).attr("class",
			function($d$$) {
				return $d$$._children ? "active": ""
			});
			$components$$.nodeUpdate.select("text").style("fill-opacity",
			1).text(function($d$$) {
				var $t$$ = $d$$.qid;
				if ($d$$.type) var $digits$$ = $d$$.ceiling ? $d$$.bandwidth + "/" + $d$$.ceiling: $d$$.bandwidth,
				$t$$ = $d$$.description ? $t$$ + ("/" + $d$$.description + " - " + $digits$$) : $t$$ + (" - " + $digits$$);
				return $t$$
			}).attr("dy",
			function($d$$) {
				return $d$$.children || $d$$._children ? "-.35em": ".35em"
			}).each("end",
			function() {
				$self$$.wrap(d3.select(this), $self$$.config.margin.right)
			});
			$components$$.nodeExit = $components$$.node.exit().transition().duration($components$$.duration).attr("transform",
			function() {
				return "translate(" + $source$$.y + "," + $source$$.x + ")"
			}).remove();
			$components$$.nodeExit.select("circle").attr("r", 1E - 6);
			$components$$.nodeExit.select("text").style("fill-opacity", 1E - 6);
			$components$$.link = $components$$.container.selectAll("g.link").data($links$$,
			function($d$$) {
				return $d$$.target.id
			});
			$components$$.linkEnter = $components$$.link.enter().append("g").attr("class", "link");
			$components$$.linkEnter.append("path").attr("d",
			function() {
				var $o$$ = {
					x: $source$$.x0,
					y: $source$$.y0
				};
				return $self$$._transitionElbow({
					source: $o$$,
					target: $o$$
				})
			});
			$components$$.linkUpdate = $components$$.link.transition().duration($components$$.duration);
			$components$$.linkUpdate.select("path").attr("d", this._elbow);
			$components$$.linkExit = $components$$.link.exit().transition().duration($components$$.duration).remove();
			$components$$.linkExit.select("path").attr("d",
			function() {
				var $o$$ = {
					x: $source$$.x,
					y: $source$$.y
				};
				return $self$$._transitionElbow({
					source: $o$$,
					target: $o$$
				})
			});
			$nodes$$.forEach(function($d$$) {
				$d$$.x0 = $d$$.x;
				$d$$.y0 = $d$$.y
			})
		},
		wrap: function($text$$,
		$width$$) {
			for (var $words$$ = $text$$.text().split(/\s+/).reverse(), $word$$, $line$$ = [], $lineNumber$$ = 0, $y$$ = $text$$.attr("y"), $dy$$ = parseFloat($text$$.attr("dy")), $tspan$$ = $text$$.text(null).append("tspan").attr("x", 10).attr("y", $y$$).attr("dy", $dy$$ + "em"); $word$$ = $words$$.pop();) $line$$.push($word$$),
			$tspan$$.text($line$$.join(" ")),
			$tspan$$.node().getComputedTextLength() > $width$$ && ($line$$.pop(), $tspan$$.text($line$$.join(" ")), $line$$ = [$word$$], $tspan$$ = $text$$.append("tspan").attr("x", 10).attr("y",
			$y$$).attr("dy", 1.1 * ++$lineNumber$$ + $dy$$ + "em").text($word$$))
		},
		resize: function() {
			var $config$$ = this.config,
			$components$$ = this.components;
			$config$$.width = this.$el.width();
			$config$$.height = this.$el.height() - 20;
			var $dimension$$ = this._calDimension();
			$components$$.canvas.attr("height", $config$$.height).attr("width", $config$$.width);
			$components$$.tree.size([$dimension$$.height, $dimension$$.width]);
			this.updateGraph(this.treeData)
		},
		reset: function() {}
	});
	EDGE.Views.Qos.AdvancedQueue.DropDown = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.DropDown",
		events: function() {
			return this.model ? "leaf" === this.model.get("type") ? {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}: {
				"click .action-config": "actionConfig",
				"click .action-show-filters": "actionShowFilters",
				"click .action-delete": "actionDelete",
				"click .action-add-branch": "actionAdd",
				"click .action-add-leaf": "actionAdd"
			}: {
				"click .action-add-root": "actionAdd"
			}
		},
		initialize: function($args$$) {
			_.bindAll(this);
			this.qtree = $args$$.qtree;
			this.position = $args$$.position;
			this.intfs_collection = $args$$.intfs_collection;
			this.queue_types_collection = $args$$.queue_types_collection;
			this.filters_collection = $args$$.filters_collection;
			this.dpicategories = $args$$.dpicategories;
			this.setElement($("#Qos #QosAdvancedQueueConfig .drop-down-button"));
			this.template = _.template($("#QosAdvancedQueueDropDownTemplate").html());
			this.$el.html(this.template());
			this.render()
		},
		reposition: function() {
			this.$actionList.css("left",
			this.position.left);
			this.$actionList.css("top", this.position.top)
		},
		render: function() {
			this.$actionList = this.$el.children(".action-list");
			this.reposition();
			var $self$$ = this,
			$$acts$$ = this.$el.children(".action-list");
			this.model ? "leaf" === this.model.get("type") ? ($$acts$$.find(".action-add-root").parent().remove(), $$acts$$.find(".action-add-branch").parent().remove(), $$acts$$.find(".action-add-leaf").parent().remove(), $$acts$$.find(".action-show-filters").parent().remove()) : $$acts$$.find(".action-add-root").parent().remove() :
			($$acts$$.find(".action-delete").parent().remove(), $$acts$$.find(".action-config").parent().remove(), $$acts$$.find(".action-add-branch").parent().remove(), $$acts$$.find(".action-add-leaf").parent().remove(), $$acts$$.find(".action-show-filters").parent().remove());
			this.$el.hover(function() {
				var $timeOut$$ = $self$$.$actionList.data("timeOut");
				window.clearTimeout($timeOut$$)
			},
			function() {
				timeOut = window.setTimeout(function() {
					$self$$.$actionList.is(":visible") && $self$$.$actionList.hide()
				},
				400);
				$self$$.$actionList.data("timeOut",
				timeOut)
			});
			return this
		},
		actionConfig: function() {
			switch (this.model.get("type")) {
			case "root":
				this.config = new EDGE.Views.Qos.AdvancedQueue.RootConfig({
					readonly: !1,
					qtree: this.qtree,
					collection: this.collection,
					intfs_collection: this.intfs_collection,
					model: this.model
				});
				break;
			case "branch":
				this.config = new EDGE.Views.Qos.AdvancedQueue.BranchConfig({
					readonly: !1,
					qtree: this.qtree,
					collection: this.collection,
					model: this.model
				});
				break;
			case "leaf":
				this.config = new EDGE.Views.Qos.AdvancedQueue.LeafConfig({
					readonly: !1,
					qtree: this.qtree,
					collection: this.collection,
					queue_types_collection: this.queue_types_collection,
					model: this.model
				})
			}
			return ! 1
		},
		actionShowFilters: function() {
			var $qid$$ = this.model.get("qid");
			this.filters_collection.filterByAttachTo($qid$$);
			delete this.filters;
			this.filters = new EDGE.Views.Qos.AdvancedQueue.Filters.Default ({
				qtree: this.qtree,
				parent_id: $qid$$,
				nodes_collection: this.collection,
				dpicategories: this.dpicategories,
				collection: this.filters_collection
			});
			return ! 1
		},
		actionDelete: function() {
			var $self$$ =
			this;
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete " + this.model.get("type") + " " + this.model.get("qid") + " and all nodes/filters attached to it?",
				confirm: function() {
					$self$$.qtree.deleteNode($self$$.model)
				}
			});
			return ! 1
		},
		actionAdd: function($addType_e$$) {
			var $configure$$ = {
				readonly: !1,
				qtree: this.qtree,
				collection: this.collection
			},
			$addType_e$$ = $($addType_e$$.target).data("type");
			if ("root" === $addType_e$$) $configure$$.intfs_collection = this.intfs_collection,
			this.add = new EDGE.Views.Qos.AdvancedQueue.RootConfig($configure$$);
			else if ("branch" === $addType_e$$ || "leaf" === $addType_e$$) $configure$$.parent = this.model.get("qid"),
			"branch" === $addType_e$$ ? this.add = new EDGE.Views.Qos.AdvancedQueue.BranchConfig($configure$$) : ($configure$$.queue_types_collection = this.queue_types_collection, this.add = new EDGE.Views.Qos.AdvancedQueue.LeafConfig($configure$$));
			return ! 1
		},
		reset: function() {
			this.undelegateEvents();
			$(document).off("change", "select.has-other");
			this.$el.empty()
		}
	});
	EDGE.Views.Qos.AdvancedQueue.NodeConfig = EDGE.Views.Global.Abstract.Config.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.readonly = $args$$.readonly;
			this.qtree = $args$$.qtree;
			this.setElement($("#Qos #QosAdvancedQueueConfig .drop-down-button"));
			this.model ? (this.id = "qosadvancedconfig" + this.model.get("qid"), this.action = "edit", this.title = "Configuration for " + this.model.get("type") + " " + this.model.get("qid")) : (this.id = "qosadvancedcreate", this.action = "create");
			this.type = "qos";
			this.multiplier = {
				bit: 1,
				bps: 8,
				k: 1E3,
				ki: 1024,
				m: 1E6,
				mi: 1048576,
				g: 1E9,
				gi: 1073741824,
				t: 1E12,
				ti: 8796093022208
			};
			this.changedAttrs = {};
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		templateVars: function() {
			return {
				qid: this.model ? this.model.get("qid") : ""
			}
		},
		updatePropertyWithUnit: function($$form$$, $property$$) {
			var $$unitSelect$$ = $$form$$.find("select[name=" + ($property$$ + "-unit") + "]"),
			$$property$$ = $$form$$.find("input[name=" + $property$$ + "]"),
			$$label$$ = $$form$$.find('label[for="' + $$property$$.attr("id") + '"]'),
			$unit1_val$$ = this.model.get($property$$);
			if (void 0 === $unit1_val$$) this.updateTextbox($$property$$, "", $$label$$),
			this.updateSelect($$unitSelect$$, "mbit", $$label$$);
			else {
				var $matchNum_matchUnit$$1_num$$ = $unit1_val$$.match(/^([0-9]*(\.)?[0-9]+)(([K|M|G|T|k|m|g|t]i?)?(bps|bit))$/);
				if ($matchNum_matchUnit$$1_num$$) {
					var $unit1_val$$ = $matchNum_matchUnit$$1_num$$[4],
					$unit2$$ = $matchNum_matchUnit$$1_num$$[5],
					$unit$$ = $matchNum_matchUnit$$1_num$$[3],
					$matchNum_matchUnit$$1_num$$ = $matchNum_matchUnit$$1_num$$[1];
					_.contains(["mbit", "bit", "kbit"], $unit$$) ? (this.updateTextbox($$property$$, $matchNum_matchUnit$$1_num$$, $$label$$), this.updateSelect($$unitSelect$$, $unit$$, $$label$$)) : (this.updateTextbox($$property$$, $matchNum_matchUnit$$1_num$$ * this.multiplier[$unit1_val$$.toLowerCase()] * this.multiplier[$unit2$$.toLowerCase()], $$label$$), this.updateSelect($$unitSelect$$, "bit", $$label$$))
				} else if ($matchNum_matchUnit$$1_num$$ = $unit1_val$$.match(/^([0-9]*(\.)?[0-9]+)$/)) this.updateTextbox($$property$$, 8 * $matchNum_matchUnit$$1_num$$[1],
				$$label$$),
				this.updateSelect($$unitSelect$$, "kbit", $$label$$)
			}
		},
		comparePropertyWithUnit: function($v1$$, $v2$$) {
			var $matchUnit2_reg1$$ = /^([0-9]*(.)?[0-9]+)(([K|M|G|T|k|m|g|t]i?)?(bps|bit))$/,
			$matchUnit1$$ = $v1$$.match($matchUnit2_reg1$$),
			$matchUnit2_reg1$$ = $v2$$.match($matchUnit2_reg1$$);
			return ($matchUnit1$$ ? $matchUnit1$$[1] * this.multiplier[$matchUnit1$$[5]] * (this.multiplier[$matchUnit1$$[4]] || 1) : 8 * Number($v1$$)) === ($matchUnit2_reg1$$ ? $matchUnit2_reg1$$[1] * this.multiplier[$matchUnit2_reg1$$[5]] * (this.multiplier[$matchUnit2_reg1$$[4]] ||
			1) : 8 * Number($v2$$))
		},
		prepareSave: function() {},
		response: function($p$$36_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $p$$36_resp$$),
			$c$$ = $p$$36_resp$$.COMMIT && $p$$36_resp$$.COMMIT.success && 1 != $p$$36_resp$$.COMMIT.failure;
			if ($p$$36_resp$$.SET && !$p$$36_resp$$.SET.success || !$c$$) return $response$$;
			$p$$36_resp$$ = EDGE.getObjProp($p$$36_resp$$, ["GET", "traffic-control", "advanced-queue"]);
			this.collection["import"]($p$$36_resp$$);
			this.model && this.collection.trigger("change",
			[this.model, this.changedAttrs]);
			this.dialog.addClass("saved success");
			this.remove();
			return $response$$
		},
		enableActions: function() {
			this.$("button").removeAttr("disabled").removeClass("ui-state-disabled")
		},
		disableActions: function() {
			this.$("button").attr("disabled", "disabled").addClass("ui-state-disabled")
		}
	});
	EDGE.Views.Qos.AdvancedQueue.RootConfig = EDGE.Views.Qos.AdvancedQueue.NodeConfig.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.RootConfig",
		initialize: function($args$$) {
			this.template = _.template($("#QosAdvancedQueueRootConfigTemplate").html());
			this.intfs_collection = $args$$.intfs_collection;
			this.model || (this.title = "Add Root Node");
			EDGE.Views.Qos.AdvancedQueue.NodeConfig.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this,
			!0);
			this.$el.data("rendered") || (this.$el.data("rendered", !0), this.show(), this.delegateEvents());
			var $$form$$ = this.$("form");
			this.model ? $$form$$.find("input[name=qid]").remove() : $$form$$.find("span.qid").remove();
			var $$attach$$ = $$form$$.find("select[name=attach-to]");
			this.intfs_collection.each(function($intf$$) {
				$("<option></option>").val($intf$$.get("id")).text($intf$$.get("id")).appendTo($$attach$$)
			},
			this);
			$("<option></option>").val("other").text("other").appendTo($$attach$$);
			$("<option></option>").val("global").text("global").prop("selected",
			!0).prependTo($$attach$$);
			$$attach$$.on("change",
			function() {
				var $$this$$ = $(this);
				if ($$this$$.val() == "other") {
					$$this$$.addClass("using-other");
					$$this$$.parent().next("div.select-other").remove();
					var $$other$$ = $("<div></div>").addClass("select-other").append($('<input type="text" name="other_' + $$this$$.attr("name") + '" data-infotip="' + $$this$$.data("infotip") + '" />'));
					_.delay(function() {
						$$form$$.infotip("position")
					},
					200);
					$$this$$.parent().after($$other$$)
				} else {
					$$this$$.removeClass("using-other");
					$$this$$.parent().find("span.ui-icon-info.ui-icon-muted.ui-icon").remove();
					_.delay(function() {
						$$form$$.infotip("position")
					},
					200);
					$$this$$.parent().next("div.select-other").remove();
					$$this$$.next("span.error").remove()
				}
			});
			this.flaggable = !1;
			this.model && this.update();
			this.flaggable = !0;
			return this
		},
		update: function() {
			var $$form$$56_$select$$ = this.$("form");
			this.updateTextbox($$form$$56_$select$$.find("input[name=description]"), $.xss(this.model.get("description")), $$form$$56_$select$$.find('label[for="' + $$form$$56_$select$$.find("input[name=description]").attr("id") + '"]'));
			this.updatePropertyWithUnit($$form$$56_$select$$,
			"bandwidth");
			var $$form$$56_$select$$ = this.$("form").find("select[name=attach-to]"),
			$intf$$ = this.model.get("attach-to");
			$$form$$56_$select$$.find('option[value="' + $intf$$ + '"]').length ? $$form$$56_$select$$.val($intf$$).trigger("change") : $intf$$ ? ($$form$$56_$select$$.val("other").trigger("change"), $$form$$56_$select$$.parent().next("div.select-other").children("input").val($intf$$)) : $$form$$56_$select$$.val("global").trigger("change");
			this.readonly ? ($$form$$56_$select$$.siblings(".readonly").html($intf$$),
			$$form$$56_$select$$.parent().next("div.select-other").children("input").hide()) : $$form$$56_$select$$.parent().next("div.select-other").children("input").show()
		},
		validation: function() {
			var $all_qids$$ = _.map(_.union(this.collection.filterByType("root").toArray(), this.collection.filterByType("branch").toArray(), this.collection.filterByType("leaf").toArray()),
			function($model$$) {
				return $model$$.get("qid")
			}),
			$all_intfs$$ = _.map(_.filter(this.collection.filterByType("root").toArray(),
			function($model$$) {
				return this.model &&
				this.model.get("attach-to") === $model$$.get("attach-to") ? !1: !0
			},
			this),
			function($model$$) {
				return $model$$.get("attach-to")
			});
			return {
				rules: {
					"attach-to": {
						required: !0,
						notAmong: $all_intfs$$
					},
					"other_attach-to": {
						required: !0,
						interfaceName: 1,
						notAmong: $all_intfs$$
					},
					bandwidth: {
						digits: !0,
						required: !0
					},
					qid: {
						required: !0,
						digits: !0,
						notAmong: $all_qids$$
					}
				},
				messages: {
					qid: {
						notAmong: "Please choose an unique id"
					},
					"attach-to": {
						notAmong: "Only one root can attach to this interface"
					},
					"other_attach-to": {
						notAmong: "Only one root can attach to this interface"
					}
				}
			}
		},
		prepareSave: function($batch$$) {
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $$form$$ = this.$("form"),
			$$qid$$1_p$$ = $$form$$.find("input[name=qid]");
			if (this.model) var $$qid$$1_p$$ = ["traffic-control", "advanced-queue", "root", "queue", this.model.get("qid")],
			$old_attach_to$$ = this.model.get("attach-to"),
			$old_desc$$ = this.model.get("description") || "",
			$old_bandwidth$$ = this.model.get("bandwidth");
			else $$qid$$1_p$$ = ["traffic-control", "advanced-queue", "root", "queue", $$qid$$1_p$$.val()],
			$old_attach_to$$ = $old_desc$$ = "",
			$old_bandwidth$$ = "0";
			var $$select$$ = $$form$$.find("select[name=attach-to]"),
			$$select$$ = "other" == $$select$$.val() ? $$select$$.parent().next("div.select-other").children("input").val() : $$select$$.val(),
			$new_desc$$ = $$form$$.find("input[name=description]").val(),
			$$form$$ = $$form$$.find("input[name=bandwidth]").val() + $$form$$.find("select[name=bandwidth-unit]").val(),
			$boolBandwidth$$ = this.comparePropertyWithUnit($$form$$, $old_bandwidth$$);
			if ($boolBandwidth$$ && $new_desc$$ ===
			$old_desc$$ && $$select$$ === $old_attach_to$$) return ! 1;
			$batch$$.get("gset").put($$qid$$1_p$$, "bandwidth", $$form$$, null);
			$batch$$.get("gset").put($$qid$$1_p$$, "attach-to", $$select$$, null);
			$batch$$.get("gget").put($$qid$$1_p$$, null);
			$boolBandwidth$$ || (this.changedAttrs.bandwidth = {
				old: $old_bandwidth$$,
				"new": $$form$$
			});
			$new_desc$$ !== $old_desc$$ && ($batch$$.get("gdelete").put($$qid$$1_p$$, "description", null), $new_desc$$ && ($batch$$.get("gset").put($$qid$$1_p$$, "description", $new_desc$$, null), $batch$$.get("gset").put($$qid$$1_p$$,
			"description", "__FORCE_ASSOC", !0)), this.changedAttrs.description = {
				old: $old_desc$$,
				"new": $new_desc$$
			});
			$$select$$ !== $old_attach_to$$ && (this.changedAttrs["attach-to"] = {
				old: $old_attach_to$$,
				"new": $$select$$
			});
			return ! 0
		},
		save: function($batch$$97_e$$) {
			$batch$$97_e$$ && $batch$$97_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			var $self$$ = this,
			$batch$$97_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$97_e$$) && (this.dialog.addClass("saving"), this.disableActions(), $batch$$97_e$$.save(["traffic-control"],
			{
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.dialog.addClass("error")
				},
				complete: function() {
					$self$$.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		}
	});
	EDGE.Views.Qos.AdvancedQueue.LeafConfig = EDGE.Views.Qos.AdvancedQueue.NodeConfig.extend({
		initialize: function($args$$) {
			this.template = _.template($("#QosAdvancedQueueLeafConfigTemplate").html());
			this.parent = $args$$.parent;
			this.queue_types_collection = $args$$.queue_types_collection;
			this.model || (this.title = "Add Leaf Node for " + this.parent);
			EDGE.Views.Qos.AdvancedQueue.NodeConfig.prototype.initialize.call(this, $args$$)
		},
		templateVars: function() {
			function $qids$$($subType$$) {
				return _.map($self$$.queue_types_collection.filterByTypeAndSubType("queue-type",
				$subType$$).toArray(),
				function($q$$) {
					return $q$$.get("qid")
				})
			}
			var $self$$ = this;
			return {
				qid: this.model ? this.model.get("qid") : "",
				parent: this.parent ? this.parent: "",
				queueType: {
					"fq-codel": $qids$$("fq-codel"),
					hfq: $qids$$("hfq"),
					pfifo: $qids$$("pfifo"),
					sfq: $qids$$("sfq")
				}
			}
		},
		render: function() {
			EDGE.Views.Qos.AdvancedQueue.BranchConfig.prototype.render.call(this, !0)
		},
		update: function() {
			EDGE.Views.Qos.AdvancedQueue.BranchConfig.prototype.update.call(this, !0);
			var $$form$$ = this.$("form");
			this.updateSelect($$form$$.find("select[name=queue-type]"),
			this.model.get("queue-type"), $$form$$.find('label[for="' + $$form$$.find("select[name=queue-type]").attr("id") + '"]'));
			this.updatePropertyWithUnit($$form$$, "ceiling")
		},
		validation: function() {
			this.$("form").find("input[name=qid]");
			return {
				rules: {
					bandwidth: {
						digits: !0,
						required: !0
					},
					ceiling: {
						digits: !0
					},
					qid: {
						required: !0,
						digits: !0,
						notAmong: _.map(_.union(this.collection.filterByType("root").toArray(), this.collection.filterByType("branch").toArray(), this.collection.filterByType("leaf").toArray()),
						function($model$$) {
							return $model$$.get("qid")
						})
					},
					parent: {
						required: !0
					}
				},
				messages: {
					qid: {
						notAmong: "Please choose an unique id"
					}
				}
			}
		},
		prepareSave: function($batch$$) {
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $$form$$ = this.$("form"),
			$$qid$$3_p$$ = $$form$$.find("input[name=qid]");
			if (this.model) var $$qid$$3_p$$ = ["traffic-control", "advanced-queue", "leaf", "queue", this.model.get("qid")],
			$old_parent$$ = this.model.get("parent"),
			$old_bandwidth$$ = this.model.get("bandwidth"),
			$old_desc$$ = this.model.get("description") || "",
			$old_priority$$ =
			this.model.get("priority") || "",
			$old_ceiling$$ = this.model.get("ceiling") || "0",
			$old_queue_type$$ = this.model.get("queue-type") || "";
			else $$qid$$3_p$$ = ["traffic-control", "advanced-queue", "leaf", "queue", $$qid$$3_p$$.val()],
			$old_parent$$ = $old_desc$$ = "",
			$old_bandwidth$$ = "0",
			$old_priority$$ = "",
			$old_ceiling$$ = "0",
			$old_queue_type$$ = "";
			var $new_parent$$ = this.parent ? this.parent: $$form$$.find("select[name=parent]").val(),
			$new_desc$$ = $$form$$.find("input[name=description]").val(),
			$new_priority$$ = $$form$$.find("select[name=priority]").val(),
			$new_queue_type$$ = $$form$$.find("select[name=queue-type]").val(),
			$new_bandwidth$$ = $$form$$.find("input[name=bandwidth]").val() + $$form$$.find("select[name=bandwidth-unit]").val(),
			$boolBandwidth$$ = this.comparePropertyWithUnit($new_bandwidth$$, $old_bandwidth$$),
			$$form$$ = "" !== $$form$$.find("input[name=ceiling]").val() ? $$form$$.find("input[name=ceiling]").val() + $$form$$.find("select[name=ceiling-unit]").val() : "0",
			$boolCeiling$$ = this.comparePropertyWithUnit($$form$$, $old_ceiling$$);
			if ($boolCeiling$$ && $boolBandwidth$$ &&
			$new_desc$$ === $old_desc$$ && $new_parent$$ === $old_parent$$ && $new_priority$$ === $old_priority$$ && $new_queue_type$$ === $old_queue_type$$) return ! 1;
			$batch$$.get("gset").put($$qid$$3_p$$, "bandwidth", $new_bandwidth$$, null);
			$batch$$.get("gset").put($$qid$$3_p$$, "parent", $new_parent$$, null);
			$batch$$.get("gget").put($$qid$$3_p$$, null);
			$batch$$.get("gdelete").put($$qid$$3_p$$, "queue-type", null);
			"" !== $new_queue_type$$ && ($batch$$.get("gset").put($$qid$$3_p$$, "queue-type", $new_queue_type$$, null), $batch$$.get("gset").put($$qid$$3_p$$,
			"queue-type", "__FORCE_ASSOC", !0));
			$batch$$.get("gdelete").put($$qid$$3_p$$, "ceiling", null);
			"0" !== $$form$$ && ($batch$$.get("gset").put($$qid$$3_p$$, "ceiling", $$form$$, null), $batch$$.get("gset").put($$qid$$3_p$$, "ceiling", "__FORCE_ASSOC", !0));
			$batch$$.get("gdelete").put($$qid$$3_p$$, "description", null);
			"" !== $new_desc$$ && ($batch$$.get("gset").put($$qid$$3_p$$, "description", $new_desc$$, null), $batch$$.get("gset").put($$qid$$3_p$$, "description", "__FORCE_ASSOC", !0));
			$batch$$.get("gdelete").put($$qid$$3_p$$,
			"priority", null);
			"" !== $new_priority$$ && ($batch$$.get("gset").put($$qid$$3_p$$, "priority", $new_priority$$, null), $batch$$.get("gset").put($$qid$$3_p$$, "priority", "__FORCE_ASSOC", !0));
			$boolBandwidth$$ || (this.changedAttrs.bandwidth = {
				old: $old_bandwidth$$,
				"new": $new_bandwidth$$
			});
			$boolCeiling$$ || (this.changedAttrs.ceiling = {
				old: $old_ceiling$$,
				"new": $$form$$
			});
			$new_queue_type$$ !== $old_queue_type$$ && (this.changedAttrs["queue-type"] = {
				old: $old_queue_type$$,
				"new": $new_queue_type$$
			});
			$new_desc$$ !== $old_desc$$ &&
			(this.changedAttrs.description = {
				old: $old_desc$$,
				"new": $new_desc$$
			});
			$new_parent$$ !== $old_parent$$ && (this.changedAttrs.parent = {
				old: $old_parent$$,
				"new": $new_parent$$
			});
			$new_priority$$ !== $old_priority$$ && (this.changedAttrs.priority = {
				old: $old_priority$$,
				"new": $new_priority$$
			});
			return ! 0
		},
		save: function($batch$$99_e$$) {
			$batch$$99_e$$ && $batch$$99_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			var $self$$ = this,
			$batch$$99_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$99_e$$) && (this.dialog.addClass("saving"),
			this.disableActions(), $batch$$99_e$$.save(["traffic-control"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.dialog.addClass("error")
				},
				complete: function() {
					$self$$.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		}
	});
	EDGE.Views.Qos.AdvancedQueue.BranchConfig = EDGE.Views.Qos.AdvancedQueue.NodeConfig.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.BranchConfig",
		initialize: function($args$$) {
			this.template = _.template($("#QosAdvancedQueueBranchConfigTemplate").html());
			this.parent = $args$$.parent;
			this.model || (this.title = "Add Branch Node for " + this.parent);
			EDGE.Views.Qos.AdvancedQueue.NodeConfig.prototype.initialize.call(this, $args$$)
		},
		templateVars: function() {
			return {
				qid: this.model ? this.model.get("qid") : "",
				parent: this.parent ?
				this.parent: ""
			}
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.$el.data("rendered") || (this.$el.data("rendered", !0), this.show(), this.delegateEvents());
			this.model ? this.$("form").find("input[name=qid]").remove() : this.$("form").find("span.qid").remove();
			var $$parent$$ = this.$("form").find("select[name=parent]");
			this.parent ? this.$("form").find("select[name=parent]").remove() : this.$("form").find("span.parent").remove();
			var $parents$$ = this.collection.filterByTypes(["root",
			"branch"]).sortBy(function($m$$) {
				return Number($m$$.get("qid"))
			});
			_.each($parents$$,
			function($p$$) {
				this.model && this.model.get("qid") == $p$$.get("qid") || $("<option></option>").val($p$$.get("qid")).text($p$$.get("qid")).appendTo($$parent$$)
			},
			this);
			this.flaggable = !1;
			this.model && this.update();
			this.flaggable = !0;
			return this
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=description]"), $.xss(this.model.get("description")), $$form$$.find('label[for="' + $$form$$.find("input[name=description]").attr("id") +
			'"]'));
			this.updateSelect($$form$$.find("select[name=priority]"), this.model.get("priority"), $$form$$.find('label[for="' + $$form$$.find("select[name=priority]").attr("id") + '"]'));
			this.updateSelect($$form$$.find("select[name=parent]"), this.model.get("parent"), $$form$$.find('label[for="' + $$form$$.find("select[name=parent]").attr("id") + '"]'));
			this.updatePropertyWithUnit($$form$$, "bandwidth")
		},
		validation: function() {
			this.$("form").find("input[name=qid]");
			return {
				rules: {
					bandwidth: {
						digits: !0,
						required: !0
					},
					qid: {
						required: !0,
						digits: !0,
						notAmong: _.map(_.union(this.collection.filterByType("root").toArray(), this.collection.filterByType("branch").toArray(), this.collection.filterByType("leaf").toArray()),
						function($model$$) {
							return $model$$.get("qid")
						})
					},
					parent: {
						required: !0
					}
				},
				messages: {
					qid: {
						notAmong: "Please choose an unique id"
					}
				}
			}
		},
		prepareSave: function($batch$$) {
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $$form$$61_new_bandwidth$$ = this.$("form"),
			$$qid$$5_p$$ = $$form$$61_new_bandwidth$$.find("input[name=qid]");
			if (this.model) var $$qid$$5_p$$ = ["traffic-control", "advanced-queue", "branch", "queue", this.model.get("qid")],
			$old_parent$$ = this.model.get("parent"),
			$old_desc$$ = this.model.get("description"),
			$old_bandwidth$$ = this.model.get("bandwidth"),
			$old_priority$$ = this.model.get("priority");
			else $$qid$$5_p$$ = ["traffic-control", "advanced-queue", "branch", "queue", $$qid$$5_p$$.val()],
			$old_parent$$ = $old_desc$$ = "",
			$old_bandwidth$$ = "0",
			$old_priority$$ = "";
			var $new_parent$$ = this.parent ? this.parent: $$form$$61_new_bandwidth$$.find("select[name=parent]").val(),
			$new_desc$$ = $$form$$61_new_bandwidth$$.find("input[name=description]").val(),
			$new_priority$$ = $$form$$61_new_bandwidth$$.find("select[name=priority]").val(),
			$$form$$61_new_bandwidth$$ = $$form$$61_new_bandwidth$$.find("input[name=bandwidth]").val() + $$form$$61_new_bandwidth$$.find("select[name=bandwidth-unit]").val(),
			$boolBandwidth$$ = this.comparePropertyWithUnit($$form$$61_new_bandwidth$$, $old_bandwidth$$);
			if ($boolBandwidth$$ && $new_desc$$ === $old_desc$$ && $new_parent$$ === $old_parent$$ && ($new_priority$$ ===
			$old_priority$$ || void 0 === $old_priority$$ && "" === $new_priority$$)) return ! 1;
			$batch$$.get("gset").put($$qid$$5_p$$, "bandwidth", $$form$$61_new_bandwidth$$, null);
			$batch$$.get("gset").put($$qid$$5_p$$, "parent", $new_parent$$, null);
			$batch$$.get("gget").put($$qid$$5_p$$, null);
			$batch$$.get("gdelete").put($$qid$$5_p$$, "description", null);
			$new_desc$$ && ($batch$$.get("gset").put($$qid$$5_p$$, "description", $new_desc$$), $batch$$.get("gset").put($$qid$$5_p$$, "description", "__FORCE_ASSOC", !0));
			$batch$$.get("gdelete").put($$qid$$5_p$$,
			"priority", null);
			"" !== $new_priority$$ && ($batch$$.get("gset").put($$qid$$5_p$$, "priority", $new_priority$$), $batch$$.get("gset").put($$qid$$5_p$$, "priority", "__FORCE_ASSOC", !0));
			$boolBandwidth$$ || (this.changedAttrs.bandwidth = {
				old: $old_bandwidth$$,
				"new": $$form$$61_new_bandwidth$$
			});
			$new_desc$$ !== $old_desc$$ && (this.changedAttrs.description = {
				old: $old_desc$$,
				"new": $new_desc$$
			});
			$new_parent$$ !== $old_parent$$ && (this.changedAttrs.parent = {
				old: $old_parent$$,
				"new": $new_parent$$
			});
			$new_priority$$ !== $old_priority$$ &&
			(this.changedAttrs.priority = {
				old: $old_priority$$,
				"new": $new_priority$$
			});
			return ! 0
		},
		save: function($batch$$101_e$$) {
			$batch$$101_e$$ && $batch$$101_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			var $self$$ = this,
			$batch$$101_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$101_e$$) && (this.dialog.addClass("saving"), this.disableActions(), $batch$$101_e$$.save(["traffic-control"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify",
					new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.dialog.addClass("error")
				},
				complete: function() {
					$self$$.enableActions();
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		}
	});
	EDGE.Views.Qos.AdvancedQueue.Filters = {};
	EDGE.Views.Qos.AdvancedQueue.Filters.Default = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.Filters.Default",
		events: {
			"click button.add": "create"
		},
		initialize: function($args$$) {
			this.template = _.template($("#QosAdvancedQueueFiltersTemplate").html());
			this.action = "edit";
			this.parent_id = $args$$.parent_id;
			this.qtree = $args$$.qtree;
			this.nodes_collection = $args$$.nodes_collection;
			this.type = "qos-filter";
			this.id = "qos_advanced_queue_filters_" + this.parent_id;
			this.title =
			"Filters attached to " + this.parent_id;
			this.dpicategories = $args$$.dpicategories;
			this.collection.bind("add", this.add, this);
			this.collection.bind("change", this.update, this);
			this.collection.bind("remove", this.removeFilter, this);
			this.rows = {};
			this.creates = [];
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			var $self$$ = this;
			this.$el.data("rendered") || ("undefined" !== typeof this.dataTable && this.dataTable.fnDestroy(),
			this.$table = this.$("div.qos table"), this.$tbody = this.$table.find("tbody"), this.dataTable = this.$table.dataTable(_.extend({
				oLanguage: {
					sInfo: "Showing <strong>_START_</strong> to <strong>_END_</strong> of <strong>_TOTAL_</strong> entries",
					sSearch: "Search _INPUT_",
					sEmptyTable: "No filters available.",
					sInfoEmpty: ""
				},
				aoColumns: [{
					sClass: "description"
				},
				{
					sClass: "qid"
				},
				{
					sClass: "target"
				},
				{
					sClass: "ip-source"
				},
				{
					sClass: "ip-destination"
				},
				{
					sClass: "buttons",
					bSortable: !1
				}],
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				bPaginate: !1,
				bScrollCollapse: !0,
				sScrollY: 100,
				aaSorting: [[0, "asc"]],
				sDom: '<"H"fr><"scrollable"t><"F"ip>',
				fnDrawCallback: function() {
					$(".dataTables_filter  input").attr("id", "qos_advanced_queue_filters_table_search_box" + $self$$.parent_id + "_" + $self$$.child_id)
				}
			},
			this.options.options || {})), $self$$ = this, this.collection.each(this.add), this.$el.data("rendered", !0), this.show(), this.delegateEvents());
			this.flaggable = !1;
			this.update();
			this.flaggable = !0;
			return this
		},
		renderView: function() {
			EDGE.Views.Global.Abstract.Config.prototype.renderView.call(this);
			this.$("fieldset.actions").remove()
		},
		add: function($filter$$) {
			$filter$$.get("attach-to") === this.parent_id && (this.rows[$filter$$.get("qid")] = new EDGE.Views.Qos.AdvancedQueue.Filters.Row({
				model: $filter$$,
				nodes_collection: this.nodes_collection,
				collection: this.collection,
				dpicategories: this.dpicategories,
				tableObj: this,
				qtree: this.qtree,
				dataTable: this.dataTable
			}), this.$el.data("rendered") && this.show())
		},
		removeFilter: function($filter$$18_id$$) {
			if (this.dataTable) {
				var $filter$$18_id$$ = $filter$$18_id$$.get("qid"),
				$row$$ = this.rows[$filter$$18_id$$];
				$row$$ && ($row$$.reset(), this.dataTable.fnDeleteRow(this.dataTable.fnGetPosition($row$$.el)), delete this.rows[$filter$$18_id$$])
			}
		},
		create: function() {
			this.creates.push(new EDGE.Views.Qos.AdvancedQueue.Filters.Config({
				id: this.creates.length,
				nodes_collection: this.nodes_collection,
				collection: this.collection,
				parent_id: this.parent_id,
				qtree: this.qtree,
				dpicategories: this.dpicategories,
				readonly: !1
			}))
		},
		update: function() {
			this.$el.data("rendered") && (_.each(this.rows,
			function($row$$) {
				$row$$.update()
			}),
			this.show())
		},
		enableActions: function() {
			$(".qos-filter-config .drop-down-button button").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".qos-filter-config .actions button[type=submit]").removeAttr("disabled").removeClass("ui-state-disabled");
			$(".qos-filter-config .actions button.delete").removeAttr("disabled").removeClass("ui-state-disabled");
			var $$button$$ = this.$el.find("button.add.filter");
			$$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !1
			})
		},
		disableActions: function() {
			$(".qos-filter-config .drop-down-button button").attr("disabled",
			"disabled").addClass("ui-state-disabled");
			$(".qos-filter-config .actions button[type=submit]").attr("disabled", "disabled").addClass("ui-state-disabled");
			$(".qos-filter-config .actions button.delete").attr("disabled", "disabled").addClass("ui-state-disabled");
			var $$button$$ = this.$el.find("button.add.filter"); ! 1 == $$button$$.button("option", "disabled") && $$button$$.button({
				disabled: !0
			})
		}
	});
	EDGE.Views.Qos.AdvancedQueue.Filters.Row = EDGE.Views.Global.Abstract.Row.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.Filters.Row",
		initialize: function($args$$) {
			this.specialColumns = [3];
			this.tableObj = $args$$.tableObj;
			this.qtree = $args$$.qtree;
			this.nodes_collection = $args$$.nodes_collection;
			this.dpicategories = $args$$.dpicategories;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			var $source$$ = [],
			$destination$$ = [];
			this.model.get("ip-source-address") &&
			$source$$.push("address " + this.model.get("ip-source-address"));
			this.model.get("ip-source-port") && $source$$.push("port " + this.model.get("ip-source-port"));
			this.model.get("ip-destination-address") && $destination$$.push("address " + this.model.get("ip-destination-address"));
			this.model.get("ip-destination-port") && $destination$$.push("port " + this.model.get("ip-destination-port"));
			return [$.xss(this.model.get("description")) || "-", this.model.get("qid"), this.model.get("target"), $source$$.join("<br />"), $destination$$.join("<br />"),
			""]
		},
		render: function() {
			var $self$$ = this,
			$$buttons$$ = this.$(".buttons");
			$$buttons$$.find("button").length || ("operator" == EDGE.Config.User.level ? $$buttons$$.append($('<button type="button" class="config">View</button>').button({
				icons: {
					primary: "ui-icon-info"
				}
			}).bind("click",
			function() {
				$self$$.config(!0)
			})) : (this.$actions && this.$actions.remove(), this.$actions = new EDGE.Views.Qos.AdvancedQueue.Filters.RowDropDownButton({
				container: this.$(".buttons"),
				row: this
			})));
			this.trigger("render");
			return this
		},
		config: function($readonly$$) {
			this.dialogs.config ?
			this.dialogs.config.show(!0) : this.dialogs.config = new EDGE.Views.Qos.AdvancedQueue.Filters.Config({
				model: this.model,
				nodes_collection: this.nodes_collection,
				collection: this.collection,
				dpicategories: this.dpicategories,
				readonly: $readonly$$,
				qtree: this.qtree,
				container: this.$(".buttons"),
				row: this
			})
		},
		"delete": function() {
			this.tableObj.disableActions();
			var $batch$$ = new EDGE.Models.Batch;
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $self$$ = this;
			this.$el.find(".drop-down-button button").button("showWorkingIndicator",
			"secondary", "ui-icon-spinner");
			var $tid$$ = this.model.get("qid"),
			$p$$ = ["traffic-control", "advanced-queue", "filters", "match"];
			$batch$$.get("gdelete").put($p$$, "__FORCE_ASSOC", !0);
			$batch$$.get("gdelete").put($p$$, $tid$$, null);
			$batch$$.save(["traffic-control"], {
				success: function($model$$, $resp$$) {
					EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $resp$$);
					var $c$$ = $resp$$.COMMIT && $resp$$.COMMIT.success && 1 != $resp$$.COMMIT.failure; (!$resp$$.DELETE || $resp$$.DELETE.success) && $c$$ ? $self$$.collection.remove($self$$.model) :
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}))
				},
				complete: function() {
					$self$$.tableObj.enableActions();
					$self$$.$el.find(".drop-down-button button").button("hideWorkingIndicator")
				}
			})
		}
	});
	EDGE.Views.Qos.AdvancedQueue.Filters.RowDropDownButton = EDGE.Views.Global.Abstract.DropDownButton.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.Filters.RowDropDownButton",
		initialize: function($args$$) {
			this.readonly = "admin" != EDGE.Config.User.level;
			this.template = _.template($("#QosAdvancedQueueFilterDropDownTemplate").html());
			this.row = $args$$.row;
			this.container = $args$$.container;
			EDGE.Views.Global.Abstract.DropDownButton.prototype.initialize.call(this, $args$$)
		},
		events: function() {
			return {
				"click .action-config": "actionConfig",
				"click .action-delete": "actionDelete"
			}
		},
		render: function() {
			this.$el.html(this.template);
			this.container.append(this.$el);
			EDGE.Views.Global.Abstract.DropDownButton.prototype.render.call(this);
			return this
		},
		actionDelete: function() {
			var $self$$ = this.row,
			$id$$ = $self$$.model.get("qid");
			window.app.dialogs.confirmationDialog.open({
				title: "Delete Confirmation",
				message: "Are you sure you want to delete this filter " + $id$$ + " ?",
				confirm: function() {
					$self$$["delete"]()
				}
			});
			return ! 1
		},
		actionConfig: function() {
			this.row.config(!1);
			return ! 1
		}
	});
	EDGE.Views.Qos.AdvancedQueue.Filters.Config = EDGE.Views.Global.Abstract.Config.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Qos.AdvancedQueue.Filters.Config",
		events: {
			"submit form": "save",
			"click button.cancel": "remove"
		},
		templateVars: function() {
			this.ether_protocol_name_vals = "802.1Q 802_2 802_3 aarp aoe arp atalk dec ip ipv6 ipx lat localtalk rarp snap x25".split(" ");
			return {
				attach_to: this.parent_id,
				protocols: this.ether_protocol_name_vals,
				qid: this.model ? this.model.get("qid") : ""
			}
		},
		initialize: function($args$$) {
			_.bindAll(this);
			this.id =
			this.model ? "qosadvancedfilterconfig" + this.model.get("qid") : "qosadvancedfiltercreate" + $args$$.id;
			this.type = "qos";
			this.action = "edit";
			this.title = this.model ? "Configuration for Filter " + this.model.get("qid") : "Create Filter";
			this.readonly = $args$$.readonly;
			this.template = _.template($("#QosAdvancedQueueFilterConfigTemplate").html());
			this.qtree = $args$$.qtree;
			this.nodes_collection = $args$$.nodes_collection;
			this.dpicategories = $args$$.dpicategories;
			this.parent_id = $args$$.parent_id || this.model.get("attach-to");
			EDGE.Views.Global.Abstract.Config.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Global.Abstract.Config.prototype.render.call(this, !0);
			this.$el.data("rendered") || (this.$el.data("rendered", !0), this.show(), this.delegateEvents());
			this.model ? this.$("form").find("input[name=qid]").remove() : this.$("form").find("span.qid").remove();
			this.nodes_collection.filterByAncestor(this.parent_id);
			var $$target$$ = this.$("form").find("select[name=target]");
			$$target$$.empty();
			this.nodes_collection.filterByAncestor(this.parent_id).each(function($node$$) {
				var $v$$ =
				$node$$.get("qid"),
				$text$$ = $v$$,
				$desc$$ = $node$$.get("description"),
				$ceiling$$ = $node$$.get("ceiling");
				$desc$$ && ($text$$ = $text$$ + (" - " + $desc$$));
				$text$$ = $text$$ + (" - " + $node$$.get("bandwidth"));
				$ceiling$$ && ($text$$ = $text$$ + ("/" + $ceiling$$));
				$("<option></option>").val($v$$).text($text$$).appendTo($$target$$)
			});
			var $$application$$ = this.$("form").find("select[name=application]");
			$$application$$.empty();
			$("<option></option>").val("").text("----").appendTo($$application$$);
			var $$customGroup$$ = $("<optgroup></optgroup>").attr("label",
			"Custom Categories").appendTo($$application$$);
			this.dpicategories.each(function($cat$$) {
				$opt = $("<option></option>").val($cat$$.get("name")).text($cat$$.get("name")).appendTo($$customGroup$$)
			},
			this);
			this.$("form").find("input[name=ether-protocol][value=all]").prop("checked", !0);
			this.flaggable = !1;
			this.model && this.update();
			this.flaggable = !0;
			return this
		},
		validation: function() {
			this.$("form").find("input[name=qid]");
			return {
				rules: {
					qid: {
						required: !0,
						digits: !0,
						notAmong: this.collection.map(function($m$$) {
							return $m$$.get("qid")
						})
					},
					mark: {},
					"ether-source": {
						mac: 1
					},
					"ether-destination": {
						mac: 1
					},
					"ether-protocol-number": {
						digits: !0,
						required: !0,
						range: [0, 65535]
					},
					"ether-protocol-text": {
						required: !0,
						noWhiteSpace: !0,
						noQuotes: !0
					},
					"ip-dscp": {
						digits: !0,
						range: [0, 63]
					},
					"ip-protocol": {
						digits: !0,
						range: [0, 255]
					},
					"ip-source-address": {
						ipv4net: 1
					},
					"ip-destination-address": {
						ipv4net: 1
					}
				}
			}
		},
		update: function() {
			var $$form$$ = this.$("form");
			this.updateTextbox($$form$$.find("input[name=description]"), $.xss(this.model.get("description")), $$form$$.find('label[for="' +
			$$form$$.find("input[name=description]").attr("id") + '"]'));
			this.updateSelect($$form$$.find("select[name=target]"), this.model.get("target"), $$form$$.find('label[for="' + $$form$$.find("select[name=target]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=mark]"), this.model.get("mark"), $$form$$.find('label[for="' + $$form$$.find("input[name=mark]").attr("id") + '"]'));
			this.updateSelect($$form$$.find("select[name=application]"), this.model.get("application"), $$form$$.find('label[for="' + $$form$$.find("select[name=application]").attr("id") +
			'"]'));
			var $ether_protocol$$ = this.model.get("ether-protocol") || "",
			$ether_protocol_radio$$;
			"all" == $ether_protocol$$ || "" === $ether_protocol$$ ? $ether_protocol_radio$$ = "all": _.contains(this.ether_protocol_name_vals, $ether_protocol$$) ? ($ether_protocol_radio$$ = "name", this.updateSelect($$form$$.find("select[name=ether-protocol-name]"), $ether_protocol$$, $$form$$.find('label[for="' + $$form$$.find("select[name=ether-protocol-name]").attr("id") + '"]'))) : Number.isInteger($ether_protocol$$) ? ($ether_protocol_radio$$ =
			"number", this.updateTextbox($$form$$.find("input[name=ether-protocol-number]"), $ether_protocol$$, $$form$$.find('label[for="' + $$form$$.find("input[name=ether-protocol-number]").attr("id") + '"]'))) : ($ether_protocol_radio$$ = "text", this.updateTextbox($$form$$.find("input[name=ether-protocol-text]"), $ether_protocol$$, $$form$$.find('label[for="' + $$form$$.find("input[name=ether-protocol-text]").attr("id") + '"]')));
			this.updateRadio($$form$$.find("input[type=radio][name=ether-protocol]"), $$form$$.find("input[name=ether-protocol][value=" +
			$ether_protocol_radio$$ + "]"), $$form$$.find("label[for=ether_protocol]"));
			$$form$$.find("input[name=ether-protocol][value=" + $ether_protocol_radio$$ + "]").trigger("change");
			this.updateTextbox($$form$$.find("input[name=ether-source]"), this.model.get("ether-source"), $$form$$.find('label[for="' + $$form$$.find("input[name=ether-source]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=ether-destination]"), this.model.get("ether-destination"), $$form$$.find('label[for="' + $$form$$.find("input[name=ether-destination]").attr("id") +
			'"]'));
			this.updateTextbox($$form$$.find("input[name=ip-dscp]"), this.model.get("ip-dscp"), $$form$$.find('label[for="' + $$form$$.find("input[name=ip-dscp]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=ip-protocol]"), this.model.get("ip-protocol"), $$form$$.find('label[for="' + $$form$$.find("input[name=ip-protocol]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=ip-source-address]"), this.model.get("ip-source-address"), $$form$$.find('label[for="' + $$form$$.find("input[name=ip-source-address]").attr("id") +
			'"]'));
			this.updateTextbox($$form$$.find("input[name=ip-source-port]"), this.model.get("ip-source-port"), $$form$$.find('label[for="' + $$form$$.find("input[name=ip-source-port]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=ip-destination-address]"), this.model.get("ip-destination-address"), $$form$$.find('label[for="' + $$form$$.find("input[name=ip-destination-address]").attr("id") + '"]'));
			this.updateTextbox($$form$$.find("input[name=ip-destination-port]"), this.model.get("ip-destination-port"),
			$$form$$.find('label[for="' + $$form$$.find("input[name=ip-destination-port]").attr("id") + '"]'))
		},
		prepareSave: function($batch$$) {
			function $val_helper$$($model_attr$$, $input_type$$, $input_name$$) {
				$input_type$$ = $input_type$$ || "input";
				$input_name$$ = $input_name$$ || $model_attr$$;
				return {
					old: $self$$.model ? $self$$.model.get($model_attr$$) || "": "",
					"new": $$form$$.find($input_type$$ + "[name=" + $input_name$$ + "]").val()
				}
			}
			var $changed$$ = !1,
			$self$$ = this;
			_.each(["set", "delete", "get", "generic"],
			function($t$$) {
				$batch$$.unset($t$$)
			});
			var $$form$$ = this.$("form"),
			$$qid$$7_vals$$ = $$form$$.find("input[name=qid]"),
			$ether_protocol$$;
			_.each(["all", "name", "number", "text"],
			function($v$$) {
				$$form$$.find("input[type=radio][name=ether-protocol][value=" + $v$$ + "]").is(":checked") && ("all" === $v$$ ? $ether_protocol$$ = "all": "name" === $v$$ ? $ether_protocol$$ = $$form$$.find("select[name=ether-protocol-name]").val() : "number" === $v$$ ? $ether_protocol$$ = $$form$$.find("input[name=ether-protocol-number]").val() : "text" === $v$$ && ($ether_protocol$$ = $$form$$.find("input[name=ether-protocol-text]").val()))
			},
			this);
			var $p$$ = this.model ? ["traffic-control", "advanced-queue", "filters", "match", this.model.get("qid")] : ["traffic-control", "advanced-queue", "filters", "match", $$qid$$7_vals$$.val()],
			$$qid$$7_vals$$ = {
				target: $val_helper$$("target", "select"),
				description: $val_helper$$("description"),
				mark: $val_helper$$("mark"),
				application: $val_helper$$("application", "select"),
				"ether-protocol": {
					old: this.model ? this.model.get("ether-protocol") || "": "",
					"new": $ether_protocol$$
				},
				"ether-source": $val_helper$$("ether-source"),
				"ether-destination": $val_helper$$("ether-destination"),
				"ip-dscp": $val_helper$$("ip-dscp"),
				"ip-protocol": $val_helper$$("ip-protocol"),
				"ip-source-address": $val_helper$$("ip-source-address"),
				"ip-source-port": $val_helper$$("ip-source-port"),
				"ip-destination-address": $val_helper$$("ip-destination-address"),
				"ip-destination-port": $val_helper$$("ip-destination-port")
			};
			_.each($$qid$$7_vals$$,
			function($val$$, $key$$) {
				var $v_new$$ = $val$$["new"];
				if ($val$$.old !== $v_new$$) {
					$changed$$ = !0;
					var $c$$ = "application" === $key$$ ? $p$$.concat(["application", "custom-category"]) : $p$$.concat($key$$.split("-"));
					$batch$$.get("gdelete").put($c$$, null);
					"" !== $v_new$$ && ($batch$$.get("gset").put($c$$, $v_new$$, null), $batch$$.get("gset").put($c$$, "__FORCE_ASSOC", !0))
				}
			},
			this);
			$batch$$.get("gget").put($p$$, null);
			this.model || ($batch$$.get("gset").put($p$$, "attach-to", this.parent_id, null), $changed$$ = !0);
			return $changed$$
		},
		save: function($batch$$104_e$$) {
			$batch$$104_e$$ && $batch$$104_e$$.preventDefault();
			this.dialog.removeClass("saved success error");
			var $self$$ = this,
			$batch$$104_e$$ = new EDGE.Models.Batch;
			this.prepareSave($batch$$104_e$$) &&
			(this.dialog.addClass("saving"), $batch$$104_e$$.save(["traffic-control"], {
				success: function($model$$, $resp$$) {
					$self$$.response($resp$$)
				},
				error: function() {
					$(window).trigger("notify", new EDGE.Models.Notice({
						type: "error",
						notice: Msg.E_SaveFailed
					}));
					$self$$.dialog.addClass("error")
				},
				complete: function() {
					$self$$.dialog && $self$$.dialog.removeClass("saving")
				}
			}))
		},
		response: function($p$$43_resp$$) {
			var $response$$ = EDGE.Views.Global.Abstract.Config.prototype.response.call(this, $p$$43_resp$$),
			$c$$ = $p$$43_resp$$.COMMIT &&
			$p$$43_resp$$.COMMIT.success && 1 != $p$$43_resp$$.COMMIT.failure;
			if ($p$$43_resp$$.SET && !$p$$43_resp$$.SET.success || !$c$$) return $response$$;
			$p$$43_resp$$ = EDGE.getObjProp($p$$43_resp$$, ["GET", "traffic-control", "advanced-queue"]);
			this.collection["import"]($p$$43_resp$$);
			this.model && this.collection.trigger("change");
			this.dialog.addClass("saved success");
			this.remove();
			return $response$$
		}
	});
	EDGE.Views.Global.Toolbox = {};
	EDGE.Views.Global.Toolbox.Default = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.Toolbox.Default",
		initialize: function($args$$) {
			_.bindAll(this);
			this.stats = $args$$.stats;
			this.setElement($("#Toolbox"));
			this.tools = $("#ToolboxTools");
			this.views = {};
			this.id = 0;
			this.render()
		},
		render: function() {
			this.debug("render()");
			var $self$$ = this;
			window.WEB_SOCKET_FORCE_FLASH && this.$(".cli-button").remove();
			this.$(".buttonset").buttonset();
			this.$(".cli-button").button("option", "icons", {
				primary: "ui-icon-cli"
			}).click(this.cli);
			this.$(".WelcomeLogoutButton").button("option", "icons", {
				primary: "ui-icon-power"
			});
			this.$toolboxButton = this.$("#ToolboxButton").button("option", "icons", {
				primary: "ui-icon-wrench",
				secondary: "ui-icon-triangle-1-s"
			}).bind("change",
			function() {
				$(this).is(":checked") ? $self$$.show() : $self$$.hide()
			});
			$(window).resize(function() {
				$buttonset = this.$(".buttonset");
				960 > $(window).width() ? ($buttonset.children(":first").removeClass("ui-corner-left"), $buttonset.children(":last").removeClass("ui-corner-right"), $buttonset.children().button("option",
				"text", !1)) : ($buttonset.children(":first").addClass("ui-corner-left"), $buttonset.children(":last").addClass("ui-corner-right"), $buttonset.children().button("option", "text", !0))
			});
			$(window).trigger("resize");
			this.tools.hide().find("li").bind("click",
			function() {
				$self$$[$(this).attr("class")]();
				$self$$.hide()
			});
			this.$el.bind("click",
			function($event$$) {
				$event$$.stopPropagation()
			});
			return this
		},
		hide: function() {
			this.tools.hide();
			$(window).unbind("click", this._windowDownHandler);
			this.$toolboxButton.prop("checked",
			!1).button("refresh")
		},
		show: function() {
			this.tools.show();
			$(window).bind("click", this._windowDownHandler)
		},
		_windowDownHandler: function() {
			this.hide()
		},
		ping: function() { (new EDGE.Views.Global.Toolbox.Ping.Default ({
				model: this.collection.add({
					type: "ping",
					id: ++this.id
				}).last(),
				id: this.id,
				stats: this.stats
			})).show()
		},
		bandwidth: function() {
			new EDGE.Views.Global.Toolbox.Bandwidth.Default ({
				model: this.collection.add({
					type: "bandwidth",
					id: ++this.id
				}).last(),
				id: this.id,
				stats: this.stats
			})
		},
		trace: function() { (new EDGE.Views.Global.Toolbox.Trace.Default ({
				model: this.collection.add({
					type: "trace",
					id: ++this.id
				}).last(),
				id: this.id,
				stats: this.stats
			})).show()
		},
		discover: function() {
			this.views.discover || (this.views.discover = new EDGE.Views.Global.Toolbox.Discover.Default ({
				stats: this.stats,
				id: this.id
			}));
			this.views.discover.show()
		},
		speed: function() { (new EDGE.Views.Global.Toolbox.Speed.Default ({
				model: this.collection.add({
					type: "speed",
					id: ++this.id
				}).last(),
				id: this.id
			})).show()
		},
		packets: function() { (new EDGE.Views.Global.Toolbox.Packets.Default ({
				model: this.collection.add({
					type: "packets",
					id: ++this.id
				}).last(),
				id: this.id,
				stats: this.stats
			})).show()
		},
		logmon: function() { (new EDGE.Views.Global.Toolbox.Logmon.Default ({
				model: this.collection.add({
					type: "logmon",
					id: ++this.id
				}).last(),
				id: this.id,
				stats: this.stats
			})).show()
		},
		cli: function() {
			app.dialogs.cliDialog.open()
		},
		reset: function() {
			this.tools.find("li").off();
			this.debug("resetting toolbox")
		}
	});
	EDGE.Views.Global.Toolbox.Abstract = Backbone.View.extend({
		initialize: function() {
			_.bindAll(this);
			var $self$$ = this;
			this.template || $(window).trigger("fatal", Msg.E_MissingConfigTemplate);
			this.id || $(window).trigger("fatal", Msg.E_MissingConfigId);
			this.type || $(window).trigger("fatal", Msg.E_MissingConfigType);
			this.title || $(window).trigger("fatal", Msg.E_MissingConfigTitle);
			this.action = this.action || "tool";
			this.dialogOptions = this.dialogOptions || {};
			this.defaultDialogOptions = {
				autoOpen: !0,
				width: 770,
				modal: !1,
				resizable: !1,
				position: "center",
				dialogClass: "toolbox-dialog " + this.id + "-dialog",
				height: "auto",
				close: function $this$defaultDialogOptions$close$() {
					$self$$.remove()
				}
			};
			this.model && (this.notices = this.model.get("notices")) && this.notices.bind("add", this.notify, this);
			this.render()
		},
		validation: function() {
			return null
		},
		render: function() {
			this.dialog = $("<div></div>");
			this.dialog.attr("title", this.title);
			$("#PageContent").append(this.dialog);
			this.setElement(this.dialog);
			this.$el.html(this.template({
				id: this.id
			}));
			this.dialog.dialog(_.extend({},
			this.defaultDialogOptions, this.dialogOptions));
			var $self$$ = this;
			this.$("form").form({
				validation: _.extend(this.validation() || {},
				{
					errorElement: "span",
					errorPlacement: function($error$$, $element$$) {
						$error$$.css("max-width", $element$$.parent().width() - 12);
						$error$$.css("margin-top", "5px");
						$error$$.insertAfter($element$$)
					}
				}),
				render: function() {
					$self$$.show()
				}
			});
			return this
		},
		show: function() {
			this.dialog ? this.dialog.dialog("open") : this.render()
		},
		remove: function() {
			this.dialog.dialog("destroy");
			this.dialog.remove();
			this.dialog = this.el = null
		},
		notify: function($notice$$) {
			var $$notices$$ = this.$("div.section.notices");
			$$notices$$ && $$notices$$.show().append($('<div class="notice">' + $notice$$.get("notice") + "</div>"))
		}
	});
	EDGE.Views.Global.Toolbox.Ping = {};
	EDGE.Views.Global.Toolbox.Ping.Default = EDGE.Views.Global.Toolbox.Abstract.extend({
		initialize: function($args$$) {
			this.stats = $args$$.stats;
			this.id = "ping" + $args$$.id;
			this.type = "ping";
			this.title = "Ping";
			this.template = _.template($("#ToolboxPingTemplate").html());
			this.dialogOptions = {
				width: 380,
				height: "auto"
			};
			this.summary = {};
			this.collection = this.model.get("data");
			this.collection.bind("add", this.add, this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			EDGE.Views.Global.Toolbox.Abstract.prototype.initialize.call(this,
			$args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$self$$.run()
				},
				rules: {
					destination: {
						required: !0
					},
					"packet-count": {
						range: [1, 4294967295]
					},
					"packet-size": {
						range: [1, 65507]
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.render.call(this);
			var $self$$ = this;
			this.$("button[type=submit]").button().bind("click",
			function($e$$) {
				$e$$.preventDefault();
				$self$$.$("form").valid() && $self$$.run()
			});
			this.$("button[type=button]").button().bind("click",
			function() {
				$self$$.stop()
			});
			this.running(!1);
			return this
		},
		renderStats: function($finished$$) {
			this.summary.packets && this.summary.times && this.$("div.stats").find("span.packets").html(this.summary.packets.get("received") + " of " + this.summary.packets.get("transmitted") + " packets received, " + this.summary.packets.get("loss") + "% loss").end().find("span.times").html("Min: " + this.summary.times.get("min") + " ms | Avg: " + this.summary.times.get("avg") + " ms | Max: " + this.summary.times.get("max") + " ms").end().show();
			$finished$$ && this.stop()
		},
		add: function($l$$20_row$$) {
			switch ($l$$20_row$$.get("type")) {
			case "ping":
				this.rows.push(new EDGE.Views.Global.Toolbox.Ping.Row({
					model:
					$l$$20_row$$,
					dataTable: this.dataTable
				}));
				var $pkts$$ = this.summary.packets,
				$times$$ = this.summary.times,
				$r$$ = $pkts$$.get("received"),
				$t$$ = parseInt($l$$20_row$$.get("request"), 10),
				$ttl$$ = $l$$20_row$$.get("ttl"),
				$nr$$ = $r$$,
				$nt$$ = 0;
				"" !== $ttl$$ && ($nr$$++, $nt$$ = parseFloat($l$$20_row$$.get("time"), 10));
				var $l$$20_row$$ = Math.round(100 * (($t$$ - $nr$$) /
				$t$$)),
				$max$$ = $times$$.get("max"),
				$min$$ = $times$$.get("min"),
				$avg$$ = $times$$.get("avg");
				"" !== $ttl$$ && ($max$$ = $nt$$ > $max$$ ? $nt$$: $max$$, $min$$ = $min$$ ? $nt$$ < $min$$ ? $nt$$: $min$$: $nt$$, $avg$$ = Math.round(1E3 * (($avg$$ * $r$$ + $nt$$) / $nr$$)) / 1E3);
				$pkts$$.set({
					received: $nr$$,
					transmitted: $t$$,
					loss: $l$$20_row$$
				});
				$times$$.set({
					max: $max$$,
					min: $min$$,
					avg: $avg$$
				});
				this.renderStats(!1);
				break;
			case "packets":
				this.summary.packets = $l$$20_row$$;
				this.renderStats(!1);
				break;
			case "times":
				this.summary.times = $l$$20_row$$,
				this.renderStats(!0)
			}
			this.lazyResize()
		},
		run: function() {
			this.stop();
			this.collection.reset();
			this.$el.data("rendered") ? this.dataTable.fnClearTable() : ("undefined" !== typeof this.dataTable && this.dataTable.fnDestroy(), this.$el.data("rendered", !0), this.$table = this.$("table"), this.$tbody = this.$table.find("tbody"), this.dataTable = this.$table.dataTable(_.extend({
				oLanguage: {
					sEmptyTable: "No results available.",
					sInfoEmpty: ""
				},
				aoColumns: [{
					sClass: "request",
					bVisible: !1
				},
				{
					sClass: "host"
				},
				{
					sClass: "time"
				},
				{
					sClass: "ttl"
				}],
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				sScrollY: 150,
				bScrollCollapse: !0,
				aaSorting: [[0, "desc"]],
				sDom: "t"
			},
			this.options.options || {})));
			this.rows = [];
			this.$("div.results").show();
			this.$("div.notices").hide().find(".notice").remove();
			this.summary.packets || (this.summary.packets = new Backbone.Model);
			this.summary.times || (this.summary.times = new Backbone.Model);
			this.summary.packets.set({
				received: 0,
				transmitted: 0,
				loss: 0
			});
			this.summary.times.set({
				min: 0,
				avg: 0,
				max: 0
			});
			this.renderStats(!1);
			this.stats.subscribe([{
				name: "ping-feed",
				sub_id: this.id,
				target: this.$("input[name=destination]").val(),
				count: this.$("input[name=packet-count]").val(),
				size: this.$("input[name=packet-size]").val()
			}]);
			this.running(!0);
			this.resize()
		},
		stop: function() {
			this._running && this.stats.unsubscribe([{
				name: "ping-feed",
				sub_id: this.id
			}]);
			this.running(!1)
		},
		running: function($running$$) { (this._running = $running$$) ? this.$("button[type=button]").show() : this.$("button[type=button]").hide()
		},
		resize: function() {
			this.dialog && this.dialog.dialog("option", "position", "center");
			this.dataTable && this.$table.fnDraw(!1)
		},
		remove: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.remove.call(this);
			this.stop();
			this.model.clear();
			this.model.trigger("destroy", this.model, this.model.collection)
		}
	});
	EDGE.Views.Global.Toolbox.Ping.Row = EDGE.Views.Global.Abstract.Row.extend({
		data: function() {
			return [this.model.get("request"), this.model.get("host"), this.model.get("time"), this.model.get("ttl")]
		}
	});
	EDGE.Views.Global.Toolbox.Bandwidth = {};
	EDGE.Views.Global.Toolbox.Bandwidth.Default = EDGE.Views.Global.Toolbox.Abstract.extend({
		initialize: function($args$$) {
			this.stats = $args$$.stats;
			this.id = "bandwidth" + $args$$.id;
			this.type = "bandwidth";
			this.title = "Bandwidth";
			this.template = _.template($("#ToolboxBandwidthTemplate").html());
			this.components = {};
			this.numbers = 30;
			this.dialogOptions = {
				width: 380,
				height: "auto"
			};
			this.config = this.config();
			this.generateDimensions();
			this.collection = this.model.get("data");
			this.collection.bind("add", this.add, this);
			EDGE.Views.Global.Toolbox.Abstract.prototype.initialize.call(this,
			$args$$)
		},
		config: function() {
			return {
				width: 360,
				height: 135,
				margin: {
					top: 5,
					right: 20,
					bottom: 5,
					left: 40
				},
				points: 40,
				overlays: {
					databox: {
						height: 155,
						top: 10
					}
				}
			}
		},
		generateDimensions: function() {
			var $config$$ = this.config;
			$config$$.graph = {
				width: $config$$.width - $config$$.margin.left - $config$$.margin.right,
				height: $config$$.height - $config$$.margin.top - $config$$.margin.bottom
			}
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$self$$.run()
				},
				rules: {
					destination: {
						required: !0,
						ipv4OrIpv6: 1
					},
					duration: {
						min: 0,
						max: 1E3
					},
					"udp-bandwidth": {
						min: 500,
						max: 1E6
					},
					"parallel-flows": {
						min: 1,
						max: 20
					},
					"tcp-window-size": {
						min: 64,
						max: 1024
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.render.call(this);
			var $self$$ = this;
			this.$("div.dialog-tabs").tabs();
			this.$("button[type=button]").hide();
			_.each(["sender", "receiver"],
			function($$form$$64_tab$$) {
				var $$form$$64_tab$$ = this.$("form." + $$form$$64_tab$$),
				$$advanced$$ = $$form$$64_tab$$.find("fieldset.advanced").hide();
				$$form$$64_tab$$.find("label.advanced_setting").bind("click",
				function($e$$) {
					$this = $(this);
					$e$$.preventDefault();
					$this.hasClass("show") ? ($this.removeClass("show"), $this.html("Show advanced settings..."), $$advanced$$.hide(), $self$$.advanced = !1) : ($this.addClass("show"), $this.html("Hide advanced settings"), $$advanced$$.show(), $self$$.advanced = !0)
				}).trigger("click");
				$$advanced$$.find("select[name=protocol]").bind("change",
				function($e$$) {
					$e$$.preventDefault();
					$this = $(this);
					"udp" == $this.val() ? $this.next().show() : $this.next().hide()
				}).trigger("change")
			},
			this);
			this.$("button[type=submit]").button().bind("click",
			function($$notices$$1_e$$) {
				$$notices$$1_e$$.preventDefault();
				$self$$.role = $(this).data("role");
				if ($self$$._running && $self$$.asrole && !$(this).hasClass($self$$.asrole)) {
					if ($$notices$$1_e$$ = $self$$.$("div.section.notices")) $$notices$$1_e$$.addClass("local"),
					$$notices$$1_e$$.find("div.local").length || $$notices$$1_e$$.append($('<div class="notice local">Running as ' + $self$$.asrole + "!</div>")),
					$$notices$$1_e$$.show()
				} else $self$$.tabrole = $(this).data("role"),
				$self$$.$form = $("div." + $self$$.tabrole + " form"),
				$self$$.numbers = 30,
				$self$$.$form.valid() && ($self$$.stop(), $self$$.run())
			});
			this.$("button[type=button]").button().bind("click",
			function() {
				var $$notices$$ = $self$$.$("div.section.notices");
				$$notices$$.hasClass("local") && ($$notices$$.removeClass("local"), $$notices$$.hide().find(".notice").remove());
				$self$$.role = null;
				$self$$.stop()
			});
			this.renderStats();
			return this
		},
		renderStats: function() {
			this.$(".canvas").on("mousemove", $.proxy(function($e$$) {
				if (this.components.datasets) {
					$datasets = $(this.components.datasets.node());
					var $xoffset$$ = $datasets.offset().left,
					$yoffset$$ = $datasets.offset().top,
					$xpos$$ = $e$$.pageX - $xoffset$$,
					$ypos$$ = $e$$.pageY - $yoffset$$;
					try {
						var $$yaxis$$ = $(this.components.graph.select(".y.axis").node());
						$$yaxis$$[0].getBBox && ($xoffset$$ = $$yaxis$$[0].getBBox().width + $$yaxis$$.offset().left, $xpos$$ = $e$$.pageX - $xoffset$$)
					} catch($e$$0$$) {}
					this.coords = {
						xoffset: $xoffset$$,
						yoffset: $yoffset$$,
						xpos: $xpos$$,
						ypos: $ypos$$
					};
					this.updateStats()
				}
			},
			this))
		},
		showStats: function() {
			this.$("g.datasets").children().length ?
			this.$(".hover-stats").show() : this.$(".hover-stats").hide()
		},
		updateStats: function() {
			_.each(this.components.datasets.select("g.column").selectAll("rect"),
			function($dataset$$) {
				var $closest$$,
				$total$$ = _.size($dataset$$);
				_.each($dataset$$,
				function($rect$$, $num$$) {
					if (!$closest$$) {
						var $rect$$ = d3.select($rect$$),
						$start$$ = +$rect$$.attr("x"),
						$end$$ = $start$$ + +$rect$$.attr("width"),
						$xpos$$ = this.coords.xpos;
						if ($xpos$$ >= $start$$ && $xpos$$ <= $end$$ || 0 === $num$$ && this.coords.xpos < $start$$ || $num$$ + 1 === $total$$) $closest$$ =
						{
							num: $num$$,
							rect: $rect$$
						}
					}
				},
				this);
				if ($closest$$ && (!this.focused || this.focused.num != $closest$$.num)) this.focused = $closest$$
			},
			this);
			this.focused && this.focused.num && this.updateHover(this.focused.num)
		},
		updateHover: function() {
			if (this.unit) {
				var $speed$$ = this.convertedSpeeds[this.focused.num] + this.unit;
				this.$(".hover-stats").html($speed$$)
			}
		},
		running: function($running$$) {
			var $stop$$ = "button." + this.tabrole + "[type=button]"; (this._running = $running$$) ? this.$($stop$$).show() : this.$($stop$$).hide()
		},
		addNotify: function($error$$) {
			var $$notices$$ =
			this.$("div.section.notices");
			$$notices$$ && $$notices$$.show().append($('<div class="notice">' + $error$$ + "</div>"))
		},
		add: function($row$$) {
			if ("sender" == this.tabrole) {
				var $components$$ = this.components;
				$row$$.get("reset") ? (this.reset(), this.renderGraph()) : $row$$.get("role") ? this.asrole = $row$$.get("role") : $row$$.get("done") ? (this.role = null, this.stop()) : $row$$.get("notices") ? this.addNotify($row$$.get("notices")) : this.generateData($row$$) && ($components$$.yScale.domain([0, d3.max(this.data[this.data.length -
				1],
				function($d$$) {
					return $d$$.y0 + $d$$.y
				})]), $components$$.yScaleInverse.domain([0, d3.max(this.data[this.data.length - 1],
				function($d$$) {
					return $d$$.y0 + $d$$.y
				})]), $components$$.datasets.selectAll("g.column").remove(), this.updateGraph())
			} else $row$$.get("source") ? this.$canvas.append("<div>" + $row$$.get("data") + ". Find Graph on Sender's GUI.</div>") : "receiver" == $row$$.get("role") ? (this.asrole = $row$$.get("role"), this.$canvas.append("<div>" + $row$$.get("data") + "</div>")) : $row$$.get("notices") && this.addNotify($row$$.get("notices"));
			this.showStats()
		},
		updateGraph: function() {
			var $config$$ = this.config,
			$data$$ = this.data,
			$components$$ = this.components;
			$components$$.graph.select(".y.axis").call($components$$.yAxis).selectAll("g").filter(function($value$$) {
				return ! $value$$
			}).classed("zero", !0);
			$components$$.datasets.selectAll("g.column").data($data$$).enter().append("g").attr("class", "column").style("fill", "#FFA500").style("stroke", "#fff").selectAll("rect").data(Object).enter().append("rect").attr("x",
			function($d$$) {
				return $components$$.xScale($d$$.x)
			}).attr("y",
			function($d$$) {
				return - $components$$.yScale($d$$.y0) - $components$$.yScale($d$$.y)
			}).attr("height",
			function($d$$) {
				return $components$$.yScale($d$$.y)
			}).attr("width", $config$$.graph.width / this.numbers)
		},
		generateData: function($row$$68_unit$$) {
			var $remapped$$ = [],
			$speeds$$ = this.speeds,
			$max$$ = this.max,
			$divider$$,
			$speed$$0$$ = $row$$68_unit$$.get("speed");
			if ("sender" == this.role && this.paraflows && !$row$$68_unit$$.get("sum")) return ! 1;
			$speeds$$.shift();
			$speeds$$.push($speed$$0$$);
			$max$$ = Math.max($max$$, $speed$$0$$);
			$max$$ > ($divider$$ = Math.pow(1024, 2)) ? $row$$68_unit$$ = "Gbps": $max$$ > ($divider$$ = 1024) ? $row$$68_unit$$ = "Mbps": ($divider$$ = 1, $row$$68_unit$$ = "Kbps");
			$divider$$ && ($speeds$$ = _.map($speeds$$,
			function($num$$) {
				return parseFloat($num$$) / $divider$$
			}));
			this.convertedSpeeds = _.map($speeds$$,
			function($num$$) {
				return $num$$.toFixed(2)
			});
			$remapped$$.push(_.map($speeds$$,
			function($speed$$, $num$$) {
				return {
					x: $num$$,
					y: parseFloat($speed$$)
				}
			}));
			$row$$68_unit$$ != this.unit && (this.renderTitle($row$$68_unit$$), this.unit = $row$$68_unit$$);
			$remapped$$ && (this.data = d3.layout.stack()($remapped$$));
			return ! 0
		},
		renderGraph: function() {
			var $components$$ = this.components,
			$config$$ = this.config;
			$components$$.xScale = d3.scale.linear().range([0, $config$$.graph.width]).domain([0, this.numbers]);
			$components$$.yScale = d3.scale.linear().range([0, $config$$.graph.height]);
			$components$$.yScaleInverse = d3.scale.linear().range([$config$$.graph.height, 0]);
			$components$$.xScaleInverse = d3.scale.linear().range([$config$$.graph.width, 0]).domain([0, this.numbers]);
			$components$$.yAxis =
			d3.svg.axis().scale($components$$.yScaleInverse).orient("left").ticks(6).tickSubdivide(!0).tickSize(4, 4, 0).tickPadding(3);
			$components$$.container = d3.select("div.canvas").append("svg").attr("width", $config$$.width).attr("height", $config$$.height);
			$components$$.graph = $components$$.container.append("g").attr("class", "graph").attr("transform", "translate(" + $config$$.margin.left + "," + $config$$.margin.top + ")");
			$components$$.graph.append("g").attr("class", "y axis").attr("transform", "translate(0,0)");
			$components$$.graph.append("g").attr("class",
			"x axis").attr("transform", "translate(0," + $config$$.height + ")");
			$components$$.datasets = $components$$.graph.append("g").attr("class", "datasets").attr("transform", "translate(0," + $config$$.graph.height + ")");
			$components$$.title = $components$$.container.append("g").attr("class", "title").attr("transform", "translate(" + $config$$.margin.left + "," + $config$$.margin.top + ")");
			$components$$.title.append("rect").attr("width", 108).attr("height", 25);
			$components$$.title.append("text").attr("transform", "translate(8, 15)");
			this.renderTitle()
		},
		renderTitle: function($unit$$) {
			this.components.title.select("text").text("Bandwidth " + ($unit$$ ? "(" + $unit$$ + ")": ""))
		},
		run: function() {
			this.$el.data("rendered") ? this.reset() : (this.$el.data("rendered", !0), this.$canvas = this.$("div.canvas"));
			"sender" == this.tabrole && this.renderGraph();
			this.rows = [];
			this.$("div.results").show();
			this.$("div.notices").hide().find(".notice").remove();
			this.max = 0;
			this.seedSpeeds();
			if ("receiver" == this.tabrole) this.stats.subscribe([{
				name: "bwtest-feed",
				sub_id: this.id,
				"server-mode": !0
			}]);
			else {
				var $$form$$ = this.$("form.sender"),
				$requests$$ = {
					name: "bwtest-feed",
					sub_id: this.id,
					server: $$form$$.find("input[name=destination]").val()
				};
				this.advanced ? ($requests$$.duration = $$form$$.find("input[name=duration]").val() || "30", $requests$$.protocol = $$form$$.find("select[name=protocol]").val(), "udp" == $requests$$.protocol && ($requests$$["udp-bandwidth"] = $$form$$.find("input[name='udp-bandwidth']").val() || "10000"), $requests$$["parallel-flows"] = $$form$$.find("input[name='parallel-flows']").val() ||
				1, this.paraflows = 1 < $requests$$["parallel-flows"] ? !0: !1, $requests$$["tcp-window-size"] = $$form$$.find("input[name='tcp-window-size']").val() || "64", $$form$$.find("input[name='reverse-direction']").is(":checked") && ($requests$$["reverse-direction"] = !0)) : this.paraflows = !1;
				this.stats.subscribe([$requests$$])
			}
			this.running(!0)
		},
		reset: function() {
			this.$canvas.empty();
			this.collection.reset();
			delete this.unit;
			this.max = 0;
			this.seedSpeeds();
			this.$(".hover-stats").html("Hover for Details")
		},
		seedSpeeds: function() {
			this.speeds =
			[];
			for (var $i$$ = 0; $i$$ < this.numbers; $i$$++) this.speeds.push(0)
		},
		stop: function() {
			this._running && this.stats.unsubscribe([{
				name: "bwtest-feed",
				sub_id: this.id
			}]);
			this.running(!1)
		},
		remove: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.remove.call(this);
			this.stop();
			this.model.clear();
			this.model.trigger("destroy", this.model, this.model.collection)
		}
	});
	EDGE.Views.Global.Toolbox.Trace = {};
	EDGE.Views.Global.Toolbox.Trace.Default = EDGE.Views.Global.Toolbox.Abstract.extend({
		initialize: function($args$$) {
			this.stats = $args$$.stats;
			this.id = "trace" + $args$$.id;
			this.type = "trace";
			this.title = "Trace";
			this.template = _.template($("#ToolboxTraceTemplate").html());
			this.dialogOptions = {
				width: 500
			};
			this.collection = this.model.get("data");
			this.collection.bind("add", this.add, this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			EDGE.Views.Global.Toolbox.Abstract.prototype.initialize.call(this,
			$args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$self$$.run()
				},
				rules: {
					destination: {
						required: !0
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.render.call(this);
			var $self$$ = this;
			this.$("button[type=submit]").button().bind("click",
			function($e$$) {
				$e$$.preventDefault();
				$self$$.$("form").valid() && $self$$.run()
			});
			this.$("button[type=button]").button().bind("click",
			function() {
				$self$$.stop()
			});
			this.running(!1);
			return this
		},
		add: function($row$$) {
			this.rows.push(new EDGE.Views.Global.Toolbox.Trace.Row({
				model: $row$$,
				dataTable: this.dataTable
			}))
		},
		run: function() {
			this.stop();
			this.collection.reset();
			this.$el.data("rendered") ? this.dataTable.fnClearTable() : ("undefined" !== typeof this.dataTable && this.dataTable.fnDestroy(), this.$el.data("rendered", !0), this.$table = this.$("table"), this.$tbody = this.$table.find("tbody"), this.dataTable = this.$table.dataTable(_.extend({
				oLanguage: {
					sEmptyTable: "No results available.",
					sInfoEmpty: ""
				},
				aoColumns: [{
					sClass: "id"
				},
				{
					sClass: "host"
				},
				{
					sClass: "ip"
				},
				{
					sClass: "responses"
				}],
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				bPaginate: !1,
				sScrollY: 150,
				bScrollCollapse: !0,
				sDom: "t"
			},
			this.options.options || {})));
			this.rows = [];
			this.$("div.results").show();
			this.$("div.notices").hide().find(".notice").remove();
			this.stats.subscribe([{
				name: "traceroute-feed",
				sub_id: this.id,
				target: this.$("input[name=destination]").val(),
				resolve: this.$("input[name=resolve]").is(":checked")
			}]);
			this.running(!0);
			this.resize()
		},
		stop: function() {
			this._running && this.stats.unsubscribe([{
				name: "traceroute-feed",
				sub_id: this.id
			}]);
			this.running(!1)
		},
		running: function($running$$) { (this._running = $running$$) ? this.$("button[type=button]").show() : this.$("button[type=button]").hide()
		},
		resize: function() {
			this.dialog && this.dialog.dialog("option", "position", "center");
			this.dataTable && this.$table.fnDraw(!1)
		},
		remove: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.remove.call(this);
			this.stop();
			this.model.clear();
			this.model.trigger("destroy", this.model, this.model.collection)
		}
	});
	EDGE.Views.Global.Toolbox.Trace.Row = EDGE.Views.Global.Abstract.Row.extend({
		data: function() {
			return [this.model.get("id"), this.model.get("host"), this.model.get("ip"), this.model.get("responses")]
		}
	});
	EDGE.Views.Global.Toolbox.Discover = {};
	EDGE.Views.Global.Toolbox.Discover.Default = EDGE.Views.Global.Toolbox.Abstract.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.stats = this.options.stats;
			this.type = this.id = "discover";
			this.title = "Discover";
			this.template = _.template($("#ToolboxDiscoverTemplate").html());
			this.drillDownTemplate = _.template($("#ToolboxDiscoverDrillDownTemplate").html());
			this.ipLinkTemplate = _.template($("#ToolboxDiscoverIPLinkTemplate").html());
			this.filterInterfaceBy = "all";
			this.dialogOptions = {
				height: 370
			};
			this.collection =
			this.stats.model.get("toolbox").get("discover").get("data");
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize", this.lazyResize);
			EDGE.Views.Global.Toolbox.Abstract.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.render.call(this);
			var $self$$ = this;
			this.addAll();
			UBNT_DISCOVER_DISABLE && (this.$(".ui-widget-header.title").html("UBNT Discovery is disabled. Please enable it in System Tab to discover devices."), this.dataTable.fnClearTable());
			this.$(".text-input").bind("keyup",
			function() {
				$self$$.filterDevices();
				return false
			}).bind("keypress",
			function($event$$) {
				if ($event$$.keyCode == 13) return false
			});
			this.renderInterfaceSelectMenu();
			return this
		},
		renderInterfaceSelectMenu: function() {
			var $$selectMenu$$ = $("#ToolboxDiscoverInterfaceSelect"),
			$self$$ = this;
			$$selectMenu$$.bind("change",
			function() {
				$self$$.filterInterfaceBy = this.value;
				$self$$.filterDevices()
			});
			$$selectMenu$$.append('<option value="all" selected>All</option>');
			window.app.data.view.get("interfaces").filterByType("ethernet").each(function($ethernet$$) {
				$$selectMenu$$.append('<option value="' +
				$ethernet$$.get("id") + '">' + $ethernet$$.get("id") + "</option>");
				$ethernet$$.get("vif") && _.each($ethernet$$.get("vif"),
				function($vif$$) {
					$$selectMenu$$.append('<option value="' + $vif$$.id + '">' + $vif$$.id + "</option>")
				})
			});
			$$selectMenu$$.selectmenu("destroy").selectmenu()
		},
		filterDevices: function() {
			var $inputValue$$ = this.$(".text-input").val();
			this.dataTable.fnFilter("all" === this.filterInterfaceBy ? "": this.filterInterfaceBy, 1);
			this.dataTable.fnFilter($inputValue$$);
			this.$el.find("#ToolboxDiscoverDevicesDisplayed").html(this.dataTable.fnSettings().fnRecordsDisplay())
		},
		add: function($row$$) {
			this.rows.push(new EDGE.Views.Global.Toolbox.Discover.Row({
				model: $row$$,
				dataTable: this.dataTable
			}));
			this.$el.find("#ToolboxDiscoverDevicesDiscovered").html(this.rows.length);
			this.$el.find("#ToolboxDiscoverDevicesDisplayed").html(this.dataTable.fnSettings().fnRecordsDisplay())
		},
		addAll: function() {
			this.rows = [];
			this.run();
			this.collection.each(this.add)
		},
		run: function() {
			var $self$$ = this;
			if (this.$el.data("rendered")) this.dataTable.fnClearTable();
			else {
				"undefined" !== typeof this.dataTable &&
				this.dataTable.fnDestroy();
				this.$el.data("rendered", !0);
				this.$table = this.$("table").addClass("discover-table");
				this.$tbody = this.$table.find("tbody");
				this.dataTable = this.$table.dataTable(_.extend({
					oLanguage: {
						sEmptyTable: "No results available.",
						sInfoEmpty: ""
					},
					aoColumns: [{
						mDataProp: null,
						mData: null,
						sClass: "center",
						sDefaultContent: '<span class="ui-button-icon-primary ui-icon ui-icon-triangle-1-e drill-down-control"></span>',
						bSortable: !1
					},
					{
						sClass: "interface"
					},
					{
						sClass: "mac-address"
					},
					{
						sClass: "device-name"
					},
					{
						sClass: "product"
					},
					{
						sClass: "ip",
						sType: "ipv4-address-hyperlink",
						fnRender: function($obj$$) {
							return $self$$.ipLinkTemplate({
								ip: $obj$$.aData[5]
							})
						}
					}],
					bRetrieve: !0,
					bAutoWidth: !1,
					bJQueryUI: !0,
					bPaginate: !1,
					sScrollY: 200,
					bScrollCollapse: !0,
					sDom: "t"
				},
				this.options.options || {}));
				var $classes$$ = this.dialog.dialog("option", "dialogClass");
				this.dialog.dialog({
					resizable: !0,
					minWidth: 770,
					position: "center",
					dialogClass: "resizable-dialog " + $classes$$,
					resize: function() {
						$self$$.dataTable && ($self$$.$table.fnSettings().oScroll.sY =
						$(this).outerHeight(!0) - $(this).find(".filter-tools").outerHeight() - $(this).find(".ui-widget-header.title").outerHeight() - $(this).siblings(".ui-dialog-titlebar").outerHeight() - 4, $self$$.$table.fnDraw(!1))
					}
				});
				this.dialog && this.dialog.dialog("option", "position", "center")
			}
			this.$("div.results").show();
			this.resize()
		},
		resize: function() {
			this.dataTable && this.$table.fnDraw(!1)
		}
	});
	EDGE.Views.Global.Toolbox.Discover.Row = EDGE.Views.Global.Abstract.Row.extend({
		initialize: function($args$$) {
			_.bindAll(this);
			this.drillDownTemplate = _.template($("#ToolboxDiscoverDrillDownTemplate").html());
			this.addressTemplate = _.template($("#ToolboxDiscoverAddressTemplate").html());
			this.isDrillDownOpen = !1;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, $args$$)
		},
		data: function() {
			return ["", this.model.get("interface"), this.model.get("hwaddr"), this.model.get("hostname"), this.model.get("product"),
			this.model.get("ipv4"), ""]
		},
		render: function() {
			this.$arrow = this.$("span.drill-down-control");
			this.$el.bind("click", this._controlClickHandler);
			this.$(".exit-link").bind("click",
			function($event$$) {
				$event$$.stopPropagation()
			});
			EDGE.Views.Global.Abstract.Row.prototype.render.call(this)
		},
		_controlClickHandler: function() {
			var $$target$$ = this.$arrow,
			$row$$ = $$target$$[0].parentNode.parentNode,
			$self$$ = this;
			this.isDrillDownOpen ? (this.isDrillDownOpen = !1, $$target$$.removeClass("ui-icon-triangle-1-s"), $(".inner-details",
			$($row$$).next()[0]).slideUp(function() {
				$self$$.dataTable.fnClose($row$$)
			})) : (this.isDrillDownOpen = !0, $$target$$.addClass("ui-icon-triangle-1-s"), $$target$$ = this.dataTable.fnOpen($row$$, this._renderDetails(), "details"), $(".inner-details", $$target$$).show(), this.dataTable.fnDraw(!1), $(".inner-details", $$target$$).hide().slideDown())
		},
		_renderDetails: function() {
			var $$innerDetails$$ = $(this.drillDownTemplate(this.model.attributes)),
			$$addressesContainer$$ = $(".addresses-container", $$innerDetails$$),
			$$productImage$$ =
			$(".product-image", $$innerDetails$$),
			$self$$ = this;
			$$innerDetails$$.addClass(this.$el.attr("class"));
			_.each(this.model.get("addresses"),
			function($address$$1_item$$) {
				$address$$1_item$$ = $self$$.addressTemplate({
					hwaddr: $address$$1_item$$.hwaddr,
					ipv4: $address$$1_item$$.ipv4
				});
				$$addressesContainer$$.append($address$$1_item$$)
			});
			$$productImage$$.addClass(this.model.get("product").toLowerCase());
			return $("<div>").append($$innerDetails$$).html()
		}
	});
	EDGE.Views.Global.Toolbox.Speed = {};
	EDGE.Views.Global.Toolbox.Speed.Default = EDGE.Views.Global.Toolbox.Abstract.extend({
		initialize: function($args$$) {
			this.id = "speed" + $args$$.id;
			this.type = "speed";
			this.title = "Speed Test";
			this.template = _.template($("#ToolboxSpeedTemplate").html());
			this.items = 16;
			this.collection = new EDGE.Collections.ToolboxSpeed;
			this.collection.bind("add", this.update, this);
			EDGE.Views.Global.Toolbox.Abstract.prototype.initialize.call(this, $args$$)
		},
		render: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.render.call(this);
			var $self$$ = this;
			this.$("button").button().bind("click",
			function($e$$) {
				$e$$.preventDefault();
				$self$$.run()
			});
			return this
		},
		run: function() {
			var $data$$ = !1;
			if (this.$el.data("rendered")) this.collection.reset();
			else {
				this.$el.data("rendered", !0);
				for (var $data$$ = [], $i$$ = 0; $i$$ < this.items; $i$$++) $data$$.push([$i$$, 0]);
				this.$graph = this.$("div.points");
				this.plot = $.plot(this.$graph, [{
					label: "rx = 0",
					data: $data$$
				},
				{
					label: "tx = 0",
					data: $data$$
				}], {
					series: {
						lines: {
							show: !0
						},
						points: {
							show: !0
						}
					},
					xaxis: {
						show: !1,
						tickSize: this.items
					},
					yaxis: {
						show: !0,
						ticks: 8,
						min: 0,
						max: 140,
						labelWidth: 25
					},
					crosshair: {
						mode: "x"
					},
					grid: {
						hoverable: !0,
						autoHighlight: !1,
						backgroundColor: {
							colors: ["#fff", "#eee"]
						}
					},
					legend: {
						position: "nw",
						margin: 5,
						backgroundColor: "#fff"
					}
				});
				var $self$$ = this;
				this.$graph.bind("plothover",
				function($event$$, $pos$$) {
					var $axes_i$$ = $self$$.plot.getAxes();
					if (! ($pos$$.x < $axes_i$$.xaxis.min || $pos$$.x > $axes_i$$.xaxis.max || $pos$$.y < $axes_i$$.yaxis.min || $pos$$.y > $axes_i$$.yaxis.max)) for (var $j$$, $dataset$$ = $self$$.plot.getData(), $axes_i$$ = 0; $axes_i$$ <
					$dataset$$.length; ++$axes_i$$) {
						for ($j$$ = 0; $j$$ < $dataset$$[$axes_i$$].data.length && !($dataset$$[$axes_i$$].data[$j$$][0] > $pos$$.x); ++$j$$);
						var $y$$,
						$p1$$ = $dataset$$[$axes_i$$].data[$j$$ - 1];
						$j$$ = $dataset$$[$axes_i$$].data[$j$$];
						$y$$ = null == $p1$$ ? $j$$[1] : null == $j$$ ? $p1$$[1] : $p1$$[1] + ($j$$[1] - $p1$$[1]) * ($pos$$.x - $p1$$[0]) / ($j$$[0] - $p1$$[0]);
						$self$$.$graph.find(".legendLabel").eq($axes_i$$).text(function($index$$, $text$$) {
							return $text$$.replace(/=.*/, "= " + $y$$.toFixed(2))
						})
					}
				});
				$data$$ = !0
			}
			this.$("div.results").show();
			$self$$ = this;
			setInterval(function() {
				$self$$.collection.add([{
					rx: Math.floor(30 * Math.random()) + 10,
					tx: Math.floor(140 * Math.random())
				}])
			},
			400);
			$("body").dialogManager("positionItem", this.id, $data$$)
		},
		update: function() {
			var $rx$$ = [],
			$tx$$ = [];
			_.each(this.collection.getRx(this.items, !0),
			function($value$$, $key$$) {
				$rx$$.push([$key$$, $value$$])
			});
			_.each(this.collection.getTx(this.items, !0),
			function($value$$, $key$$) {
				$tx$$.push([$key$$, $value$$])
			});
			this.plot.setData([$rx$$, $tx$$]);
			this.plot.draw()
		}
	});
	EDGE.Views.Global.Toolbox.Packets = {};
	EDGE.Views.Global.Toolbox.Packets.Default = EDGE.Views.Global.Toolbox.Abstract.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.Toolbox.Packets.Default",
		initialize: function($args$$) {
			this.stats = $args$$.stats;
			this.id = "packets" + $args$$.id;
			this.type = "packets";
			this.title = "Packet Capture";
			this.template = _.template($("#ToolboxPacketsTemplate").html());
			this.dialogOptions = {
				width: 660
			};
			this.collection = this.model.get("data");
			this.collection.bind("add", this.add, this);
			this.lazyResize = _.debounce(this.resize, 10);
			$(window).bind("resize",
			this.lazyResize);
			EDGE.Views.Global.Toolbox.Abstract.prototype.initialize.call(this, $args$$)
		},
		validation: function() {
			var $self$$ = this;
			return {
				submitHandler: function($form$$) {
					$form = $($form$$);
					$self$$.run()
				},
				rules: {
					"interface": {
						required: !0
					},
					pkt_count: {
						required: !0,
						range: [1, 150]
					},
					f_address: {
						ipv4: !0
					},
					f_port: {
						range: [1, 65535]
					}
				}
			}
		},
		render: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.render.call(this);
			var $self$$ = this;
			this.$("button").button().bind("click",
			function($e$$) {
				$e$$.preventDefault();
				$self$$.$("form").valid() &&
				$self$$.run()
			});
			return this
		},
		add: function($row$$) {
			this.rows.push(new EDGE.Views.Global.Toolbox.Packets.Row({
				model: $row$$,
				dataTable: this.dataTable
			}))
		},
		run: function() {
			this.$el.data("rendered") ? this.dataTable.fnClearTable() : ("undefined" !== typeof this.dataTable && this.dataTable.fnDestroy(), this.$el.data("rendered", !0), this.$table = this.$("table"), this.$tbody = this.$table.find("tbody"), this.dataTable = this.$table.dataTable(_.extend({
				oLanguage: {
					sEmptyTable: "No results available.",
					sInfoEmpty: ""
				},
				aoColumns: [{
					sClass: "time"
				},
				{
					sClass: "packet"
				}],
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				bPaginate: !1,
				sScrollY: 150,
				bScrollCollapse: !0,
				sDom: "t"
			},
			this.options.options || {})));
			this.rows = [];
			this.$("div.results").show();
			this.$("div.notices").hide().find(".notice").remove();
			this.stats.subscribe([{
				name: "packets-feed",
				sub_id: this.id,
				"interface": this.$("input[name=interface]").val(),
				pkt_count: this.$("input[name=pkt_count]").val(),
				resolve: this.$("input[name=resolve]").is(":checked"),
				f_proto: this.$("input[name=f_proto]").val(),
				f_address: this.$("input[name=f_address]").val(),
				f_port: this.$("input[name=f_port]").val(),
				f_neg: this.$("input[name=f_neg]").is(":checked")
			}]);
			this.resize()
		},
		resize: function() {
			this.dialog && this.dialog.dialog("option", "position", "center");
			this.dataTable && this.$table.fnDraw(!1)
		},
		remove: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.remove.call(this);
			this.stats.unsubscribe([{
				name: "packets-feed",
				sub_id: this.id
			}]);
			this.model.clear();
			this.model.trigger("destroy", this.model, this.model.collection)
		}
	});
	EDGE.Views.Global.Toolbox.Packets.Row = EDGE.Views.Global.Abstract.Row.extend({
		data: function() {
			return [this.model.get("time"), this.model.get("packet")]
		}
	});
	EDGE.Views.Global.Toolbox.Logmon = {};
	EDGE.Views.Global.Toolbox.Logmon.Default = EDGE.Views.Global.Toolbox.Abstract.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Views.Global.Toolbox.Logmon.Default",
		initialize: function() {
			_.bindAll(this);
			this.stats = this.options.stats;
			this.id = "logmon" + this.options.id;
			this.logmonrowid = 1E3;
			this.type = "logmon";
			this.title = "System Log Monitor";
			this.template = _.template($("#ToolboxLogmonTemplate").html());
			this._isPaused = !1;
			this.dialogOptions = {
				width: 200
			};
			this.collection = this.model.get("data");
			this.lazyResize = _.debounce(this.resize,
			10);
			$(window).bind("resize", this.lazyResize);
			EDGE.Views.Global.Toolbox.Abstract.prototype.initialize.call(this, this.options)
		},
		render: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.render.call(this);
			this.run();
			var $self$$ = this;
			this.collection.bind("add", this.add);
			this.$pauseButton = this.$(".logmon-filter button").button({
				text: !1,
				icons: {
					primary: "ui-icon-pause"
				}
			}).click(this.togglePause);
			this.$(".text-input").bind("keyup",
			function() {
				$self$$.filterDevices();
				return ! 1
			}).bind("keypress",
			function($event$$) {
				if (13 ==
				$event$$.keyCode) return ! 1
			});
			return this
		},
		togglePause: function() {
			this._isPaused ? (this._isPaused = !1, this.$pauseButton.button("option", "icons", {
				primary: "ui-icon-pause"
			}), this.collection.on("add", this.add), this.dataTable.fnClearTable(), this.rows = [], this.collection.each(this.add)) : (this._isPaused = !0, this.$pauseButton.button("option", "icons", {
				primary: "ui-icon-play"
			}), this.collection.off("add", this.add))
		},
		filterDevices: function() {
			var $inputValue$$ = this.$(".text-input").val();
			this.dataTable.fnFilter($inputValue$$)
		},
		add: function($row$$) {
			this.rows.push(new EDGE.Views.Global.Toolbox.Logmon.Row({
				model: $row$$,
				dataTable: this.dataTable,
				id: ++this.logmonrowid
			}))
		},
		run: function() {
			this.$el.data("rendered") ? this.dataTable.fnClearTable() : ("undefined" !== typeof this.dataTable && this.dataTable.fnDestroy(), this.$el.data("rendered", !0), this.$table = this.$("table"), this.$tbody = this.$table.find("tbody"), this.dataTable = this.$table.dataTable(_.extend({
				oLanguage: {
					sEmptyTable: "No results available.",
					sInfoEmpty: ""
				},
				aoColumns: [{
					sClass: "time",
					sWidth: "100px"
				},
				{
					sClass: "message"
				}],
				bRetrieve: !0,
				bAutoWidth: !1,
				bJQueryUI: !0,
				aaSorting: [[0, "desc"]],
				bPaginate: !1,
				sScrollY: 150,
				bScrollCollapse: !0,
				sDom: "t"
			},
			this.options.options || {})));
			this.rows = [];
			this.$("div.results").show();
			this.stats.subscribe([{
				name: "log-feed",
				sub_id: this.id
			}]);
			var $self$$ = this,
			$classes$$ = this.dialog.dialog("option", "dialogClass");
			this.dialog.dialog({
				width: 600,
				resizable: !0,
				position: "center",
				dialogClass: "resizable-dialog " + $classes$$,
				resize: function() {
					if ($self$$.dataTable) {
						$self$$.$table.fnSettings().oScroll.sY =
						$(this).outerHeight(true) - $(this).find(".logmon-filter").outerHeight() - $(this).find(".ui-widget-header.title").outerHeight() - $(this).siblings(".ui-dialog-titlebar").outerHeight();
						$self$$.$table.fnDraw(false)
					}
				}
			});
			this.dialog && this.dialog.dialog("option", "position", "center");
			this.resize()
		},
		resize: function() {
			this.dataTable && this.$table.fnDraw(!1)
		},
		remove: function() {
			EDGE.Views.Global.Toolbox.Abstract.prototype.remove.call(this);
			this.stats.unsubscribe([{
				name: "log-feed",
				sub_id: this.id
			}]);
			this.model.clear();
			this.model.trigger("destroy", this.model, this.model.collection)
		}
	});
	EDGE.Views.Global.Toolbox.Logmon.Row = EDGE.Views.Global.Abstract.Row.extend({
		initialize: function($args$$) {
			this.id = $args$$.id;
			EDGE.Views.Global.Abstract.Row.prototype.initialize.call(this, this.options)
		},
		data: function() {
			return [this.model.get("time") + '<span class="hidden">' + this.id + "</sapn>", this.model.get("message")]
		}
	});
	UBNT.namespace("EDGE.views.dialogs");
	EDGE.views.dialogs.ConfirmationDialog = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.views.dialogs.ConfirmationDialog",
		initialize: function() {
			_.bindAll(this);
			this.template = _.template($("#ConfirmationDialogTemplate").html());
			$("body").append(this.template({}));
			this.setElement($("#ConfirmationDialog"));
			this.$el.dialog({
				autoOpen: !1,
				width: 300,
				modal: !0,
				resizable: !1,
				buttons: {
					Yes: this.confirm,
					No: this.cancel
				}
			});
			this.$message = this.$(".message")
		},
		confirm: function() {
			"undefined" !== typeof this.confirmCallback &&
			$.proxy(this.confirmCallback, this.context || this)();
			this.close()
		},
		cancel: function() {
			"undefined" !== typeof this.denyCallback && $.proxy(this.denyCallback, this.context || this)();
			this.close()
		},
		open: function($options$$) {
			this.denyCallback = this.confirmCallback = void 0;
			if ("undefined" !== typeof $options$$) {
				var $title$$ = $options$$.title || "Confirmation",
				$message$$ = $options$$.message || "Are you sure?";
				this.confirmCallback = $options$$.confirm || void 0;
				this.denyCallback = $options$$.deny || void 0;
				this.context = $options$$.context ||
				void 0
			}
			this.$el.dialog("option", "title", $title$$);
			$message$$ instanceof $ ? this.$message.html($message$$) : this.$message.text($message$$);
			this.$el.dialog("open")
		},
		close: function() {
			this.$el.dialog("close")
		}
	});
	EDGE.views.dialogs.AlertDialog = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.views.dialogs.AlertDialog",
		initialize: function($options$$) {
			_.bindAll(this);
			this.isHtml = $options$$.html;
			this.template = _.template($("#AlertDialogTemplate").html());
			$("body").append(this.template({}));
			this.setElement($("#AlertDialog"));
			this.$el.dialog({
				autoOpen: !1,
				width: 300,
				modal: !0,
				resizable: !1,
				buttons: {
					Ok: this.confirm
				}
			});
			this.$message = this.$(".message")
		},
		confirm: function() {
			"undefined" !== typeof this.confirmCallback && $.proxy(this.confirmCallback,
			this.context || this)();
			this.close()
		},
		open: function($options$$) {
			this.confirmCallback = void 0;
			if ("undefined" !== typeof $options$$) {
				var $title$$ = $options$$.title || "Warning",
				$message$$ = $options$$.message || "Are you sure?";
				this.confirmCallback = $options$$.confirm || void 0;
				this.context = $options$$.context || void 0
			}
			this.$el.dialog("option", "title", $title$$);
			this.$message[this.isHtml ? "html": "text"]($message$$);
			this.$el.dialog("open")
		},
		close: function() {
			this.$el.dialog("close")
		}
	});
	UBNT.namespace("EDGE.views.dialogs");
	EDGE.views.dialogs.CLIDialog = Backbone.View.extend({
		FULLY_QUALIFIED_NAME: "EDGE.views.dialogs.CLIDialog",
		initialize: function() {
			_.bindAll(this);
			this.template = _.template($("#CLIDialogTemplate").html());
			this._isRendered = !1
		},
		render: function() {
			if (!this._isRendered) {
				var $self$$ = this;
				this._isRendered = !0;
				this.setElement($(this.template()));
				this.$el.appendTo(window);
				this.$blocker = this.$(".blocker").hide();
				this.$el.dialog({
					minWidth: 660,
					minHeight: 370,
					height: 370,
					resizable: !0,
					dialogClass: "cli-dialog",
					autoOpen: !1
				});
				this.$el.bind("dialogresizestart dialogdragstart",
				function() {
					$self$$.$blocker.show()
				});
				this.$el.bind("dialogresizestop dialogdragstop",
				function() {
					$self$$.$blocker.hide()
				});
				return this
			}
		},
		open: function() {
			this._isRendered || this.render();
			this.$el.dialog("open")
		},
		close: function() {
			this.$el.dialog("close")
		}
	});
	EDGE.Models.Batch = Backbone.Model.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Models.Batch",
		urls: EDGE.Config.Api,
		initialize: function($attrs$$) { (!$attrs$$ || !$attrs$$.generic) && this.set({
				"delete": new EDGE.Models.App,
				set: new EDGE.Models.App,
				get: new EDGE.Models.App
			});
			this.set({
				generic: new EDGE.Models.Generic,
				gset: new EDGE.Models.Generic({
					op: "SET"
				}),
				gdelete: new EDGE.Models.Generic({
					op: "DELETE"
				}),
				gget: new EDGE.Models.Generic({
					op: "GET"
				})
			})
		},
		save: function($attrs$$, $options$$) {
			$options$$ = $options$$ || {};
			$options$$.url =
			$options$$.url || this.urls.batch;
			$options$$.data = JSON.stringify(this.toJSON($attrs$$));
			$options$$.contentType = "application/json";
			$options$$.headers = {
				"X-CSRF-TOKEN": UBNT.Utils.Cookies.get("X-CSRF-TOKEN")
			};
			var $ocomplete$$ = $options$$.complete;
			if (window.app.data.saving) $(window).trigger("dialog", ["Another Save operation is in progress. Please wait until the current Save operation completes", "Cannot start Save operation"]),
			$ocomplete$$ && $ocomplete$$();
			else return window.app.data.saving = !0,
			this.debug($options$$.data),
			$options$$.complete = function $$options$$$complete$() {
				$ocomplete$$ && $ocomplete$$();
				window.app.data.saving = !1
			},
			Backbone.Model.prototype.save.call(this, null, $options$$)
		},
		toJSON: function($attrs$$) {
			var $data$$ = {};
			this.get("delete") && ($data$$.DELETE = this.get("delete").toJSON($attrs$$, !0));
			this.get("set") && ($data$$.SET = this.get("set").toJSON($attrs$$, !0));
			this.get("get") && ($data$$.GET = this.get("get").toJSON($attrs$$, !1));
			var $self$$ = this;
			_.each(["generic", "gset", "gdelete", "gget"],
			function($t$$) {
				if ($self$$.has($t$$)) {
					var $m$$ =
					$self$$.get($t$$).toJSON(true);
					$m$$ !== null && ($data$$[$self$$.get($t$$).topOp] = $m$$)
				}
			});
			return $data$$
		}
	});
	EDGE.Models.Generic = Backbone.Model.extend({
		initialize: function($attrs$$) {
			this.setAttrs({},
			!0);
			this.topOp = $attrs$$ ? $attrs$$.op: null
		},
		setOp: function($op$$) {
			this.topOp = $op$$
		},
		setAttrs: function($attrs$$, $nochange$$) {
			this.attributes = $attrs$$;
			$nochange$$ || (this._changed = !0)
		},
		put: function() {
			if (! (2 > arguments.length)) {
				var $apath_args$$ = Array.prototype.slice.call(arguments),
				$aval$$ = $apath_args$$.pop(),
				$apath_args$$ = _.flatten($apath_args$$);
				if (! (1 > $apath_args$$.length)) {
					var $cur$$ = this.attributes;
					for (i = 0; i <
					$apath_args$$.length; i++) {
						if (i == $apath_args$$.length - 1) {
							$cur$$[$apath_args$$[i]] = $aval$$;
							break
						}
						if (void 0 === $cur$$[$apath_args$$[i]] || null === $cur$$[$apath_args$$[i]]) $cur$$[$apath_args$$[i]] = {};
						$cur$$ = $cur$$[$apath_args$$[i]]
					}
					this._changed = !0
				}
			}
		},
		hasChanged: function() {
			return this._changed
		},
		toJSON: function($changedOnly$$) {
			return $changedOnly$$ && !this._changed ? null: this.attributes
		}
	});
	EDGE.Models.App = Backbone.Model.extend({
		urls: EDGE.Config.Api,
		initialize: function() {
			this.set({
				firewall: new EDGE.Models.Firewall,
				system: new EDGE.Models.System,
				vpn: new EDGE.Models.Vpn,
				qos: new EDGE.Models.TrafficControl,
				pfstats: new EDGE.Collections.Pfstats,
				interfaces: new EDGE.Collections.Interfaces,
				services: new EDGE.Collections.Services,
				toolbox: new EDGE.Collections.Toolbox,
				routes: new EDGE.Collections.Routes,
				tastats: new EDGE.Collections.UserTrafficAnalysis
			})
		},
		parse: function($data$$) {
			if (!$data$$.GET) throw Msg.E_InvalidConfigGet;
			this.initialize();
			$data$$.GET.firewall && this.get("firewall").set(this.get("firewall").parse($data$$.GET.firewall));
			$data$$.GET.system && this.get("system").set(this.get("system").parse($data$$.GET.system));
			$data$$.GET.vpn && this.get("vpn").set(this.get("vpn").parse($data$$.GET.vpn));
			$data$$.GET["traffic-control"] && this.get("qos").set(this.get("qos").parse($data$$.GET["traffic-control"]));
			this.get("interfaces")["import"]($data$$.GET.interfaces);
			this.get("services")["import"]($data$$.GET.service);
			this.get("routes")["import"]($data$$.GET.protocols);
			return {
				loaded: new Date
			}
		},
		fetch: function($options$$) {
			$options$$ = $options$$ || {};
			$options$$.url = this.urls.get;
			return Backbone.Model.prototype.fetch.call(this, $options$$)
		},
		save: function($attrs$$, $options$$) {
			$options$$ = $options$$ || {};
			$options$$.url = $options$$.url || this.urls.set;
			$options$$.data = JSON.stringify(this.toJSON($attrs$$));
			$options$$.contentType = "application/json";
			return Backbone.Model.prototype.save.call(this, null, $options$$)
		},
		"delete": function($attrs$$, $options$$) {
			$options$$ = $options$$ || {};
			$options$$.url =
			this.urls["delete"];
			return this.save($attrs$$, $options$$)
		},
		toJSON: function($attrs$$, $changedOnly$$) {
			var $data$$ = {};
			_.each(this.attributes,
			function($object$$, $type$$) {
				if ($object$$) {
					if ($object$$.hasChanged && $object$$.hasChanged() && (!$attrs$$ || -1 != _.indexOf($attrs$$, $type$$))) $data$$[$type$$] = $object$$.toJSON($changedOnly$$)
				} else $data$$[$type$$] = null
			},
			this);
			$data$$.service = $data$$.services;
			delete $data$$.services;
			$data$$.protocols = $data$$.routes;
			delete $data$$.routes;
			delete $data$$.stats;
			return $data$$
		}
	});
	EDGE.Models.Data = Backbone.Model.extend({
		urls: EDGE.Config.Api,
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.type) throw Msg.E_InvalidDataData;
			this.dataType = $attrs$$.type
		},
		fetch: function($options$$) {
			$options$$ = $options$$ || {};
			$options$$.url = this.urls.data + "?data=" + this.dataType;
			return Backbone.Model.prototype.fetch.call(this, $options$$)
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$);
			if (1 == $resp$$.success && $resp$$.output) return $resp$$.output
		}
	});
	EDGE.Models.Response = function $EDGE$Models$Response$($resp$$, $nodes$$) {
		this.notices = new EDGE.Collections.Notices;
		this.results = {};
		this.success = null;
		_.each(_.union($nodes$$ || [], "SET DELETE COMMIT SAVE CLONE SETUP".split(" ")),
		function($action$$) {
			if ("undefined" != typeof $resp$$[$action$$]) {
				this.results[$action$$] = 0;
				this.results[$action$$] -= $resp$$[$action$$].failure ? parseInt($resp$$[$action$$].failure, 10) : 0;
				this.results[$action$$] += $resp$$[$action$$].success ? parseInt($resp$$[$action$$].success, 10) : 0;
				var $counter$$ = 0;
				$resp$$[$action$$].error && ("string" == typeof $resp$$[$action$$].error ? _.each($resp$$[$action$$].error.split("\ufffe"),
				function($notice$$5_regex$$) {
					if ($notice$$5_regex$$) {
						var $pieces$$ = $notice$$5_regex$$.match(/\[\s([^\]]*)\s\]\n([\s\S]*?)\s*\uFFFF([0|1])/);
						if ($pieces$$) {
							for (var $notice$$5_regex$$ = /\s*\[\s([^\]]*)\s\]\n([^\[]*)\s*/g, $subpaths$$ = {},
							$match$$; $match$$ = $notice$$5_regex$$.exec($pieces$$[2]);) $subpaths$$[$match$$[1]] = $match$$[2];
							_.isEmpty($subpaths$$) ? 1 != $pieces$$[3] && (this.notices.add({
								type: 1 ==
								$pieces$$[3] ? "success": "error",
								notice: $pieces$$[2].replace("\n", "<br />"),
								action: $action$$,
								field: $pieces$$[1].split(" ")
							}), $counter$$++) : _.each($subpaths$$,
							function($notice$$, $field$$) {
								1 != $pieces$$[3] && this.notices.add({
									type: 1 == $pieces$$[3] ? "success": "error",
									notice: $notice$$,
									action: $action$$,
									field: ($pieces$$[1] + " " + $field$$).split(" ")
								});
								$counter$$++
							},
							this)
						} else 1 > this.results[$action$$] && (this.notices.add({
							type: "error",
							notice: $notice$$5_regex$$,
							action: $action$$,
							field: ""
						}), $counter$$++)
					}
				},
				this) : _.each($resp$$[$action$$].error,
				function($notice$$, $field$$) {
					var $pieces$$ = $notice$$.match(/([\s\S]*?)\s*\uFFFF([0|1])/);
					$pieces$$ ? 1 != $pieces$$[2] && (this.notices.add({
						type: 1 == $pieces$$[2] ? "success": "error",
						notice: $pieces$$[1],
						action: $action$$,
						field: "string" == typeof $field$$ ? $field$$.split(" ") : ""
					}), $counter$$++) : (this.notices.add({
						type: "error",
						notice: $notice$$,
						action: $action$$,
						field: "string" == typeof $field$$ ? $field$$.split(" ") : ""
					}), $counter$$++)
				},
				this), 0 == $counter$$ && this.notices.add({
					type: "error",
					notice: "Unspecified " + $action$$ +
					" error",
					action: $action$$,
					field: ""
				}));
				this.success = !1 != this.success && 1 == this.results[$action$$]
			}
		},
		this)
	};
	EDGE.Models.Notice = Backbone.Model.extend({
		defaults: function() {
			return {
				type: null,
				notice: null,
				action: null,
				field: null,
				datetime: new Date
			}
		}
	});
	EDGE.Models.Firewall = Backbone.Model.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Models.Firewall",
		defaults: function() {
			return {
				"all-ping": !0,
				"broadcast-ping": !1,
				"conntrack-expect-table-size": 4096,
				"conntrack-hash-size": 4096,
				"conntrack-table-size": 32768,
				"conntrack-tcp-loose": !0,
				"ipv6-receive-redirects": !1,
				"ipv6-src-route": !1,
				"ip-src-route": !1,
				"log-martians": !0,
				"receive-redirects": !1,
				"send-redirects": !0,
				"source-validation": !1,
				"syn-cookies": !0
			}
		},
		initialize: function($attrs$$) {
			this.set({
				rulesets: new EDGE.Collections.FirewallRulesets
			});
			this.get("rulesets").bind("change", this.change, this);
			$attrs$$ && $attrs$$.name && this.get("rulesets")["import"]($attrs$$.name, !1);
			$attrs$$ && $attrs$$["ipv6-name"] && this.get("rulesets")["import"]($attrs$$["ipv6-name"], !0);
			this.set({
				groups: new EDGE.Collections.FirewallGroups
			});
			this.get("groups").bind("change", this.change, this);
			$attrs$$ && $attrs$$.group && this.get("groups")["import"]($attrs$$.group)
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = EDGE.Models.Interface.prototype.parse.call(this, $resp$$, $xhr$$);
			$resp$$.name &&
			this.get("rulesets")["import"]($resp$$.name, !1);
			delete $resp$$.name;
			$resp$$["ipv6-name"] && this.get("rulesets")["import"]($resp$$["ipv6-name"], !0);
			delete $resp$$["ipv6-name"];
			$resp$$.group && this.get("groups")["import"]($resp$$.group);
			delete $resp$$.group;
			_.each($resp$$,
			function($value$$, $key$$) {
				"enable" == $value$$ ? $resp$$[$key$$] = !0: "disable" == $value$$ && ($resp$$[$key$$] = !1)
			});
			return $resp$$
		},
		toJSON: function($changedOnly$$2_groups$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this),
			$rulesets$$ =
			this.get("rulesets").toJSON($changedOnly$$2_groups$$);
			_.isEmpty($rulesets$$) || _.extend($data$$, $rulesets$$);
			delete $data$$.rulesets;
			$changedOnly$$2_groups$$ = this.get("groups").toJSON($changedOnly$$2_groups$$);
			_.isEmpty($changedOnly$$2_groups$$) || ($data$$.group = $changedOnly$$2_groups$$);
			delete $data$$.groups;
			_.each($data$$,
			function($value$$, $key$$) {
				$value$$ == true ? $data$$[$key$$] = "enable": $value$$ == false && ($data$$[$key$$] = "disable")
			});
			return $data$$
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ?
			Backbone.Model.prototype.hasChanged.call(this, $attr$$) : Backbone.Model.prototype.hasChanged.call(this);
			if (!$changed$$) {
				if (!$attr$$ || "rulesets" == $attr$$) $changed$$ = $changed$$ || this.get("rulesets").hasChanged();
				if (!$attr$$ || "groups" == $attr$$) $changed$$ = $changed$$ || this.get("groups").hasChanged()
			}
			return $changed$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes),
			$rulesets$$ = this.get("rulesets"),
			$groups$$ = this.get("groups");
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ &&
			delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				name: $attrs$$.name,
				rulesets: $rulesets$$,
				groups: $groups$$
			},
			$options$$);
			return this
		}
	});
	EDGE.Models.FirewallRuleset = Backbone.Model.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Models.FirewallRuleset",
		defaults: function() {
			return {
				name: null,
				description: null,
				ipv6: null
			}
		},
		initialize: function($attrs$$, $options$$) {
			if (!$attrs$$ || null === $attrs$$.name || void 0 === $attrs$$.name) throw Msg.E_InvalidFirewallRulesetData;
			this._new = $options$$ && $options$$.isNew;
			this.set({
				rules: new EDGE.Collections.FirewallRules
			});
			this.get("rules").bind("change", this.change, this);
			$attrs$$.rule && this.get("rules")["import"]($attrs$$.rule);
			this.set({
				stats: new EDGE.Collections.FirewallRulesetStats
			});
			this.get("stats").bind("change", this.change, this);
			this.get("rules").bind("remove",
			function($rule$$24_stats$$) { ($rule$$24_stats$$ = this.get("stats").filterById($rule$$24_stats$$.get("id"))) && this.get("stats").remove($rule$$24_stats$$)
			},
			this)
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$);
			$resp$$.rule && this.get("rules")["import"]($resp$$.rule);
			delete $resp$$.rule;
			return $resp$$
		},
		"delete": function() {
			this._changed =
			this._delete = !0
		},
		isDelete: function() {
			return this._delete
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			$data$$.rule = this.get("rules").toJSON($changedOnly$$);
			_.isEmpty($data$$.rule) && delete $data$$.rule;
			delete $data$$.rules;
			delete $data$$.ipv6;
			delete $data$$.stats;
			$data$$["enable-default-log"] ? $data$$["enable-default-log"] = null: delete $data$$["enable-default-log"];
			return $data$$
		},
		forceChange: function() {
			this._changed = !0
		},
		hasChanged: function($attr$$) {
			var $changed$$ =
			arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : this._changed || Backbone.Model.prototype.hasChanged.call(this);
			if (!$changed$$ && (!$attr$$ || "rules" == $attr$$)) $changed$$ = $changed$$ || this.get("rules").hasChanged();
			return $changed$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes),
			$rules$$ = this.get("rules"),
			$stats$$ = this.get("stats");
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) &&
			(this.attributes = this.defaults());
			this.set({
				name: $attrs$$.name,
				ipv6: $attrs$$.ipv6,
				rules: $rules$$,
				stats: $stats$$
			},
			$options$$);
			return this
		},
		isNew: function($value$$) {
			if (!_.isUndefined($value$$)) {
				var $added$$ = !$value$$ && this._new;
				this._new = $value$$;
				$added$$ && this.trigger("added")
			}
			return this._new || !1
		}
	});
	EDGE.Models.FirewallRule = Backbone.Model.extend({
		defaults: function() {
			return {
				id: null,
				disable: null,
				description: null,
				protocol: null,
				action: null
			}
		},
		initialize: function($attrs$$, $options$$) {
			if (!$attrs$$ || !$attrs$$.id) throw Msg.E_InvalidFirewallRuleData;
			this._new = $options$$ && $options$$.isNew
		},
		"delete": function($undo$$) {
			this._delete = !1 === $undo$$ ? !1: !0;
			this._changed = !0
		},
		parse: function($resp$$) {
			$resp$$.disable = "undefined" != typeof $resp$$.disable;
			$resp$$.state && (_.isEmpty($resp$$.state) || ($resp$$.states = [], _.each(this.states(),
			function($state$$) {
				$resp$$.state[$state$$] && "enable" == $resp$$.state[$state$$] && $resp$$.states.push($state$$)
			})), delete $resp$$.state);
			$resp$$.ipsec && ("undefined" != typeof $resp$$.ipsec["match-ipsec"] ? $resp$$.ipsec = "match-ipsec": "undefined" != typeof $resp$$.ipsec["match-none"] ? $resp$$.ipsec = "match-none": delete $resp$$.ipsec);
			$resp$$.p2p && ($resp$$.p2p = _.keys($resp$$.p2p));
			$resp$$.time && "undefined" != typeof $resp$$.time.utc && ($resp$$.time.utc = !0);
			_.each(["source", "destination"],
			function($location$$) {
				if ($resp$$[$location$$] &&
				$resp$$[$location$$].group) {
					$resp$$[$location$$].group["address-group"] && ($resp$$[$location$$]["address-group"] = $resp$$[$location$$].group["address-group"]);
					$resp$$[$location$$].group["network-group"] && ($resp$$[$location$$]["network-group"] = $resp$$[$location$$].group["network-group"]);
					$resp$$[$location$$].group["port-group"] && ($resp$$[$location$$]["port-group"] = $resp$$[$location$$].group["port-group"]);
					delete $resp$$[$location$$].group
				}
			},
			this);
			return $resp$$
		},
		toJSON: function() {
			var $data$$ = {};
			if (this._delete) $data$$ =
			"''";
			else {
				$data$$ = Backbone.Model.prototype.toJSON.call(this);
				$data$$.disable ? $data$$.disable = null: delete $data$$.disable;
				null === $data$$.states ? $data$$.state = null: _.isEmpty($data$$.states) || ($data$$.state = {},
				_.each(this.states(),
				function($state$$) {
					$data$$.state[$state$$] = _.include($data$$.states, $state$$) ? "enable": "disable"
				}));
				delete $data$$.states;
				if ($data$$.ipsec) {
					var $ipsec_p2p$$ = $data$$.ipsec;
					$data$$.ipsec = {};
					$data$$.ipsec[$ipsec_p2p$$] = null
				}
				$data$$.p2p && (!0 === $data$$.p2p ? $data$$.p2p = null: _.isArray($data$$.p2p) &&
				($ipsec_p2p$$ = $data$$.p2p, $data$$.p2p = {},
				_.each($ipsec_p2p$$,
				function($type$$) {
					$data$$.p2p[$type$$] = null
				})));
				$data$$.time && $data$$.time.utc && ($data$$.time.utc = null);
				$data$$.application && !$data$$.application.category && !$data$$.application["custom-category"] && delete $data$$.application;
				_.each(["source", "destination"],
				function($location$$) {
					_.each(["address", "network", "port"],
					function($type$$) {
						if ($data$$[$location$$] && typeof $data$$[$location$$][$type$$ + "-group"] != "undefined") {
							$data$$[$location$$].group =
							$data$$[$location$$].group || {};
							$data$$[$location$$].group[$type$$ + "-group"] = $data$$[$location$$][$type$$ + "-group"];
							delete $data$$[$location$$][$type$$ + "-group"]
						}
					},
					this)
				},
				this)
			}
			return $data$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				id: $attrs$$.id,
				order: $attrs$$.order
			},
			$options$$);
			return this
		},
		states: function() {
			return ["established", "invalid", "new", "related"]
		},
		hasChanged: function($attr$$) {
			return arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : this._changed || Backbone.Model.prototype.hasChanged.call(this)
		},
		forceChange: function() {
			this._changed = !0
		},
		isNew: function($value$$) {
			if (!_.isUndefined($value$$)) {
				var $added$$ = !$value$$ && this._new;
				this._new = $value$$;
				$added$$ && this.trigger("added")
			}
			return this._new || !1
		}
	});
	EDGE.Models.FirewallGroup = Backbone.Model.extend({
		defaults: function() {
			return {
				type: null,
				name: null
			}
		},
		initialize: function($attrs$$) {
			if (!$attrs$$ || null === $attrs$$.name || void 0 === $attrs$$.name || !$attrs$$.type) throw Msg.E_InvalidFirewallGroupData;
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				name: $attrs$$.name,
				type: $attrs$$.type
			},
			$options$$);
			return this
		},
		members: function() {
			var $attrs$$33_members$$ = this.get(this.memberKey());
			$attrs$$33_members$$ || ($attrs$$33_members$$ = {},
			$attrs$$33_members$$[this.memberKey()] = [], this.set($attrs$$33_members$$), $attrs$$33_members$$ = this.get(this.memberKey()));
			return $attrs$$33_members$$
		},
		memberKey: function() {
			return this.get("type").replace("-group", "")
		}
	});
	EDGE.Models.Interface = Backbone.Model.extend({
		defaults: function() {
			return {
				disable: null,
				dhcp: !1,
				dhcpv6: !1,
				ipv6: !1,
				ips: []
			}
		},
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.type || !$attrs$$.id) throw Msg.E_InvalidInterfaceData;
			this.set({
				stats: new EDGE.Models.InterfaceStats
			});
			this.get("stats").bind("change", this.change, this);
			this.set({
				rates: new EDGE.Collections.InterfaceRates
			});
			this.get("stats").bind("change",
			function($model$$) {
				this.get("rates").add({
					datetime: $model$$.get("datetime"),
					tx: 8 * $model$$.get("tx").bps,
					rx: 8 * $model$$.get("rx").bps
				})
			},
			this)
		},
		"delete": function($undo$$) {
			this._delete = !1 === $undo$$ ? !1: !0;
			this._changed = !0
		},
		parse: function($resp$$) {
			$resp$$.disable = "undefined" != typeof $resp$$.disable;
			$resp$$.address && ($resp$$.dhcp = "dhcp" == $resp$$.address[0], $resp$$.dhcpv6 = "dhcpv6" == $resp$$.address[0], !$resp$$.dhcp && !$resp$$.dhcpv6 && ($resp$$.ips = $resp$$.address));
			$resp$$["hw-id"] && ($resp$$.mac = $resp$$["hw-id"]);
			return $resp$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			this._delete || ($data$$ = Backbone.Model.prototype.toJSON.call(this),
			$data$$.disable ? $data$$.disable = null: delete $data$$.disable, $data$$.exclude ? $data$$.exclude = null: delete $data$$.exclude, $data$$.dhcp && ($data$$.address = ["dhcp"]), delete $data$$.dhcp, delete $data$$.dhcpv6, delete $data$$.ipv6, delete $data$$.ips, delete $data$$.stats, delete $data$$.rates, $data$$ = _.extend($data$$, this.vifToJson($changedOnly$$), this.pppoeToJson($changedOnly$$)));
			return $data$$
		},
		vifToJson: function($changedOnly$$) {
			var $vifs$$ = this.collection.filterVlanByParent(this.get("id")),
			$data$$ = {};
			_.isEmpty($vifs$$) ||
			($data$$.vif = {},
			_.each($vifs$$,
			function($vif$$) {
				var $json$$ = $vif$$.toJSON($changedOnly$$);
				delete $json$$.id;
				delete $json$$.type;
				delete $json$$.vif;
				delete $json$$.parent;
				_.isEmpty($json$$) && ($json$$ = null);
				$data$$.vif[$vif$$.get("vif")] = $json$$
			},
			this), _.isEmpty($data$$.vif) ? delete $data$$.vif: $data$$.vif.__FORCE_ASSOC = !0);
			return $data$$
		},
		pppoeToJson: function($changedOnly$$) {
			var $pppoes$$ = this.collection.filterPppoeByParent(this.get("id")),
			$data$$ = {};
			_.isEmpty($pppoes$$) || ($data$$.pppoe = {},
			_.each($pppoes$$,
			function($pppoe$$) {
				var $json$$ = $pppoe$$.toJSON($changedOnly$$);
				delete $json$$.id;
				delete $json$$.type;
				delete $json$$.pppoe;
				delete $json$$.parent;
				_.isEmpty($json$$) && ($json$$ = null);
				$data$$.pppoe[$pppoe$$.get("pppoe")] = $json$$
			},
			this), _.isEmpty($data$$.pppoe) ? delete $data$$.pppoe: $data$$.pppoe.__FORCE_ASSOC = !0);
			return $data$$
		},
		forceChange: function() {
			this._changed = !0
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : this._changed || Backbone.Model.prototype.hasChanged.call(this);
			$changed$$ || _.each(this.collection.filterVlanByParent(this.get("id")),
			function($vif$$) {
				$vif$$.hasChanged() && ($changed$$ = !0)
			},
			this);
			return $changed$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				type: $attrs$$.type,
				id: $attrs$$.id,
				stats: $attrs$$.stats,
				rates: $attrs$$.rates
			},
			$options$$);
			return this
		},
		getParentType: function() {
			var $ptype$$ =
			null;
			if (this.get("parent")) switch (this.get("parent").match(/([a-zA-Z]+)([0-9]+)/)[1]) {
			case "switch":
				$ptype$$ = "switch";
				break;
			case "br":
				$ptype$$ = "bridge";
				break;
			case "bond":
				$ptype$$ = "bonding";
				break;
			default:
				$ptype$$ = "ethernet"
			}
			return $ptype$$
		}
	});
	EDGE.Models.Interfaces = {};
	EDGE.Models.Interfaces.Ethernet = EDGE.Models.Interface.extend({
		defaults: function() {
			var $defaults$$ = EDGE.Models.Interface.prototype.defaults.call(this);
			return _.extend($defaults$$, {
				mac: null,
				mtu: null
			})
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = EDGE.Models.Interface.prototype.parse.call(this, $resp$$, $xhr$$);
			void 0 !== $resp$$.ip && (null !== $resp$$.ip && void 0 !== $resp$$.ip["enable-proxy-arp"]) && ($resp$$.ip["enable-proxy-arp"] = !0);
			EDGE.Config.Features.poe && ($resp$$.poe = $resp$$.poe || {},
			_.isUndefined($resp$$.poe.watchdog) ?
			$resp$$.poe.watchdog = {
				disable: !0
			}: $resp$$.poe.watchdog.disable = !_.isUndefined($resp$$.poe.watchdog.disable));
			return $resp$$
		},
		toJSON: function() {
			var $data$$ = EDGE.Models.Interface.prototype.toJSON.call(this);
			$data$$.ip && ($data$$.ip["enable-proxy-arp"] ? $data$$.ip["enable-proxy-arp"] = null: delete $data$$.ip["enable-proxy-arp"]);
			$data$$.poe && $data$$.poe.watchdog && ($data$$.poe.watchdog.disable ? $data$$.poe.watchdog.disable = null: delete $data$$.poe.watchdog.disable);
			return $data$$
		}
	});
	EDGE.Models.Interfaces.Switch = EDGE.Models.Interface.extend({
		defaults: function() {
			var $defaults$$ = EDGE.Models.Interface.prototype.defaults.call(this);
			return _.extend($defaults$$, {
				mac: null,
				mtu: null
			})
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = EDGE.Models.Interface.prototype.parse.call(this, $resp$$, $xhr$$);
			void 0 !== $resp$$.ip && (null !== $resp$$.ip && void 0 !== $resp$$.ip["enable-proxy-arp"]) && ($resp$$.ip["enable-proxy-arp"] = !0);
			return $resp$$
		},
		toJSON: function() {
			var $data$$ = EDGE.Models.Interface.prototype.toJSON.call(this);
			$data$$.ip && ($data$$.ip["enable-proxy-arp"] ? $data$$.ip["enable-proxy-arp"] = null: delete $data$$.ip["enable-proxy-arp"]);
			return $data$$
		}
	});
	EDGE.Models.Interfaces.Bridge = EDGE.Models.Interface.extend({
		parse: function($resp$$, $xhr$$) {
			$resp$$ = EDGE.Models.Interface.prototype.parse.call(this, $resp$$, $xhr$$);
			"undefined" != typeof $resp$$.stp && ($resp$$.stp = "true" == $resp$$.stp);
			return $resp$$
		}
	});
	EDGE.Models.Interfaces.Pppoe = EDGE.Models.Interface.extend({
		defaults: function() {
			var $defaults$$ = EDGE.Models.Interface.prototype.defaults.call(this);
			delete $defaults$$.disable;
			return $defaults$$
		},
		initialize: function($attrs$$, $options$$) {
			EDGE.Models.Interface.prototype.initialize.call(this, $attrs$$, $options$$);
			this.get("stats").set({
				ips: [],
				active: !1,
				status: "disconnected"
			})
		},
		parse: function($resp$$, $xhr$$) {
			return $resp$$ = EDGE.Models.Interface.prototype.parse.call(this, $resp$$, $xhr$$)
		},
		toJSON: function() {
			var $data$$ =
			EDGE.Models.Interface.prototype.toJSON.call(this);
			delete $data$$.disable;
			return $data$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			EDGE.Models.Interface.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			this.set({
				pppoe: $attrs$$.pppoe,
				parent: $attrs$$.parent
			},
			$options$$);
			return this
		}
	});
	EDGE.Models.Interfaces.Vlan = EDGE.Models.Interface.extend({
		initialize: function($attrs$$, $options$$) {
			EDGE.Models.Interface.prototype.initialize.call(this, $attrs$$, $options$$);
			var $valid_name$$ = $attrs$$.id.match(/(br|eth|switch|bond)[0-9]+\.[0-9]+/);
			$attrs$$.id && (!$attrs$$.parent && $valid_name$$) && this.set({
				parent: $attrs$$.id.split(".")[0]
			});
			$attrs$$.id && (!$attrs$$.vif && $valid_name$$) && this.set({
				vif: $attrs$$.id.split(".")[1]
			})
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = EDGE.Models.Interface.prototype.parse.call(this,
			$resp$$, $xhr$$);
			void 0 !== $resp$$.ip && (null !== $resp$$.ip && void 0 !== $resp$$.ip["enable-proxy-arp"]) && ($resp$$.ip["enable-proxy-arp"] = !0);
			var $valid_name$$ = $resp$$.id.match(/(br|eth|switch)[0-9]+\.[0-9]+/);
			$resp$$.id && (!$resp$$.parent && $valid_name$$) && ($resp$$.parent = $resp$$.id.split(".")[0]);
			var $has_vif$$ = null !== $resp$$.vif && void 0 !== $resp$$.vif;
			$resp$$.id && (!$has_vif$$ && $valid_name$$) && ($resp$$.vif = $resp$$.id.split(".")[1]);
			return $resp$$
		},
		toJSON: function() {
			var $data$$ = EDGE.Models.Interface.prototype.toJSON.call(this);
			$data$$.ip && ($data$$.ip["enable-proxy-arp"] ? $data$$.ip["enable-proxy-arp"] = null: delete $data$$.ip["enable-proxy-arp"]);
			return $data$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			EDGE.Models.Interface.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			this.set({
				vif: $attrs$$.vif,
				parent: $attrs$$.parent
			},
			$options$$);
			return this
		}
	});
	EDGE.Models.InterfaceStats = Backbone.Model.extend({
		defaults: function() {
			return {
				ips: ["TBD"],
				mtu: null,
				tx: {
					packets: null,
					bytes: null,
					errors: null,
					dropped: null,
					bps: null
				},
				rx: {
					packets: null,
					bytes: null,
					errors: null,
					dropped: null,
					bps: null
				},
				multicast: null,
				active: !1,
				status: "connected"
			}
		},
		clearPppoeStats: function() {
			this.set({
				ips: [],
				mtu: null,
				tx: {
					packets: null,
					bytes: null,
					errors: null,
					dropped: null,
					bps: null
				},
				rx: {
					packets: null,
					bytes: null,
					errors: null,
					dropped: null,
					bps: null
				},
				multicast: null,
				active: !1,
				status: "disconnected"
			})
		}
	});
	EDGE.Models.Service = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.type) throw Msg.E_InvalidServiceData;
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				type: $attrs$$.type
			});
			return this
		},
		toJSON: function($changedOnly$$12_d$$) {
			var $changedOnly$$12_d$$ = Backbone.Model.prototype.toJSON.call(this,
			$changedOnly$$12_d$$),
			$empty$$ = !0;
			delete $changedOnly$$12_d$$.disabled;
			for (var $k$$ in $changedOnly$$12_d$$) if ("type" != $k$$ && "''" != $k$$) {
				$empty$$ = !1;
				break
			}
			if ($empty$$) return "''";
			delete $changedOnly$$12_d$$["''"];
			return $changedOnly$$12_d$$
		}
	});
	EDGE.Models.Services = {};
	EDGE.Models.Services.DhcpServer = Backbone.Model.extend({
		initialize: function($attrs$$, $options$$) {
			if (!$attrs$$ || !$attrs$$.type) throw Msg.E_InvalidServiceDhcpData;
			this._new = $options$$ && $options$$.isNew;
			this.set({
				networks: new EDGE.Collections.DhcpSharedNetworks
			});
			this.get("networks").bind("change", this.change, this);
			$attrs$$["shared-network-name"] && this.get("networks")["import"]($attrs$$["shared-network-name"])
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$);
			$resp$$["shared-network-name"] && this.get("networks")["import"]($resp$$["shared-network-name"]);
			delete $resp$$["shared-network-name"];
			return $resp$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes),
			$networks$$ = this.get("networks");
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				type: $attrs$$.type,
				networks: $networks$$
			});
			return this
		},
		toJSON: function($changedOnly$$) {
			var $data$$ =
			Backbone.Model.prototype.toJSON.call(this);
			if (!$changedOnly$$ || this.get("networks").hasChanged()) $data$$["shared-network-name"] = this.get("networks").toJSON($changedOnly$$);
			delete $data$$.type;
			delete $data$$.networks;
			delete $data$$.disabled;
			return $data$$
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : Backbone.Model.prototype.hasChanged.call(this);
			if (!$changed$$ && (!$attr$$ || "networks" == $attr$$)) $changed$$ = $changed$$ || this.get("networks").hasChanged();
			return $changed$$
		}
	});
	EDGE.Models.DhcpSharedNetwork = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || null === $attrs$$.id || void 0 === $attrs$$.id) throw Msg.E_InvalidDhcpSharedNetworkData;
			this.set({
				subnets: new EDGE.Collections.DhcpSubnets
			});
			this.get("subnets").bind("change", this.change, this);
			$attrs$$.subnet && this.get("subnets")["import"]($attrs$$.subnet);
			delete $attrs$$.subnet;
			this.set({
				leases: new EDGE.Collections.DhcpLeases
			});
			this.get("leases").bind("change", this.change, this);
			this.set({
				stats: new EDGE.Models.DhcpStats
			});
			this.get("stats").bind("change",
			this.change, this)
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes),
			$subnets$$ = this.get("subnets"),
			$leases$$ = this.get("leases"),
			$stats$$ = this.get("stats");
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				id: $attrs$$.id,
				subnets: $subnets$$,
				leases: $leases$$,
				stats: $stats$$
			});
			return this
		},
		toJSON: function($changedOnly$$14_subnets$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this),
			$changedOnly$$14_subnets$$ = this.get("subnets").toJSON($changedOnly$$14_subnets$$);
			_.isEmpty($changedOnly$$14_subnets$$) || ($data$$.subnet = $changedOnly$$14_subnets$$);
			delete $data$$.subnets;
			delete $data$$.leases;
			delete $data$$.stats;
			$data$$.disable ? $data$$.disable = null: delete $data$$.disable;
			return $data$$
		},
		forceChange: function() {
			this._changed = !0
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : this._changed || Backbone.Model.prototype.hasChanged.call(this);
			if (!$changed$$ && (!$attr$$ || "subnets" == $attr$$)) $changed$$ = $changed$$ || this.get("subnets").hasChanged();
			return $changed$$
		}
	});
	EDGE.Models.DhcpSubnet = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || null === $attrs$$.id || void 0 === $attrs$$.id) throw Msg.E_InvalidDhcpSubnetData;
			this.set({
				mappings: new EDGE.Collections.DhcpStaticMappings
			});
			this.get("mappings").bind("change", this.change, this);
			$attrs$$["static-mapping"] && this.get("mappings")["import"]($attrs$$["static-mapping"])
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$);
			$resp$$["static-mapping"] && this.get("mappings")["import"]($resp$$["static-mapping"]);
			delete $resp$$["static-mapping"];
			return $resp$$
		},
		toJSON: function($changedOnly$$15_mappings$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this),
			$changedOnly$$15_mappings$$ = this.get("mappings").toJSON($changedOnly$$15_mappings$$);
			_.isEmpty($changedOnly$$15_mappings$$) || ($data$$["static-mapping"] = $changedOnly$$15_mappings$$);
			delete $data$$.mappings;
			return $data$$
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : Backbone.Model.prototype.hasChanged.call(this);
			if (!$changed$$ && (!$attr$$ || "mappings" == $attr$$)) $changed$$ = $changed$$ || this.get("mappings").hasChanged();
			return $changed$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes),
			$mappings$$ = this.get("mappings");
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				id: $attrs$$.id,
				mappings: $mappings$$
			});
			return this
		}
	});
	EDGE.Models.DhcpStaticMapping = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || null === $attrs$$.id || void 0 === $attrs$$.id) throw Msg.E_InvalidDhcpStaticMappingData;
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				id: $attrs$$.id
			});
			return this
		}
	});
	EDGE.Models.DhcpStats = Backbone.Model.extend({});
	EDGE.Models.Services.Nat = Backbone.Model.extend({
		initialize: function($attrs$$) {
			this.set({
				rules: new EDGE.Collections.NatRules
			});
			this.get("rules").bind("change", this.change, this);
			$attrs$$.rule && this.get("rules")["import"]($attrs$$.rule)
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$);
			$resp$$.rule && this.get("rules")["import"]($resp$$.rule);
			delete $resp$$.rule;
			return $resp$$
		},
		toJSON: function($changedOnly$$16_rules$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this),
			$changedOnly$$16_rules$$ = this.get("rules").toJSON($changedOnly$$16_rules$$);
			_.isEmpty($changedOnly$$16_rules$$) || ($data$$.rule = $changedOnly$$16_rules$$);
			delete $data$$.rules;
			delete $data$$.disabled;
			return $data$$
		},
		forceChange: function() {
			this._changed = !0
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : this._changed || Backbone.Model.prototype.hasChanged.call(this);
			if (!$changed$$ && (!$attr$$ || "rules" == $attr$$)) $changed$$ = $changed$$ ||
			this.get("rules").hasChanged();
			return $changed$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes),
			$rules$$ = this.get("rules");
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				type: $attrs$$.type,
				rules: $rules$$
			});
			return this
		}
	});
	EDGE.Models.NatRule = Backbone.Model.extend({
		defaults: function() {
			return {
				disable: null,
				exclude: null
			}
		},
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.id) throw Msg.E_InvalidNatRuleData;
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				id: $attrs$$.id,
				type: $attrs$$.type,
				order: $attrs$$.order
			});
			return this
		},
		"delete": function($undo$$) {
			this._delete = !1 === $undo$$ ? !1: !0;
			this._changed = !0
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$);
			$resp$$.disable = "undefined" != typeof $resp$$.disable;
			$resp$$.exclude = "undefined" != typeof $resp$$.exclude;
			_.each(["source", "destination"],
			function($location$$) {
				$resp$$[$location$$] && $resp$$[$location$$].group && ($resp$$[$location$$].group["address-group"] && ($resp$$[$location$$]["address-group"] = $resp$$[$location$$].group["address-group"]),
				$resp$$[$location$$].group["network-group"] && ($resp$$[$location$$]["network-group"] = $resp$$[$location$$].group["network-group"]), $resp$$[$location$$].group["port-group"] && ($resp$$[$location$$]["port-group"] = $resp$$[$location$$].group["port-group"]), delete $resp$$[$location$$].group);
				$resp$$[$location$$] && null === $resp$$[$location$$].group && delete $resp$$[$location$$].group
			},
			this);
			return $resp$$
		},
		toJSON: function() {
			if (this._delete) return null;
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			$data$$.disable ?
			$data$$.disable = null: delete $data$$.disable;
			$data$$.exclude ? $data$$.exclude = null: delete $data$$.exclude;
			_.each(["source", "destination"],
			function($location$$) {
				_.each(["address", "network", "port"],
				function($type$$) {
					$data$$[$location$$] && "undefined" != typeof $data$$[$location$$][$type$$ + "-group"] && ($data$$[$location$$].group = $data$$[$location$$].group || {},
					$data$$[$location$$].group[$type$$ + "-group"] = $data$$[$location$$][$type$$ + "-group"], delete $data$$[$location$$][$type$$ + "-group"])
				},
				this)
			},
			this);
			return $data$$
		}
	});
	EDGE.Models.System = Backbone.Model.extend({
		initialize: function($attrs$$) {
			this.set({
				stats: new EDGE.Models.SystemStats
			});
			this.get("stats").bind("change", this.change, this);
			this.set({
				users: new EDGE.Collections.Users
			});
			this.get("users").bind("change", this.change, this);
			if ($attrs$$ && $attrs$$.login && $attrs$$.login.user) this.get("users")["import"]($attrs$$.login.user, "local");
			this.set({
				remote: new EDGE.Collections.Users
			});
			this.set({
				dpi: new EDGE.Models.TrafficAnalysis
			});
			this.get("dpi").bind("change", this.change,
			this)
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$);
			$resp$$.login && $resp$$.login.user && this.get("users")["import"]($resp$$.login.user, "local");
			$resp$$.login && $resp$$.login.user && delete $resp$$.login.user;
			$resp$$["traffic-analysis"] && this.get("dpi").set(this.get("dpi").parse($resp$$["traffic-analysis"]));
			$resp$$["traffic-analysis"] && delete $resp$$["traffic-analysis"];
			return $resp$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			if (!$changedOnly$$ || this.get("users").hasChanged()) $data$$.login = $data$$.login || {},
			$data$$.login.user = this.get("users").toJSON($changedOnly$$);
			if (!$changedOnly$$ || this.get("dpi").hasChanged()) $data$$["traffic-analysis"] = this.get("dpi").toJSON($changedOnly$$);
			delete $data$$.users;
			delete $data$$.remote;
			delete $data$$.stats;
			delete $data$$.dpi;
			return $data$$
		},
		clear: function($options$$) {
			_.clone(this.attributes);
			var $users$$ = this.get("users"),
			$stats$$ = this.get("stats");
			Backbone.Model.prototype.clear.call(this,
			$options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				users: $users$$,
				stats: $stats$$
			});
			return this
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : Backbone.Model.prototype.hasChanged.call(this);
			if (!$changed$$ && (!$attr$$ || "users" == $attr$$)) $changed$$ = $changed$$ || this.get("users").hasChanged();
			return $changed$$
		}
	});
	EDGE.Models.SystemStats = Backbone.Model.extend({
		defaults: function() {
			return {
				uptime: null,
				fwversion: null,
				cpu: 0,
				ram: 0,
				num_routes: {}
			}
		}
	});
	EDGE.Models.User = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.username || !$attrs$$.type) throw Msg.E_InvalidUserData;
			this.set({
				stats: new EDGE.Models.UserStats
			});
			this.get("stats").bind("change",
			function() {
				this.trigger("change", this)
			},
			this);
			this.set({
				sessions: new EDGE.Collections.UserSessions
			});
			this.get("sessions").bind("change", this.change, this);
			this.get("sessions").bind("add",
			function() {
				this.trigger("change", this)
			},
			this);
			this._counter = 0
		},
		toJSON: function() {
			var $data$$ =
			{};
			this._delete || ($data$$ = Backbone.Model.prototype.toJSON.call(this), delete $data$$.username, delete $data$$.type, delete $data$$.stats, delete $data$$.sessions);
			return $data$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			sessions = this.get("sessions");
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				username: $attrs$$.username,
				type: $attrs$$.type,
				level: $attrs$$.level,
				stats: $attrs$$.stats,
				sessions: $attrs$$.sessions
			},
			$options$$);
			return this
		},
		statCounter: function($counter$$) {
			this._counter = Math.max(this._counter, $counter$$)
		},
		flushStats: function($type$$, $counter$$) {
			var $stats$$ = this.get($type$$);
			$stats$$ && $stats$$.each(function($model$$) {
				$model$$.get("counter") < $counter$$ && $stats$$.remove($model$$)
			})
		}
	});
	EDGE.Models.UserSession = Backbone.Model.extend({
		defaults: function() {
			return {
				counter: 0
			}
		}
	});
	EDGE.Models.UserStats = Backbone.Model.extend({
		defaults: function() {
			return {
				connected: !1,
				rxtotal: 0,
				txtotal: 0
			}
		},
		initialize: function() {
			this.set({
				rates: new EDGE.Collections.UserRates
			});
			this.get("rates").bind("change", this.change, this);
			this.get("rates").bind("add",
			function() {
				this.trigger("change", this)
			},
			this)
		}
	});
	EDGE.Models.Route = Backbone.Model.extend({
		defaults: function() {
			return {
				nexthop: {}
			}
		},
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.rtype || !$attrs$$.destination) throw Msg.E_InvalidRouteData;
		},
		"delete": function($undo$$) {
			this._delete = !1 === $undo$$ ? !1: !0;
			this._changed = !0
		},
		toJSON: function() {
			var $data$$ = {};
			this._delete || ($data$$ = Backbone.Model.prototype.toJSON.call(this), $data$$ = _.clone($data$$.nexthop), delete $data$$.ip, delete $data$$["interface"], $data$$.disable ? $data$$.disable = null: delete $data$$.disable);
			return $data$$
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : Backbone.Model.prototype.hasChanged.call(this);
			$changed$$ || _.isEqual(this._previousAttributes.nexthop, this.attributes.nexthop) || ($changed$$ = !0);
			return $changed$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes =
			this.defaults());
			this.set({
				rtype: $attrs$$.rtype,
				type: $attrs$$.type,
				destination: $attrs$$.destination,
				route: $attrs$$.route
			},
			$options$$);
			return this
		},
		clone: function() {
			return new this.constructor(this.attributes)
		},
		generateRoute: function() {
			return this.get("route") ? this.get("route") : this.get("nexthop")["interface"] ? "interface-route": "route"
		},
		generateId: function() {
			return this.get("rtype") + "-" + this.get("type") + "-" + this.get("destination") + "-" + this.get("route")
		}
	});
	EDGE.Models.Routes = {};
	EDGE.Models.Routes.Static = EDGE.Models.Route.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.rtype || !$attrs$$.type || !$attrs$$.destination) throw Msg.E_InvalidRouteData;
		}
	});
	EDGE.Models.Routes.Connected = EDGE.Models.Route.extend({});
	EDGE.Models.Routes.Rip = EDGE.Models.Route.extend({});
	EDGE.Models.Routes.Ospf = EDGE.Models.Route.extend({});
	EDGE.Models.Routes.OspfConfig = Backbone.Model.extend({
		defaults: function() {
			return {
				disabled: !0
			}
		},
		initialize: function($attrs$$) {
			this.set({
				areas: new EDGE.Collections.OspfAreas
			});
			this.get("areas").bind("change", this.change, this);
			this.get("areas").bind("change", this.updateDisabled, this);
			this.get("areas").bind("add", this.updateDisabled, this);
			this.get("areas").bind("remove", this.updateDisabled, this);
			$attrs$$.area && this.get("areas")["import"]($attrs$$.area)
		},
		parse: function($resp$$, $xhr$$) {
			if ($resp$$ = Backbone.Model.prototype.parse.call(this,
			$resp$$, $xhr$$)) $resp$$.area && this.get("areas")["import"]($resp$$.area),
			delete $resp$$.area;
			return $resp$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			if (!$changedOnly$$ || this.get("areas").hasChanged()) $data$$.area = this.get("areas").toJSON($changedOnly$$);
			delete $data$$.areas;
			delete $data$$.rtype;
			delete $data$$.disabled;
			return $data$$
		},
		hasChanged: function($attr$$) {
			var $changed$$ = arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : this._changed ||
			Backbone.Model.prototype.hasChanged.call(this);
			if (!$changed$$ && (!$attr$$ || "areas" == $attr$$)) $changed$$ = $changed$$ || this.get("areas").hasChanged();
			return $changed$$
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes),
			$areas$$ = this.get("areas");
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				rtype: $attrs$$.rtype,
				areas: $areas$$
			});
			return this
		},
		forceChange: function() {
			this._changed =
			!0
		},
		updateDisabled: function() {
			this.set({
				disabled: 0 == this.get("areas").size()
			})
		}
	});
	EDGE.Models.Routes.OspfArea = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || void 0 == $attrs$$.id) throw Msg.E_InvalidOspfAreaData;
		},
		clear: function($options$$) {
			var $attrs$$ = _.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			this.set({
				id: $attrs$$.id
			});
			return this
		},
		"delete": function($undo$$) {
			this._delete = !1 === $undo$$ ? !1: !0;
			this._changed = !0
		},
		isDelete: function() {
			return this._delete
		},
		forceChange: function() {
			this._changed = !0
		},
		hasChanged: function($attr$$) {
			return arguments.length ? Backbone.Model.prototype.hasChanged.call(this, $attr$$) : this._changed || Backbone.Model.prototype.hasChanged.call(this)
		}
	});
	EDGE.Models.Wizard = Backbone.Model.extend({
		url: function() {
			return EDGE.Config.Api.base + "wizard/" + this.get("type") + "/" + this.get("key") + ".json"
		},
		source: function() {
			return $.ajax(this.url(), {
				timeout: 1E4,
				success: $.proxy(function($data$$) {
					this.set({
						html: $data$$.html ? $data$$.html: !1,
						validator: $data$$.validator ? $data$$.validator: !1
					});
					this.trigger("change")
				},
				this)
			})
		}
	});
	EDGE.Models.WizardFeature = Backbone.Model.extend({
		url: EDGE.Config.Api.feature,
		sync: function($method$$, $model$$, $options$$) {
			switch ($method$$) {
			case "create":
			case "update":
			case "read":
				$options$$.contentType = "application/json",
				$options$$.type = "POST",
				$options$$.headers = {
					"X-CSRF-TOKEN": UBNT.Utils.Cookies.get("X-CSRF-TOKEN")
				},
				$options$$.data = JSON.stringify({
					data: $model$$.toJSON()
				})
			}
			return Backbone.sync.call(this, $method$$, $model$$, $options$$)
		},
		response: function() {
			return this.get("FEATURE")
		}
	});
	EDGE.Models.WizardSetup = EDGE.Models.WizardFeature.extend({
		url: EDGE.Config.Api.setup,
		response: function() {
			return this.get("SETUP")
		}
	});
	EDGE.Models.ConfigBatch = EDGE.Models.Batch.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Models.ConfigBatch",
		initialize: function($attrs$$) { (!$attrs$$ || !$attrs$$.generic) && this.set({
				"delete": {},
				set: {},
				get: {}
			});
			this.set({
				generic: new EDGE.Models.Generic,
				gset: new EDGE.Models.Generic({
					op: "SET"
				}),
				gdelete: new EDGE.Models.Generic({
					op: "DELETE"
				}),
				gget: new EDGE.Models.Generic({
					op: "GET"
				})
			})
		},
		toJSON: function() {
			var $data$$ = {};
			this.get("delete") && ($data$$.DELETE = this.get("delete"));
			this.get("set") && ($data$$.SET = this.get("set"));
			return $data$$
		}
	});
	EDGE.Models.Settings = Backbone.Model.extend({
		defaults: function() {
			return {
				keepalive: !1
			}
		},
		initialize: function() {
			this.set(JSON.parse(UBNT.Utils.Cookies.get("settings")) || {});
			this.bind("change",
			function() {
				UBNT.Utils.Cookies.set("settings", JSON.stringify(this.toJSON()), 365)
			})
		}
	});
	EDGE.Models.Pfstats = Backbone.Model.extend({
		initialize: function() {},
		parse: function($resp$$, $xhr$$) {
			return $resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$)
		}
	});
	EDGE.Models.UserTrafficAnalysis = Backbone.Model.extend({
		initialize: function() {
			this.set({
				stats: new EDGE.Models.TrafficAnalysisStats
			});
			this.set({
				apps: new EDGE.Collections.AppTrafficAnalysisStats
			});
			this.get("stats").bind("change", this.change, this)
		},
		parse: function($resp$$, $xhr$$) {
			return $resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$)
		}
	});
	EDGE.Models.AppTrafficAnalysis = Backbone.Model.extend({
		initialize: function() {
			this.set({
				stats: new EDGE.Models.TrafficAnalysisStats
			});
			this.get("stats").bind("change", this.change, this)
		},
		parse: function($resp$$, $xhr$$) {
			return $resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$)
		}
	});
	EDGE.Models.TrafficAnalysisStats = Backbone.Model.extend({
		defaults: function() {
			return {
				tx: {
					bytes: null,
					bps: null
				},
				rx: {
					bytes: null,
					bps: null
				}
			}
		}
	});
	EDGE.Models.AppTrafficAnalysisStats = Backbone.Model.extend({
		defaults: function() {
			return {
				tx: {
					bytes: null,
					bps: null
				},
				rx: {
					bytes: null,
					bps: null
				},
				name: "",
				category: ""
			}
		}
	});
	EDGE.Models.TrafficAnalysis = Backbone.Model.extend({
		defaults: function() {
			return {
				dpi: "disable",
				"export": "disable",
				categories: []
			}
		},
		initialize: function() {
			this.set({
				categories: new EDGE.Collections.TrafficAnalysisCategories
			});
			this.get("categories").bind("change", this.change, this)
		},
		parse: function($data$$, $xhr$$) {
			this.initialize();
			$data$$ = Backbone.Model.prototype.parse.call(this, $data$$, $xhr$$);
			$data$$["custom-category"] && (this.get("categories")["import"]($data$$["custom-category"]), delete $data$$["custom-category"]);
			return $data$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			if (!$changedOnly$$ || this.get("categories").hasChanged()) $data$$["custom-category"] = this.get("categories").toJSON($changedOnly$$);
			delete $data$$.categories;
			return $data$$
		}
	});
	EDGE.Models.TrafficAnalysisCategory = Backbone.Model.extend({
		defaults: function() {
			return {
				name: "",
				apps: []
			}
		},
		toJSON: function() {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			$data$$.name = this.get("apps");
			delete $data$$.apps;
			return $data$$
		},
		parse: function($resp$$, $xhr$$) {
			$resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$);
			$resp$$.apps = $resp$$.apps || [];
			return $resp$$
		}
	});
	EDGE.Models.Vpn = Backbone.Model.extend({
		initialize: function() {},
		parse: function($resp$$, $xhr$$) {
			return $resp$$ = Backbone.Model.prototype.parse.call(this, $resp$$, $xhr$$)
		},
		toJSON: function() {
			return Backbone.Model.prototype.toJSON.call(this)
		},
		clear: function($options$$) {
			_.clone(this.attributes);
			Backbone.Model.prototype.clear.call(this, $options$$);
			$options$$ && delete $options$$.unset;
			$options$$ && ($options$$.defaults && this.defaults) && (this.attributes = this.defaults());
			return this
		},
		hasChanged: function($attr$$) {
			return arguments.length ?
			Backbone.Model.prototype.hasChanged.call(this, $attr$$) : Backbone.Model.prototype.hasChanged.call(this)
		}
	});
	EDGE.Models.TrafficControl = Backbone.Model.extend({
		initialize: function() {
			this.set({
				advanced: new EDGE.Models.QosAdvanced
			});
			this.get("advanced").bind("change", this.change, this)
		},
		parse: function($data$$, $xhr$$) {
			this.initialize();
			$data$$ = Backbone.Model.prototype.parse.call(this, $data$$, $xhr$$);
			$data$$["advanced-queue"] && (this.get("advanced").parse($data$$["advanced-queue"]), delete $data$$["advanced-queue"]);
			return $data$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			if (!$changedOnly$$ || this.get("advanced").hasChanged()) $data$$["advanced-queue"] = this.get("advanced").toJSON($changedOnly$$);
			delete $data$$.advanced;
			return $data$$
		}
	});
	EDGE.Models.QosAdvanced = Backbone.Model.extend({
		initialize: function() {
			this.set({
				filters: new EDGE.Collections.QosAdvancedFilters
			});
			this.get("filters").bind("change", this.change, this);
			this.set({
				nodes: new EDGE.Collections.QosAdvancedNodes
			});
			this.get("nodes").bind("change", this.change, this);
			this.set({
				queueTypes: new EDGE.Collections.QosAdvancedQueueTypes
			});
			this.get("queueTypes").bind("change", this.change, this)
		},
		parse: function($data$$) {
			$data$$ && _.each($data$$,
			function($typeQueues$$, $type$$) {
				var $obj$$ = {};
				$obj$$[$type$$] = $typeQueues$$;
				if ("filters" === $type$$) this.get("filters")["import"]($obj$$);
				else if ("queue-type" === $type$$) this.get("queueTypes")["import"]($obj$$);
				else this.get("nodes")["import"]($obj$$)
			},
			this);
			return $data$$
		}
	});
	EDGE.Models.QosAdvancedNode = Backbone.Model.extend({
		toJSON: function() {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			delete $data$$.qid;
			delete $data$$.subType;
			delete $data$$.type;
			_.isEmpty($data$$) && ($data$$ = null);
			return $data$$
		},
		toTreeJSON: function() {
			var $data$$ = Backbone.Model.prototype.toJSON.call(this);
			delete $data$$.subType;
			_.isEmpty($data$$) && ($data$$ = null);
			return $data$$
		}
	});
	EDGE.Models.QosAdvanceds = {};
	EDGE.Models.QosAdvanceds.Branch = EDGE.Models.QosAdvancedNode.extend({});
	EDGE.Models.QosAdvanceds.Leaf = EDGE.Models.QosAdvancedNode.extend({});
	EDGE.Models.QosAdvanceds.Root = EDGE.Models.QosAdvancedNode.extend({});
	EDGE.Models.QosType = EDGE.Models.QosAdvancedNode.extend({});
	EDGE.Models.QosFilter = EDGE.Models.QosAdvancedNode.extend({
		parse: function($data$$) {
			if ($data$$.ip) {
				if ($data$$.ip.source && ($data$$.ip.source.address && ($data$$["ip-source-address"] = $data$$.ip.source.address), $data$$.ip.source.port)) $data$$["ip-source-port"] = $data$$.ip.source.port;
				if ($data$$.ip.destination && ($data$$.ip.destination.address && ($data$$["ip-destination-address"] = $data$$.ip.destination.address), $data$$.ip.destination.port)) $data$$["ip-destination-port"] = $data$$.ip.destination.port;
				"undefined" !==
				typeof $data$$.ip.dscp && ($data$$["ip-dscp"] = $data$$.ip.dscp);
				"undefined" !== typeof $data$$.ip.protocol && ($data$$["ip-protocol"] = $data$$.ip.protocol);
				delete $data$$.ip
			}
			if ($data$$.ether && ("undefined" !== typeof $data$$.ether.protocol && ($data$$["ether-protocol"] = $data$$.ether.protocol), $data$$.ether.source && ($data$$["ether-source"] = $data$$.ether.source), $data$$.ether.destination)) $data$$["ether-destination"] = $data$$.ether.destination;
			$data$$.application && $data$$.application["custom-category"] && ($data$$.application =
			$data$$.application["custom-category"]);
			return $data$$
		}
	});
	EDGE.Collections.Rules = Backbone.Collection.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Collections.Rules",
		initialize: function() {
			this.on("remove", this.reorder, this)
		},
		"import": function($data$$, $count$$) {
			$count$$ = $count$$ || 0;
			_.each($data$$,
			function($rule$$, $id$$) {
				$rule$$ = $rule$$ || {};
				$rule$$.id = $id$$;
				$rule$$.order = ++$count$$;
				var $model$$ = this.filterById($rule$$.id);
				$model$$ ? (delete $rule$$.order, $model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($rule$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = new this.model({
					id: $rule$$.id
				}),
				$model$$.set($model$$.parse($rule$$)), this.add($model$$));
				$model$$.isNew(!1)
			},
			this)
		},
		reorder: function($rule$$) {
			this.filterByOrderMore($rule$$.get("order")).each(function($model$$) {
				$model$$.set({
					order: $model$$.get("order") - 1
				})
			})
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) {
					$data$$[$model$$.get("id")] =
					$model$$.toJSON();
					try {
						delete $data$$[$model$$.get("id")].id
					} catch($e$$) {}
				}
			});
			return $data$$
		},
		filterById: function($id$$) {
			return _(this.filter(function($rule$$) {
				return $rule$$.get("id") == $id$$
			})).last()
		},
		filterByOrder: function($order$$) {
			return _(this.filter(function($rule$$) {
				return $rule$$.get("order") == $order$$
			})).last()
		},
		filterByOrderBetween: function($from$$, $to$$) {
			return _(this.filter(function($rule$$) {
				return $rule$$.get("order") > $from$$ && $rule$$.get("order") < $to$$
			}))
		},
		filterByOrderMore: function($order$$,
		$inclusive$$) {
			return _(this.filter(function($rule$$) {
				return $inclusive$$ ? $rule$$.get("order") >= $order$$: $rule$$.get("order") > $order$$
			}))
		},
		filterByOrderLess: function($order$$, $inclusive$$) {
			return _(this.filter(function($rule$$) {
				return $inclusive$$ ? $rule$$.get("order") <= $order$$: $rule$$.get("order") < $order$$
			}))
		},
		maxId: function() {
			var $max$$ = 0;
			_.each(this.models,
			function($model$$) {
				$max$$ = Math.max($model$$.get("id"), $max$$)
			});
			return $max$$
		},
		maxOrder: function() {
			var $max$$ = 0;
			_.each(this.models,
			function($model$$) {
				$max$$ =
				Math.max($model$$.get("order"), $max$$)
			});
			return $max$$
		}
	});
	EDGE.Collections.Rates = Backbone.Collection.extend({
		getRx: function($limit$$, $pad$$) {
			var $rx$$ = this.pluck("rx").slice( - $limit$$);
			if ($pad$$) for (; $rx$$.length < $limit$$;) $rx$$.unshift(0);
			return $rx$$
		},
		getTx: function($limit$$, $pad$$) {
			var $tx$$ = this.pluck("tx").slice( - $limit$$);
			if ($pad$$) for (; $tx$$.length < $limit$$;) $tx$$.unshift(0);
			return $tx$$
		}
	});
	EDGE.Collections.Pfstats = Backbone.Collection.extend({
		model: EDGE.Models.Pfstats,
		update: function($data$$) {
			this.get($data$$.id) ? this.get($data$$.id).set({
				bytes: $data$$.bytes,
				packets: $data$$.packets
			}) : this.add($data$$)
		}
	});
	EDGE.Collections.FirewallRulesets = Backbone.Collection.extend({
		model: EDGE.Models.FirewallRuleset,
		"import": function($data$$, $ipv6$$) {
			$ipv6$$ || _.each($data$$,
			function($ruleset$$, $name$$) {
				$ruleset$$ = $ruleset$$ || {};
				$ruleset$$.name = $name$$;
				$ruleset$$.ipv6 = $ipv6$$;
				var $model$$ = this.filterByName($ruleset$$.name);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($ruleset$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = new EDGE.Models.FirewallRuleset({
					name: $ruleset$$.name
				}), $model$$.set($model$$.parse($ruleset$$)),
				this.add($model$$))
			},
			this)
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) {
					var $json$$ = $model$$.toJSON($changedOnly$$),
					$key$$ = $model$$.get("ipv6") ? "ipv6-name": "name";
					$data$$[$key$$] = $data$$[$key$$] || {};
					$data$$[$key$$][$model$$.get("name")] = $model$$.isDelete() ? null: $json$$;
					$data$$[$key$$].__FORCE_ASSOC =
					!0;
					delete $json$$.name
				}
			});
			return $data$$
		},
		filterByName: function($name$$) {
			return _(this.filter(function($ruleset$$) {
				return $ruleset$$.get("name") == $name$$
			})).last()
		}
	});
	EDGE.Collections.FirewallRules = EDGE.Collections.Rules.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Collections.FirewallRules",
		model: EDGE.Models.FirewallRule
	});
	EDGE.Collections.FirewallRulesetStats = Backbone.Collection.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Collections.FirewallRulesetStats",
		"import": function($data$$) {
			for (var $regex$$ = /([^\s]*) (\d+) (\d+) (\d+) ([A-Z]+) "(.*)"/g, $matches$$; $matches$$ = $regex$$.exec($data$$);) {
				var $model$$ = this.filterById($matches$$[2]);
				$matches$$ = {
					id: $matches$$[2],
					packets: $matches$$[3],
					bytes: $matches$$[4],
					action: $matches$$[5],
					description: $matches$$[6]
				};
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($matches$$, {
					silent: !0
				}),
				$model$$.change()) : this.add($matches$$)
			}
		},
		filterById: function($id$$) {
			return _(this.filter(function($stats$$) {
				return $stats$$.get("id") == $id$$
			})).last()
		}
	});
	EDGE.Collections.FirewallGroups = Backbone.Collection.extend({
		model: EDGE.Models.FirewallGroup,
		"import": function($data$$) {
			_.each($data$$,
			function($groups$$, $type$$) {
				_.each($groups$$,
				function($group$$, $name$$) {
					$group$$ = $group$$ || {};
					$group$$.name = $name$$;
					$group$$.type = $type$$;
					var $model$$ = this.filterByTypeAndName($group$$.type, $group$$.name);
					$model$$ ? ($model$$.clear({
						silent: !0,
						defaults: !0
					}).set($model$$.parse($group$$), {
						silent: !0
					}), $model$$.change()) : ($model$$ = new EDGE.Models.FirewallGroup({
						name: $group$$.name,
						type: $group$$.type
					}), $model$$.set($model$$.parse($group$$)), this.add($model$$))
				},
				this)
			},
			this)
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$187_name$$) {
				if (!$changedOnly$$ || $model$$187_name$$.hasChanged()) {
					var $json$$ = $model$$187_name$$.toJSON(),
					$type$$ = $model$$187_name$$.get("type"),
					$model$$187_name$$ = $model$$187_name$$.get("name");
					delete $json$$.name;
					delete $json$$.type;
					$data$$[$type$$] = $data$$[$type$$] || {};
					$data$$[$type$$][$model$$187_name$$] = $json$$;
					$data$$[$type$$].__FORCE_ASSOC = !0
				}
			});
			return $data$$
		},
		filterByTypeAndName: function($type$$, $name$$) {
			return _(this.filter(function($group$$) {
				return $group$$.get("type") == $type$$ && $group$$.get("name") == $name$$
			})).last()
		},
		filterByType: function($type$$) {
			return _(this.filter(function($group$$) {
				return $group$$.get("type") == $type$$
			}))
		}
	});
	EDGE.Collections.Interfaces = Backbone.Collection.extend({
		"import": function($data$$) {
			$data$$ && _.each($data$$,
			function($interfaces$$, $type$$) {
				"loopback" != $type$$ && _.each($interfaces$$,
				function($iface$$, $id$$) {
					$iface$$ = $iface$$ || {};
					$iface$$.id = $id$$;
					$iface$$.type = $type$$;
					var $model$$ = this.filterByTypeAndId($iface$$.type, $iface$$.id);
					$model$$ ? ($model$$.clear({
						silent: !0,
						defaults: !0
					}).set($model$$.parse($iface$$), {
						silent: !0
					}), $model$$.change()) : ($model$$ = this.modelize({
						id: $iface$$.id,
						type: $iface$$.type
					}),
					$model$$.set($model$$.parse($iface$$)), this.add($model$$));
					$iface$$.vif && this.importVlan($model$$, $iface$$.vif);
					$iface$$.pppoe && this.importPppoe($model$$, $iface$$.pppoe)
				},
				this)
			},
			this)
		},
		importVlan: function($parent$$, $vifs$$) {
			var $self$$ = this;
			_.each($vifs$$,
			function($iface$$, $id$$) {
				$iface$$ = $iface$$ || {};
				$iface$$.vif = $id$$;
				$iface$$.id = $parent$$.get("id") + "." + $id$$;
				$iface$$.type = "vlan";
				$iface$$.parent = $parent$$.get("id");
				var $model$$ = this.filterByTypeAndId($iface$$.type, $iface$$.id);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($iface$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = this.modelize({
					id: $iface$$.id,
					type: $iface$$.type
				}), $model$$.set($model$$.parse($iface$$)), this.add($model$$));
				$model$$.get("pppoe") && $self$$.importPppoe($model$$, $model$$.get("pppoe"))
			},
			this)
		},
		importPppoe: function($parent$$, $pppoes$$) {
			_.each($pppoes$$,
			function($iface$$, $id$$) {
				$iface$$ = $iface$$ || {};
				$iface$$.pppoe = $id$$;
				$iface$$.id = "pppoe" + $id$$;
				$iface$$.type = "pppoe";
				$iface$$.parent = $parent$$.get("id");
				var $model$$ =
				this.filterByTypeAndId($iface$$.type, $iface$$.id);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($iface$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = this.modelize({
					id: $iface$$.id,
					type: $iface$$.type
				}), $model$$.set($model$$.parse($iface$$)), this.add($model$$))
			},
			this)
		},
		add: function($models$$, $options$$) {
			if (_.isArray($models$$)) for (var $i$$ = 0, $l$$ = $models$$.length; $i$$ < $l$$; $i$$++) $models$$[$i$$] instanceof Backbone.Model || ($models$$[$i$$] = this.modelize(model[$i$$])),
			Backbone.Collection.prototype.add.call(this,
			$models$$[$i$$], $options$$);
			else $models$$ instanceof Backbone.Model || ($models$$ = this.modelize($models$$)),
			Backbone.Collection.prototype.add.call(this, $models$$, $options$$);
			return this
		},
		modelize: function($iface$$43_model$$) {
			switch ($iface$$43_model$$.type) {
			case "ethernet":
				$iface$$43_model$$ = new EDGE.Models.Interfaces.Ethernet($iface$$43_model$$);
				break;
			case "bridge":
				$iface$$43_model$$ = new EDGE.Models.Interfaces.Bridge($iface$$43_model$$);
				break;
			case "vlan":
				$iface$$43_model$$ = new EDGE.Models.Interfaces.Vlan($iface$$43_model$$);
				break;
			case "pppoe":
				$iface$$43_model$$ = new EDGE.Models.Interfaces.Pppoe($iface$$43_model$$);
				break;
			default:
				$iface$$43_model$$ = new EDGE.Models.Interface($iface$$43_model$$)
			}
			return $iface$$43_model$$
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {},
			$ms$$ = [];
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) {
					if ("vlan" == $model$$.get("type") ||
					"pppoe" == $model$$.get("type")) {
						var $p$$ = $model$$.get("parent"),
						$matches$$ = $p$$.match(/([a-zA-Z]+)([0-9]+)\.?([0-9]*)/),
						$ptype$$ = $matches$$[1],
						$pvif$$ = $matches$$[3];
						switch ($ptype$$) {
						case "switch":
							$ptype$$ = "switch";
							break;
						case "br":
							$ptype$$ = "bridge";
							break;
						case "bond":
							$ptype$$ = "bonding";
							break;
						default:
							$ptype$$ = "ethernet"
						}
						if (!$data$$[$ptype$$] || !$data$$[$ptype$$][$p$$]) {
							var $parent$$;
							$parent$$ = "" != $pvif$$ ? this.modelize({
								type: "vlan",
								id: $model$$.get("parent")
							}) : this.modelize({
								type: $ptype$$,
								id: $model$$.get("parent")
							});
							$parent$$.clear();
							$parent$$.collection = $model$$.collection;
							_.isEmpty($ms$$) && ($parent$$.collection && $parent$$.collection.models) && ($ms$$ = _.clone($parent$$.collection.models));
							"" == $pvif$$ ? ($data$$[$ptype$$] = $data$$[$ptype$$] || {},
							$data$$[$ptype$$][$parent$$.get("id")] = $parent$$.toJSON(), delete $data$$[$ptype$$][$parent$$.get("id")].id, delete $data$$[$ptype$$][$parent$$.get("id")].type) : ($data$$[$ptype$$] = $data$$[$ptype$$] || {},
							_.each($ms$$,
							function($m$$) {
								$m$$.get("id") == $parent$$.get("parent") && ($data$$[$ptype$$][$parent$$.get("parent")] =
								$m$$.toJSON(), delete $data$$[$ptype$$][$parent$$.get("parent")].id, delete $data$$[$ptype$$][$parent$$.get("parent")].type)
							}), $data$$[$ptype$$][$parent$$.get("parent")] || ($data$$[$ptype$$][$parent$$.get("parent")] = {}), $data$$[$ptype$$][$parent$$.get("parent")].vif = {},
							$data$$[$ptype$$][$parent$$.get("parent")].vif.__FORCE_ASSOC = !0, _.each($ms$$,
							function($m$$) {
								$m$$.get("id") == $parent$$.get("id") && ($data$$[$ptype$$][$parent$$.get("parent")].vif[$pvif$$] = $m$$.toJSON())
							}), $data$$[$ptype$$][$parent$$.get("parent")].vif[$pvif$$] ||
							($data$$[$ptype$$][$parent$$.get("parent")].vif[$pvif$$] = $parent$$.toJSON()), delete $data$$[$ptype$$][$parent$$.get("parent")].vif[$pvif$$].id, delete $data$$[$ptype$$][$parent$$.get("parent")].vif[$pvif$$].type, delete $data$$[$ptype$$][$parent$$.get("parent")].vif[$pvif$$].vif, delete $data$$[$ptype$$][$parent$$.get("parent")].vif[$pvif$$].parent)
						}
					}
					"vlan" != $model$$.get("type") && "pppoe" != $model$$.get("type") && ($data$$[$model$$.get("type")] = $data$$[$model$$.get("type")] || {},
					$data$$[$model$$.get("type")][$model$$.get("id")] =
					$data$$[$model$$.get("type")][$model$$.get("id")] ? _.extend($data$$[$model$$.get("type")][$model$$.get("id")], $model$$.toJSON()) : $model$$.toJSON(), delete $data$$[$model$$.get("type")][$model$$.get("id")].id, delete $data$$[$model$$.get("type")][$model$$.get("id")].type)
				}
			},
			this);
			return $data$$
		},
		filterByType: function($type$$) {
			return _(this.filter(function($iface$$) {
				return $iface$$.get("type") == $type$$
			}))
		},
		filterByTypes: function($types$$) {
			return _(this.filter(function($iface$$) {
				return - 1 != $.inArray($iface$$.get("type"),
				$types$$)
			}))
		},
		filterById: function($id$$) {
			return _(this.filter(function($iface$$) {
				return $iface$$.get("id") == $id$$
			})).last()
		},
		filterByIds: function($ids$$) {
			return _(this.filter(function($iface$$) {
				return - 1 != $.inArray($iface$$.get("id"), $ids$$)
			}))
		},
		filterByTypeAndId: function($type$$, $id$$) {
			return _(this.filter(function($iface$$) {
				return $iface$$.get("type") == $type$$ && $iface$$.get("id") == $id$$
			})).last()
		},
		filterVlanByParent: function($id$$) {
			return this.filter(function($iface$$) {
				return "vlan" == $iface$$.get("type") &&
				$iface$$.get("parent") == $id$$
			})
		},
		filterVlanByParentType: function($type$$) {
			return this.filter(function($iface$$) {
				return "vlan" == $iface$$.get("type") && $iface$$.getParentType() == $type$$
			})
		},
		filterVlanByParentTypes: function($types$$) {
			return this.filter(function($iface$$) {
				return "vlan" == $iface$$.get("type") && -1 != $.inArray($iface$$.getParentType(), $types$$)
			})
		},
		filterPppoeByParent: function($id$$) {
			return this.filter(function($iface$$) {
				return "pppoe" == $iface$$.get("type") && $iface$$.get("parent") == $id$$
			})
		},
		filterByConnected: function() {
			return this.filter(function($iface$$) {
				return "connected" ==
				$iface$$.get("stats").get("status")
			})
		},
		filterByBridgeGroup: function($id$$) {
			return this.filter(function($bridge$$1_group$$10_iface$$) {
				return ($bridge$$1_group$$10_iface$$ = ($bridge$$1_group$$10_iface$$ = $bridge$$1_group$$10_iface$$.get("bridge-group")) && "undefined" != typeof $bridge$$1_group$$10_iface$$.bridge ? $bridge$$1_group$$10_iface$$.bridge: null) && $bridge$$1_group$$10_iface$$ == $id$$
			})
		},
		filterByFirewallRuleset: function($name$$) {
			return this.filter(function($iface$$) {
				var $firewall$$ = $iface$$.get("firewall");
				if ($firewall$$) {
					var $result$$ = !1;
					_.each(["in", "out", "local"],
					function($direction$$) {
						$firewall$$[$direction$$] && ($firewall$$[$direction$$].name && $firewall$$[$direction$$].name == $name$$) && ($result$$ = !0)
					});
					return $result$$
				}
			})
		}
	});
	EDGE.Collections.InterfaceRates = EDGE.Collections.Rates.extend({
		max: 100,
		initialize: function() {
			this.on("add", this.trim)
		},
		trim: function() {
			var $overflow$$ = this.length - this.max;
			if (0 < $overflow$$) for (var $i$$ = 0; $i$$ < $overflow$$; $i$$++) this.shift()
		}
	});
	EDGE.Collections.Services = Backbone.Collection.extend({
		initialize: function() {
			this.add(this.modelize({
				type: "dhcp-server",
				disabled: !0
			}));
			this.add(this.modelize({
				type: "pppoe-server",
				disabled: !0
			}));
			this.add(this.modelize({
				type: "nat",
				disabled: !0
			}));
			this.add(this.modelize({
				type: "ssh",
				disabled: !0
			}));
			this.add(this.modelize({
				type: "telnet",
				disabled: !0
			}));
			this.add(this.modelize({
				type: "snmp",
				disabled: !0
			}));
			this.add(this.modelize({
				type: "dns",
				disabled: !0
			}));
			this.add(this.modelize({
				type: "ubnt-discover",
				disabled: !0
			}))
		},
		reset: function($models$$, $options$$) {
			var $models$$ = $models$$ || [],
			$dhcpServer$$ = this.filterByType("dhcp-server"),
			$pppoeServer$$ = this.filterByType("pppoe-server"),
			$nat$$ = this.filterByType("nat"),
			$dns$$ = this.filterByType("dns"),
			$options$$ = $options$$ || {};
			if (!$options$$.clear || $options$$.clear.dhcpServer) $dhcpServer$$.clear(),
			$models$$.push($dhcpServer$$);
			if (!$options$$.clear || $options$$.clear.pppoeServer) $pppoeServer$$.clear(),
			$models$$.push($pppoeServer$$);
			if (!$options$$.clear || $options$$.clear.nat) $nat$$.clear(),
			$models$$.push($nat$$);
			if (!$options$$.clear || $options$$.clear.dns) $dns$$.clear(),
			$models$$.push($dns$$);
			Backbone.Collection.prototype.reset.call(this, $models$$, $options$$);
			return this
		},
		"import": function($data$$) {
			$data$$ && _.each($data$$,
			function($service$$, $type$$) {
				$service$$ = $service$$ || {};
				$service$$.type = $type$$;
				var $model$$ = this.filterByType($service$$.type);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($service$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = this.modelize({
					type: $service$$.type
				}),
				$model$$.set($model$$.parse($service$$)), this.add($model$$));
				$model$$.set({
					disabled: !1
				},
				{
					silent: !0
				})
			},
			this)
		},
		add: function($models$$, $options$$) {
			if (_.isArray($models$$)) for (var $i$$ = 0, $l$$ = $models$$.length; $i$$ < $l$$; $i$$++) $models$$[$i$$] instanceof Backbone.Model || ($models$$[$i$$] = this.modelize($models$$[$i$$])),
			Backbone.Collection.prototype.add.call(this, $models$$[$i$$], $options$$);
			else $models$$ instanceof Backbone.Model || ($models$$ = this.modelize($models$$)),
			Backbone.Collection.prototype.add.call(this,
			$models$$, $options$$);
			return this
		},
		modelize: function($model$$195_service$$) {
			switch ($model$$195_service$$.type) {
			case "dhcp-server":
				$model$$195_service$$ = new EDGE.Models.Services.DhcpServer($model$$195_service$$);
				break;
			case "nat":
				$model$$195_service$$ = new EDGE.Models.Services.Nat($model$$195_service$$);
				break;
			default:
				$model$$195_service$$ = new EDGE.Models.Service($model$$195_service$$)
			}
			return $model$$195_service$$
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() &&
				($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) $data$$[$model$$.get("type")] = $model$$.toJSON(),
				delete $data$$[$model$$.get("type")].type
			});
			return $data$$
		},
		filterByType: function($type$$, $enabledOnly$$) {
			return _(this.filter(function($service$$) {
				return $service$$.get("type") == $type$$ && (!$enabledOnly$$ || !$service$$.get("disabled"))
			})).last()
		}
	});
	EDGE.Collections.DhcpSharedNetworks = Backbone.Collection.extend({
		model: EDGE.Models.DhcpSharedNetwork,
		"import": function($data$$) {
			_.each($data$$,
			function($network$$, $id$$) {
				$network$$ = $network$$ || {};
				$network$$.id = $id$$;
				var $model$$ = this.filterById($network$$.id);
				if ($model$$) {
					$model$$.clear({
						silent: !0,
						defaults: !0
					}).set($model$$.parse($network$$), {
						silent: !0
					});
					var $sn$$ = $model$$.get("subnet"),
					$sns$$ = $model$$.get("subnets");
					if ($sn$$ && $sns$$) $sns$$["import"]($sn$$);
					$model$$.change()
				} else $model$$ = new EDGE.Models.DhcpSharedNetwork($network$$),
				this.add($model$$)
			},
			this);
			this.loadData()
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) $data$$[$model$$.get("id")] = $model$$.toJSON(),
				$data$$.__FORCE_ASSOC = !0,
				delete $data$$[$model$$.get("id")].id
			});
			return $data$$
		},
		loadData: function() {
			var $leases$$ = new EDGE.Models.Data({
				type: "dhcp_leases"
			}),
			$stats$$ = new EDGE.Models.Data({
				type: "dhcp_stats"
			}),
			$self$$ = this;
			$leases$$.fetch({
				success: function($model$$) {
					$self$$.importLeases($model$$)
				}
			});
			$stats$$.fetch({
				success: function($model$$) {
					$self$$.importStats($model$$)
				}
			})
		},
		importLeases: function($json$$13_model$$) {
			$json$$13_model$$ = $json$$13_model$$.toJSON();
			$json$$13_model$$["dhcp-server-leases"] && _.each($json$$13_model$$["dhcp-server-leases"],
			function($leases$$, $id$$) {
				var $network$$ = this.filterById($id$$);
				$network$$ && ($network$$.get("leases").reset($network$$.get("leases").preprocess($leases$$)),
				$network$$.trigger("change"))
			},
			this)
		},
		importStats: function($json$$14_model$$) {
			$json$$14_model$$ = $json$$14_model$$.toJSON();
			$json$$14_model$$["dhcp-server-stats"] && _.each($json$$14_model$$["dhcp-server-stats"],
			function($stats$$, $id$$) {
				var $network$$ = this.filterById($id$$);
				$network$$ && ($network$$.get("stats").set($stats$$), $network$$.trigger("change"))
			},
			this)
		},
		filterById: function($id$$) {
			return _(this.filter(function($service$$) {
				return $service$$.get("id") == $id$$
			})).last()
		}
	});
	EDGE.Collections.DhcpSubnets = Backbone.Collection.extend({
		model: EDGE.Models.DhcpSubnet,
		"import": function($data$$) {
			$data$$ && _.each($data$$,
			function($subnet$$, $id$$) {
				$subnet$$ = $subnet$$ || {};
				$subnet$$.id = $id$$;
				var $model$$ = this.filterById($subnet$$.id);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($subnet$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = new EDGE.Models.DhcpSubnet({
					id: $subnet$$.id
				}), $model$$.set($model$$.parse($subnet$$)), this.add($model$$))
			},
			this)
		},
		hasChanged: function() {
			var $changed$$ =
			!1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) $data$$[$model$$.get("id")] = $model$$.toJSON(),
				delete $data$$[$model$$.get("id")].id
			});
			return $data$$
		},
		filterById: function($id$$) {
			return _(this.filter(function($subnet$$) {
				return $subnet$$.get("id") == $id$$
			})).last()
		}
	});
	EDGE.Collections.DhcpLeases = Backbone.Collection.extend({
		preprocess: function($leases$$) {
			_.each($leases$$,
			function($lease$$, $ip$$) {
				$lease$$ = $lease$$ || {};
				$lease$$.ip = $ip$$
			},
			this);
			return _($leases$$).values()
		}
	});
	EDGE.Collections.DhcpStaticMappings = Backbone.Collection.extend({
		model: EDGE.Models.DhcpStaticMapping,
		"import": function($data$$) {
			$data$$ && _.each($data$$,
			function($mapping$$, $id$$) {
				$mapping$$ = $mapping$$ || {};
				$mapping$$.id = $id$$;
				var $model$$ = this.filterById($mapping$$.id);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($mapping$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = new EDGE.Models.DhcpStaticMapping({
					id: $mapping$$.id
				}), $model$$.set($model$$.parse($mapping$$)), this.add($model$$))
			},
			this)
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) $data$$[$model$$.get("id")] = $model$$.toJSON(),
				$data$$.__FORCE_ASSOC = !0,
				delete $data$$[$model$$.get("id")].id
			});
			return $data$$
		},
		filterById: function($id$$) {
			return _(this.filter(function($mapping$$) {
				return $mapping$$.get("id") == $id$$
			})).last()
		}
	});
	EDGE.Collections.NatRules = EDGE.Collections.Rules.extend({
		model: EDGE.Models.NatRule,
		"import": function($data$$) {
			EDGE.Collections.Rules.prototype["import"].call(this, $data$$);
			var $dcount$$ = 0,
			$scount$$ = 4999;
			this.each(function($rule$$) {
				"destination" === $rule$$.get("type") ? $rule$$.set({
					order: ++$dcount$$
				}) : $rule$$.set({
					order: ++$scount$$
				})
			})
		},
		filterByTypeAndId: function($type$$, $id$$) {
			return _(this.filter(function($rule$$) {
				return $rule$$.get("type") == $type$$ && $rule$$.get("id") == $id$$
			})).last()
		},
		filterBySource: function() {
			return _(this.filter(function($rule$$) {
				return "destination" !=
				$rule$$.get("type")
			}))
		},
		filterByDestination: function() {
			return _(this.filter(function($rule$$) {
				return "destination" == $rule$$.get("type")
			}))
		},
		filterByTypeOrder: function($dest$$, $order$$) {
			var $ord$$ = $dest$$ ? $order$$: $order$$ + 4999;
			return _(this.filter(function($rule$$) {
				return $rule$$.get("order") == $ord$$
			})).last()
		},
		filterByTypeOrderBetween: function($dest$$, $from$$, $to$$) {
			var $tfrom$$ = $dest$$ ? $from$$: $from$$ + 4999,
			$tto$$ = $dest$$ ? $to$$: $to$$ + 4999;
			return _(this.filter(function($rule$$) {
				return $rule$$.get("order") >
				$tfrom$$ && $rule$$.get("order") < $tto$$
			}))
		},
		getNextId: function($type$$) {
			var $rules$$ = null;
			if ("destination" == $type$$) $rules$$ = this.filterByDestination();
			else if ($rules$$ = this.filterBySource(), $rules$$.isEmpty()) return 5E3;
			var $max$$ = 0;
			$rules$$.each(function($rule$$) {
				$max$$ = Math.max($rule$$.get("id"), $max$$)
			});
			return $max$$ + 1
		}
	});
	EDGE.Collections.Users = Backbone.Collection.extend({
		model: EDGE.Models.User,
		"import": function($data$$, $type$$) {
			_.each($data$$,
			function($user$$, $username$$) {
				$user$$ = $user$$ || {};
				$user$$.username = $username$$;
				$user$$.type = $type$$;
				var $model$$ = this.filterByUsernameAndType($user$$.username, $user$$.type);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($user$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = new EDGE.Models.User({
					username: $user$$.username,
					type: $user$$.type,
					level: $user$$.level
				}),
				$model$$.set($model$$.parse($user$$)), this.add($model$$))
			},
			this)
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				"local" == $model$$.get("type") && $model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged())"local" == $model$$.get("type") && ($data$$[$model$$.get("username")] = $model$$.toJSON())
			});
			return $data$$
		},
		filterByUsername: function($username$$,
		$single$$) {
			var $users$$ = _(this.filter(function($user$$) {
				return $user$$.get("username") == $username$$
			}));
			return $single$$ ? $users$$.last() : $users$$
		},
		filterByUsernameAndType: function($username$$, $type$$) {
			return _(this.filter(function($user$$) {
				return $user$$.get("username") == $username$$ && $user$$.get("type") == $type$$
			})).last()
		},
		filterByUsernamePlus: function($username$$, $data$$) {
			return _(this.filter(function($user$$) {
				if ($user$$.get("username") == $username$$) {
					var $result$$ = !0;
					_.each($data$$,
					function($value$$,
					$type$$) {
						$user$$.get($type$$) != $value$$ && ($result$$ = !1)
					});
					return $result$$
				}
			})).last()
		}
	});
	EDGE.Collections.UserSessions = Backbone.Collection.extend({
		model: EDGE.Models.UserSession
	});
	EDGE.Collections.UserRates = EDGE.Collections.Rates.extend({});
	EDGE.Collections.Notices = Backbone.Collection.extend({
		model: EDGE.Models.Notice,
		filterByError: function() {
			return this.filter(function($notice$$) {
				return "error" == $notice$$.get("type")
			})
		}
	});
	EDGE.Collections.Routes = Backbone.Collection.extend({
		initialize: function() {
			this.importCounter = 0;
			this.add(this.modelize({
				rtype: "ospf-cfg",
				disabled: !0
			}))
		},
		reset: function($models$$, $options$$) {
			var $models$$ = $models$$ || [],
			$ospfConfig$$ = this.filterByRouteType("ospf-cfg").last(),
			$options$$ = $options$$ || {};
			if (!$options$$.clear || $options$$.clear.ospfConfig) $ospfConfig$$.clear(),
			$models$$.push($ospfConfig$$);
			Backbone.Collection.prototype.reset.call(this, $models$$, $options$$);
			return this
		},
		"import": function($data$$) {
			$data$$ &&
			_.each($data$$,
			function($protocols$$, $rtype$$) {
				switch ($rtype$$) {
				case "ospf":
					var $model$$ = this.filterByRouteType("ospf-cfg").last();
					$model$$ ? ($model$$.clear({
						silent: !0,
						defaults: !0
					}).set($model$$.parse($protocols$$), {
						silent: !0
					}), $model$$.change()) : ($model$$ = this.modelize({
						rtype: "ospf-cfg"
					}), $model$$.set($model$$.parse($protocols$$)), this.add($model$$));
					$model$$.set({
						disabled: !1
					},
					{
						silent: !0
					});
					break;
				case "static":
					_.each($protocols$$,
					function($routes$$, $route$$) {
						"route" != $route$$ && "interface-route" != $route$$ ||
						_.each($routes$$,
						function($item$$, $destination$$) {
							$item$$ = $item$$ || {};
							$item$$.rtype = $rtype$$;
							$item$$.route = $route$$;
							$item$$.destination = $destination$$;
							var $attrs$$75_nexthop$$ = $item$$["next-hop"];
							delete $item$$["next-hop"];
							var $nexthopInterface$$ = $item$$["next-hop-interface"];
							delete $item$$["next-hop-interface"];
							var $blackhole$$ = $item$$.blackhole;
							delete $item$$.blackhole;
							$attrs$$75_nexthop$$ && _.each($attrs$$75_nexthop$$,
							function($info$$, $hop$$) {
								var $attrs$$ = _.clone($item$$);
								$attrs$$.type = "gateway";
								$attrs$$.nexthop = {
									ip: $hop$$
								};
								this.importStaticRoute($attrs$$, $info$$)
							},
							this);
							$nexthopInterface$$ && _.each($nexthopInterface$$,
							function($info$$, $hop$$) {
								var $attrs$$ = _.clone($item$$);
								$attrs$$.type = "interface";
								$attrs$$.nexthop = {
									"interface": $hop$$
								};
								this.importStaticRoute($attrs$$, $info$$)
							},
							this);
							void 0 !== $blackhole$$ && ($attrs$$75_nexthop$$ = _.clone($item$$), $attrs$$75_nexthop$$.type = "blackhole", $attrs$$75_nexthop$$.nexthop = {},
							this.importStaticRoute($attrs$$75_nexthop$$, $blackhole$$))
						},
						this)
					},
					this)
				}
			},
			this);
			this.loadData()
		},
		importStaticRoute: function($route$$, $hop$$) {
			$route$$.nexthop = _.extend($route$$.nexthop, {
				disable: $hop$$ && "undefined" != typeof $hop$$.disable ? !0: !1,
				distance: $hop$$ ? $hop$$.distance: null,
				description: $hop$$ ? $hop$$.description: ""
			});
			switch ($route$$.type) {
			case "gateway":
				var $model$$ = this.filterStaticGatewayByDestinationAndNextHop($route$$.destination, $route$$.nexthop.ip);
				break;
			case "interface":
				$model$$ = this.filterStaticInterfaceByDestinationAndNextHop($route$$.destination, $route$$.nexthop["interface"]);
				break;
			case "blackhole":
				$model$$ = this.filterStaticBlackholeByDestination($route$$.destination)
			}
			$model$$ ? ($model$$.clear({
				silent: !0,
				defaults: !0
			}).set($model$$.parse($route$$), {
				silent: !0
			}), $model$$.in_cfg = !0, $model$$.change()) : ($model$$ = this.modelize({
				rtype: $route$$.rtype,
				type: $route$$.type,
				route: $route$$.route,
				destination: $route$$.destination
			}), $model$$.set($model$$.parse($route$$)), $model$$.in_cfg = !0, this.add($model$$))
		},
		add: function($models$$, $options$$) {
			if (_.isArray($models$$)) for (var $i$$ = 0, $l$$ =
			$models$$.length; $i$$ < $l$$; $i$$++) $models$$[$i$$] instanceof Backbone.Model || ($models$$[$i$$] = this.modelize($models$$[$i$$])),
			Backbone.Collection.prototype.add.call(this, $models$$[$i$$], $options$$);
			else $models$$ instanceof Backbone.Model || ($models$$ = this.modelize($models$$)),
			Backbone.Collection.prototype.add.call(this, $models$$, $options$$);
			return this
		},
		modelize: function($model$$216_route$$) {
			switch ($model$$216_route$$.rtype) {
			case "ospf":
				$model$$216_route$$ = new EDGE.Models.Routes.Ospf($model$$216_route$$);
				break;
			case "ospf-cfg":
				$model$$216_route$$ = new EDGE.Models.Routes.OspfConfig($model$$216_route$$);
				break;
			case "rip":
				$model$$216_route$$ = new EDGE.Models.Routes.Rip($model$$216_route$$);
				break;
			case "static":
				$model$$216_route$$ = new EDGE.Models.Routes.Static($model$$216_route$$);
				break;
			default:
				$model$$216_route$$ = new EDGE.Models.Route($model$$216_route$$)
			}
			return $model$$216_route$$
		},
		hasChanged: function() {
			var $changed$$ = !1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) switch ($model$$.get("rtype")) {
				case "ospf-cfg":
					$data$$.ospf = $model$$.toJSON($changedOnly$$);
					delete $data$$["ospf-cfg"];
					break;
				case "static":
					var $route$$ = $model$$.generateRoute(),
					$destination$$ = $model$$.get("destination");
					$data$$["static"] = $data$$["static"] || {};
					$data$$["static"][$route$$] = $data$$["static"][$route$$] || {};
					$data$$["static"][$route$$][$destination$$] = $data$$["static"][$route$$][$destination$$] ||
					{};
					switch ($model$$.get("type")) {
					case "gateway":
						var $nexthop$$ = $model$$.get("nexthop").ip;
						$data$$["static"][$route$$][$destination$$]["next-hop"] = $data$$["static"][$route$$][$destination$$]["next-hop"] || {};
						$data$$["static"][$route$$][$destination$$]["next-hop"][$nexthop$$] = $model$$.toJSON();
						delete $data$$["static"][$route$$][$destination$$]["next-hop"][$nexthop$$].type;
						delete $data$$["static"][$route$$][$destination$$]["next-hop"][$nexthop$$].rtype;
						delete $data$$["static"][$route$$][$destination$$]["next-hop"][$nexthop$$].destination;
						delete $data$$["static"][$route$$][$destination$$]["next-hop"][$nexthop$$].route;
						break;
					case "interface":
						$nexthop$$ = $model$$.get("nexthop")["interface"];
						$data$$["static"][$route$$][$destination$$]["next-hop-interface"] = $data$$["static"][$route$$][$destination$$]["next-hop-interface"] || {};
						$data$$["static"][$route$$][$destination$$]["next-hop-interface"][$nexthop$$] = $model$$.toJSON();
						delete $data$$["static"][$route$$][$destination$$]["next-hop-interface"][$nexthop$$].type;
						delete $data$$["static"][$route$$][$destination$$]["next-hop-interface"][$nexthop$$].rtype;
						delete $data$$["static"][$route$$][$destination$$]["next-hop-interface"][$nexthop$$].destination;
						delete $data$$["static"][$route$$][$destination$$]["next-hop-interface"][$nexthop$$].route;
						break;
					case "blackhole":
						$data$$["static"][$route$$][$destination$$].blackhole = $model$$.toJSON(),
						delete $data$$["static"][$route$$][$destination$$].blackhole.type,
						delete $data$$["static"][$route$$][$destination$$].blackhole.rtype,
						delete $data$$["static"][$route$$][$destination$$].blackhole.destination,
						delete $data$$["static"][$route$$][$destination$$].blackhole.route
					}
				}
			});
			return $data$$
		},
		filterStaticGatewayByDestinationAndNextHop: function($destination$$, $nexthop$$) {
			return _(this.filter(function($item$$) {
				return "static" == $item$$.get("rtype") && "gateway" == $item$$.get("type") && $item$$.get("destination") == $destination$$ && $item$$.get("nexthop").ip == $nexthop$$
			})).last()
		},
		filterStaticInterfaceByDestinationAndNextHop: function($destination$$, $nexthop$$) {
			return _(this.filter(function($item$$) {
				return "static" == $item$$.get("rtype") && "interface" == $item$$.get("type") && $item$$.get("destination") ==
				$destination$$ && $item$$.get("nexthop")["interface"] == $nexthop$$
			})).last()
		},
		filterStaticBlackholeByDestination: function($destination$$) {
			return _(this.filter(function($item$$) {
				return "static" == $item$$.get("rtype") && "blackhole" == $item$$.get("type") && $item$$.get("destination") == $destination$$
			})).last()
		},
		filterCfgStaticByTypeDestAll: function($type$$, $dest$$) {
			return this.filter(function($item$$) {
				return $item$$.in_cfg && "static" === $item$$.get("rtype") && $item$$.get("type") === $type$$ && $item$$.get("destination") ===
				$dest$$
			})
		},
		filterTypeDestNh: function($type$$, $dest$$, $nh$$) {
			return _(this.filter(function($r$$) {
				return $r$$.get("rtype") == $type$$ && $r$$.get("destination") == $dest$$ && $r$$.get("nexthop")["interface"] == $nh$$
			})).last()
		},
		filterConnectedByDestinationAndNextHop: function($destination$$, $nexthop$$) {
			return _(this.filter(function($item$$) {
				return "connected" == $item$$.get("rtype") && $item$$.get("destination") == $destination$$ && $item$$.get("nexthop")["interface"] == $nexthop$$
			})).last()
		},
		filterRipByDestinationAndNextHop: function($destination$$,
		$nexthop$$) {
			return _(this.filter(function($item$$) {
				return "rip" == $item$$.get("rtype") && $item$$.get("destination") == $destination$$ && $item$$.get("nexthop")["interface"] == $nexthop$$
			})).last()
		},
		filterOspfByDestinationAndNextHop: function($destination$$, $nexthop$$) {
			return _(this.filter(function($item$$) {
				return "ospf" == $item$$.get("rtype") && $item$$.get("destination") == $destination$$ && $item$$.get("nexthop")["interface"] == $nexthop$$
			})).last()
		},
		filterOspfAreaById: function($id$$) {
			return _(this.filter(function($item$$) {
				return "ospf" ==
				$item$$.get("rtype") && $item$$.get("id") == $id$$
			})).last()
		},
		filterByRouteType: function($rtype$$) {
			return _(this.filter(function($item$$) {
				return $item$$.get("rtype") == $rtype$$
			}))
		},
		filterList: function() {
			return _(this.filter(function($item$$) {
				return "ospf-cfg" != $item$$.get("rtype")
			}))
		},
		loadData: function() {
			var $data$$ = new EDGE.Models.Data({
				type: "routes"
			}),
			$counter$$ = ++this.importCounter,
			$self$$ = this;
			$data$$.fetch({
				success: function($model$$) {
					$self$$.importData($model$$, $counter$$)
				}
			})
		},
		importData: function($model$$0$$,
		$counter$$) {
			var $json$$ = $model$$0$$.toJSON();
			_.each($json$$,
			function($route$$) {
				if ("object" == typeof $route$$ && "object" == typeof $route$$.nh) {
					var $rtype$$;
					_.each($route$$.nh,
					function($data$$) {
						" " != $data$$.t[0] && ($rtype$$ = $data$$.t[0])
					});
					_.each($route$$.nh,
					function($data$$) {
						var $selected$$ = ">" == $data$$.t[1],
						$fib$$ = "*" == $data$$.t[2],
						$blackhole$$1_nexthop$$ = 1 == $data$$.bh,
						$iface$$ = $data$$.intf,
						$ip$$ = $data$$.via,
						$type$$,
						$model$$;
						switch ($rtype$$) {
						case "S":
							$blackhole$$1_nexthop$$ ? ($type$$ = "blackhole", $model$$ =
							this.filterStaticBlackholeByDestination($route$$.pfx)) : $ip$$ ? ($type$$ = "gateway", $model$$ = this.filterStaticGatewayByDestinationAndNextHop($route$$.pfx, $ip$$)) : $iface$$ && ($type$$ = "interface", $model$$ = this.filterStaticInterfaceByDestinationAndNextHop($route$$.pfx, $iface$$));
							$model$$ || ($model$$ = new EDGE.Models.Routes.Static({
								rtype: "static",
								type: $type$$,
								destination: $route$$.pfx
							}), this.add($model$$));
							break;
						case "C":
							$model$$ = this.filterConnectedByDestinationAndNextHop($route$$.pfx, $iface$$);
							$model$$ || ($model$$ =
							new EDGE.Models.Routes.Connected({
								rtype: "connected",
								destination: $route$$.pfx
							}), this.add($model$$));
							break;
						case "O":
							$model$$ = this.filterOspfByDestinationAndNextHop($route$$.pfx, $iface$$);
							$model$$ || ($model$$ = new EDGE.Models.Routes.Connected({
								rtype: "ospf",
								destination: $route$$.pfx
							}), this.add($model$$));
							break;
						case "R":
							$model$$ = this.filterRipByDestinationAndNextHop($route$$.pfx, $iface$$);
							$model$$ || ($model$$ = new EDGE.Models.Routes.Connected({
								rtype: "rip",
								destination: $route$$.pfx
							}), this.add($model$$));
							break;
							case "K":
							$model$$ = this.filterTypeDestNh("kernel", $route$$.pfx, $iface$$);
							$model$$ || ($model$$ = new EDGE.Models.Routes.Connected({
								rtype: "kernel",
								destination: $route$$.pfx
							}), this.add($model$$));
							break;
						default:
							return
						}
						$model$$ && ($blackhole$$1_nexthop$$ = $model$$.get("nexthop"), $blackhole$$1_nexthop$$["interface"] = $iface$$, $blackhole$$1_nexthop$$.ip = $ip$$, $model$$.set({
							fib: $fib$$,
							nexthop: $blackhole$$1_nexthop$$,
							selected: $selected$$,
							data: $data$$,
							counter: Math.max($model$$.get("counter") || 0, $counter$$)
						}))
					},
					this)
				}
			},
			this);
			_.each(this.models,
			function($model$$) {
				$model$$.get("counter") < $counter$$ && this.remove($model$$)
			},
			this)
		}
	});
	EDGE.Collections.OspfAreas = Backbone.Collection.extend({
		model: EDGE.Models.Routes.OspfArea,
		"import": function($data$$) {
			_.each($data$$,
			function($area$$, $id$$) {
				$area$$ = $area$$ || {};
				$area$$.id = $id$$;
				var $model$$ = this.filterById($area$$.id);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($area$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ = new EDGE.Models.Routes.OspfArea({
					id: $area$$.id
				}), $model$$.set($model$$.parse($area$$)), this.add($model$$))
			},
			this)
		},
		hasChanged: function() {
			var $changed$$ =
			!1;
			_.each(this.models,
			function($model$$) {
				$model$$.hasChanged() && ($changed$$ = !0)
			});
			return $changed$$
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) if ("''" == $model$$.get("id")) $data$$ = null;
				else {
					var $mdata$$ = null;
					$model$$.isDelete() || ($mdata$$ = $model$$.toJSON(), delete $mdata$$.id, $mdata$$.network && 0 == $mdata$$.network.length && delete $mdata$$.network);
					$data$$[$model$$.get("id")] = $mdata$$
				}
			});
			$data$$ && ($data$$.__FORCE_ASSOC =
			!0);
			return $data$$
		},
		filterById: function($id$$) {
			return _(this.filter(function($area$$) {
				return $area$$.get("id") == $id$$
			})).last()
		},
		updateOspf: function() {
			alert("OSPF")
		}
	});
	EDGE.Collections.Wizards = Backbone.Collection.extend({
		model: EDGE.Models.Wizard,
		parse: function($response$$) {
			return $response$$.wizards
		},
		filterByType: function($type$$) {
			return _(this.filter(function($wizard$$) {
				return $wizard$$.get("type") == $type$$
			}))
		},
		filterByTypeAndKey: function($type$$, $key$$) {
			return _(this.filter(function($wizard$$) {
				return $wizard$$.get("type") == $type$$ && $wizard$$.get("key") == $key$$
			})).last()
		},
		setup: function($options$$) {
			return this.fetch(_.extend($options$$ || {},
			{
				_method: "read-setup"
			}))
		},
		runtime: function($options$$) {
			return this.fetch(_.extend($options$$ || {},
			{
				_method: "read-runtime"
			}))
		},
		sync: function($method$$, $collection$$, $options$$) {
			$options$$ = $options$$ || {};
			$options$$._method && ($method$$ = $options$$._method, delete $options$$._method);
			switch ($method$$) {
			case "read-setup":
				$options$$.contentType = "application/json";
				$options$$.url = "/api/wizard/setup.json";
				break;
			case "read-runtime":
				$options$$.contentType = "application/json";
				$options$$.url = "/api/wizard/runtime.json";
				break;
			case "read":
				$options$$.contentType =
				"application/json",
				$options$$.url = "/api/wizard/all.json"
			}
			return Backbone.sync.call(this, $method$$, $collection$$, $options$$)
		}
	});
	EDGE.Collections.UserTrafficAnalysis = Backbone.Collection.extend({
		model: EDGE.Models.UserTrafficAnalysis,
		attr_name: "EDGE.Collections.UserTrafficAnalysis",
		filterByIp: function($ip$$) {
			return _(this.filter(function($user$$) {
				return $user$$.get("ip") == $ip$$
			})).last()
		},
		filterByNotUptodate: function() {
			return _(this.filter(function($user$$) {
				return ! 1 == $user$$.get("uptodate")
			}))
		}
	});
	EDGE.Collections.AppTrafficAnalysis = Backbone.Collection.extend({
		model: EDGE.Models.AppTrafficAnalysis,
		attr_name: "EDGE.Collections.AppTrafficAnalysis",
		filterByName: function($name$$) {
			return _(this.filter(function($app$$) {
				return $app$$.get("name") == $name$$
			})).last()
		}
	});
	EDGE.Collections.AppTrafficAnalysisStats = Backbone.Collection.extend({
		model: EDGE.Models.AppTrafficAnalysisStats,
		attr_name: "EDGE.Collections.AppTrafficAnalysisStats",
		filterByName: function($name$$) {
			return _(this.filter(function($app$$) {
				return $app$$.get("name") == $name$$
			})).last()
		}
	});
	EDGE.Collections.TrafficAnalysisCategories = Backbone.Collection.extend({
		model: EDGE.Models.TrafficAnalysisCategory,
		attr_name: "EDGE.Collections.TrafficAnalysisCategories",
		"import": function($data$$) {
			_.each($data$$,
			function($category$$, $name$$) {
				$category$$ = $category$$ || {};
				$category$$.apps = $category$$.name || [];
				$category$$.name = $name$$;
				var $model$$ = this.filterByName($category$$.name);
				$model$$ ? ($model$$.clear({
					silent: !0,
					defaults: !0
				}).set($model$$.parse($category$$), {
					silent: !0
				}), $model$$.change()) : ($model$$ =
				new EDGE.Models.TrafficAnalysisCategory({
					name: $name$$
				}), $model$$.set($model$$.parse($category$$)), this.add($model$$))
			},
			this)
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) $data$$[$model$$.get("name")] = $model$$.toJSON()
			});
			return $data$$
		},
		filterByName: function($name$$) {
			return _(this.filter(function($category$$) {
				return $category$$.get("name") == $name$$
			})).last()
		}
	});
	EDGE.Collections.QosAdvancedNodes = Backbone.Collection.extend({
		attr_name: "EDGE.Collections.QosAdvancedNodes",
		"import": function($data$$) {
			$data$$ && _.each($data$$,
			function($typeQueues$$, $type$$) {
				_.each($typeQueues$$,
				function($queues$$, $subType$$) {
					_.each($queues$$,
					function($q$$, $qid$$) {
						$q$$ = $q$$ || {};
						$q$$.qid = $qid$$;
						$q$$.type = $type$$;
						$q$$.subType = $subType$$;
						var $model$$ = this.filterById($q$$.qid);
						$model$$ ? $model$$.clear({
							silent: !0,
							defaults: !0
						}).set($model$$.parse($q$$), {
							silent: !0
						}) : ($model$$ = this.modelize({
							qid: $q$$.qid,
							type: $q$$.type
						}), $model$$.set($model$$.parse($q$$)), this.add($model$$))
					},
					this)
				},
				this)
			},
			this)
		},
		toTreeJSON: function() {
			var $trees$$ = [];
			this.filterByType("root").each(function($children$$8_r$$31_root$$) {
				var $children$$8_r$$31_root$$ = $children$$8_r$$31_root$$.toTreeJSON(),
				$stack$$ = [];
				$stack$$.push($children$$8_r$$31_root$$);
				for ($trees$$.push($children$$8_r$$31_root$$); ! _.isEmpty($stack$$);) {
					var $node$$ = $stack$$.pop(),
					$children$$8_r$$31_root$$ = this.filterByParent($node$$.qid);
					$children$$8_r$$31_root$$.size() &&
					($node$$.children = [], $children$$8_r$$31_root$$.each(function($c$$47_child$$) {
						$c$$47_child$$ = $c$$47_child$$.toTreeJSON();
						$node$$.children.push($c$$47_child$$);
						$stack$$.push($c$$47_child$$)
					},
					this))
				}
			},
			this);
			return $trees$$
		},
		removeModelAndAssociates: function($modelToDel$$1_toDel$$) {
			for ($modelToDel$$1_toDel$$ = [$modelToDel$$1_toDel$$]; ! _.isEmpty($modelToDel$$1_toDel$$);) {
				var $tmp$$ = [];
				_.each($modelToDel$$1_toDel$$,
				function($model$$) {
					$tmp$$ = _.union($tmp$$, this.filterByParent($model$$.get("qid")).toArray())
				},
				this);
				this.remove($modelToDel$$1_toDel$$);
				$modelToDel$$1_toDel$$ = $tmp$$
			}
		},
		findOffsprings: function($model$$) {
			var $ret$$ = [],
			$offsprings$$ = [];
			for ($offsprings$$.push($model$$); ! _.isEmpty($offsprings$$);) {
				var $tmp$$ = [];
				_.each($offsprings$$,
				function($offspring$$) {
					$tmp$$ = _.union($tmp$$, this.filterByParent($offspring$$.get("qid")).toArray())
				},
				this);
				$ret$$ = _.union($ret$$, $tmp$$);
				$offsprings$$ = $tmp$$
			}
			return $ret$$
		},
		findAncestors: function($m$$17_model$$) {
			for (var $ancestors$$ = [];
			"root" !== $m$$17_model$$.get("type");) $m$$17_model$$ =
			this.filterById($m$$17_model$$.get("parent")),
			$ancestors$$.unshift($m$$17_model$$);
			return $ancestors$$
		},
		modelize: function($model$$) {
			switch ($model$$.type) {
			case "branch":
				$model$$ = new EDGE.Models.QosAdvanceds.Branch($model$$);
				break;
			case "leaf":
				$model$$ = new EDGE.Models.QosAdvanceds.Leaf($model$$);
				break;
			case "root":
				$model$$ = new EDGE.Models.QosAdvanceds.Root($model$$);
				break;
			default:
				$model$$ = new EDGE.Models.QosAdvanced.Node($model$$)
			}
			return $model$$
		},
		filterById: function($qid$$) {
			return _(this.filter(function($queue$$) {
				return $queue$$.get("qid") ==
				$qid$$
			})).last()
		},
		filterByType: function($type$$) {
			return _(this.filter(function($queue$$) {
				return $queue$$.get("type") == $type$$
			}))
		},
		filterByTypes: function($types$$) {
			return _(this.filter(function($queue$$) {
				return - 1 != $.inArray($queue$$.get("type"), $types$$)
			}))
		},
		filterByParent: function($parent$$) {
			return _(this.filter(function($queue$$) {
				return $queue$$.get("parent") == $parent$$
			}))
		},
		filterByAncestor: function($parent$$) {
			return _(this.filter(function($queue$$) {
				for (;
				"root" != $queue$$.get("type");) {
					if ($queue$$.get("parent") ==
					$parent$$) return ! 0;
					$queue$$ = this.filterById($queue$$.get("parent"))
				}
				return ! 1
			},
			this))
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) {
					var $type$$ = $model$$.get("type"),
					$subType$$ = $model$$.get("subType");
					_.has($data$$, $type$$) || ($data$$[$type$$] = {});
					_.has($data$$[$type$$], $subType$$) || ($data$$[$type$$][$subType$$] = {});
					$data$$[$type$$][$subType$$][$model$$.get("qid")] = $model$$.toJSON()
				}
			});
			return $data$$
		}
	});
	EDGE.Collections.QosAdvancedQueueTypes = Backbone.Collection.extend({
		"import": function($data$$) {
			$data$$ && _.each($data$$,
			function($typeQueues$$, $type$$) {
				_.each($typeQueues$$,
				function($queues$$, $subType$$) {
					_.each($queues$$,
					function($q$$, $qid$$) {
						$q$$ = $q$$ || {};
						$q$$.qid = $qid$$;
						$q$$.type = $type$$;
						$q$$.subType = $subType$$;
						var $model$$ = this.filterById($q$$.qid);
						$model$$ ? $model$$.clear({
							silent: !0,
							defaults: !0
						}).set($model$$.parse($q$$), {
							silent: !0
						}) : ($model$$ = this.modelize({
							qid: $q$$.qid
						}), $model$$.set($model$$.parse($q$$)),
						this.add($model$$))
					},
					this)
				},
				this)
			},
			this)
		},
		modelize: function($queue$$) {
			return new EDGE.Models.QosType($queue$$)
		},
		filterById: function($qid$$) {
			return _(this.filter(function($queue$$) {
				return $queue$$.get("qid") == $qid$$
			})).last()
		},
		filterByTypeAndSubType: function($type$$, $subType$$) {
			return _(this.filter(function($queue$$) {
				return $queue$$.get("type") == $type$$ && $queue$$.get("subType") == $subType$$
			}))
		},
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ ||
				$model$$.hasChanged()) {
					var $type$$ = $model$$.get("type"),
					$subType$$ = $model$$.get("subType");
					_.has($data$$, $type$$) || ($data$$[$type$$] = {});
					_.has($data$$[$type$$], $subType$$) || ($data$$[$type$$][$subType$$] = {});
					$data$$[$type$$][$subType$$][$model$$.get("qid")] = $model$$.toJSON()
				}
			});
			return $data$$
		}
	});
	EDGE.Collections.QosAdvancedFilters = Backbone.Collection.extend({
		toJSON: function($changedOnly$$) {
			var $data$$ = {};
			_.each(this.models,
			function($model$$) {
				if (!$changedOnly$$ || $model$$.hasChanged()) {
					var $type$$ = $model$$.get("type"),
					$subType$$ = $model$$.get("subType");
					_.has($data$$, $type$$) || ($data$$[$type$$] = {});
					_.has($data$$[$type$$], $subType$$) || ($data$$[$type$$][$subType$$] = {});
					$data$$[$type$$][$subType$$][$model$$.get("qid")] = $model$$.toJSON()
				}
			});
			return $data$$
		},
		"import": function($data$$) {
			$data$$ && _.each($data$$,
			function($typeQueues$$, $type$$) {
				_.each($typeQueues$$,
				function($queues$$, $subType$$) {
					_.each($queues$$,
					function($q$$, $qid$$) {
						$q$$ = $q$$ || {};
						$q$$.qid = $qid$$;
						$q$$.type = $type$$;
						$q$$.subType = $subType$$;
						var $model$$ = this.filterById($q$$.qid);
						$model$$ ? $model$$.clear({
							silent: !0,
							defaults: !0
						}).set($model$$.parse($q$$), {
							silent: !0
						}) : ($model$$ = this.modelize({
							qid: $q$$.qid
						}), $model$$.set($model$$.parse($q$$)), this.add($model$$))
					},
					this)
				},
				this)
			},
			this)
		},
		modelize: function($queue$$) {
			return new EDGE.Models.QosFilter($queue$$)
		},
		filterByParentAndChild: function($parent$$, $child$$) {
			return _(this.filter(function($link$$) {
				return $link$$.get("attach-to") == $parent$$ && $link$$.get("target") == $child$$
			}))
		},
		filterByAttachTo: function($parent$$) {
			return Array.isArray($parent$$) ? _(this.filter(function($queue$$) {
				return _.contains($parent$$, $queue$$.get("attach-to"))
			})) : _(this.filter(function($queue$$) {
				return $queue$$.get("attach-to") == $parent$$
			}))
		},
		filterByTarget: function($child$$) {
			return Array.isArray($child$$) ? _(this.filter(function($queue$$) {
				return _.contains($child$$,
				$queue$$.get("target"))
			})) : _(this.filter(function($queue$$) {
				return $queue$$.get("target") == $child$$
			}))
		},
		filterById: function($qid$$) {
			return _(this.filter(function($queue$$) {
				return $queue$$.get("qid") == $qid$$
			})).last()
		}
	});
	EDGE.Models.Toolbox = Backbone.Model.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Models.Toolbox",
		initialize: function($attrs$$78_collection$$) {
			if (!$attrs$$78_collection$$ || !$attrs$$78_collection$$.type || !$attrs$$78_collection$$.id) throw Msg.E_InvalidToolboxData;
			$attrs$$78_collection$$ = "Toolbox" + $attrs$$78_collection$$.type.charAt(0).toUpperCase() + $attrs$$78_collection$$.type.slice(1);
			this.set({
				data: new EDGE.Collections[$attrs$$78_collection$$],
				notices: new EDGE.Collections.Notices,
				stats: new Backbone.Collection
			});
			this.get("data").bind("change", this.change, this)
		},
		filterById: function($id$$) {
			return _(this.filter(function($item$$) {
				return $item$$.get("id") == $id$$
			})).last()
		}
	});
	EDGE.Models.ToolboxPing = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.data) throw "__IGNORE";
			var $matches$$;
			if ($matches$$ = $attrs$$.data.match(/(\d+ bytes) from ([^:]+): icmp_req=(\d+) ttl=(\d+) time=([\d\.]+) ms/)) this.set({
				type: "ping",
				host: $matches$$[2],
				time: $matches$$[5],
				ttl: $matches$$[4],
				request: $matches$$[3]
			});
			else if ($matches$$ = $attrs$$.data.match(/From ([\d\.]+) icmp_seq=(\d+) (.*)/)) this.set({
				type: "ping",
				host: $matches$$[1],
				time: $matches$$[3],
				ttl: "",
				request: $matches$$[2]
			});
			else if ($matches$$ = $attrs$$.data.match(/(\d+) packets transmitted, (\d+) received, (\d+)% packet loss, time (\d+)ms/)) this.set({
				type: "packets",
				transmitted: $matches$$[1],
				received: $matches$$[2],
				loss: $matches$$[3],
				time: $matches$$[4]
			});
			else if ($matches$$ = $attrs$$.data.match(/rtt min\/avg\/max\/mdev = ([\d\.]+)\/([\d\.]+)\/([\d\.]+)\/([\d\.]+) ms/)) this.set({
				type: "times",
				min: $matches$$[1],
				avg: $matches$$[2],
				max: $matches$$[3],
				mdev: $matches$$[4]
			});
			else {
				if ($attrs$$.data.match(/--- (\S+) ping statistics ---/)) throw "__IGNORE";
				if ($attrs$$.data.match(/PING .* bytes of data\./)) throw "__IGNORE";
				throw Msg.E_InvalidToolboxPingData + " (" + $attrs$$.data + ")";
			}
		}
	});
	EDGE.Models.ToolboxBandwidth = Backbone.Model.extend({
		initialize: function($attrs$$80_start$$) {
			if (!$attrs$$80_start$$ || !$attrs$$80_start$$.data) throw "__IGNORE";
			var $matches$$;
			if ($attrs$$80_start$$.data.match(/\[ ID\][ \t]+Interval[ \t]+Transfer[ \t]+Bandwidth/)) throw "__IGNORE";
			if ($attrs$$80_start$$.data.match(/(sender|receiver)$/)) throw "__IGNORE";
			if ($attrs$$80_start$$.data.match(/Connecting to host [\d\.\:]+, port \d+/)) this.set({
				role: "sender"
			});
			else if ($matches$$ = $attrs$$80_start$$.data.match(/Accepted connection from ([\d\.\:])+, port \d+/)) this.set({
				reset: !0,
				source: $matches$$[1]
			});
			else if ($attrs$$80_start$$.data.match(/iperf Done./)) this.set({
				done: !0
			});
			else {
				if ($attrs$$80_start$$.data.match(/connected to/)) throw "__IGNORE";
				if ($attrs$$80_start$$.data.match(/^-[- ]+/)) throw "__IGNORE";
				if ($attrs$$80_start$$.data.match(/Server listening on (\d+)/)) this.set({
					role: "receiver"
				});
				else if ($matches$$ = $attrs$$80_start$$.data.match(/\[[\t ]*([0-9A-Z]+)\][ \t]+([\d\.]+)-([\d\.]+)[ \t]+sec[ \t]+([\d\.]+)[ \t]+([A-Z]?)Bytes[ \t]+([\d\.]+)[ \t]+([A-Z])bit?s\/sec/)) {
					$attrs$$80_start$$ =
					parseFloat($matches$$[2]);
					if (0.5 > parseFloat($matches$$[3]) - $attrs$$80_start$$) throw "__IGNORE";
					this.set({
						speed: $matches$$[6],
						unit: $matches$$[7]
					});
					"SUM" == $matches$$[1] && this.set({
						sum: !0
					})
				} else if ($matches$$ = $attrs$$80_start$$.data.match(/iperf3: error - (.+)$/)) this.set({
					notices: $matches$$[1]
				});
				else throw "__IGNORE";
			}
		}
	});
	EDGE.Models.ToolboxTrace = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.data) throw "__IGNORE";
			var $matches$$;
			if ($matches$$ = $attrs$$.data.match(/^\s*(\d+)\s+([-.\w]+)\s+\(([-.\w]+)\)\s+(([\d]+\.[\d]+ ms\s*)+)/)) this.set({
				id: $matches$$[1],
				host: $matches$$[2],
				ip: $matches$$[3],
				responses: $matches$$[4]
			});
			else if ($matches$$ = $attrs$$.data.match(/^\s*(\d+)\s+([-.\w]+)\s+(([\d]+\.[\d]+ ms\s*)+)/)) this.set({
				id: $matches$$[1],
				host: "",
				ip: $matches$$[2],
				responses: $matches$$[3]
			});
			else if ($matches$$ =
			$attrs$$.data.match(/\s*([\d]+) ([*\s])*$/)) this.set({
				id: $matches$$[1],
				host: "*",
				ip: "*",
				responses: "*"
			});
			else {
				if ($attrs$$.data.match(/traceroute to (\S+) \([\d\.]+\), ([\d]+) hops max, ([\d]+) byte packets/)) throw "__IGNORE";
				throw Msg.E_InvalidToolboxTraceData + " (" + $attrs$$.data + ")";
			}
		}
	});
	EDGE.Models.ToolboxPackets = Backbone.Model.extend({
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.data) throw Msg.E_InvalidToolboxPacketsData;
			var $matches$$;
			if ($matches$$ = $attrs$$.data.match(/^(\d\d:\d\d:\d\d\.\d+)\s+(\S.*)$/)) this.set({
				time: $matches$$[1],
				packet: $matches$$[2]
			});
			else {
				if ($attrs$$.data.match(/^tcpdump: .*/)) throw "__IGNORE";
				if ($attrs$$.data.match(/^listening on .*/)) throw "__IGNORE";
				if ($attrs$$.data.match(/^[\d]+ packets (captured|received by filter|dropped by kernel)$/)) throw "__IGNORE";
				throw Msg.E_InvalidToolboxPacketsData + " (" + $attrs$$.data + ")";
			}
		}
	});
	EDGE.Models.ToolboxLogmon = Backbone.Model.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Models.ToolboxLogmon",
		initialize: function($attrs$$) {
			if (!$attrs$$ || !$attrs$$.data) throw Msg.E_InvalidToolboxLogmonData;
			var $matches$$;
			if ($matches$$ = $attrs$$.data.match(/^(\S+\s+\d+ \d+:\d+:\d+)\s+(\S.*)$/)) this.set({
				time: $matches$$[1],
				message: $matches$$[2]
			});
			else throw Msg.E_InvalidToolboxLogmonData + " (" + $attrs$$.data + ")";
		}
	});
	EDGE.Collections.Toolbox = Backbone.Collection.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Collections.Toolbox",
		model: EDGE.Models.Toolbox,
		initialize: function() {
			this.add({
				type: "discover",
				id: "discover"
			})
		},
		addItemByTypeAndId: function($type$$, $id$$, $item$$) {
			var $model$$ = this.filterByTypeAndId($type$$, $id$$);
			$model$$ || (this.add({
				type: $type$$,
				id: $id$$
			}), $model$$ = this.at(this.length - 1));
			$item$$.data && ($item$$.data = EDGE.sanitizeInput($item$$.data));
			try {
				$model$$.get("data").add($item$$)
			} catch($e$$) {
				"__IGNORE" != $e$$ &&
				$model$$.get("notices").add({
					type: "error",
					notice: $e$$
				})
			}
		},
		filterByTypeAndId: function($type$$, $id$$) {
			return _(this.filter(function($item$$) {
				return $item$$.get("type") == $type$$ && $item$$.get("id") == $id$$
			})).last()
		},
		hasChanged: function() {
			return ! 1
		}
	});
	EDGE.Collections.ToolboxPing = Backbone.Collection.extend({
		model: EDGE.Models.ToolboxPing
	});
	EDGE.Collections.ToolboxBandwidth = Backbone.Collection.extend({
		model: EDGE.Models.ToolboxBandwidth
	});
	EDGE.Collections.ToolboxTrace = Backbone.Collection.extend({
		model: EDGE.Models.ToolboxTrace
	});
	EDGE.Collections.ToolboxDiscover = Backbone.Collection.extend({});
	EDGE.Collections.ToolboxSpeed = EDGE.Collections.Rates.extend({});
	EDGE.Collections.ToolboxLogmon = Backbone.Collection.extend({
		FULLY_QUALIFIED_NAME: "EDGE.Collections.ToolboxLogmon",
		model: EDGE.Models.ToolboxLogmon
	});
	EDGE.Collections.ToolboxPackets = Backbone.Collection.extend({
		model: EDGE.Models.ToolboxPackets
	});
	$(function() {
		var $stats$$0$$ = function $$stats$$0$$$() {};
		EDGE.Stats = $stats$$0$$;
		$stats$$0$$.prototype.init = function $$stats$$0$$$$init$($url$$, $model$$, $callbacks$$) {
			try {
				this.ws = new WebSocket($url$$)
			} catch($e$$0$$) {
				throw Msg.E_MissingWebsockets;
			}
			this.model = $model$$;
			this.callbacks = $callbacks$$ || {};
			this.data = {
				length: null,
				content: null
			};
			this.importing = {};
			this.counter = 0;
			this.open = !1;
			this.queue = [];
			var $self$$ = this;
			this.ws.onopen = function $this$ws$onopen$() {
				$self$$.onopen()
			};
			this.ws.onmessage = function $this$ws$onmessage$($e$$) {
				$self$$.onmessage($e$$)
			};
			this.ws.onclose = function $this$ws$onclose$() {
				$self$$.onclose()
			};
			this.ws.onerror = function $this$ws$onerror$() {
				$self$$.onerror()
			};
			UBNT_DISCOVER_DISABLE = null === this.model.get("services").filterByType("ubnt-discover").get("disable") ? !0: !1;
			return this
		};
		$stats$$0$$.prototype.parse = function $$stats$$0$$$$parse$($data$$162_leftover_matches$$) {
			this.data.length ? this.data.content += $data$$162_leftover_matches$$: ($data$$162_leftover_matches$$ = $data$$162_leftover_matches$$.match(/^\s?([0-9]+)\n([\s\S]*)/), this.data.length =
			$data$$162_leftover_matches$$[1], this.data.content = 2 < $data$$162_leftover_matches$$.length ? $data$$162_leftover_matches$$[2] : "");
			this.data.length && this.data.content.length >= this.data.length && (this["import"](this.data.content.substr(0, this.data.length)), $data$$162_leftover_matches$$ = this.data.content.substr(this.data.length), this.data.length = null, $data$$162_leftover_matches$$ && this.parse($data$$162_leftover_matches$$))
		};
		$stats$$0$$.prototype["import"] = function $$stats$$0$$$$import$($json$$) {
			this.counter++;
			try {
				var $parsed$$ = JSON.parse($json$$);
				$parsed$$ && _.each($parsed$$,
				function($data$$, $type$$) {
					switch ($type$$) {
					case "interfaces":
						this.importInterfaces($data$$, this.counter);
						break;
					case "discover":
						this.importDiscover($data$$, this.counter);
						break;
					case "system-stats":
						this.importSystemStats($data$$, this.counter);
						break;
					case "num-routes":
						this.importNumRoutes($data$$, this.counter);
						break;
					case "config-change":
						this.importConfigChange($data$$, this.counter);
						break;
					case "users":
						this.importUsers($data$$, this.counter);
						break;
					case "export":
						this.importTrafficAnalysis($data$$, this.counter);
						break;
					case "nat-stats":
						this.importNatStats($data$$, this.counter);
						break;
					default:
						var $id$$139_matches$$;
						if ($id$$139_matches$$ = $type$$.match(/(ping|trace|discover|packets|logmon|bandwidth)(\d+)/)) {
							var $pfarray_pfs_t$$ = $id$$139_matches$$[1];
							$id$$139_matches$$ = $id$$139_matches$$[2];
							this.importing[$pfarray_pfs_t$$] = this.importing[$pfarray_pfs_t$$] || {};
							this.importing[$pfarray_pfs_t$$][$id$$139_matches$$] = this.importing[$pfarray_pfs_t$$][$id$$139_matches$$] ||
							"";
							for (var $nm$$; $nm$$ = $data$$.match(/^(.*?)\n([\s\S]*)$/);) {
								var $ln$$ = this.importing[$pfarray_pfs_t$$][$id$$139_matches$$] + $nm$$[1];
								this.importing[$pfarray_pfs_t$$][$id$$139_matches$$] = "";
								$data$$ = $nm$$[2];
								try {
									switch ($pfarray_pfs_t$$) {
									case "ping":
										this.importToolboxPing($ln$$, $id$$139_matches$$, this.counter);
										break;
									case "bandwidth":
										this.importToolboxBandwidth($ln$$, $id$$139_matches$$, this.counter);
										break;
									case "trace":
										this.importToolboxTrace($ln$$, $id$$139_matches$$, this.counter);
										break;
									case "packets":
										this.importToolboxPackets($ln$$,
										$id$$139_matches$$, this.counter);
										break;
									case "logmon":
										this.importToolboxLogmon($ln$$, $id$$139_matches$$, this.counter)
									}
								} catch($e$$) {
									$(window).trigger("notify", new EDGE.Models.Notice({
										type: "error",
										notice: $e$$
									}))
								}
							}
							this.importing[$pfarray_pfs_t$$][$id$$139_matches$$] += $data$$
						} else($id$$139_matches$$ = $type$$.match(/fwstat:(.*)/)) ? this.importFirewallStats($data$$, $id$$139_matches$$[1], this.counter) : $type$$.match(/pfstats/) && ($pfarray_pfs_t$$ = $data$$.split(/\s+/), $pfarray_pfs_t$$ = {
							id: $pfarray_pfs_t$$[0],
							packets: $pfarray_pfs_t$$[1],
							bytes: $pfarray_pfs_t$$[2]
						},
						this.pfscollection = this.model.get("pfstats"), this.pfscollection.update($pfarray_pfs_t$$), this.model.trigger("pfsupdate"))
					}
				},
				this)
			} catch($e$$0$$) {}
		};
		$stats$$0$$.prototype.subscribe = function $$stats$$0$$$$subscribe$($subscribe$$, $unsubscribe$$) {
			var $message$$ = JSON.stringify({
				SUBSCRIBE: $subscribe$$ || [],
				UNSUBSCRIBE: $unsubscribe$$ || [],
				SESSION_ID: UBNT.Utils.Cookies.get("PHPSESSID")
			});
			this.open ? this.send($message$$.length + "\n" + $message$$) : this.queue.push($message$$.length +
			"\n" + $message$$)
		};
		$stats$$0$$.prototype.unsubscribe = function $$stats$$0$$$$unsubscribe$($unsubscribe$$) {
			this.subscribe(null, $unsubscribe$$)
		};
		$stats$$0$$.prototype.send = function $$stats$$0$$$$send$($message$$) {
			this.ws.send($message$$)
		};
		$stats$$0$$.prototype.close = function $$stats$$0$$$$close$() {
			this.ws.close()
		};
		$stats$$0$$.prototype.onopen = function $$stats$$0$$$$onopen$() {
			this.callbacks.open && this.callbacks.open(this);
			for (var $message$$; $message$$ = this.queue.shift();) this.ws.send($message$$);
			this.open =
			!0
		};
		$stats$$0$$.prototype.onmessage = function $$stats$$0$$$$onmessage$($e$$) {
			this.callbacks.message && this.callbacks.message(this, $e$$);
			$e$$.data && this.parse($e$$.data)
		};
		$stats$$0$$.prototype.onclose = function $$stats$$0$$$$onclose$() {
			this.callbacks.close && this.callbacks.close(this);
			this.open = !1
		};
		$stats$$0$$.prototype.onerror = function $$stats$$0$$$$onerror$() {
			this.callbacks.error && this.callbacks.error(this)
		};
		$stats$$0$$.prototype.importTrafficAnalysis = function $$stats$$0$$$$importTrafficAnalysis$($data$$) {
			if ("TrafficAnalysis" ===
			Backbone.history.getFragment()) {
				var $ips$$ = this.model.get("tastats");
				$ips$$.each(function($user$$) {
					$user$$.set({
						uptodate: !1
					},
					{
						silent: !0
					})
				});
				_.each($data$$,
				function($stats$$, $ip$$) {
					var $user$$ = $ips$$.filterByIp($ip$$);
					$user$$ ? this.importTrafficAnalysisUser($user$$, $stats$$) : ($user$$ = new EDGE.Models.UserTrafficAnalysis({
						ip: $ip$$
					}), this.importTrafficAnalysisUser($user$$, $stats$$), $ips$$.add($user$$))
				},
				this);
				$ips$$.remove($ips$$.filterByNotUptodate().value());
				$ips$$.trigger("graphchange")
			}
		};
		$stats$$0$$.prototype.importTrafficAnalysisUser =
		function $$stats$$0$$$$importTrafficAnalysisUser$($user$$, $stats$$) {
			function $sumStats$$($col$$) {
				return _.reduce($stats$$,
				function($memo$$, $s$$) {
					return $memo$$ + Number($s$$[$col$$])
				},
				0)
			}
			$user$$.get("stats").set({
				rx: {
					bytes: $sumStats$$("rx_bytes"),
					bps: $sumStats$$("rx_rate")
				},
				tx: {
					bytes: $sumStats$$("tx_bytes"),
					bps: $sumStats$$("tx_rate")
				}
			},
			{
				silent: !0
			});
			var $new_apps$$ = [];
			_.each($stats$$,
			function($v$$, $k$$) {
				var $app$$ = new EDGE.Models.AppTrafficAnalysisStats,
				$cat$$6_index$$ = $k$$.indexOf("|"),
				$name$$ = $k$$.substr(0,
				$cat$$6_index$$),
				$cat$$6_index$$ = $k$$.substr($cat$$6_index$$ + 1);
				$app$$.set({
					rx: {
						bytes: $v$$.rx_bytes,
						bps: $v$$.rx_rate
					},
					tx: {
						bytes: $v$$.tx_bytes,
						bps: $v$$.tx_rate
					},
					name: $name$$,
					category: $cat$$6_index$$
				});
				$new_apps$$.push($app$$)
			});
			$user$$.get("apps").reset($new_apps$$);
			$user$$.set({
				uptodate: !0
			},
			{
				silent: !0
			});
			$user$$.trigger("change")
		};
		$stats$$0$$.prototype.importInterfaces = function $$stats$$0$$$$importInterfaces$($data$$) {
			_.each($data$$,
			function($stats$$, $id$$) {
				var $iface$$ = this.model.get("interfaces").filterById($id$$);
				$iface$$ && this.importInterface($iface$$, $stats$$)
			},
			this)
		};
		$stats$$0$$.prototype.importInterface = function $$stats$$0$$$$importInterface$($iface$$, $stats$$) {
			var $speedDetail$$ = "disabled";
			if ("true" === $stats$$.up && "true" === $stats$$.l1up) switch ($stats$$.speed) {
			case "1000":
				$speedDetail$$ = "up-gigabit";
				break;
			case "100":
				$speedDetail$$ = "up-100";
				break;
			case "10":
				$speedDetail$$ = "up-10"
			} else "true" === $stats$$.up && "false" === $stats$$.l1up && ($speedDetail$$ = "down");
			$iface$$.get("stats").set({
				date: new Date,
				ips: $stats$$.addresses,
				mtu: $stats$$.mtu,
				rx: {
					packets: $stats$$.stats.rx_packets,
					bytes: $stats$$.stats.rx_bytes,
					errors: $stats$$.stats.rx_errors,
					dropped: $stats$$.stats.rx_dropped,
					bps: $stats$$.stats.rx_bps
				},
				tx: {
					packets: $stats$$.stats.tx_packets,
					bytes: $stats$$.stats.tx_bytes,
					errors: $stats$$.stats.tx_errors,
					dropped: $stats$$.stats.tx_dropped,
					bps: $stats$$.stats.tx_bps
				},
				multicast: $stats$$.multicast,
				active: "true" == $stats$$.up ? !0: !1,
				status: "true" == $stats$$.up && "true" == $stats$$.l1up ? "connected": "disconnected",
				speedDetail: $speedDetail$$,
				speed: $stats$$.speed,
				duplex: $stats$$.duplex,
				up: "true" === $stats$$.up,
				l1up: "true" === $stats$$.l1up,
				combo: "true" === $stats$$.is_combo,
				is_sfp: "true" === $stats$$.is_sfp,
				sfp: {
					present: "true" === $stats$$.sfp_present,
					part: $stats$$.sfp_part,
					vendor: $stats$$.sfp_vendor
				}
			});
			$iface$$.trigger("change")
		};
		$stats$$0$$.prototype.importDiscover = function $$stats$$0$$$$importDiscover$($data$$) {
			UBNT_DISCOVER_DISABLE ? this.model.get("toolbox").get("discover").get("data").reset([]) : this.model.get("toolbox").get("discover").get("data").reset($data$$.devices)
		};
		$stats$$0$$.prototype.importSystemStats = function $$stats$$0$$$$importSystemStats$($data$$) {
			this.model.get("system").get("stats").set($data$$)
		};
		$stats$$0$$.prototype.importNumRoutes = function $$stats$$0$$$$importNumRoutes$($data$$) {
			this.model.get("system").get("stats").set({
				num_routes: $data$$
			})
		};
		$stats$$0$$.prototype.importConfigChange = function $$stats$$0$$$$importConfigChange$($data$$) {
			"started" == $data$$.commit ? $(window).trigger("notify", new EDGE.Models.Notice({
				type: "notice",
				notice: Msg.N_ConfigChangeStarted,
				permanent: !0
			})) : "ended" == $data$$.commit && $(window).trigger("reload", [Msg.N_ConfigChangeEnded, Msg.N_ConfigChangeTitle])
		};
		$stats$$0$$.prototype.importUsers = function $$stats$$0$$$$importUsers$($data$$, $counter$$) {
			var $local$$ = this.model.get("system").get("users"),
			$remote$$ = this.model.get("system").get("remote");
			$local$$ && $remote$$ && (_.each($data$$,
			function($users$$, $type$$) {
				_.each($users$$,
				function($details$$2_user$$) {
					var $username$$ = _.keys($details$$2_user$$)[0],
					$details$$2_user$$ = $details$$2_user$$[$username$$];
					if ("local" == $type$$) {
						var $model$$ = $local$$.filterByUsername($username$$, !0);
						$model$$ && ($model$$.statCounter($counter$$), $model$$.flushStats("sessions", $counter$$), $model$$.get("sessions").add(_.extend($details$$2_user$$, {
							counter: $counter$$
						})))
					} else {
						var $model$$ = $remote$$.filterByUsernamePlus($username$$, {
							"interface": $details$$2_user$$["interface"],
							"remote-ip": $details$$2_user$$["remote-ip"]
						}),
						$stats$$ = $details$$2_user$$.stats;
						delete $details$$2_user$$.stats;
						$model$$ ? $model$$.set(_.extend($details$$2_user$$,
						{
							counter: $counter$$
						})) : ($remote$$.add(_.extend($details$$2_user$$, {
							username: $username$$,
							type: $type$$,
							counter: $counter$$
						})), $model$$ = $remote$$.last());
						$model$$.get("stats").get("rates").add([{
							rx: {
								packets: $stats$$["rx-packets"],
								bytes: $stats$$["rx-bytes"]
							},
							tx: {
								packets: $stats$$["tx-packets"],
								bytes: $stats$$["tx-bytes"]
							}
						}])
					}
				},
				this)
			},
			this), $remote$$.each(function($model$$) {
				$model$$.get("counter") < $counter$$ && $remote$$.remove($model$$)
			}))
		};
		$stats$$0$$.prototype.importNatStats = function $$stats$$0$$$$importNatStats$($count$$12_data$$) {
			var $matches$$10_type$$ =
			$count$$12_data$$.match(/([\d]+) ([\d]+) (SRC|DST|MASQ) ([^\s]+) "([^"]*)"/);
			if ($matches$$10_type$$) {
				var $id$$141_model$$ = $matches$$10_type$$[1],
				$count$$12_data$$ = $matches$$10_type$$[2],
				$matches$$10_type$$ = $matches$$10_type$$[3];
				switch ($matches$$10_type$$) {
				case "SRC":
					$matches$$10_type$$ = "source";
					break;
				case "MASQ":
					$matches$$10_type$$ = "masquerade";
					break;
				case "DST":
					$matches$$10_type$$ = "destination"
				} ($id$$141_model$$ = this.model.get("services").filterByType("nat").get("rules").filterByTypeAndId($matches$$10_type$$,
				$id$$141_model$$)) && $id$$141_model$$.set({
					count: $count$$12_data$$
				})
			}
		};
		$stats$$0$$.prototype.importFirewallStats = function $$stats$$0$$$$importFirewallStats$($data$$, $id$$) {
			var $model$$ = this.model.get("firewall").get("rulesets").filterByName($id$$);
			if ($model$$) $model$$.get("stats")["import"]($data$$)
		};
		$stats$$0$$.prototype.importToolboxPing = function $$stats$$0$$$$importToolboxPing$($data$$, $id$$) {
			this.model.get("toolbox").addItemByTypeAndId("ping", $id$$, {
				data: $data$$
			})
		};
		$stats$$0$$.prototype.importToolboxBandwidth =
		function $$stats$$0$$$$importToolboxBandwidth$($data$$, $id$$) {
			this.model.get("toolbox").addItemByTypeAndId("bandwidth", $id$$, {
				data: $data$$
			})
		};
		$stats$$0$$.prototype.importToolboxTrace = function $$stats$$0$$$$importToolboxTrace$($data$$, $id$$) {
			this.model.get("toolbox").addItemByTypeAndId("trace", $id$$, {
				data: $data$$
			})
		};
		$stats$$0$$.prototype.importToolboxPackets = function $$stats$$0$$$$importToolboxPackets$($data$$, $id$$) {
			this.model.get("toolbox").addItemByTypeAndId("packets", $id$$, {
				data: $data$$
			})
		};
		$stats$$0$$.prototype.importToolboxLogmon =
		function $$stats$$0$$$$importToolboxLogmon$($data$$, $id$$) {
			this.model.get("toolbox").addItemByTypeAndId("logmon", $id$$, {
				data: $data$$
			})
		}
	});
	$(function() {
		var $app$$ = window.app || {};
		window.app = $app$$;
		$app$$.data = {};
		$app$$.data.saving = !1;
		$app$$.data.view = new EDGE.Models.App;
		$app$$.data.stats = $app$$.data.settings = $app$$.data.system = null;
		$app$$.data.subscribe = [{
			name: "interfaces"
		},
		{
			name: "export"
		},
		{
			name: "discover"
		},
		{
			name: "system-stats"
		},
		{
			name: "num-routes"
		},
		{
			name: "config-change"
		},
		{
			name: "users"
		}];
		$app$$.routers = {};
		$app$$.views = {};
		$app$$.defer = {};
		$app$$.defer.sysinfo = $.Deferred();
		$app$$.tooltip = new UBNT.views.uicomponents.Tooltip;
		$app$$.initialize =
		function $$app$$$initialize$($url$$, $debug$$) { (this.debug = $debug$$) || UBNT.Logger.disable();
			$("body").trigger("unrendered");
			$("#ApplicationLoading").show();
			$app$$.data.view.fetch({
				success: function() {
					try {
						$app$$.render($url$$)
					} catch($e$$) {
						UBNT.Logger.debug($e$$),
						$app$$.fatal(Msg.E_Render + ": " + $e$$, "Render Error", !0)
					}
				},
				error: function() {
					$app$$.fatal(Msg.E_NoConfig)
				},
				complete: function() {
					$("#ApplicationLoading").hide()
				}
			})
		};
		$app$$.render = function $$app$$$render$($url$$) {
			$app$$.data.stats || ($app$$.data.stats =
			(new EDGE.Stats).init(EDGE.Config.Stats.url, $app$$.data.view, {
				open: function($self$$) {
					$self$$.subscribe($app$$.data.subscribe)
				},
				close: function($content$$1_self$$) {
					if (!$content$$1_self$$.open && BROWSER_IS_SAFARI) {
						$content$$1_self$$ = Msg.E_SafariBadWebSocket;
						try {
							$app$$.heartbeat.takeover || new EDGE.Views.Global.Takeover({
								title: "Web Socket Error",
								content: $content$$1_self$$
							})
						} catch($e$$) {
							$(window).trigger("dialog", [$content$$1_self$$, "Web Socket Error"])
						}
					}
					EDGE.Config.Stats.required && $app$$.fatal(Msg.E_Timeout,
					"Timeout Error", !0)
				}
			}));
			$app$$.data.sysinfo || ($app$$.data.sysinfo = {},
			(new EDGE.Models.Data({
				type: "sys_info"
			})).fetch({
				success: function($model$$) {
					$app$$.data.sysinfo.version = $model$$.get("sw_ver") ? $model$$.get("sw_ver").split(".").slice(2, -3).join(".") : "";
					$app$$.defer.sysinfo.resolve($app$$.data.sysinfo)
				},
				error: function() {
					$app$$.defer.sysinfo.reject()
				}
			}));
			$app$$.data.settings || ($app$$.data.settings = new EDGE.Models.Settings(EDGE.Config.Settings), $app$$.data.settings.bind("change:keepalive",
			function() {
				$app$$.keepalive &&
				$app$$.keepalive()
			}).trigger("change:keepalive"));
			$app$$.heartbeat.retry || _.each(EDGE.Routers,
			function($router$$, $key$$) {
				this.routers[$key$$[0].toLowerCase() + $key$$.substr(1)] = new $router$$({
					app: this
				})
			},
			this);
			Backbone.history.on("route",
			function($router$$) {
				$router$$.changeSection()
			});
			try {
				Backbone.history.start()
			} catch($e$$0$$) {
				Backbone.history.loadUrl()
			} ($url$$ = $url$$ || Backbone.history.fragment) ? Backbone.history.navigate($url$$, {
				trigger: !0,
				replace: !0
			}) : this.routers.dashboard.forward();
			this.views.quickinfo =
			new EDGE.Views.Global.QuickInfo({
				interfaces: this.data.view.get("interfaces"),
				system: this.data.view.get("system")
			});
			this.views.footer ? this.views.footer.render() : this.views.footer = new EDGE.Views.Global.Footer({
				model: this.data.view
			});
			this.views.welcome || (this.views.welcome = new EDGE.Views.Global.Welcome({
				model: $app$$.data.view.get("system").get("users").filterByUsername(EDGE.Config.User.username, !0),
				system: $app$$.data.view.get("system"),
				el: $("#Welcome")
			}));
			this.views.toolbox || (this.views.toolbox = new EDGE.Views.Global.Toolbox.Default ({
				collection: this.data.view.get("toolbox"),
				stats: this.data.stats
			}));
			$app$$.dialogs = $app$$.dialogs || {};
			$app$$.dialogs.confirmationDialog = new EDGE.views.dialogs.ConfirmationDialog;
			$app$$.dialogs.alertDialog = new EDGE.views.dialogs.AlertDialog({
				html: !0
			});
			$app$$.dialogs.cliDialog = new EDGE.views.dialogs.CLIDialog;
			$app$$.tabs = $("#MainPanel").tabslite({
				manual: !0,
				init: function($anchors$$) {
					_.each($anchors$$,
					function($anchor$$) {
						var $$anchor$$ = $($anchor$$);
						$$anchor$$.data("content", this.content($$anchor$$)).one("click",
						function() {
							$$anchor$$.data("content").trigger("init")
						})
					},
					this)
				},
				content: function($$anchor$$) {
					return $("#" + $$anchor$$.attr("href").substr(1))
				}
			});
			$("body").append($app$$.tooltip.render()).dialogManager().trigger("rendered");
			this.data.view.get("system").bind("change:host-name", this.titlebar, this);
			this.titlebar();
			$("#EULALink").click(function() {
				window.open("/media/eula.html", "_blank", "location=no,width=400,height=600,left=100,top=100,menubar=no,status=no,scrollbars=1");
				return false
			});
			$app$$.heartbeat.run();
			EDGE.Rendered = !0
		};
		$app$$.titlebar = function $$app$$$titlebar$() {
			document.title =
			"EdgeOS - " + this.data.view.get("system").get("host-name")
		};
		$app$$.reload = function $$app$$$reload$($url$$) {
			_.each(this.routers,
			function($router$$) {
				$router$$.reset()
			});
			_.each(this.views,
			function($view$$) {
				$view$$.reset()
			});
			delete this.views.toolbox;
			this.initialize($url$$, this.debug)
		};
		$app$$.heartbeat = {
			takeover: null,
			interval: null,
			interference: 0,
			counter: 0,
			retry: !1,
			action: function $$app$$$heartbeat$action$() {
				var $self$$ = $app$$.heartbeat;
				$self$$.status("running");
				$.ajax({
					url: EDGE.Config.Api.heartbeat,
					cache: !1,
					timeout: 5E3,
					error: function() {
						0 >= $self$$.interference ? (3 <= ++$self$$.counter && $self$$.notify("timeout"), $self$$.retry = !0, UBNT.Logger.debug("blocked: " + $self$$.counter)) : UBNT.Logger.debug("interference: " + $self$$.interference)
					},
					success: function($data$$) {
						$self$$.counter = 0;
						$data$$.PING && $data$$.SESSION ? ($self$$.takeover && ($self$$.takeover.remove(), $self$$.takeover = null), $self$$.retry && ($app$$.data.stats && ($app$$.data.stats.close(), $app$$.data.stats = null), $app$$.render()), $self$$.retry = !1, $self$$.run()) :
						$data$$.PING ? $data$$.SESSION || ($self$$.stop(), $self$$.notify("session")) : ($self$$.stop(), $self$$.notify("ping"))
					}
				})
			},
			notify: function $$app$$$heartbeat$notify$($args$$160_content$$2_error$$) {
				var $self$$ = $app$$.heartbeat;
				switch ($args$$160_content$$2_error$$) {
				case "session":
					var $args$$160_content$$2_error$$ = Msg.E_SessionTimeout,
					$title$$ = "Reload",
					$action$$ = function $$action$$$() {
						window.location.reload()
					};
					break;
				default:
					$args$$160_content$$2_error$$ = Msg.E_NoConnection,
					$title$$ = "Try again",
					$action$$ = function $$action$$$() {
						$self$$.run(!0,
						!0)
					}
				}
				$args$$160_content$$2_error$$ = {
					title: "Lost connection",
					content: $args$$160_content$$2_error$$,
					buttons: [{
						title: $title$$,
						bindings: {
							click: {
								action: $action$$
							}
						}
					}]
				};
				$self$$.takeover ? ($self$$.takeover.reset($args$$160_content$$2_error$$), $self$$.status("failed")) : ($self$$.takeover = new EDGE.Views.Global.Takeover($args$$160_content$$2_error$$), $self$$.status("initial"))
			},
			run: function $$app$$$heartbeat$run$($immediate$$, $triggered$$) {
				$immediate$$ && !$triggered$$ ? (this.stop(), this.action()) : ($immediate$$ &&
				this.action(), this.interval || (this.interval = setInterval(this.action, 7E3)))
			},
			stop: function $$app$$$heartbeat$stop$() {
				this.interval && (clearInterval(this.interval), this.interval = null)
			},
			status: function $$app$$$heartbeat$status$($status$$) {
				if (this.takeover) {
					var $$button$$ = this.takeover.$el.find("button");
					switch ($status$$) {
					case "initial":
						$$button$$.button("option", "disabled", !1);
						$$button$$.button("option", "icons", {
							secondary: "ui-icon-notice"
						});
						break;
					case "running":
						$$button$$.button("option", "disabled", !0);
						$$button$$.button("option", "icons", {
							secondary: "ui-icon-cancel"
						});
						break;
					case "failed":
						$$button$$.button("option", "disabled", !1),
						$$button$$.button("option", "icons", {
							secondary: "ui-icon-refresh"
						})
					}
				}
			},
			interfere: function $$app$$$heartbeat$interfere$($adjust$$) {
				this.interference += $adjust$$
			}
		};
		$app$$.fatal = function $$app$$$fatal$($msg$$, $title$$, $blocking$$) {
			$title$$ = $title$$ || "Fatal Error";
			try {
				new EDGE.Views.Global.Takeover({
					title: $title$$,
					content: $msg$$,
					blocking: $blocking$$
				})
			} catch($e$$) {
				$(window).trigger("dialog",
				[$msg$$, $title$$])
			}
			$app$$.data.stats && $app$$.data.stats.close();
			$app$$.heartbeat.stop()
		};
		$(window).bind("fatal",
		function($e$$, $msg$$, $title$$) {
			$app$$.fatal($msg$$, $title$$, !0)
		}).bind("dialog",
		function($e$$, $msg$$, $title$$) {
			try {
				$app$$.dialogs.alertDialog.open({
					title: $title$$ || "Alert",
					message: $msg$$
				})
			} catch($e$$0$$) {
				alert($msg$$)
			}
		}).bind("reload",
		function($e$$, $msg$$, $title$$) {
			$("body").children(".force-reload").length || new EDGE.Views.Global.Takeover({
				title: $title$$,
				content: $msg$$,
				blocking: !0,
				type: "force-reload",
				reload: function() {
					$app$$.reload()
				}
			})
		});
		$("body").bind("unrendered",
		function() {
			$(".unrendered").css("visibility", "hidden")
		}).bind("rendered",
		function() {
			$(".unrendered").css("visibility", "visible")
		})
	});