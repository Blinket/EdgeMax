#!/usr/bin/env perl

use strict;
use warnings;
use lib '/opt/vyatta/share/perl5/';
use JSON qw/decode_json/;
use Data::Dumper;
use Vyatta::Config;
use Vyatta::ConfigMgmt;

my $version = 1.0;
my $action  = $ARGV[0];
my $input   = $ARGV[1];
my $cfg_lvl = "service dns forwarding";
my $cmd     = "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper";
my $config  = new Vyatta::Config;

my $begin  = "$cmd begin";
my $commit = "$cmd commit";
my $del    = "$cmd delete";
my $end    = "$cmd end";
my $save   = "$cmd save";
my $set    = "$cmd set";

sub apply {
    my $json_data;
    my $err;

    open( my $fh, '<:encoding(UTF-8)', $input )
        or die("Could not open $input - this shouldn't happen!");
    while ( my $row = <$fh> ) {
        chomp $row;
        $json_data .= $row;
    }
    close($fh);

    my $adblock_data  = decode_json($json_data);
    my $black_hole_ip = $adblock_data->{'blackholeip'};
    my $enable        = $adblock_data->{'enable'};
    my @sources       = @{ $adblock_data->{'sources'} };
    my @excludes      = @{ $adblock_data->{'excludes'} };
    my @includes      = @{ $adblock_data->{'includes'} };

    my $disabled = ($enable eq 'enable') ? 'false' : 'true';
    $cfg_lvl .=  ' blacklist';

    my @apply_blacklist
        = ( "$begin", "$del $cfg_lvl", "$set $cfg_lvl disabled $disabled" );

    push (@apply_blacklist, "$set $cfg_lvl blackhole $black_hole_ip");

    for my $source (@sources) {
        my $prefix = ($source->{'prefix'} eq 'None') ? '""' : "'" . $source->{'prefix'} . "'";
        push(@apply_blacklist, "$set $cfg_lvl source $source->{'source'} url '" . $source->{'url'} . "'");
        push(@apply_blacklist, "$set $cfg_lvl source $source->{'source'} prefix $prefix");
    }

    for my $exclude (@excludes) {
        push(@apply_blacklist, "$set $cfg_lvl exclude $exclude->{'exclude'}");
    }

    for my $include (@includes) {
        push(@apply_blacklist, "$set $cfg_lvl include $include->{'include'}");
    }

    push(@apply_blacklist, ($commit, $save, $end));

    @apply_blacklist = map { $_ . ";"} @apply_blacklist;

# Save filehandles for STDOUT and STDERR
    open(STDOUT_ORIG, ">&STDOUT");
    open(STDERR_ORIG, ">&STDERR");

# Set new filehandles for STDOUT and STDERR
    my $temp = "/tmp/error.$$";
    open( STDOUT, ">", $temp ) or die "$0: cannot open STDOUT: $!";
    open( STDERR, ">&STDOUT" ) or die "$0: cannot open STDERR: $!";
    print("### Errors reported by $0 version $version ###\n");

    my $output = system( "@apply_blacklist" );
    $err = $?;

    close (STDOUT);
    close (STDERR);
    open(STDOUT, ">&STDOUT_ORIG");
    open(STDERR, ">&STDERR_ORIG");

    if (!$err) {
        print('{"success":"1"}');
    }
    else {
        print('{"success":"0", "error":"' . qx(cat $temp) . '"}');
    }
    close (STDOUT_ORIG);
    close (STDERR_ORIG);
    unlink($temp);
}

sub remove {
    my $err;

# Save filehandles for STDOUT and STDERR
    open(STDOUT_ORIG, ">&STDOUT");
    open(STDERR_ORIG, ">&STDERR");

# Set new filehandles for STDOUT and STDERR
    my $temp = "/tmp/error.$$";
    open( STDOUT, ">", $temp ) or die "$0: cannot open STDOUT: $!";
    open( STDERR, ">&STDOUT" ) or die "$0: cannot open STDERR: $!";
    print("### Errors reported by $0 version $version ###\n");

    $cfg_lvl .=  ' blacklist';
    my $remove_blacklist
        = join( ";", $begin, "$del $cfg_lvl", $commit, $save, $end );
    my $output = system( $remove_blacklist );
    $err = $?;

    close (STDOUT);
    close (STDERR);
    open(STDOUT, ">&STDOUT_ORIG");
    open(STDERR, ">&STDERR_ORIG");

    if (!$err) {
        print('{"success":"1"}');
    }
    else {
        print('{"success":"0", "error":"' . qx(cat $temp) . '"}');
    }
    close (STDOUT_ORIG);
    close (STDERR_ORIG);
    unlink($temp);
}

sub isblacklist {
    my $blklst_exists;
    my $bool = 0;

    $config->setLevel($cfg_lvl);
    $blklst_exists = $config->exists("blacklist");

    if ( defined($blklst_exists) ) {
        $bool = 1;
    }
    else {
        $bool = 0;
    }
    return $bool;
}

sub load {

    if (isblacklist) {
        $config->setLevel("$cfg_lvl blacklist");
        my @includes      = $config->returnValues('include');
        my @excludes      = $config->returnValues('exclude');
        my @sources       = $config->listNodes('source');
        my $black_hole_ip = $config->returnValue('blackhole') // '0.0.0.0';
        my $enable        = $config->returnValue('disabled');

        for ($enable) {
            /true/  and $enable = '',       last;
            /false/ and $enable = 'enable', last;
            undef   and $enable = '',       last;
        }

        my $includes = '"includes":[';
        my $excludes = '"excludes":[';
        my $sources  = '"sources":[';
        my $i        = 0;

        if (@includes) {
            for ( $i = 0; $i < (@includes) - 1; $i++ ) {
                $includes .= '{"include":"' . $includes[$i] . '"},';
            }
            $includes .= '{"include":"' . $includes[$i] if $includes[$i];
        }
        $includes .= '"}]';

        if (@excludes) {
            for ( $i = 0; $i < (@excludes) - 1; $i++ ) {
                $excludes .= '{"exclude":"' . $excludes[$i] . '"},';
            }
            $excludes .= '{"exclude":"' . $excludes[$i] if $excludes[$i];
        }
        $excludes .= '"}]';

        $cfg_lvl .=  ' blacklist';

        if (@sources) {
            for ( $i = 0; $i < (@sources) - 1; $i++ ) {
                $config->setLevel("$cfg_lvl source $sources[ $i ]");
                my $prefix = $config->returnValue('prefix');
                $prefix = 'None' if !$prefix;

                $sources
                    .= '{"source":"'
                    . $sources[$i]
                    . '","prefix":"'
                    . "$prefix"
                    . '","url":"'
                    . $config->returnValue('url') . '"},';
            }
            $config->setLevel("$cfg_lvl source $sources[ $i ]");
            my $prefix = $config->returnValue('prefix');
            $prefix = 'None' if !$prefix;

            $sources
                .= '{"source":"'
                . $sources[$i]
                . '","prefix":"'
                . "$prefix"
                . '","url":"'
                . $config->returnValue('url')
                if $sources[$i];
        }
        $sources .= '"}]';

        print '{"success":"1","data":{"enable":"'
            . $enable
            . '","blackholeip":"'
            . $black_hole_ip . '",'
            . $sources . ','
            . $includes . ','
            . $excludes . '}}';
    }
    else {
        print '"{"success":"0","error":"ADBlock not installed!""}"';
    }
}

for ($action) {
    /apply/  and apply,  last;
    /delete/ and remove, last;
    /load/   and load,   last;
}

